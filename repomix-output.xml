This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.github/
  ISSUE_TEMPLATE/
    bug_report.md
  workflows/
    deploy.yml
docs/
  CHAT_SYSTEM_FIX_PLAN.md
n8n/
  Import_Insights_LM_Workflows.json
  InsightsLM___Chat.json
  InsightsLM___Extract_Text.json
  InsightsLM___Generate_Notebook_Details.json
  InsightsLM___Podcast_Generation.json
  InsightsLM___Process_Additional_Sources.json
  InsightsLM___Upsert_to_Vector_Store.json
public/
  file-types/
    PDF (1).svg
    WEB (1).svg
  placeholder.svg
  robots.txt
scripts/
  migrate-to-unified-header.sh
src/
  components/
    auth/
      AgriOnboarding.tsx
      AuthForm.tsx
      ProtectedRoute.tsx
    chat/
      __tests__/
        MarkdownRenderer.xss.test.tsx
      CitationButton.tsx
      MarkdownRenderer.tsx
      SourceContentViewer.tsx
      SourceViewer.tsx
    dashboard/
      AgriDashboardStats.tsx
      AgriKnowledgeGrid.tsx
      BulkActions.tsx
      DashboardHeader.tsx
      EmptyDashboard.tsx
      NotebookCard.tsx
      NotebookGrid.tsx
    farm/
      crops/
        CropCard.tsx
        CropGuidesList.tsx
        CropPlantingCalendar.tsx
        CropSummaryStats.tsx
        index.ts
        PestDiseaseManager.tsx
        types.ts
        useCropData.ts
      dashboard/
        AlertsSection.tsx
        CropStatusSummary.tsx
        index.ts
        QuickActionsGrid.tsx
        RecentActivitiesCard.tsx
        RecentKnowledgeSection.tsx
        types.ts
        useDashboardData.ts
        WeatherSummaryCard.tsx
      AgriChat.tsx
      AgricultureChatArea.tsx
      CropManagement.tsx
      FarmDashboard.tsx
      KnowledgeBase.tsx
      KnowledgeEntry.tsx
      NewKnowledgeEntry.tsx
      WeatherCenter.tsx
    layout/
      UnifiedHeader.tsx
    notebook/
      AddSourcesDialog.tsx
      AudioPlayer.tsx
      ChatArea.tsx
      CopiedTextDialog.tsx
      MobileNotebookTabs.tsx
      MultipleWebsiteUrlsDialog.tsx
      NotebookHeader.tsx
      NoteEditor.tsx
      PasteTextDialog.tsx
      RenameSourceDialog.tsx
      SaveToNoteButton.tsx
      SourcesSidebar.tsx
      StudioSidebar.tsx
      WebsiteUrlInput.tsx
      YouTubeUrlInput.tsx
    profile/
      UserProfileDialog.tsx
    ui/
      accordion.tsx
      alert-dialog.tsx
      alert.tsx
      AppHeader.tsx
      aspect-ratio.tsx
      avatar.tsx
      badge.tsx
      breadcrumb.tsx
      button.tsx
      calendar.tsx
      card.tsx
      carousel.tsx
      chart.tsx
      checkbox.tsx
      collapsible.tsx
      command.tsx
      context-menu.tsx
      dialog.tsx
      drawer.tsx
      dropdown-menu.tsx
      form.tsx
      hover-card.tsx
      input-otp.tsx
      input.tsx
      label.tsx
      Logo.tsx
      menubar.tsx
      navigation-menu.tsx
      pagination.tsx
      popover.tsx
      progress.tsx
      radio-group.tsx
      resizable.tsx
      scroll-area.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      sidebar.tsx
      skeleton.tsx
      slider.tsx
      sonner.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
      toggle-group.tsx
      toggle.tsx
      tooltip.tsx
      use-toast.ts
    HEADER_USAGE_GUIDE.md
    LanguageDebugger.tsx
  contexts/
    AuthContext.tsx
  features/
    authentication/
      components/
        AgriOnboarding.tsx
        AuthForm.tsx
        index.ts
        ProtectedRoute.tsx
      hooks/
        AuthContext.tsx
        index.ts
      services/
        authService.ts
        index.ts
      types/
        index.ts
      index.ts
    chat/
      components/
        AgriChat.tsx
        AgricultureChatArea.tsx
        CitationButton.tsx
        index.ts
        MarkdownRenderer.tsx
        SourceContentViewer.tsx
        SourceViewer.tsx
      hooks/
        index.ts
        useChatMessages.tsx
      services/
        index.ts
      types/
        index.ts
      index.ts
    crops/
      components/
        CropCard.tsx
        CropGuidesList.tsx
        CropManagement.tsx
        CropPlantingCalendar.tsx
        CropSummaryStats.tsx
        index.ts
        PestDiseaseManager.tsx
      hooks/
        index.ts
        useCropData.ts
      services/
        cropApi.ts
        index.ts
      types/
        index.ts
        types.ts
      index.ts
    dashboard/
      components/
        AgriDashboardStats.tsx
        AgriKnowledgeGrid.tsx
        AlertsSection.tsx
        BulkActions.tsx
        CropStatusSummary.tsx
        DashboardHeader.tsx
        EmptyDashboard.tsx
        FarmDashboard.tsx
        index.ts
        NotebookCard.tsx
        NotebookGrid.tsx
        QuickActionsGrid.tsx
        RecentActivitiesCard.tsx
        RecentKnowledgeSection.tsx
        WeatherSummaryCard.tsx
      hooks/
        index.ts
        useDashboardData.ts
      services/
        index.ts
      types/
        index.ts
        types.ts
      index.ts
    knowledge/
      components/
        index.ts
        KnowledgeBase.tsx
        KnowledgeEntry.tsx
        NewKnowledgeEntry.tsx
      hooks/
        index.ts
      services/
        index.ts
      types/
        index.ts
      index.ts
    notebook/
      components/
        AddSourcesDialog.tsx
        AudioPlayer.tsx
        ChatArea.tsx
        CopiedTextDialog.tsx
        index.ts
        MobileNotebookTabs.tsx
        MultipleWebsiteUrlsDialog.tsx
        NotebookHeader.tsx
        NoteEditor.tsx
        PasteTextDialog.tsx
        RenameSourceDialog.tsx
        SaveToNoteButton.tsx
        SourcesSidebar.tsx
        StudioSidebar.tsx
        WebsiteUrlInput.tsx
        YouTubeUrlInput.tsx
      hooks/
        index.ts
        useAudioOverview.tsx
        useDocumentProcessing.tsx
        useFileUpload.tsx
        useNotebookDelete.tsx
        useNotebookDelete.tsx.backup
        useNotebookGeneration.tsx
        useNotebookGeneration.tsx.backup
        useNotebooks.tsx
        useNotebooks.tsx.backup
        useNotebookUpdate.tsx
        useNotebookUpdate.tsx.backup
        useNotes.tsx
        useSourceDelete.tsx
        useSourceDelete.tsx.backup
        useSources.tsx
        useSources.tsx.backup
        useSourceUpdate.tsx
        useSourceUpdate.tsx.backup
      services/
        documentProcessing.ts
        fileUpload.ts
        index.ts
        notebooksApi.ts
        notebooksGeneration.ts
        sourcesApi.ts
        types.ts
      types/
        index.ts
      index.ts
    weather/
      components/
        index.ts
        WeatherCenter.tsx
      hooks/
        index.ts
      services/
        index.ts
        weatherApi.ts
      types/
        index.ts
        weather.ts
      index.ts
    index.ts
    README.md
  hooks/
    use-mobile.tsx
    use-toast.ts
    useAudioOverview.tsx
    useChatMessages.tsx
    useDocumentProcessing.tsx
    useFileUpload.tsx
    useFileUpload.tsx.backup
    useIsDesktop.tsx
    useNotebookDelete.tsx
    useNotebookDelete.tsx.backup
    useNotebookGeneration.tsx
    useNotebookGeneration.tsx.backup
    useNotebooks.tsx
    useNotebooks.tsx.backup
    useNotebookUpdate.tsx
    useNotebookUpdate.tsx.backup
    useNotes.tsx
    useSourceDelete.tsx
    useSourceDelete.tsx.backup
    useSources.tsx
    useSources.tsx.backup
    useSourceUpdate.tsx
    useSourceUpdate.tsx.backup
  i18n/
    agents/
      coordinator.ts
      implementation-summary.md
      implementer.ts
      priority-components-report.md
      README.md
      run-i18n.ts
      run-scanner.ts
      scan-report.json
      scanner.ts
      translator.ts
      types.ts
      validator.ts
    locales/
      en.json
      fr.json
      ko.json
      ne.json
      sw.json
      uz.json
    index.ts
  integrations/
    supabase/
      client.ts
      types.ts
  lib/
    utils.ts
  pages/
    Auth.tsx
    Dashboard.tsx
    Index.tsx
    Notebook.tsx
    NotFound.tsx
    NotFoundPage.tsx
  services/
    api/
      cropApi.ts
      index.ts
      notebookApi.ts
      profileApi.ts
      sourceApi.ts
      weatherApi.ts
    core/
      apiClient.ts
      realtime.ts
      storage.ts
    notebooks/
      index.ts
      notebooksApi.ts
      notebooksGeneration.ts
      types.ts
    sources/
      documentProcessing.ts
      fileUpload.ts
      index.ts
      sourcesApi.ts
      types.ts
    authService.ts
  shared/
    components/
      ui/
        accordion.tsx
        alert-dialog.tsx
        alert.tsx
        AppHeader.tsx
        aspect-ratio.tsx
        avatar.tsx
        badge.tsx
        breadcrumb.tsx
        button.tsx
        calendar.tsx
        card.tsx
        carousel.tsx
        chart.tsx
        checkbox.tsx
        collapsible.tsx
        command.tsx
        context-menu.tsx
        dialog.tsx
        drawer.tsx
        dropdown-menu.tsx
        form.tsx
        hover-card.tsx
        input-otp.tsx
        input.tsx
        label.tsx
        Logo.tsx
        menubar.tsx
        navigation-menu.tsx
        pagination.tsx
        popover.tsx
        progress.tsx
        radio-group.tsx
        resizable.tsx
        scroll-area.tsx
        select.tsx
        separator.tsx
        sheet.tsx
        sidebar.tsx
        skeleton.tsx
        slider.tsx
        sonner.tsx
        switch.tsx
        table.tsx
        tabs.tsx
        textarea.tsx
        toast.tsx
        toaster.tsx
        toggle-group.tsx
        toggle.tsx
        tooltip.tsx
        use-toast.ts
      index.ts
    hooks/
      index.ts
      use-mobile.tsx
      use-toast.ts
      useIsDesktop.tsx
    services/
      core/
        apiClient.ts
        realtime.ts
        storage.ts
      index.ts
    types/
      domain.ts
      index.ts
      message.ts
      user.ts
    utils/
      index.ts
      permissions.ts
      utils.ts
    index.ts
  styles/
    agriculture-theme.css
  types/
    agriculture.ts
    chat.ts
    domain.ts
    examples.ts
    index.ts
    message.ts
    README.md
    user.ts
    weather.ts
  utils/
    agricultureTemplates.ts
    i18nHelper.ts
    permissions.ts
  App.css
  App.tsx
  debug.tsx
  index.css
  main.tsx
  vite-env.d.ts
supabase/
  functions/
    _shared/
      webhook-auth.ts
    audio-generation-callback/
      index.ts
    generate-audio-overview/
      index.ts
    generate-note-title/
      index.ts
    generate-notebook-content/
      index.ts
    process-additional-sources/
      index.ts
    process-document/
      index.ts
    process-document-callback/
      index.ts
    refresh-audio-url/
      index.ts
    send-chat-message/
      index.ts
    webhook-handler/
      index.ts
  migrations/
    20250122000000_strengthen_document_security.sql
    20250606152423_v0.1.sql
  config.toml
.env.example
.gitignore
CLAUDE.md
components.json
Dockerfile
eslint.config.js
index.html
LICENSE
package.json
patch-supabase.js
postcss.config.js
RAILWAY_DEPLOYMENT.md
README.md
SECURITY.md
server.js
tailwind.config.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="docs/CHAT_SYSTEM_FIX_PLAN.md">
# 챗 시스템 수정 계획

## 현재 문제점 분석

### 1. 메시지 포맷 불일치
- **n8n 워크플로우**: AI 응답을 JSON 문자열로 중첩 저장
- **프론트엔드**: 중첩된 JSON을 파싱하려고 시도하지만 불안정함
- **Edge Function**: 사용자 메시지만 저장하고 AI 응답은 n8n이 처리

### 2. 타입 시스템 불일치
- `msg.role` vs `msg.message.type` 혼용
- `msg.created_at` 속성 누락
- 메시지 구조가 일관되지 않음

### 3. 에러 처리 미흡
- n8n 웹훅 실패 시 사용자에게 피드백 없음
- Realtime 연결 실패 시 재연결 로직 불완전

## 수정 방안

### 1. 즉시 수정 가능한 부분

#### A. n8n 워크플로우 수정
- Supabase 노드의 메시지 저장 형식 수정
- JSON 문자열 중첩 제거
- 정확한 메시지 구조로 저장

#### B. 프론트엔드 메시지 파싱 개선
- 안전한 JSON 파싱 함수 구현
- 다양한 메시지 형식 지원
- 타입 안정성 강화

### 2. 단계별 구현 계획

#### Phase 1: 긴급 수정 (즉시)
1. ✅ AgricultureChatArea.tsx 문법 오류 수정
2. Edge Function 개선 (사용자 메시지 저장)
3. useChatMessages 훅의 메시지 변환 로직 개선

#### Phase 2: n8n 워크플로우 개선 (다음)
1. 메시지 저장 형식 표준화
2. 에러 처리 노드 추가
3. 벡터 검색 통합 강화

#### Phase 3: 시스템 통합 (마지막)
1. 지식 베이스와 챗 연동
2. 실시간 상태 관리 개선
3. 에러 복구 메커니즘 구현

## 구현 상세

### 1. 메시지 구조 표준화

```typescript
interface StandardMessage {
  id: number;
  session_id: string;
  message: {
    type: 'human' | 'ai';
    content: string | {
      segments: MessageSegment[];
      citations: Citation[];
    };
    timestamp: string;
    metadata?: any;
  };
}
```

### 2. n8n 워크플로우 수정 사항

현재:
```json
"fieldValue": "{\"type\": \"ai\", \"content\": \"{\\\"output\\\":[...]}\", ...}"
```

수정 후:
```json
"fieldValue": {
  "type": "ai",
  "content": {
    "segments": "={{ $json.output.map(o => ({text: o.text})) }}",
    "citations": "={{ $json.output.flatMap(o => o.citations || []) }}"
  },
  "timestamp": "={{ new Date().toISOString() }}",
  "metadata": {
    "model": "{{ $('AI Agent').params.model }}",
    "processingTime": "={{ Date.now() - $('Webhook').item.timestamp }}"
  }
}
```

### 3. 프론트엔드 수정 사항

#### A. 메시지 타입 정의 통합
```typescript
// src/types/message.ts
export interface ChatMessage {
  id: number;
  session_id: string;
  created_at?: string; // Optional for backward compatibility
  message: {
    type: 'human' | 'ai';
    content: string | StructuredContent;
    timestamp?: string;
    metadata?: Record<string, any>;
  };
}
```

#### B. 안전한 파싱 함수
```typescript
const parseMessageContent = (content: any): string | StructuredContent => {
  if (typeof content === 'string') {
    try {
      const parsed = JSON.parse(content);
      if (parsed.output && Array.isArray(parsed.output)) {
        return transformToStructuredContent(parsed);
      }
      return content;
    } catch {
      return content;
    }
  }
  return content;
};
```

## 테스트 계획

1. **단위 테스트**
   - 메시지 파싱 함수
   - 타입 변환 로직
   - 에러 처리

2. **통합 테스트**
   - 사용자 메시지 전송
   - AI 응답 수신
   - 실시간 업데이트

3. **E2E 테스트**
   - 전체 대화 플로우
   - 에러 시나리오
   - 지식 베이스 연동

## 모니터링

1. **로깅 추가**
   - Edge Function 요청/응답
   - n8n 웹훅 상태
   - 메시지 파싱 실패

2. **메트릭 수집**
   - 응답 시간
   - 에러율
   - 메시지 변환 성공률

## 롤백 계획

변경사항이 문제를 일으킬 경우:
1. Edge Function 이전 버전으로 롤백
2. n8n 워크플로우 백업 복원
3. 프론트엔드 이전 커밋으로 되돌리기
</file>

<file path="scripts/migrate-to-unified-header.sh">
#!/bin/bash

# Script to migrate from AppHeader to UnifiedHeader

echo "🔄 Starting migration from AppHeader to UnifiedHeader..."

# List of files to update
files=(
  "src/components/farm/CropManagement.tsx"
  "src/components/farm/AgriChat.tsx"
  "src/components/farm/KnowledgeBase.tsx"
  "src/components/farm/KnowledgeEntry.tsx"
  "src/components/farm/NewKnowledgeEntry.tsx"
  "src/components/farm/FarmDashboard.tsx"
  "src/features/weather/components/WeatherCenter.tsx"
  "src/features/crops/components/CropManagement.tsx"
  "src/features/chat/components/AgriChat.tsx"
  "src/features/knowledge/components/KnowledgeBase.tsx"
  "src/features/knowledge/components/KnowledgeEntry.tsx"
  "src/features/knowledge/components/NewKnowledgeEntry.tsx"
  "src/features/dashboard/components/FarmDashboard.tsx"
)

# Counter for tracking changes
count=0

for file in "${files[@]}"; do
  if [ -f "$file" ]; then
    echo "📝 Processing: $file"
    
    # Replace import statement
    sed -i '' 's/import AppHeader from.*$/import UnifiedHeader from '\''@\/components\/layout\/UnifiedHeader'\'';/g' "$file"
    
    # Replace component usage
    sed -i '' 's/<AppHeader[^>]*\/>/<UnifiedHeader variant="full" \/>/g' "$file"
    sed -i '' 's/<AppHeader[^>]*>/<UnifiedHeader variant="full">/g' "$file"
    sed -i '' 's/<\/AppHeader>/<\/UnifiedHeader>/g' "$file"
    
    ((count++))
  else
    echo "⚠️  File not found: $file"
  fi
done

echo "✅ Migration complete! Updated $count files."
echo ""
echo "📌 Next steps:"
echo "1. Update Dashboard.tsx to use UnifiedHeader with variant='minimal'"
echo "2. Test all pages to ensure proper rendering"
echo "3. Remove old AppHeader and DashboardHeader components"
</file>

<file path="src/components/chat/__tests__/MarkdownRenderer.xss.test.tsx">
import React from 'react';
import { render } from '@testing-library/react';
import MarkdownRenderer from '../MarkdownRenderer';

describe('MarkdownRenderer XSS Prevention', () => {
  describe('Script injection prevention', () => {
    it('should strip script tags', () => {
      const maliciousContent = 'Hello <script>alert("XSS")</script> World';
      const { container } = render(<MarkdownRenderer content={maliciousContent} />);
      
      expect(container.textContent).toBe('Hello  World');
      expect(container.innerHTML).not.toContain('<script>');
      expect(container.innerHTML).not.toContain('alert');
    });

    it('should strip inline event handlers', () => {
      const maliciousContent = 'Click <a href="#" onclick="alert(\'XSS\')">here</a>';
      const { container } = render(<MarkdownRenderer content={maliciousContent} />);
      
      expect(container.innerHTML).not.toContain('onclick');
      expect(container.innerHTML).not.toContain('alert');
    });

    it('should strip javascript: URLs', () => {
      const maliciousContent = 'Click <a href="javascript:alert(\'XSS\')">here</a>';
      const { container } = render(<MarkdownRenderer content={maliciousContent} />);
      
      expect(container.innerHTML).not.toContain('javascript:');
      expect(container.innerHTML).not.toContain('alert');
    });

    it('should strip data: URLs with scripts', () => {
      const maliciousContent = '<a href="data:text/html,<script>alert(\'XSS\')</script>">link</a>';
      const { container } = render(<MarkdownRenderer content={maliciousContent} />);
      
      expect(container.innerHTML).not.toContain('data:');
      expect(container.innerHTML).not.toContain('script');
    });

    it('should strip style tags with malicious content', () => {
      const maliciousContent = '<style>body { background: url("javascript:alert(\'XSS\')"); }</style>';
      const { container } = render(<MarkdownRenderer content={maliciousContent} />);
      
      expect(container.innerHTML).not.toContain('<style>');
      expect(container.innerHTML).not.toContain('javascript:');
    });

    it('should strip iframe tags', () => {
      const maliciousContent = '<iframe src="https://evil.com"></iframe>';
      const { container } = render(<MarkdownRenderer content={maliciousContent} />);
      
      expect(container.innerHTML).not.toContain('<iframe');
      expect(container.innerHTML).not.toContain('evil.com');
    });

    it('should strip form tags', () => {
      const maliciousContent = '<form action="https://evil.com"><input type="text" /></form>';
      const { container } = render(<MarkdownRenderer content={maliciousContent} />);
      
      expect(container.innerHTML).not.toContain('<form');
      expect(container.innerHTML).not.toContain('<input');
    });

    it('should handle XSS in markdown bold syntax', () => {
      const maliciousContent = '**Hello <script>alert("XSS")</script> World**';
      const { container } = render(<MarkdownRenderer content={maliciousContent} />);
      
      expect(container.innerHTML).not.toContain('<script>');
      expect(container.innerHTML).not.toContain('alert');
      expect(container.innerHTML).toContain('<strong>');
    });
  });

  describe('Markdown functionality preservation', () => {
    it('should preserve bold formatting with **', () => {
      const content = 'This is **bold** text';
      const { container } = render(<MarkdownRenderer content={content} />);
      
      expect(container.innerHTML).toContain('<strong>bold</strong>');
    });

    it('should preserve bold formatting with __', () => {
      const content = 'This is __bold__ text';
      const { container } = render(<MarkdownRenderer content={content} />);
      
      expect(container.innerHTML).toContain('<strong>bold</strong>');
    });

    it('should preserve line breaks', () => {
      const content = 'Line 1\nLine 2';
      const { container } = render(<MarkdownRenderer content={content} />);
      
      expect(container.innerHTML).toContain('<br');
    });

    it('should preserve paragraph breaks', () => {
      const content = 'Paragraph 1\n\nParagraph 2';
      const { container } = render(<MarkdownRenderer content={content} />);
      
      const paragraphs = container.querySelectorAll('p');
      expect(paragraphs.length).toBe(2);
    });

    it('should allow safe HTML tags', () => {
      const content = 'This has <strong>strong</strong> and <em>emphasis</em>';
      const { container } = render(<MarkdownRenderer content={content} />);
      
      expect(container.innerHTML).toContain('<strong>strong</strong>');
      expect(container.innerHTML).toContain('<em>emphasis</em>');
    });

    it('should allow safe links with href', () => {
      const content = '<a href="https://example.com">Safe link</a>';
      const { container } = render(<MarkdownRenderer content={content} />);
      
      const link = container.querySelector('a');
      expect(link).toBeTruthy();
      expect(link?.getAttribute('href')).toBe('https://example.com');
    });
  });

  describe('Complex XSS scenarios', () => {
    it('should handle nested XSS attempts', () => {
      const maliciousContent = '<div><div><script>alert("XSS")</script></div></div>';
      const { container } = render(<MarkdownRenderer content={maliciousContent} />);
      
      expect(container.innerHTML).not.toContain('<script>');
      expect(container.innerHTML).toContain('<div><div></div></div>');
    });

    it('should handle encoded XSS attempts', () => {
      const maliciousContent = '&lt;script&gt;alert("XSS")&lt;/script&gt;';
      const { container } = render(<MarkdownRenderer content={maliciousContent} />);
      
      // Should display the encoded text safely
      expect(container.textContent).toContain('<script>alert("XSS")</script>');
      expect(container.innerHTML).not.toContain('<script>alert');
    });

    it('should handle mixed markdown and XSS', () => {
      const maliciousContent = {
        segments: [
          { text: '**Important:** Click <a href="javascript:alert(\'XSS\')">here</a>' },
          { text: 'Normal text with <script>alert("XSS")</script>' }
        ],
        citations: []
      };
      
      const { container } = render(<MarkdownRenderer content={maliciousContent} />);
      
      expect(container.innerHTML).toContain('<strong>Important:</strong>');
      expect(container.innerHTML).not.toContain('javascript:');
      expect(container.innerHTML).not.toContain('<script>');
    });
  });
});
</file>

<file path="src/components/farm/crops/CropCard.tsx">
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Sprout, Sun, Wheat, Package, Clock } from 'lucide-react';
import { Crop } from './types';

interface CropCardProps {
  crop: Crop;
  onSelect?: (crop: Crop) => void;
}

export function CropCard({ crop, onSelect }: CropCardProps) {
  const getStageIcon = (stage: Crop['stage']) => {
    switch (stage) {
      case 'germination':
        return <Sprout className="h-4 w-4" />;
      case 'vegetative':
        return <Sun className="h-4 w-4" />;
      case 'flowering':
        return <Wheat className="h-4 w-4" />;
      case 'maturity':
        return <Package className="h-4 w-4" />;
    }
  };

  const getHealthColor = (health: Crop['health']) => {
    switch (health) {
      case 'excellent':
        return 'text-green-600 bg-green-50';
      case 'good':
        return 'text-blue-600 bg-blue-50';
      case 'warning':
        return 'text-orange-600 bg-orange-50';
      case 'critical':
        return 'text-red-600 bg-red-50';
    }
  };

  const getProgressPercentage = (planted: string, harvest: string) => {
    const plantedDate = new Date(planted);
    const harvestDate = new Date(harvest);
    const today = new Date();
    const totalDays = harvestDate.getTime() - plantedDate.getTime();
    const daysPassed = today.getTime() - plantedDate.getTime();
    return Math.min(100, Math.max(0, (daysPassed / totalDays) * 100));
  };

  return (
    <Card 
      className="hover:shadow-lg transition-shadow cursor-pointer"
      onClick={() => onSelect?.(crop)}
    >
      <CardHeader>
        <div className="flex items-start justify-between">
          <div>
            <CardTitle className="text-lg">{crop.name}</CardTitle>
            <CardDescription>{crop.localName} • {crop.variety}</CardDescription>
          </div>
          <Badge className={getHealthColor(crop.health)}>
            {crop.health}
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">Area</span>
            <span className="font-medium">{crop.area} ha</span>
          </div>
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">Stage</span>
            <div className="flex items-center gap-1">
              {getStageIcon(crop.stage)}
              <span className="font-medium capitalize">{crop.stage}</span>
            </div>
          </div>
          <div>
            <div className="flex items-center justify-between text-sm mb-1">
              <span className="text-gray-600">Progress</span>
              <span className="font-medium">
                {Math.round(getProgressPercentage(crop.plantedDate, crop.expectedHarvest))}%
              </span>
            </div>
            <Progress 
              value={getProgressPercentage(crop.plantedDate, crop.expectedHarvest)} 
              className="h-2"
            />
          </div>
          <div className="pt-2 border-t">
            <p className="text-sm text-gray-600 mb-1">Next Action:</p>
            <p className="text-sm font-medium flex items-center gap-1">
              <Clock className="h-3 w-3" />
              {crop.nextAction}
            </p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/farm/crops/CropGuidesList.tsx">
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { CropGuide } from './types';

interface CropGuidesListProps {
  cropGuides: Record<string, CropGuide>;
}

export function CropGuidesList({ cropGuides }: CropGuidesListProps) {
  return (
    <div className="grid md:grid-cols-2 gap-6">
      {Object.entries(cropGuides).map(([crop, guide]) => (
        <Card key={crop}>
          <CardHeader>
            <CardTitle className="capitalize">{crop} Growing Guide</CardTitle>
          </CardHeader>
          <CardContent>
            <dl className="space-y-3">
              <div className="flex justify-between">
                <dt className="text-sm text-gray-600">Season:</dt>
                <dd className="text-sm font-medium">{guide.season}</dd>
              </div>
              <div className="flex justify-between">
                <dt className="text-sm text-gray-600">Water Needs:</dt>
                <dd className="text-sm font-medium">{guide.waterNeeds}</dd>
              </div>
              <div className="flex justify-between">
                <dt className="text-sm text-gray-600">Soil Type:</dt>
                <dd className="text-sm font-medium">{guide.soilType}</dd>
              </div>
              <div className="flex justify-between">
                <dt className="text-sm text-gray-600">Spacing:</dt>
                <dd className="text-sm font-medium">{guide.spacing}</dd>
              </div>
              <div>
                <dt className="text-sm text-gray-600 mb-1">Fertilizer:</dt>
                <dd className="text-sm font-medium">{guide.fertilizer}</dd>
              </div>
            </dl>
            <Button className="w-full mt-4" variant="outline">
              View Full Guide
            </Button>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}
</file>

<file path="src/components/farm/crops/CropPlantingCalendar.tsx">
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';

export function CropPlantingCalendar() {
  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

  return (
    <Card>
      <CardHeader>
        <CardTitle>Planting Calendar</CardTitle>
        <CardDescription>
          Optimal planting and harvesting times for your region
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {/* Calendar header */}
          <div className="grid grid-cols-12 gap-2 text-xs">
            {months.map((month) => (
              <div key={month} className="text-center font-medium text-gray-600">
                {month}
              </div>
            ))}
          </div>
          
          {/* Maize planting season */}
          <div className="relative h-8 bg-gray-100 rounded">
            <div className="absolute left-[16.66%] right-[41.66%] h-full bg-green-400 rounded flex items-center justify-center">
              <span className="text-xs font-medium">Maize</span>
            </div>
          </div>
          
          {/* Rice planting season */}
          <div className="relative h-8 bg-gray-100 rounded">
            <div className="absolute left-[25%] right-[33.33%] h-full bg-blue-400 rounded flex items-center justify-center">
              <span className="text-xs font-medium">Rice</span>
            </div>
          </div>
          
          {/* Coffee harvest season */}
          <div className="relative h-8 bg-gray-100 rounded">
            <div className="absolute left-[75%] right-0 h-full bg-orange-400 rounded flex items-center justify-center">
              <span className="text-xs font-medium">Coffee Harvest</span>
            </div>
          </div>
        </div>
        
        <div className="mt-6 p-4 bg-blue-50 rounded-lg">
          <p className="text-sm text-blue-800">
            <strong>Tip:</strong> The calendar shows general planting windows. 
            Always check current weather conditions and soil moisture before planting.
          </p>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/farm/crops/CropSummaryStats.tsx">
import React from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Wheat, Sprout, TrendingUp, CheckCircle } from 'lucide-react';

interface CropSummaryStatsProps {
  stats: {
    totalArea: number;
    activeCrops: number;
    expectedYield: number;
    overallHealth: string;
  };
}

export function CropSummaryStats({ stats }: CropSummaryStatsProps) {
  return (
    <div className="grid md:grid-cols-4 gap-4 mb-6">
      <Card>
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Total Area</p>
              <p className="text-2xl font-bold">{stats.totalArea.toFixed(1)} ha</p>
            </div>
            <Wheat className="h-8 w-8 text-green-600" />
          </div>
        </CardContent>
      </Card>
      
      <Card>
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Active Crops</p>
              <p className="text-2xl font-bold">{stats.activeCrops}</p>
            </div>
            <Sprout className="h-8 w-8 text-blue-600" />
          </div>
        </CardContent>
      </Card>
      
      <Card>
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Expected Yield</p>
              <p className="text-2xl font-bold">{stats.expectedYield.toFixed(1)}t</p>
            </div>
            <TrendingUp className="h-8 w-8 text-orange-600" />
          </div>
        </CardContent>
      </Card>
      
      <Card>
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Health Status</p>
              <p className="text-2xl font-bold">{stats.overallHealth}</p>
            </div>
            <CheckCircle className="h-8 w-8 text-green-600" />
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/components/farm/crops/index.ts">
export * from './types';
export * from './useCropData';
export { CropCard } from './CropCard';
export { CropSummaryStats } from './CropSummaryStats';
export { CropPlantingCalendar } from './CropPlantingCalendar';
export { CropGuidesList } from './CropGuidesList';
export { PestDiseaseManager } from './PestDiseaseManager';
</file>

<file path="src/components/farm/crops/PestDiseaseManager.tsx">
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Bug, AlertTriangle } from 'lucide-react';
import { PestDisease } from './types';

interface PestDiseaseManagerProps {
  pestDiseases: PestDisease[];
}

export function PestDiseaseManager({ pestDiseases }: PestDiseaseManagerProps) {
  const getSeverityIcon = (severity: PestDisease['severity']) => {
    switch (severity) {
      case 'high':
        return <Bug className="h-8 w-8 text-red-500 mt-1" />;
      case 'medium':
        return <AlertTriangle className="h-8 w-8 text-orange-500 mt-1" />;
      case 'low':
        return <AlertTriangle className="h-8 w-8 text-yellow-500 mt-1" />;
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Common Pests & Diseases</CardTitle>
        <CardDescription>
          Early detection and treatment recommendations
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {pestDiseases.map((item) => (
            <div key={item.id} className="flex items-start space-x-4 p-4 border rounded-lg">
              {getSeverityIcon(item.severity)}
              <div className="flex-1">
                <h4 className="font-semibold">{item.name}</h4>
                <p className="text-sm text-gray-600 mt-1">
                  Affects: {item.affects} • Season: {item.season}
                </p>
                <p className="text-sm mt-2">
                  {item.description}
                </p>
                <Button size="sm" variant="outline" className="mt-2">
                  View Treatment
                </Button>
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/farm/crops/types.ts">
export interface Crop {
  id: string;
  name: string;
  localName: string;
  plantedDate: string;
  expectedHarvest: string;
  area: number; // hectares
  variety: string;
  stage: 'germination' | 'vegetative' | 'flowering' | 'maturity';
  health: 'excellent' | 'good' | 'warning' | 'critical';
  lastAction: string;
  nextAction: string;
  yield: number; // expected kg/hectare
}

export interface CropGuide {
  season: string;
  waterNeeds: string;
  soilType: string;
  spacing: string;
  fertilizer: string;
}

export interface PestDisease {
  id: string;
  name: string;
  affects: string;
  season: string;
  description: string;
  treatment: string;
  severity: 'low' | 'medium' | 'high';
}
</file>

<file path="src/components/farm/crops/useCropData.ts">
import { useState, useMemo } from 'react';
import { Crop, CropGuide, PestDisease } from './types';

const mockCrops: Crop[] = [
  {
    id: '1',
    name: 'Maize',
    localName: 'Mahindi',
    plantedDate: '2024-03-15',
    expectedHarvest: '2024-07-15',
    area: 2.5,
    variety: 'H614D',
    stage: 'flowering',
    health: 'excellent',
    lastAction: 'Applied fertilizer',
    nextAction: 'Monitor for pests',
    yield: 4500
  },
  {
    id: '2',
    name: 'Coffee',
    localName: 'Kahawa',
    plantedDate: '2022-04-20',
    expectedHarvest: '2024-10-01',
    area: 1.5,
    variety: 'Arabica',
    stage: 'maturity',
    health: 'good',
    lastAction: 'Pruned branches',
    nextAction: 'Prepare for harvest',
    yield: 800
  },
  {
    id: '3',
    name: 'Rice',
    localName: 'Mchele',
    plantedDate: '2024-04-01',
    expectedHarvest: '2024-08-01',
    area: 3.0,
    variety: 'IR64',
    stage: 'vegetative',
    health: 'warning',
    lastAction: 'Irrigated field',
    nextAction: 'Apply pesticide',
    yield: 3200
  }
];

const cropGuides: Record<string, CropGuide> = {
  maize: {
    season: 'March - July',
    waterNeeds: '500-800mm',
    soilType: 'Well-drained loamy',
    spacing: '75cm x 25cm',
    fertilizer: 'DAP at planting, CAN at knee height'
  },
  coffee: {
    season: 'Year-round (harvest Oct-Dec)',
    waterNeeds: '1200-1500mm',
    soilType: 'Deep, well-drained volcanic',
    spacing: '2.5m x 2.5m',
    fertilizer: 'NPK 20:10:10 quarterly'
  },
  rice: {
    season: 'April - August',
    waterNeeds: '1200-1500mm',
    soilType: 'Clay loam, water retentive',
    spacing: '20cm x 20cm',
    fertilizer: 'Urea in splits'
  }
};

const pestDiseases: PestDisease[] = [
  {
    id: '1',
    name: 'Fall Armyworm',
    affects: 'Maize',
    season: 'All year',
    description: 'Look for ragged holes in leaves and larvae in whorls. Apply recommended pesticides early morning or late evening.',
    treatment: 'Apply recommended pesticides early morning or late evening',
    severity: 'high'
  },
  {
    id: '2',
    name: 'Coffee Berry Disease',
    affects: 'Coffee',
    season: 'Rainy season',
    description: 'Dark sunken lesions on berries. Prevent with copper-based fungicides before and during flowering.',
    treatment: 'Prevent with copper-based fungicides before and during flowering',
    severity: 'medium'
  }
];

export function useCropData() {
  const [selectedCrop, setSelectedCrop] = useState<Crop | null>(null);
  const [searchTerm, setSearchTerm] = useState('');

  const filteredCrops = useMemo(() => {
    return mockCrops.filter(crop => 
      crop.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      crop.localName.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [searchTerm]);

  const summaryStats = useMemo(() => {
    const totalArea = mockCrops.reduce((sum, crop) => sum + crop.area, 0);
    const activeCrops = mockCrops.length;
    const expectedYield = mockCrops.reduce((sum, crop) => sum + (crop.yield * crop.area / 1000), 0);
    const healthyCount = mockCrops.filter(crop => crop.health === 'excellent' || crop.health === 'good').length;
    const overallHealth = healthyCount / mockCrops.length >= 0.8 ? 'Good' : 'Fair';

    return {
      totalArea,
      activeCrops,
      expectedYield,
      overallHealth
    };
  }, []);

  return {
    crops: filteredCrops,
    allCrops: mockCrops,
    selectedCrop,
    setSelectedCrop,
    searchTerm,
    setSearchTerm,
    summaryStats,
    cropGuides,
    pestDiseases
  };
}
</file>

<file path="src/components/farm/dashboard/AlertsSection.tsx">
import React from 'react';
import { AlertTriangle } from 'lucide-react';

interface Alert {
  type: 'warning' | 'info';
  message: string;
  urgent: boolean;
}

interface AlertsSectionProps {
  alerts: Alert[];
}

export function AlertsSection({ alerts }: AlertsSectionProps) {
  if (alerts.length === 0) return null;

  return (
    <div className="mb-6 space-y-3">
      {alerts.map((alert, index) => (
        <div
          key={index}
          className={`p-4 rounded-lg flex items-start space-x-3 ${
            alert.type === 'warning' 
              ? 'bg-orange-50 border border-orange-200' 
              : 'bg-blue-50 border border-blue-200'
          }`}
        >
          <AlertTriangle className={`h-5 w-5 ${
            alert.type === 'warning' ? 'text-orange-600' : 'text-blue-600'
          }`} />
          <p className={`text-sm ${
            alert.type === 'warning' ? 'text-orange-800' : 'text-blue-800'
          }`}>
            {alert.message}
          </p>
        </div>
      ))}
    </div>
  );
}
</file>

<file path="src/components/farm/dashboard/CropStatusSummary.tsx">
import React from 'react';
import { useTranslation } from 'react-i18next';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Link } from 'react-router-dom';

interface CropStatus {
  name: string;
  localName: string;
  health: 'excellent' | 'good' | 'warning' | 'critical';
  nextAction: string;
  daysToHarvest?: number;
}

interface CropStatusSummaryProps {
  crops: CropStatus[];
}

export function CropStatusSummary({ crops }: CropStatusSummaryProps) {
  const { t } = useTranslation();

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>{t('dashboard.cropStatus')}</span>
          <Link to="/crops" className="text-sm font-normal text-blue-600 hover:underline">
            {t('dashboard.viewAll')}
          </Link>
        </CardTitle>
        <CardDescription>
          {t('crops.healthStatus')} & {t('crops.nextAction')}
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {crops.map((crop, index) => (
            <div key={index} className={`p-4 rounded-lg border ${
              crop.health === 'excellent' ? 'season-growing' :
              crop.health === 'good' ? 'season-planting' :
              crop.health === 'warning' ? 'season-harvest' :
              'season-fallow'
            }`}>
              <div className="flex items-start justify-between mb-2">
                <div>
                  <h4 className="font-semibold">{crop.name}</h4>
                  <p className="text-sm text-gray-600">{crop.localName}</p>
                </div>
                <span className={`px-2 py-1 rounded text-xs font-medium crop-health-${crop.health}`}>
                  {t(`crops.${crop.health}`)}
                </span>
              </div>
              <p className="text-sm text-gray-700">{crop.nextAction}</p>
              {crop.daysToHarvest && (
                <p className="text-xs text-gray-500 mt-1">
                  {t('crops.daysToHarvest', { days: crop.daysToHarvest })}
                </p>
              )}
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/farm/dashboard/index.ts">
export { WeatherSummaryCard } from './WeatherSummaryCard';
export { CropStatusSummary } from './CropStatusSummary';
export { AlertsSection } from './AlertsSection';
export { QuickActionsGrid } from './QuickActionsGrid';
export { RecentKnowledgeSection } from './RecentKnowledgeSection';
export { RecentActivitiesCard } from './RecentActivitiesCard';
export { useDashboardData } from './useDashboardData';
export type { WeatherData, CropStatus, Alert, KnowledgeEntry } from './types';
</file>

<file path="src/components/farm/dashboard/QuickActionsGrid.tsx">
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { 
  Cloud, 
  Wheat, 
  Calendar,
  TrendingUp
} from 'lucide-react';
import { Link } from 'react-router-dom';
import { useTranslation } from 'react-i18next';

export function QuickActionsGrid() {
  const { t } = useTranslation();
  return (
    <Card>
      <CardHeader>
        <CardTitle>{t('dashboard.quickActions')}</CardTitle>
        <CardDescription>
          {t('dashboard.commonTasks')}
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 gap-3">
          <Button variant="outline" asChild className="h-auto flex-col py-4">
            <Link to="/chat">
              <Cloud className="h-8 w-8 mb-2 text-blue-600" />
              <span>{t('dashboard.askAboutWeather')}</span>
            </Link>
          </Button>
          <Button variant="outline" asChild className="h-auto flex-col py-4">
            <Link to="/knowledge">
              <Wheat className="h-8 w-8 mb-2 text-green-600" />
              <span>{t('dashboard.knowledgeBase')}</span>
            </Link>
          </Button>
          <Button variant="outline" asChild className="h-auto flex-col py-4">
            <Link to="/crops">
              <Calendar className="h-8 w-8 mb-2 text-orange-600" />
              <span>{t('dashboard.plantingCalendar')}</span>
            </Link>
          </Button>
          <Button variant="outline" asChild className="h-auto flex-col py-4">
            <Link to="/community">
              <TrendingUp className="h-8 w-8 mb-2 text-purple-600" />
              <span>{t('dashboard.marketPrices')}</span>
            </Link>
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/farm/dashboard/RecentActivitiesCard.tsx">
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { useTranslation } from 'react-i18next';

interface RecentActivitiesCardProps {
  notebooksCount: number;
}

export function RecentActivitiesCard({ notebooksCount }: RecentActivitiesCardProps) {
  const { t } = useTranslation();
  return (
    <Card>
      <CardHeader>
        <CardTitle>{t('dashboard.recentActivities')}</CardTitle>
        <CardDescription>
          {t('dashboard.yourFarmingJourney')}
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <div className="flex items-center space-x-3 text-sm">
            <div className="w-2 h-2 bg-green-500 rounded-full"></div>
            <span className="text-gray-600">{t('common.yesterday')}</span>
            <span>{t('activities.appliedFertilizer')}</span>
          </div>
          <div className="flex items-center space-x-3 text-sm">
            <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
            <span className="text-gray-600">{t('activities.threeDaysAgo')}</span>
            <span>{t('activities.receivedWeatherAdvisory')}</span>
          </div>
          <div className="flex items-center space-x-3 text-sm">
            <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
            <span className="text-gray-600">{t('activities.oneWeekAgo')}</span>
            <span>{t('activities.harvestedRice')}</span>
          </div>
          {notebooksCount > 0 && (
            <div className="flex items-center space-x-3 text-sm">
              <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
              <span className="text-gray-600">{t('common.today')}</span>
              <span>{t('activities.addedKnowledgeEntries', { notebooksCount })}</span>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/farm/dashboard/RecentKnowledgeSection.tsx">
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { 
  Cloud, 
  Wheat, 
  AlertTriangle,
  Book,
  Plus
} from 'lucide-react';
import { Link } from 'react-router-dom';
import { formatDistanceToNow } from 'date-fns';
import { useTranslation } from 'react-i18next';

interface KnowledgeEntry {
  id: string;
  title: string;
  description?: string;
  updated_at?: string;
  icon: React.ComponentType<{ className?: string }>;
}

interface RecentKnowledgeSectionProps {
  knowledgeEntries: KnowledgeEntry[];
  isLoading: boolean;
}

function getKnowledgeIcon(title: string) {
  const titleLower = title.toLowerCase();
  if (titleLower.includes('weather') || titleLower.includes('climate')) return Cloud;
  if (titleLower.includes('crop') || titleLower.includes('plant')) return Wheat;
  if (titleLower.includes('pest') || titleLower.includes('disease')) return AlertTriangle;
  return Book;
}

export function RecentKnowledgeSection({ knowledgeEntries, isLoading }: RecentKnowledgeSectionProps) {
  const { t } = useTranslation();
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>{t('dashboard.recentKnowledgeEntries')}</span>
          <Link to="/knowledge" className="text-sm font-normal text-blue-600 hover:underline">
            {t('dashboard.viewAll')}
          </Link>
        </CardTitle>
        <CardDescription>
          {t('dashboard.yourLatestInsights')}
        </CardDescription>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          <div className="text-center py-4">
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-green-600 mx-auto mb-2"></div>
            <p className="text-sm text-gray-500">{t('common.loading')}</p>
          </div>
        ) : knowledgeEntries.length > 0 ? (
          <div className="space-y-3">
            {knowledgeEntries.map((entry) => {
              const IconComponent = entry.icon;
              return (
                <div key={entry.id} className="flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50 transition-colors">
                  <div className="p-1 bg-green-100 rounded">
                    <IconComponent className="h-4 w-4 text-green-600" />
                  </div>
                  <div className="flex-1 min-w-0">
                    <Link 
                      to={`/knowledge/${entry.id}`}
                      className="font-medium text-sm text-gray-900 hover:text-green-600 truncate block"
                    >
                      {entry.title}
                    </Link>
                    {entry.description && (
                      <p className="text-xs text-gray-600 mt-1 line-clamp-2">
                        {entry.description}
                      </p>
                    )}
                    <p className="text-xs text-gray-500 mt-1">
                      {entry.updated_at 
                        ? formatDistanceToNow(new Date(entry.updated_at), { addSuffix: true })
                        : t('common.today')
                      }
                    </p>
                  </div>
                </div>
              );
            })}
            <Button asChild variant="outline" className="w-full mt-2">
              <Link to="/knowledge/new">
                <Plus className="h-4 w-4 mr-2" />
                {t('dashboard.addNewKnowledge')}
              </Link>
            </Button>
          </div>
        ) : (
          <div className="text-center py-6">
            <Book className="h-12 w-12 text-gray-400 mx-auto mb-3" />
            <p className="text-sm text-gray-600 mb-3">{t('dashboard.noKnowledgeEntries')}</p>
            <Button asChild size="sm">
              <Link to="/knowledge/new">
                <Plus className="h-4 w-4 mr-2" />
                {t('dashboard.createFirstEntry')}
              </Link>
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );
}

export { getKnowledgeIcon };
</file>

<file path="src/components/farm/dashboard/types.ts">
export interface WeatherData {
  temperature: number;
  humidity: number;
  rainfall: number;
  windSpeed: number;
  condition: 'sunny' | 'rainy' | 'cloudy' | 'stormy';
}

export interface CropStatus {
  name: string;
  localName: string;
  health: 'excellent' | 'good' | 'warning' | 'critical';
  nextAction: string;
  daysToHarvest?: number;
}

export interface Alert {
  type: 'warning' | 'info';
  message: string;
  urgent: boolean;
}

export interface KnowledgeEntry {
  id: string;
  title: string;
  description?: string;
  updated_at?: string;
  icon: React.ComponentType<{ className?: string }>;
}
</file>

<file path="src/components/farm/dashboard/useDashboardData.ts">
import { useMemo } from 'react';
import { useNotebooks } from '@/hooks/useNotebooks';
import { WeatherData, CropStatus, Alert, KnowledgeEntry } from './types';
import { getKnowledgeIcon } from './RecentKnowledgeSection';
import { useTranslation } from 'react-i18next';

// Mock data - will be replaced with real API calls
const mockWeatherData: WeatherData = {
  temperature: 28,
  humidity: 65,
  rainfall: 2.5,
  windSpeed: 12,
  condition: 'sunny'
};

  const mockCropsData: CropStatus[] = [
    {
      name: t('crops.maize'),
      localName: t('crops.maizeLocal'),
      health: 'excellent',
      nextAction: t('crops.applyFertilizerDays', { days: 3 }),
      daysToHarvest: 45
    },
    {
      name: t('crops.coffee'),
      localName: t('crops.coffeeLocal'),
      health: 'good',
      nextAction: t('crops.monitorPests'),
      daysToHarvest: 120
    }
  ];

  const mockAlertsData: Alert[] = [
    {
      type: 'warning',
      message: t('alerts.heavyRainfallWarning', { days: 2 }),
      urgent: true
    },
    {
      type: 'info',
      message: t('alerts.plantingWindowInfo'),
      urgent: false
    }
  ];

export function useDashboardData() {
  const { t } = useTranslation();
  const { data: notebooks = [], isLoading: notebooksLoading } = useNotebooks();
  
  // Transform notebooks to knowledge entries
  const recentKnowledgeEntries: KnowledgeEntry[] = useMemo(() => 
    notebooks
      .slice(0, 3)
      .map(notebook => ({
        id: notebook.id,
        title: notebook.title || 'Untitled',
        description: notebook.description,
        updated_at: notebook.updated_at,
        icon: getKnowledgeIcon(notebook.title || '')
      })), 
    [notebooks]
  );

  return {
    weather: mockWeatherData,
    crops: mockCropsData,
    alerts: mockAlertsData,
    knowledgeEntries: recentKnowledgeEntries,
    notebooksCount: notebooks.length,
    isKnowledgeLoading: notebooksLoading
  };
}
</file>

<file path="src/components/farm/dashboard/WeatherSummaryCard.tsx">
import React from 'react';
import { useTranslation } from 'react-i18next';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { 
  Cloud, 
  Droplets, 
  Thermometer, 
  Wind 
} from 'lucide-react';
import { Link } from 'react-router-dom';

interface WeatherData {
  temperature: number;
  humidity: number;
  rainfall: number;
  windSpeed: number;
  condition: 'sunny' | 'rainy' | 'cloudy' | 'stormy';
}

interface WeatherSummaryCardProps {
  weather: WeatherData;
}

export function WeatherSummaryCard({ weather }: WeatherSummaryCardProps) {
  const { t } = useTranslation();

  return (
    <Card className="mb-6 weather-sunny">
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>{t('weather.current')}</span>
          <Link to="/weather" className="text-sm font-normal text-blue-600 hover:underline">
            {t('dashboard.viewAll')}
          </Link>
        </CardTitle>
        <CardDescription>
          {t('dashboard.quickWeather')}
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="bg-white/80 rounded-lg p-4">
            <div className="flex items-center space-x-2 text-gray-600 mb-1">
              <Thermometer className="h-4 w-4" />
              <span className="text-sm">{t('dashboard.temperature')}</span>
            </div>
            <p className="text-2xl font-bold">{weather.temperature}°C</p>
          </div>
          <div className="bg-white/80 rounded-lg p-4">
            <div className="flex items-center space-x-2 text-gray-600 mb-1">
              <Droplets className="h-4 w-4" />
              <span className="text-sm">{t('dashboard.humidity')}</span>
            </div>
            <p className="text-2xl font-bold">{weather.humidity}%</p>
          </div>
          <div className="bg-white/80 rounded-lg p-4">
            <div className="flex items-center space-x-2 text-gray-600 mb-1">
              <Cloud className="h-4 w-4" />
              <span className="text-sm">{t('dashboard.rainfall')}</span>
            </div>
            <p className="text-2xl font-bold">{weather.rainfall}mm</p>
          </div>
          <div className="bg-white/80 rounded-lg p-4">
            <div className="flex items-center space-x-2 text-gray-600 mb-1">
              <Wind className="h-4 w-4" />
              <span className="text-sm">{t('dashboard.windSpeed')}</span>
            </div>
            <p className="text-2xl font-bold">{weather.windSpeed}km/h</p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/components/layout/UnifiedHeader.tsx">
import React, { useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  User, LogOut, Settings, Wheat, Shield, Home, Cloud, 
  Sprout, MessageCircle, BookOpen, ArrowLeft, Menu, X, Globe 
} from 'lucide-react';
import { 
  DropdownMenu, DropdownMenuContent, DropdownMenuItem, 
  DropdownMenuTrigger, DropdownMenuSeparator 
} from '@/components/ui/dropdown-menu';
import { useLogout } from '@/services/authService';
import { useAuth } from '@/features/authentication';
import Logo from '@/components/ui/Logo';
import UserProfileDialog from '@/components/profile/UserProfileDialog';
import { getRoleInfo, type UserRole } from '@/utils/permissions';

interface UnifiedHeaderProps {
  title?: string;
  subtitle?: string;
  showBackButton?: boolean;
  onBackClick?: () => void;
  showNavigation?: boolean; // New prop to control navigation visibility
  variant?: 'full' | 'minimal'; // 'full' for AppHeader style, 'minimal' for DashboardHeader style
}

const UnifiedHeader = ({ 
  title, 
  subtitle, 
  showBackButton = false, 
  onBackClick,
  showNavigation = true,
  variant = 'full'
}: UnifiedHeaderProps) => {
  const navigate = useNavigate();
  const location = useLocation();
  const { t, i18n } = useTranslation();
  const { logout } = useLogout();
  const { profile } = useAuth();
  const [showProfileDialog, setShowProfileDialog] = useState(false);
  const [showMobileMenu, setShowMobileMenu] = useState(false);

  const languages = [
    { code: 'ko', name: t('language.korean'), flag: '🇰🇷' },
    { code: 'en', name: t('language.english'), flag: '🇺🇸' },
    { code: 'sw', name: t('language.swahili'), flag: '🇹🇿' },
    { code: 'fr', name: t('language.french'), flag: '🇫🇷' },
    { code: 'ne', name: t('language.nepali'), flag: '🇳🇵' },
    { code: 'uz', name: t('language.uzbek'), flag: '🇺🇿' }
  ];

  const navigationItems = [
    { path: '/', icon: Home, label: t('navigation.dashboard'), color: 'text-blue-600' },
    { path: '/weather', icon: Cloud, label: t('navigation.weather'), color: 'text-sky-600' },
    { path: '/crops', icon: Sprout, label: t('navigation.crops'), color: 'text-green-600' },
    { path: '/chat', icon: MessageCircle, label: t('navigation.chat'), color: 'text-purple-600' },
    { path: '/knowledge', icon: BookOpen, label: t('navigation.knowledge'), color: 'text-orange-600' },
  ];

  const changeLanguage = async (langCode: string) => {
    console.log('UnifiedHeader: Changing language to:', langCode);
    try {
      await i18n.changeLanguage(langCode);
      console.log('UnifiedHeader: Language changed to:', i18n.language);
      // Force re-render to apply language changes
      window.location.reload();
    } catch (error) {
      console.error('UnifiedHeader: Error changing language:', error);
    }
  };

  const getUserInitial = () => {
    if (profile?.full_name) {
      return profile.full_name.charAt(0).toUpperCase();
    }
    if (profile?.email) {
      return profile.email.charAt(0).toUpperCase();
    }
    return 'U';
  };

  const getRoleBadge = () => {
    if (!profile?.user_role) return null;
    const roleInfo = getRoleInfo(profile.user_role as UserRole);
    return (
      <Badge variant="secondary" className={`text-xs bg-${roleInfo.color}-100 text-${roleInfo.color}-800`}>
        {roleInfo.icon} {roleInfo.name}
      </Badge>
    );
  };

  const handleBackClick = () => {
    if (onBackClick) {
      onBackClick();
    } else {
      navigate(-1);
    }
  };

  const getCurrentPageTitle = () => {
    if (title) return title;
    
    // For minimal variant, always show AI4AgriWeather
    if (variant === 'minimal') return t('auth.title');
    
    const currentNav = navigationItems.find(item => item.path === location.pathname);
    return currentNav?.label || t('auth.title');
  };

  const getCurrentPageSubtitle = () => {
    if (subtitle) return subtitle;
    
    // For minimal variant, always show Smart Farm Assistant
    if (variant === 'minimal') return t('common.smartFarmAssistant');
    
    const currentNav = navigationItems.find(item => item.path === location.pathname);
    if (currentNav) {
      switch (currentNav.path) {
        case '/': return t('dashboard.subtitle');
        case '/weather': return t('weather.subtitle');
        case '/crops': return t('crops.subtitle');
        case '/chat': return t('chat.subtitle');
        case '/knowledge': return t('knowledge.subtitle');
        default: return t('common.smartFarmAssistant');
      }
    }
    return t('common.smartFarmAssistant');
  };

  return (
    <>
      <header className="bg-white border-b px-4 sm:px-6 py-4 sticky top-0 z-50">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            {showBackButton && (
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={handleBackClick}
                className="p-2 hover:bg-gray-100"
              >
                <ArrowLeft className="h-4 w-4" />
              </Button>
            )}
            
            <Logo />
            <div>
              <h1 className={`font-medium text-gray-900 ${variant === 'minimal' ? 'text-xl' : 'text-lg sm:text-xl'}`}>
                {getCurrentPageTitle()}
              </h1>
              <p className={`text-gray-500 ${variant === 'minimal' ? 'text-sm' : 'text-xs sm:text-sm'}`}>
                {getCurrentPageSubtitle()}
              </p>
            </div>
          </div>
          
          <div className="flex items-center space-x-2 sm:space-x-4">
            {/* Desktop Navigation - Only show if showNavigation is true and variant is 'full' */}
            {showNavigation && variant === 'full' && (
              <nav className="hidden lg:flex items-center space-x-1">
                {navigationItems.map((item) => {
                  const Icon = item.icon;
                  const isActive = location.pathname === item.path;
                  return (
                    <Button
                      key={item.path}
                      variant={isActive ? "secondary" : "ghost"}
                      size="sm"
                      onClick={() => navigate(item.path)}
                      className={`flex items-center space-x-2 ${isActive ? 'bg-gray-100' : 'hover:bg-gray-50'}`}
                    >
                      <Icon className={`h-4 w-4 ${isActive ? item.color : 'text-gray-600'}`} />
                      <span className={`text-sm ${isActive ? 'font-medium text-gray-900' : 'text-gray-600'}`}>
                        {item.label}
                      </span>
                    </Button>
                  );
                })}
              </nav>
            )}

            {/* User info display - Only show in minimal variant */}
            {variant === 'minimal' && profile && (
              <div className="hidden md:flex items-center space-x-3">
                <div className="text-right">
                  <div className="flex items-center space-x-2 justify-end">
                    <p className="text-sm font-medium text-gray-900">
                      {profile.full_name || 'User'}
                    </p>
                    {getRoleBadge()}
                  </div>
                  <p className="text-xs text-gray-500">
                    {profile.farm_name || profile.user_role?.replace('_', ' ') || 'Farmer'}
                  </p>
                </div>
                {profile.farm_location && (
                  <div className="flex items-center text-xs text-gray-500">
                    <Wheat className="h-3 w-3 mr-1" />
                    <span>{profile.farm_location}</span>
                  </div>
                )}
              </div>
            )}

            {/* Language Selector */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="flex items-center space-x-1 px-2">
                  <Globe className="h-4 w-4" />
                  <span className="hidden sm:inline text-sm">
                    {languages.find(lang => lang.code === i18n.language)?.flag || '🌐'}
                  </span>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-48">
                <div className="px-2 py-1.5 text-sm font-medium text-gray-700">
                  {t('language.selectLanguage')}
                </div>
                <DropdownMenuSeparator />
                {languages.map((lang) => (
                  <DropdownMenuItem
                    key={lang.code}
                    onClick={() => changeLanguage(lang.code)}
                    className={`cursor-pointer ${
                      i18n.language === lang.code ? 'bg-gray-100 font-medium' : ''
                    }`}
                  >
                    <span className="mr-2">{lang.flag}</span>
                    {lang.name}
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>

            {/* Mobile Menu Button - Only show if navigation is enabled */}
            {showNavigation && variant === 'full' && (
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowMobileMenu(!showMobileMenu)}
                className="lg:hidden p-2"
              >
                {showMobileMenu ? <X className="h-4 w-4" /> : <Menu className="h-4 w-4" />}
              </Button>
            )}

            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="p-0">
                  <div className={`bg-green-500 rounded-full flex items-center justify-center cursor-pointer hover:bg-green-600 transition-colors ${
                    variant === 'minimal' ? 'w-10 h-10' : 'w-8 h-8 sm:w-10 sm:h-10'
                  }`}>
                    <span className="text-white font-medium text-sm">{getUserInitial()}</span>
                  </div>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56">
                <div className="px-2 py-1.5 text-sm">
                  <div className="font-medium">{profile?.full_name || 'User'}</div>
                  <div className="text-xs text-gray-500">{profile?.email}</div>
                </div>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={() => setShowProfileDialog(true)} className="cursor-pointer">
                  <Settings className="h-4 w-4 mr-2" />
                  {t('common.profileSettings')}
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={logout} className="cursor-pointer text-red-600 focus:text-red-600">
                  <LogOut className="h-4 w-4 mr-2" />
                  {t('common.logout')}
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>

        {/* Mobile Navigation Menu */}
        {showMobileMenu && showNavigation && variant === 'full' && (
          <div className="lg:hidden mt-4 pt-4 border-t">
            <nav className="grid grid-cols-2 gap-2">
              {navigationItems.map((item) => {
                const Icon = item.icon;
                const isActive = location.pathname === item.path;
                return (
                  <Button
                    key={item.path}
                    variant={isActive ? "secondary" : "ghost"}
                    size="sm"
                    onClick={() => {
                      navigate(item.path);
                      setShowMobileMenu(false);
                    }}
                    className={`flex items-center space-x-2 justify-start ${isActive ? 'bg-gray-100' : 'hover:bg-gray-50'}`}
                  >
                    <Icon className={`h-4 w-4 ${isActive ? item.color : 'text-gray-600'}`} />
                    <span className={`text-sm ${isActive ? 'font-medium text-gray-900' : 'text-gray-600'}`}>
                      {item.label}
                    </span>
                  </Button>
                );
              })}
            </nav>
          </div>
        )}
      </header>

      <UserProfileDialog 
        open={showProfileDialog} 
        onOpenChange={setShowProfileDialog} 
      />
    </>
  );
};

export default UnifiedHeader;
</file>

<file path="src/components/HEADER_USAGE_GUIDE.md">
# 헤더 컴포넌트 사용 가이드

## ⚠️ 중요: 헤더 컴포넌트 구조

현재 프로젝트에는 두 개의 헤더 컴포넌트가 존재합니다:

### 1. AppHeader (`/src/components/ui/AppHeader.tsx`)
- **용도**: 전체 앱의 메인 헤더 (네비게이션 포함)
- **특징**:
  - 네비게이션 메뉴 (Dashboard, Weather, Crops, Chat, Knowledge)
  - 언어 선택 기능 (6개 언어)
  - 모바일 반응형 메뉴
  - 뒤로가기 버튼 옵션
  - 페이지별 제목과 부제목 자동 설정
- **사용 위치**: 대부분의 페이지 (Weather, Crops, Chat, Knowledge 등)

### 2. DashboardHeader (`/src/components/dashboard/DashboardHeader.tsx`)
- **용도**: 대시보드 페이지 전용 헤더 (간소화된 버전)
- **특징**:
  - 언어 선택 기능 (6개 언어)
  - 사용자 정보 표시
  - 프로필 설정 메뉴
  - 네비게이션 메뉴 없음
- **사용 위치**: Dashboard 페이지 (`/src/pages/Dashboard.tsx`)

## 🆕 통합 헤더 컴포넌트 (권장)

### UnifiedHeader (`/src/components/layout/UnifiedHeader.tsx`)
- **용도**: 모든 페이지에서 사용 가능한 통합 헤더
- **Props**:
  - `variant`: 'full' (네비게이션 포함) | 'minimal' (네비게이션 없음)
  - `showNavigation`: 네비게이션 메뉴 표시 여부
  - `title`: 커스텀 제목
  - `subtitle`: 커스텀 부제목
  - `showBackButton`: 뒤로가기 버튼 표시
  - `onBackClick`: 뒤로가기 커스텀 핸들러

### 사용 예시:
```typescript
// Dashboard 페이지 (DashboardHeader 대체)
<UnifiedHeader variant="minimal" showNavigation={false} />

// 다른 페이지들 (AppHeader 대체)
<UnifiedHeader variant="full" />

// 커스텀 제목과 뒤로가기 버튼
<UnifiedHeader 
  title="Custom Title" 
  subtitle="Custom Subtitle"
  showBackButton 
  onBackClick={() => navigate('/home')}
/>
```

## 🎯 권장사항

### 즉시 적용 가능:
1. 새로운 페이지는 `UnifiedHeader` 사용
2. 기존 페이지 점진적 마이그레이션
3. 하나의 컴포넌트만 관리하므로 유지보수 용이

### 마이그레이션 계획:
1. **Phase 1**: 새 페이지부터 UnifiedHeader 적용
2. **Phase 2**: AppHeader 사용 페이지를 UnifiedHeader로 변경
3. **Phase 3**: DashboardHeader를 UnifiedHeader로 변경
4. **Phase 4**: 기존 AppHeader, DashboardHeader 제거

## 📝 체크리스트

헤더 관련 변경 시 확인사항:
- [ ] 언어 선택 기능이 필요한가? → 두 헤더 모두 업데이트
- [ ] 네비게이션이 필요한가? → AppHeader 사용
- [ ] 대시보드 페이지인가? → DashboardHeader 사용
- [ ] i18n 키 추가했는가? → 모든 언어 파일 업데이트

## 🚨 주의사항

1. **중복 수정 방지**: 헤더 기능 수정 시 반드시 두 컴포넌트 모두 확인
2. **일관성 유지**: 언어 선택, 사용자 메뉴 등 공통 기능은 동일하게 구현
3. **i18n 동기화**: 새로운 텍스트 추가 시 번역 키 통일

---

*마지막 업데이트: 2025-01-23*
*작성자: AI4AgriWeather 개발팀*
</file>

<file path="src/components/LanguageDebugger.tsx">
import React from 'react';
import { useTranslation } from 'react-i18next';

const LanguageDebugger: React.FC = () => {
  const { t, i18n } = useTranslation();

  if (process.env.NODE_ENV !== 'development') {
    return null;
  }

  return (
    <div className="fixed bottom-4 right-4 bg-black text-white p-4 rounded-lg text-xs max-w-md z-50">
      <h4 className="font-bold mb-2">i18n Debug Info</h4>
      <div>Current Language: {i18n.language}</div>
      <div>Resolved Language: {i18n.resolvedLanguage}</div>
      <div>Supported Languages: {i18n.options.supportedLngs?.join(', ')}</div>
      <div>Is Initialized: {i18n.isInitialized ? 'Yes' : 'No'}</div>
      <div>Has Loaded Namespace: {i18n.hasLoadedNamespace('translation') ? 'Yes' : 'No'}</div>
      <div>Test Translation: {t('common.welcome')}</div>
      <div className="mt-2">
        <button 
          onClick={() => {
            console.log('i18n store:', i18n.store);
            console.log('i18n options:', i18n.options);
            console.log('Resources:', i18n.getResourceBundle(i18n.language, 'translation'));
          }}
          className="bg-white text-black px-2 py-1 rounded text-xs"
        >
          Log Details
        </button>
      </div>
    </div>
  );
};

export default LanguageDebugger;
</file>

<file path="src/features/authentication/components/AgriOnboarding.tsx">
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { Button } from '@/shared/components/ui/button';
import { Input } from '@/shared/components/ui/input';
import { Label } from '@/shared/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/shared/components/ui/select';
import { Checkbox } from '@/shared/components/ui/checkbox';
import { Progress } from '@/shared/components/ui/progress';
import { Badge } from '@/shared/components/ui/badge';
import { Textarea } from '@/shared/components/ui/textarea';
import { 
  Wheat, 
  MapPin, 
  Users, 
  Ruler, 
  Calendar,
  CheckCircle,
  ArrowRight,
  ArrowLeft,
  Sprout,
  Tractor
} from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/features/authentication';
import { useToast } from '@/shared/hooks/use-toast';
import { COMMON_CROPS_TANZANIA, TANZANIA_REGIONS } from '@/utils/agricultureTemplates';

interface OnboardingData {
  full_name: string;
  farm_name: string;
  farm_location: string;
  farm_size: number;
  farm_size_unit: string;
  primary_crops: string[];
  farming_experience: number;
  farming_type: string;
  region: string;
  user_role: string;
  phone_number: string;
  preferred_language: string;
}

interface AgriOnboardingProps {
  onComplete: () => void;
}

const AgriOnboarding = ({ onComplete }: AgriOnboardingProps) => {
  const { t } = useTranslation();
  const [currentStep, setCurrentStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState<OnboardingData>({
    full_name: '',
    farm_name: '',
    farm_location: '',
    farm_size: 0,
    farm_size_unit: 'hectares',
    primary_crops: [],
    farming_experience: 0,
    farming_type: 'mixed',
    region: '',
    user_role: 'farmer',
    phone_number: '',
    preferred_language: 'english'
  });

  const { user } = useAuth();
  const { toast } = useToast();

  const totalSteps = 4;
  const progress = (currentStep / totalSteps) * 100;

  const updateFormData = (field: keyof OnboardingData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const toggleCrop = (crop: string) => {
    setFormData(prev => ({
      ...prev,
      primary_crops: prev.primary_crops.includes(crop)
        ? prev.primary_crops.filter(c => c !== crop)
        : [...prev.primary_crops, crop]
    }));
  };

  const handleNext = () => {
    if (currentStep < totalSteps) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrevious = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleComplete = async () => {
    if (!user) {
      toast({
        title: t('onboarding.error'),
        description: t('onboarding.userNotAuthenticated'),
        variant: "destructive"
      });
      return;
    }

    setLoading(true);
    try {
      const { error } = await supabase
        .from('profiles')
        .update({
          ...formData,
          onboarding_completed: true,
          updated_at: new Date().toISOString()
        })
        .eq('id', user.id);

      if (error) throw error;

      toast({
        title: t('onboarding.welcomeMessage'),
        description: t('onboarding.profileSetupSuccess'),
      });

      onComplete();
    } catch (error) {
      console.error('Onboarding error:', error);
      toast({
        title: t('onboarding.error'),
        description: t('onboarding.profileSaveError'),
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <Card className="w-full max-w-2xl">
            <CardHeader className="text-center">
              <div className="flex justify-center mb-4">
                <div className="p-3 bg-green-100 rounded-full">
                  <Users className="h-8 w-8 text-green-600" />
                </div>
              </div>
              <CardTitle>{t('onboarding.personalInfo')}</CardTitle>
              <CardDescription>
                {t('onboarding.personalInfoDesc')}
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="full_name">{t('onboarding.fullName')} *</Label>
                  <Input
                    id="full_name"
                    value={formData.full_name}
                    onChange={(e) => updateFormData('full_name', e.target.value)}
                    placeholder={t('onboarding.fullNamePlaceholder')}
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="phone_number">{t('onboarding.phoneNumber')}</Label>
                  <Input
                    id="phone_number"
                    value={formData.phone_number}
                    onChange={(e) => updateFormData('phone_number', e.target.value)}
                    placeholder={t('onboarding.phoneNumberPlaceholder')}
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="user_role">{t('onboarding.yourRole')}</Label>
                  <Select value={formData.user_role} onValueChange={(value) => updateFormData('user_role', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder={t('onboarding.selectRole')} />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="farmer">{t('onboarding.farmer')}</SelectItem>
                      <SelectItem value="extension_officer">{t('onboarding.extensionOfficer')}</SelectItem>
                      <SelectItem value="researcher">{t('onboarding.researcher')}</SelectItem>
                      <SelectItem value="cooperative_member">{t('onboarding.cooperativeMember')}</SelectItem>
                      <SelectItem value="agribusiness">{t('onboarding.agribusiness')}</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="preferred_language">{t('onboarding.preferredLanguage')}</Label>
                  <Select value={formData.preferred_language} onValueChange={(value) => updateFormData('preferred_language', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder={t('onboarding.selectLanguage')} />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="english">{t('onboarding.english')}</SelectItem>
                      <SelectItem value="swahili">{t('onboarding.swahili')}</SelectItem>
                      <SelectItem value="both">{t('onboarding.both')}</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="farming_experience">{t('onboarding.yearsExperience')}</Label>
                <Input
                  id="farming_experience"
                  type="number"
                  value={formData.farming_experience}
                  onChange={(e) => updateFormData('farming_experience', parseInt(e.target.value) || 0)}
                  placeholder="0"
                  min="0"
                />
              </div>
            </CardContent>
          </Card>
        );

      case 2:
        return (
          <Card className="w-full max-w-2xl">
            <CardHeader className="text-center">
              <div className="flex justify-center mb-4">
                <div className="p-3 bg-blue-100 rounded-full">
                  <MapPin className="h-8 w-8 text-blue-600" />
                </div>
              </div>
              <CardTitle>{t('onboarding.farmLocation')}</CardTitle>
              <CardDescription>
                {t('onboarding.farmLocationDesc')}
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="farm_name">{t('onboarding.farmName')}</Label>
                <Input
                  id="farm_name"
                  value={formData.farm_name}
                  onChange={(e) => updateFormData('farm_name', e.target.value)}
                  placeholder={t('onboarding.farmNamePlaceholder')}
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="farm_location">{t('onboarding.farmLocationLabel')}</Label>
                  <Input
                    id="farm_location"
                    value={formData.farm_location}
                    onChange={(e) => updateFormData('farm_location', e.target.value)}
                    placeholder={t('onboarding.villageWardPlaceholder')}
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="region">{t('onboarding.region')}</Label>
                  <Select value={formData.region} onValueChange={(value) => updateFormData('region', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder={t('onboarding.selectRegion')} />
                    </SelectTrigger>
                    <SelectContent>
                      {TANZANIA_REGIONS.map(region => (
                        <SelectItem key={region} value={region}>
                          {region.replace('_', ' ').toUpperCase()}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="farm_size">{t('onboarding.farmSize')}</Label>
                  <Input
                    id="farm_size"
                    type="number"
                    value={formData.farm_size}
                    onChange={(e) => updateFormData('farm_size', parseFloat(e.target.value) || 0)}
                    placeholder="0"
                    min="0"
                    step="0.1"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="farm_size_unit">{t('onboarding.unit')}</Label>
                  <Select value={formData.farm_size_unit} onValueChange={(value) => updateFormData('farm_size_unit', value)}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="hectares">{t('onboarding.hectares')}</SelectItem>
                      <SelectItem value="acres">{t('onboarding.acres')}</SelectItem>
                      <SelectItem value="square_meters">{t('onboarding.squareMeters')}</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="farming_type">{t('onboarding.typeOfFarming')}</Label>
                <Select value={formData.farming_type} onValueChange={(value) => updateFormData('farming_type', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder={t('onboarding.selectFarmingType')} />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="subsistence">{t('onboarding.subsistence')}</SelectItem>
                    <SelectItem value="commercial">{t('onboarding.commercial')}</SelectItem>
                    <SelectItem value="mixed">{t('onboarding.mixed')}</SelectItem>
                    <SelectItem value="organic">{t('onboarding.organic')}</SelectItem>
                    <SelectItem value="livestock">{t('onboarding.livestock')}</SelectItem>
                    <SelectItem value="aquaculture">{t('onboarding.aquaculture')}</SelectItem>
                    <SelectItem value="horticulture">{t('onboarding.horticulture')}</SelectItem>
                    <SelectItem value="agroforestry">{t('onboarding.agroforestry')}</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>
        );

      case 3:
        return (
          <Card className="w-full max-w-2xl">
            <CardHeader className="text-center">
              <div className="flex justify-center mb-4">
                <div className="p-3 bg-green-100 rounded-full">
                  <Wheat className="h-8 w-8 text-green-600" />
                </div>
              </div>
              <CardTitle>{t('onboarding.primaryCrops')}</CardTitle>
              <CardDescription>
                {t('onboarding.selectCrops')}
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                {COMMON_CROPS_TANZANIA.map(crop => (
                  <div
                    key={crop}
                    className={`p-3 border rounded-lg cursor-pointer transition-all ${
                      formData.primary_crops.includes(crop)
                        ? 'border-green-500 bg-green-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => toggleCrop(crop)}
                  >
                    <div className="flex items-center space-x-2">
                      <Checkbox
                        checked={formData.primary_crops.includes(crop)}
                        readOnly
                      />
                      <span className="text-sm font-medium">
                        {crop.replace('_', ' ').toUpperCase()}
                      </span>
                    </div>
                  </div>
                ))}
              </div>

              {formData.primary_crops.length > 0 && (
                <div className="mt-4">
                  <Label>{t('onboarding.selectedCrops')}</Label>
                  <div className="flex flex-wrap gap-2 mt-2">
                    {formData.primary_crops.map(crop => (
                      <Badge key={crop} variant="secondary" className="bg-green-100 text-green-800">
                        {crop.replace('_', ' ').toUpperCase()}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        );

      case 4:
        return (
          <Card className="w-full max-w-2xl">
            <CardHeader className="text-center">
              <div className="flex justify-center mb-4">
                <div className="p-3 bg-blue-100 rounded-full">
                  <CheckCircle className="h-8 w-8 text-blue-600" />
                </div>
              </div>
              <CardTitle>{t('onboarding.almostDone')}</CardTitle>
              <CardDescription>
                {t('onboarding.reviewInformation')}
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <div className="flex justify-between items-center py-2 border-b">
                  <span className="font-medium">{t('onboarding.fullName')}:</span>
                  <span>{formData.full_name}</span>
                </div>
                <div className="flex justify-between items-center py-2 border-b">
                  <span className="font-medium">{t('onboarding.role')}:</span>
                  <span>{t(`onboarding.${formData.user_role}`)}</span>
                </div>
                <div className="flex justify-between items-center py-2 border-b">
                  <span className="font-medium">{t('onboarding.farm')}:</span>
                  <span>{formData.farm_name || t('onboarding.notSpecified')}</span>
                </div>
                <div className="flex justify-between items-center py-2 border-b">
                  <span className="font-medium">{t('onboarding.location')}:</span>
                  <span>{formData.farm_location}, {formData.region}</span>
                </div>
                <div className="flex justify-between items-center py-2 border-b">
                  <span className="font-medium">{t('onboarding.farmSize')}:</span>
                  <span>{formData.farm_size} {t(`onboarding.${formData.farm_size_unit}`)}</span>
                </div>
                <div className="flex justify-between items-center py-2 border-b">
                  <span className="font-medium">{t('onboarding.experience')}:</span>
                  <span>{formData.farming_experience} {t('onboarding.years')}</span>
                </div>
                <div className="flex justify-between items-center py-2 border-b">
                  <span className="font-medium">{t('onboarding.primaryCrops')}:</span>
                  <span>{formData.primary_crops.length} {t('onboarding.selected')}</span>
                </div>
              </div>

              <div className="bg-green-50 p-4 rounded-lg">
                <div className="flex items-center space-x-2 mb-2">
                  <Sprout className="h-5 w-5 text-green-600" />
                  <span className="font-medium text-green-800">{t('onboarding.whatsNext')}</span>
                </div>
                <ul className="text-sm text-green-700 space-y-1">
                  <li>• {t('onboarding.accessPersonalized')}</li>
                  <li>• {t('onboarding.getWeatherForecasts')}</li>
                  <li>• {t('onboarding.receiveCropAdvice')}</li>
                  <li>• {t('onboarding.connectWithFarmers')}</li>
                </ul>
              </div>
            </CardContent>
          </Card>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 via-blue-50 to-emerald-50 p-4">
      {/* Background decoration */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-green-200 rounded-full opacity-20 blur-3xl"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-200 rounded-full opacity-20 blur-3xl"></div>
      </div>

      <div className="w-full max-w-4xl relative z-10">
        {/* Progress bar */}
        <div className="mb-8">
          <div className="flex justify-between items-center mb-2">
            <h1 className="text-2xl font-bold text-gray-900">{t('onboarding.welcomeMessage')}</h1>
            <span className="text-sm text-gray-500">{t('onboarding.step')} {currentStep} {t('onboarding.of')} {totalSteps}</span>
          </div>
          <Progress value={progress} className="h-2" />
        </div>

        {/* Step content */}
        <div className="flex justify-center mb-8">
          {renderStep()}
        </div>

        {/* Navigation buttons */}
        <div className="flex justify-between items-center">
          <Button
            variant="outline"
            onClick={handlePrevious}
            disabled={currentStep === 1}
            className="flex items-center space-x-2"
          >
            <ArrowLeft className="h-4 w-4" />
            <span>{t('onboarding.previous')}</span>
          </Button>

          {currentStep < totalSteps ? (
            <Button
              onClick={handleNext}
              disabled={
                (currentStep === 1 && !formData.full_name) ||
                (currentStep === 2 && (!formData.region || formData.farm_size <= 0))
              }
              className="flex items-center space-x-2"
            >
              <span>{t('onboarding.next')}</span>
              <ArrowRight className="h-4 w-4" />
            </Button>
          ) : (
            <Button
              onClick={handleComplete}
              disabled={loading}
              className="flex items-center space-x-2"
            >
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  <span>{t('onboarding.settingUp')}</span>
                </>
              ) : (
                <>
                  <CheckCircle className="h-4 w-4" />
                  <span>{t('onboarding.completeSetup')}</span>
                </>
              )}
            </Button>
          )}
        </div>
      </div>
    </div>
  );
};

export default AgriOnboarding;
</file>

<file path="src/features/authentication/components/AuthForm.tsx">
import React, { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/shared/components/ui/button';
import { Input } from '@/shared/components/ui/input';
import { Label } from '@/shared/components/ui/label';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/shared/components/ui/card';
import { Alert, AlertDescription } from '@/shared/components/ui/alert';
import { useToast } from '@/shared/hooks/use-toast';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../hooks/AuthContext';
import { Loader2, Wheat, Cloud, Sprout } from 'lucide-react';

const AuthForm = () => {
  const [isSignUp, setIsSignUp] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const { toast } = useToast();
  const navigate = useNavigate();
  const { isAuthenticated } = useAuth();

  // Redirect to dashboard if already authenticated
  useEffect(() => {
    if (isAuthenticated) {
      console.log('User is authenticated, redirecting to dashboard');
      navigate('/', { replace: true });
    }
  }, [isAuthenticated, navigate]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      if (isSignUp) {
        const { error } = await supabase.auth.signUp({
          email,
          password,
        });
        
        if (error) throw error;
        
        toast({
          title: "Account created!",
          description: "Please check your email to confirm your account.",
        });
        setIsSignUp(false);
      } else {
        const { error, data } = await supabase.auth.signInWithPassword({
          email,
          password,
        });
        
        if (error) {
          if (error.message.includes('Invalid login credentials')) {
            throw new Error('Invalid email or password.');
          } else if (error.message.includes('Email not confirmed')) {
            throw new Error('Please confirm your email before signing in.');
          } else {
            throw error;
          }
        }
        
        toast({
          title: "Welcome to AI4AgriWeather!",
          description: "You have successfully signed in.",
        });
      }
    } catch (error: any) {
      console.error('Auth error:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 via-blue-50 to-emerald-50">
      {/* Background decoration */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-green-200 rounded-full opacity-20 blur-3xl"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-200 rounded-full opacity-20 blur-3xl"></div>
      </div>
      
      <Card className="w-full max-w-md relative z-10">
        <CardHeader className="space-y-1">
          <div className="flex items-center justify-center mb-4">
            <div className="p-3 bg-green-100 rounded-full">
              <Wheat className="h-8 w-8 text-green-600" />
            </div>
          </div>
          <CardTitle className="text-2xl text-center">AI4AgriWeather</CardTitle>
          <CardDescription className="text-center">
            {isSignUp 
              ? 'Create an account to access smart agricultural weather intelligence'
              : 'Sign in to your AI4AgriWeather dashboard'
            }
          </CardDescription>
        </CardHeader>
        <form onSubmit={handleSubmit}>
          <CardContent className="space-y-4">
            {error && (
              <Alert variant="destructive">
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}
            
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="farmer@example.com"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                disabled={loading}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input
                id="password"
                type="password"
                placeholder="••••••••"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                disabled={loading}
                minLength={6}
              />
            </div>

            {/* Features showcase for sign up */}
            {isSignUp && (
              <div className="space-y-2 pt-2">
                <p className="text-sm text-gray-600 font-medium">Get access to:</p>
                <div className="space-y-1">
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <Cloud className="h-4 w-4 text-blue-500" />
                    <span>Real-time weather forecasts</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <Sprout className="h-4 w-4 text-green-500" />
                    <span>AI-powered crop management</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <Wheat className="h-4 w-4 text-orange-500" />
                    <span>Personalized farming advice</span>
                  </div>
                </div>
              </div>
            )}
          </CardContent>
          
          <CardFooter className="flex flex-col space-y-4">
            <Button 
              type="submit" 
              className="w-full"
              disabled={loading}
            >
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  {isSignUp ? 'Creating account...' : 'Signing in...'}
                </>
              ) : (
                isSignUp ? 'Create Account' : 'Sign In'
              )}
            </Button>
            
            <div className="text-sm text-center">
              {isSignUp ? (
                <>
                  Already have an account?{' '}
                  <button
                    type="button"
                    onClick={() => {
                      setIsSignUp(false);
                      setError('');
                    }}
                    className="text-green-600 hover:text-green-700 font-medium"
                    disabled={loading}
                  >
                    Sign in
                  </button>
                </>
              ) : (
                <>
                  New to AI4AgriWeather?{' '}
                  <button
                    type="button"
                    onClick={() => {
                      setIsSignUp(true);
                      setError('');
                    }}
                    className="text-green-600 hover:text-green-700 font-medium"
                    disabled={loading}
                  >
                    Create account
                  </button>
                </>
              )}
            </div>
          </CardFooter>
        </form>
      </Card>
    </div>
  );
};

export default AuthForm;
export { AuthForm };
</file>

<file path="src/features/authentication/components/index.ts">
// Authentication Components
export * from './AgriOnboarding';
export * from './AuthForm';
export * from './ProtectedRoute';
</file>

<file path="src/features/authentication/components/ProtectedRoute.tsx">
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '../hooks/AuthContext';

interface ProtectedRouteProps {
  children: React.ReactNode;
}

const ProtectedRoute = ({ children }: ProtectedRouteProps) => {
  const { isAuthenticated, loading } = useAuth();

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 via-blue-50 to-emerald-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading your farm...</p>
        </div>
      </div>
    );
  }

  return isAuthenticated ? <>{children}</> : <Navigate to="/auth" replace />;
};

export default ProtectedRoute;
export { ProtectedRoute };
</file>

<file path="src/features/authentication/hooks/AuthContext.tsx">
import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { User, Session } from '@supabase/supabase-js';
import { supabase } from '@/integrations/supabase/client';
import { Tables } from '@/integrations/supabase/types';

type Profile = Tables<'profiles'>;

interface AuthContextType {
  user: User | null;
  session: Session | null;
  profile: Profile | null;
  loading: boolean;
  error: string | null;
  isAuthenticated: boolean;
  needsOnboarding: boolean;
  signOut: () => Promise<void>;
  refreshProfile: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider = ({ children }: AuthProviderProps) => {
  const [user, setUser] = useState<User | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [profile, setProfile] = useState<Profile | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const updateAuthState = async (newSession: Session | null) => {
    console.log('AuthContext: Updating auth state:', newSession?.user?.email || 'No session');
    setSession(newSession);
    setUser(newSession?.user ?? null);
    
    // Clear any previous errors on successful auth
    if (newSession && error) {
      setError(null);
    }

    // Fetch profile if user is authenticated
    if (newSession?.user) {
      await fetchProfile(newSession.user.id);
    } else {
      setProfile(null);
    }
  };

  const clearAuthState = () => {
    console.log('AuthContext: Clearing auth state');
    setSession(null);
    setUser(null);
    setProfile(null);
    setError(null);
  };

  const fetchProfile = async (userId: string) => {
    try {
      console.log('AuthContext: Fetching profile for user:', userId);
      
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .single();

      if (error) {
        // If profile doesn't exist, create one
        if (error.code === 'PGRST116') {
          console.log('AuthContext: Profile not found, creating new profile');
          const newProfile = {
            id: userId,
            email: user?.email || '',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
            onboarding_completed: false,
          };

          const { data: createdProfile, error: createError } = await supabase
            .from('profiles')
            .insert(newProfile)
            .select()
            .single();

          if (createError) {
            console.error('AuthContext: Error creating profile:', createError);
            throw createError;
          }

          setProfile(createdProfile);
          return;
        }
        
        console.error('AuthContext: Error fetching profile:', error);
        throw error;
      }

      console.log('AuthContext: Profile fetched successfully');
      setProfile(data);
    } catch (err) {
      console.error('AuthContext: Profile fetch error:', err);
      setError(err instanceof Error ? err.message : 'Profile fetch error');
    }
  };

  const refreshProfile = async () => {
    if (user) {
      await fetchProfile(user.id);
    }
  };

  const signOut = async () => {
    try {
      console.log('AuthContext: Starting logout process...');
      
      // Clear local state immediately to provide instant feedback
      clearAuthState();
      
      // Attempt to sign out from server
      const { error } = await supabase.auth.signOut();
      
      if (error) {
        console.log('AuthContext: Logout error:', error);
        
        // If session is invalid on server, we've already cleared local state
        if (error.message.includes('session_not_found') || 
            error.message.includes('Session not found') ||
            error.status === 403) {
          console.log('AuthContext: Session already invalid on server');
          return;
        }
        
        // For other errors, still ensure local session is cleared
        await supabase.auth.signOut({ scope: 'local' });
        return;
      }
      
      console.log('AuthContext: Logout successful');
    } catch (err) {
      console.error('AuthContext: Unexpected logout error:', err);
      
      // Even if there's an error, try to clear local session
      try {
        await supabase.auth.signOut({ scope: 'local' });
      } catch (localError) {
        console.error('AuthContext: Failed to clear local session:', localError);
      }
    }
  };

  useEffect(() => {
    let mounted = true;

    // Set up auth state listener FIRST
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (event, newSession) => {
        if (!mounted) return;
        
        console.log('AuthContext: Auth state changed:', event, newSession?.user?.email || 'No session');
        
        // Handle sign out events
        if (event === 'SIGNED_OUT') {
          clearAuthState();
          setLoading(false);
          return;
        }
        
        // Handle sign in events
        if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
          updateAuthState(newSession).then(() => {
            setLoading(false);
          });
          return;
        }
        
        // For other events, update state if there's an actual change
        if (session?.access_token !== newSession?.access_token) {
          updateAuthState(newSession).then(() => {
            if (loading) setLoading(false);
          });
        }
      }
    );

    const initializeAuth = async () => {
      try {
        console.log('AuthContext: Initializing auth...');
        
        // Get initial session
        const { data: { session: initialSession }, error: sessionError } = await supabase.auth.getSession();
        
        if (sessionError) {
          console.error('AuthContext: Error getting initial session:', sessionError);
          
          // If the session is invalid, clear local state
          if (sessionError.message.includes('session_not_found') || 
              sessionError.message.includes('Session not found')) {
            console.log('AuthContext: Session not found on server, clearing local session');
            await supabase.auth.signOut({ scope: 'local' });
            if (mounted) {
              clearAuthState();
              setLoading(false);
            }
            return;
          }
          
          if (mounted) {
            setError(sessionError.message);
            setLoading(false);
          }
          return;
        }
        
        if (mounted) {
          console.log('AuthContext: Initial session:', initialSession?.user?.email || 'No session');
          await updateAuthState(initialSession);
          setLoading(false);
        }
      } catch (err) {
        console.error('AuthContext: Auth initialization error:', err);
        if (mounted) {
          setError(err instanceof Error ? err.message : 'Authentication error');
          setLoading(false);
        }
      }
    };

    // Initialize auth state after setting up listener
    initializeAuth();

    return () => {
      mounted = false;
      subscription.unsubscribe();
    };
  }, []); // Empty dependency array to run only once

  const value: AuthContextType = {
    user,
    session,
    profile,
    loading,
    error,
    isAuthenticated: !!user && !!session,
    needsOnboarding: !!user && !!profile && !profile.onboarding_completed,
    signOut,
    refreshProfile,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
</file>

<file path="src/features/authentication/hooks/index.ts">
// Authentication Hooks
export { AuthProvider, useAuth } from './AuthContext';
</file>

<file path="src/features/authentication/services/authService.ts">
import { useAuth } from '@/features/authentication';
import { useToast } from '@/hooks/use-toast';
import { useNavigate } from 'react-router-dom';

export const useLogout = () => {
  const { signOut } = useAuth();
  const { toast } = useToast();
  const navigate = useNavigate();

  const logout = async () => {
    try {
      await signOut();
      
      toast({
        title: "Signed out",
        description: "You have been successfully signed out."
      });
      
      // Redirect to auth page
      navigate('/auth', { replace: true });
      
    } catch (error: any) {
      console.error('Logout error:', error);
      
      // Even if there's an error, redirect to auth page
      toast({
        title: "Signed out",
        description: "You have been signed out locally.",
        variant: "default"
      });
      
      navigate('/auth', { replace: true });
    }
  };

  return { logout };
};
</file>

<file path="src/features/authentication/services/index.ts">
// Authentication Services
export * from './authService';
</file>

<file path="src/features/authentication/types/index.ts">
// Authentication Types - placeholder for future auth types
export {};
</file>

<file path="src/features/authentication/index.ts">
// Authentication Feature Exports
export * from './components';
export * from './hooks';
export * from './services';
export * from './types';
</file>

<file path="src/features/chat/components/AgriChat.tsx">
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card';
import { Button } from '@/shared/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/shared/components/ui/tabs';
import { AgricultureChatArea } from './AgricultureChatArea';
import { useCreateNotebook } from '@/features/notebook/hooks';
import { useToast } from '@/shared/hooks/use-toast';
import UnifiedHeader from '@/components/layout/UnifiedHeader';
import { 
  Bot,
  Cloud,
  Wheat,
  Bug,
  DollarSign,
  HelpCircle,
  Plus,
  MessageSquare
} from 'lucide-react';

const chatContexts = [
  {
    id: 'weather',
    name: 'Weather & Climate',
    icon: Cloud,
    color: 'text-blue-600',
    description: 'Weather forecasts and climate advice'
  },
  {
    id: 'crops',
    name: 'Crop Management',
    icon: Wheat,
    color: 'text-green-600',
    description: 'Crop growing and management tips'
  },
  {
    id: 'pests',
    name: 'Pest & Disease',
    icon: Bug,
    color: 'text-orange-600',
    description: 'Pest identification and control'
  },
  {
    id: 'market',
    name: 'Market Information',
    icon: DollarSign,
    color: 'text-purple-600',
    description: 'Market prices and selling advice'
  }
] as const;

export function AgriChat() {
  const [activeNotebooks, setActiveNotebooks] = useState<{[key: string]: string}>({});
  const [activeTab, setActiveTab] = useState('weather');
  const createNotebook = useCreateNotebook();
  const { toast } = useToast();

  const getOrCreateNotebook = async (context: string) => {
    // Check if we already have a notebook for this context
    if (activeNotebooks[context]) {
      return activeNotebooks[context];
    }

    try {
      // Create a new notebook for this context
      const result = await createNotebook.mutateAsync({
        title: `${context.charAt(0).toUpperCase() + context.slice(1)} Consultation`,
        description: `AI consultation session for ${context} related questions`
      });

      setActiveNotebooks(prev => ({
        ...prev,
        [context]: result.id
      }));

      return result.id;
    } catch (error) {
      console.error('Error creating notebook:', error);
      toast({
        title: "Error",
        description: "Failed to create consultation session. Please try again.",
        variant: "destructive",
      });
      return null;
    }
  };

  // Create default notebook when component loads
  useEffect(() => {
    if (!activeNotebooks[activeTab]) {
      getOrCreateNotebook(activeTab);
    }
  }, [activeTab]);

  return (
    <div className="min-h-screen bg-gradient-to-b from-green-50 to-blue-50">
      <UnifiedHeader variant="full" />

      <main className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <Card className="h-[calc(100vh-180px)]">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="h-full flex flex-col">
            <div className="p-4 border-b">
              <TabsList className="grid w-full grid-cols-4">
                {chatContexts.map((context) => {
                  const IconComponent = context.icon;
                  return (
                    <TabsTrigger 
                      key={context.id} 
                      value={context.id}
                      className="flex items-center gap-2"
                      onClick={async () => {
                        if (!activeNotebooks[context.id]) {
                          await getOrCreateNotebook(context.id);
                        }
                      }}
                    >
                      <IconComponent className="h-4 w-4" />
                      <span className="hidden sm:inline">{context.name}</span>
                    </TabsTrigger>
                  );
                })}
              </TabsList>
            </div>

            {chatContexts.map((context) => (
              <TabsContent 
                key={context.id} 
                value={context.id} 
                className="flex-1 m-0 p-0"
              >
                <AgricultureChatArea
                  notebookId={activeNotebooks[context.id] || undefined}
                  context={context.id as any}
                />
              </TabsContent>
            ))}
          </Tabs>
        </Card>

        {/* Help Tips */}
        <Card className="mt-4">
          <CardContent className="p-4">
            <div className="flex items-start space-x-2">
              <HelpCircle className="h-4 w-4 text-blue-600 mt-0.5" />
              <div className="text-sm text-gray-600">
                <p className="font-semibold text-gray-900 mb-1">Tips for better answers:</p>
                <ul className="space-y-1">
                  <li>• Include your crop type and growth stage</li>
                  <li>• Mention your location for weather-specific advice</li>
                  <li>• Describe symptoms clearly for pest/disease diagnosis</li>
                  <li>• Each tab provides specialized advice for that topic</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </main>
    </div>
  );
}
</file>

<file path="src/features/chat/components/AgricultureChatArea.tsx">
import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/shared/components/ui/button';
import { Input } from '@/shared/components/ui/input';
import { Send, Mic, Camera, Loader2, Wheat, Cloud, Bug, DollarSign } from 'lucide-react';
import { Card } from '@/shared/components/ui/card';
import { ScrollArea } from '@/shared/components/ui/scroll-area';
import { Badge } from '@/shared/components/ui/badge';
import { useChatMessages } from '../hooks';
import MarkdownRenderer from './MarkdownRenderer';
import { Avatar, AvatarFallback } from '@/shared/components/ui/avatar';
import { cn } from '@/shared/utils';
import { ChatContext } from '@/types/chat';

interface AgricultureChatAreaProps {
  notebookId?: string;
  context?: 'weather' | 'crops' | 'pests' | 'market' | 'general';
}

const contextPrompts = {
  weather: {
    systemPrompt: `You are AI4AgriWeather, an intelligent agricultural weather advisor for farmers. Provide practical, actionable advice about:
- Weather interpretation for farming decisions
- Seasonal planning based on weather patterns
- Climate adaptation strategies
- Irrigation and water management
- Protection from extreme weather
Always consider Tanzania's tropical climate and local conditions.`,
    quickQuestions: [
      "What does the weather forecast mean for my crops?",
      "When is the best time to plant during rainy season?",
      "How can I protect my crops from drought?",
      "What should I do if heavy rains are coming?"
    ],
    icon: Cloud,
    color: "text-blue-600"
  },
  crops: {
    systemPrompt: `You are AI4AgriWeather, an expert agricultural advisor specializing in crop management with weather intelligence. Provide guidance on:
- Crop selection and varieties suitable for Tanzania
- Planting, growing, and harvesting techniques
- Soil preparation and fertility management
- Crop rotation and intercropping
- Yield optimization strategies
Focus on major Tanzanian crops like maize, rice, coffee, cassava, and beans.`,
    quickQuestions: [
      "What's the best variety of maize for my region?",
      "How do I improve my soil before planting?",
      "When should I harvest my coffee?",
      "What crops grow well together?"
    ],
    icon: Wheat,
    color: "text-green-600"
  },
  pests: {
    systemPrompt: `You are AI4AgriWeather, a plant pathology and pest management expert with weather-based pest prediction. Help farmers with:
- Pest and disease identification
- Integrated pest management (IPM) strategies
- Organic and chemical treatment options
- Prevention and early detection methods
- Beneficial insects and natural predators
Emphasize sustainable and cost-effective solutions.`,
    quickQuestions: [
      "How do I identify fall armyworm on my maize?",
      "What natural pesticides can I use?",
      "How can I prevent coffee berry disease?",
      "Are there beneficial insects I should protect?"
    ],
    icon: Bug,
    color: "text-orange-600"
  },
  market: {
    systemPrompt: `You are AI4AgriWeather, an agricultural marketing and economics advisor with weather-informed market insights. Provide guidance on:
- Market price analysis and trends
- Best timing for selling crops
- Quality standards and grading
- Value addition and processing
- Cooperative and group marketing
- Access to credit and financing
Help farmers maximize their income from agricultural activities.`,
    quickQuestions: [
      "When should I sell my harvest for best prices?",
      "How can I improve the quality of my produce?",
      "What are the benefits of joining a cooperative?",
      "How can I add value to my crops?"
    ],
    icon: DollarSign,
    color: "text-purple-600"
  },
  general: {
    systemPrompt: `You are AI4AgriWeather, a comprehensive agricultural advisor with intelligent weather integration. Provide practical advice on:
- General farming best practices
- Sustainable agriculture methods
- Farm management and planning
- Technology adoption in agriculture
- Climate-smart farming techniques
- Record keeping and farm business management
Always provide context-appropriate advice for smallholder farmers in Tanzania.`,
    quickQuestions: [
      "How can I make my farm more sustainable?",
      "What records should I keep for my farm?",
      "How do I plan my farming activities for the year?",
      "What new technologies can help my farm?"
    ],
    icon: Wheat,
    color: "text-gray-600"
  }
};

export function AgricultureChatArea({ notebookId, context = 'general' }: AgricultureChatAreaProps) {
  const [message, setMessage] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  
  const contextConfig = contextPrompts[context];
  const IconComponent = contextConfig.icon;
  
  const {
    messages,
    sendMessage,
    sendMessageAsync,
    isSending,
  } = useChatMessages(notebookId);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  const handleSendMessage = async () => {
    if (!message.trim() || isSending || !notebookId) return;

    const userMessage = message.trim();
    setMessage('');

    // Create context object for the message
    const chatContext: ChatContext = {
      type: context === 'general' ? 'general' : context as any,
      metadata: {
        language: 'en', // TODO: Get from i18n context
        systemPrompt: contextConfig.systemPrompt
      }
    };

    try {
      await sendMessageAsync({
        notebookId: notebookId,
        role: 'user',
        content: userMessage,
        context: chatContext
      });
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  const handleQuickQuestion = (question: string) => {
    setMessage(question);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Show loading state if no notebookId
  if (!notebookId) {
    return (
      <div className="flex flex-col h-full">
        <div className="p-4 border-b bg-gray-50">
          <div className="flex items-center space-x-2">
            <IconComponent className={`h-5 w-5 ${contextConfig.color}`} />
            <h3 className="font-semibold capitalize">{context} Assistant</h3>
            <Badge variant="outline" className="ml-auto">
              Setting up...
            </Badge>
          </div>
        </div>
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <Loader2 className="h-8 w-8 animate-spin text-gray-400 mx-auto mb-4" />
            <p className="text-gray-600">Setting up your consultation session...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-full">
      {/* Context Header */}
      <div className="p-4 border-b bg-gray-50">
        <div className="flex items-center space-x-2">
          <IconComponent className={`h-5 w-5 ${contextConfig.color}`} />
          <h3 className="font-semibold capitalize">{context} Assistant</h3>
          <Badge variant="outline" className="ml-auto">
            AI Advisor
          </Badge>
        </div>
      </div>

      {/* Quick Questions */}
      {messages.length === 0 && (
        <div className="p-4 border-b">
          <p className="text-sm text-gray-600 mb-3">Quick questions to get started:</p>
          <div className="space-y-2">
            {contextConfig.quickQuestions.map((question, index) => (
              <Button
                key={index}
                variant="outline"
                size="sm"
                className="w-full text-left justify-start h-auto p-3 whitespace-normal"
                onClick={() => handleQuickQuestion(question)}
              >
                {question}
              </Button>
            ))}
          </div>
        </div>
      )}

      {/* Messages Area */}
      <ScrollArea className="flex-1 p-4" ref={scrollAreaRef}>
        <div className="space-y-4">
          {messages.length === 0 && (
            <div className="text-center py-8">
              <IconComponent className={`h-12 w-12 mx-auto mb-4 ${contextConfig.color}`} />
              <h3 className="text-lg font-semibold text-gray-700 mb-2">
                {context.charAt(0).toUpperCase() + context.slice(1)} Assistant Ready
              </h3>
              <p className="text-gray-500 max-w-md mx-auto">
                Ask me anything about {context} related to your farming needs. 
                I'm here to provide practical, actionable advice.
              </p>
            </div>
          )}
          
          {messages.map((msg) => {
            const isUser = msg.message.type === 'human';
            return (
              <div
                key={msg.id}
                className={cn(
                  "flex gap-3",
                  isUser ? 'flex-row-reverse' : 'flex-row'
                )}
              >
                <Avatar className="h-8 w-8">
                  <AvatarFallback className={
                    isUser 
                      ? 'bg-blue-100 text-blue-600' 
                      : 'bg-green-100 text-green-600'
                  }>
                    {isUser ? 'U' : 'AI'}
                  </AvatarFallback>
                </Avatar>
                <div
                  className={cn(
                    "max-w-[80%] space-y-1",
                    isUser ? 'items-end' : 'items-start'
                  )}
                >
                  <div
                    className={cn(
                      "rounded-lg px-4 py-2",
                      isUser
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-100 text-gray-900'
                    )}
                  >
                    {!isUser ? (
                      <MarkdownRenderer 
                        content={msg.message.content}
                        isUserMessage={false}
                      />
                    ) : (
                      <p className="text-sm whitespace-pre-wrap">
                        {typeof msg.message.content === 'string' 
                          ? msg.message.content 
                          : ''}
                      </p>
                    )}
                  </div>
                  <p className="text-xs text-gray-500 px-1">
                    {new Date().toLocaleTimeString()}
                  </p>
                </div>
              </div>
            );
          })}
          
          {isSending && (
            <div className="flex gap-3">
              <Avatar className="h-8 w-8">
                <AvatarFallback className="bg-green-100 text-green-600">
                  AI
                </AvatarFallback>
              </Avatar>
              <div className="bg-gray-100 rounded-lg px-4 py-2">
                <div className="flex items-center space-x-2">
                  <Loader2 className="h-4 w-4 animate-spin" />
                  <span className="text-sm text-gray-600">Thinking...</span>
                </div>
              </div>
            </div>
          )}
        </div>
      </ScrollArea>

      {/* Input Area */}
      <div className="p-4 border-t">
        <div className="flex space-x-2">
          <Button
            variant="outline"
            size="icon"
            onClick={() => setIsRecording(!isRecording)}
            className={cn(
              isRecording && "bg-red-100 text-red-600"
            )}
          >
            <Mic className="h-4 w-4" />
          </Button>
          <Input
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={`Ask about ${context}...`}
            className="flex-1"
            disabled={isSending}
          />
          <Button
            onClick={handleSendMessage}
            disabled={!message.trim() || isSending}
          >
            <Send className="h-4 w-4" />
          </Button>
        </div>
        <p className="text-xs text-gray-500 mt-2 text-center">
          Specialized {context} advice powered by AI4AgriWeather
        </p>
      </div>
    </div>
  );
}
</file>

<file path="src/features/chat/components/CitationButton.tsx">
import React from 'react';
import { Button } from '@/shared/components/ui/button';

interface CitationButtonProps {
  chunkIndex: number;
  onClick: () => void;
  className?: string;
}

const CitationButton = ({ chunkIndex, onClick, className = '' }: CitationButtonProps) => {
  return (
    <Button
      variant="outline"
      size="sm"
      onClick={onClick}
      className={`inline-flex items-center justify-center w-6 h-6 p-0 ml-1 text-xs font-medium text-blue-600 border-blue-300 hover:bg-blue-50 hover:border-blue-400 rounded-full ${className}`}
    >
      {chunkIndex + 1}
    </Button>
  );
};

export default CitationButton;
</file>

<file path="src/features/chat/components/index.ts">
// Chat Components
export * from './CitationButton';
export * from './MarkdownRenderer';
export * from './SourceContentViewer';
export * from './SourceViewer';
export * from './AgriChat';
export * from './AgricultureChatArea';
</file>

<file path="src/features/chat/components/MarkdownRenderer.tsx">
import React from 'react';
import DOMPurify from 'dompurify';
import { MessageSegment, Citation } from '@/types/message';
import CitationButton from './CitationButton';

interface MarkdownRendererProps {
  content: string | { segments: MessageSegment[]; citations: Citation[] };
  className?: string;
  onCitationClick?: (citation: Citation) => void;
  isUserMessage?: boolean;
}

// Configure DOMPurify for safe markdown rendering
const DOMPURIFY_CONFIG = {
  ALLOWED_TAGS: ['strong', 'em', 'b', 'i', 'p', 'br', 'span', 'div', 'a', 'code', 'pre', 'blockquote', 'ul', 'ol', 'li', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
  ALLOWED_ATTR: ['href', 'target', 'rel', 'class'],
  ALLOW_DATA_ATTR: false,
  RETURN_DOM: false,
  RETURN_DOM_FRAGMENT: false,
  SAFE_FOR_TEMPLATES: true,
  // Prevent window.open and other potentially dangerous features
  ADD_ATTR: ['target'],
  // Force all links to open in new tab with proper security
  FORCE_BODY: false,
  // Remove dangerous schemes
  ALLOWED_URI_REGEXP: /^(?:(?:https?|mailto):|[^a-z]|[a-z+.-]+(?:[^a-z+.\-:]|$))/i
};

// Helper function to sanitize text
const sanitizeText = (text: string): string => {
  return DOMPurify.sanitize(text, DOMPURIFY_CONFIG);
};

const MarkdownRenderer = ({ content, className = '', onCitationClick, isUserMessage = false }: MarkdownRendererProps) => {
  // Handle enhanced content with citations
  if (typeof content === 'object' && 'segments' in content) {
    return (
      <div className={className}>
        {processMarkdownWithCitations(content.segments, content.citations, onCitationClick, isUserMessage)}
      </div>
    );
  }

  // For legacy string content, convert to simple format
  const segments: MessageSegment[] = [{ text: typeof content === 'string' ? content : '' }];
  const citations: Citation[] = [];
  
  return (
    <div className={className}>
      {processMarkdownWithCitations(segments, citations, onCitationClick, isUserMessage)}
    </div>
  );
};

// Function to process markdown with citations inline
const processMarkdownWithCitations = (
  segments: MessageSegment[], 
  citations: Citation[], 
  onCitationClick?: (citation: Citation) => void,
  isUserMessage: boolean = false
) => {
  // For user messages, render as inline content without paragraph breaks
  if (isUserMessage) {
    return (
      <span>
        {segments.map((segment, index) => (
          <span key={index}>
            {processInlineMarkdown(segment.text)}
            {segment.citation_id && onCitationClick && (
              <CitationButton
                chunkIndex={(() => {
                  const citation = citations.find(c => c.citation_id === segment.citation_id);
                  return citation?.chunk_index || 0;
                })()}
                onClick={() => {
                  const citation = citations.find(c => c.citation_id === segment.citation_id);
                  if (citation) {
                    onCitationClick(citation);
                  }
                }}
              />
            )}
          </span>
        ))}
      </span>
    );
  }

  // For AI messages, treat each segment as a potential paragraph
  const paragraphs: JSX.Element[] = [];
  
  segments.forEach((segment, segmentIndex) => {
    const citation = segment.citation_id ? citations.find(c => c.citation_id === segment.citation_id) : undefined;
    
    // Sanitize segment text before processing
    const sanitizedSegmentText = sanitizeText(segment.text);
    
    // Split segment text by double line breaks to handle multiple paragraphs within a segment
    const paragraphTexts = sanitizedSegmentText.split('\n\n').filter(text => text.trim());
    
    paragraphTexts.forEach((paragraphText, paragraphIndex) => {
      // Process the paragraph text for markdown formatting
      const processedContent = processTextWithMarkdown(paragraphText.trim());
      
      paragraphs.push(
        <p key={`${segmentIndex}-${paragraphIndex}`} className="mb-4 leading-relaxed">
          {processedContent}
          {/* Add citation at the end of the paragraph if this is the last paragraph of the segment */}
          {paragraphIndex === paragraphTexts.length - 1 && citation && onCitationClick && (
            <CitationButton
              chunkIndex={citation.chunk_index || 0}
              onClick={() => onCitationClick(citation)}
            />
          )}
        </p>
      );
    });
  });
  
  return paragraphs;
};

// Helper function to process text with markdown formatting (bold, line breaks)
const processTextWithMarkdown = (text: string) => {
  // Sanitize the input text first
  const sanitizedText = sanitizeText(text);
  const lines = sanitizedText.split('\n');
  
  return lines.map((line, lineIndex) => {
    const parts = line.split(/(\*\*.*?\*\*|__.*?__)/g);
    
    const processedLine = parts.map((part, partIndex) => {
      if (part.match(/^\*\*(.*)\*\*$/)) {
        const boldText = part.replace(/^\*\*(.*)\*\*$/, '$1');
        // Sanitize the extracted bold text content
        const sanitizedBoldText = sanitizeText(boldText);
        return <strong key={partIndex}>{sanitizedBoldText}</strong>;
      } else if (part.match(/^__(.*__)$/)) {
        const boldText = part.replace(/^__(.*__)$/, '$1');
        // Sanitize the extracted bold text content
        const sanitizedBoldText = sanitizeText(boldText);
        return <strong key={partIndex}>{sanitizedBoldText}</strong>;
      } else {
        // For regular text, we already sanitized it above
        return part;
      }
    });

    return (
      <span key={lineIndex}>
        {processedLine}
        {lineIndex < lines.length - 1 && <br />}
      </span>
    );
  });
};

// Function to process markdown inline without creating paragraph breaks
const processInlineMarkdown = (text: string) => {
  // Sanitize the input text first
  const sanitizedText = sanitizeText(text);
  const parts = sanitizedText.split(/(\*\*.*?\*\*|__.*?__)/g);
  
  return parts.map((part, partIndex) => {
    if (part.match(/^\*\*(.*)\*\*$/)) {
      const boldText = part.replace(/^\*\*(.*)\*\*$/, '$1');
      // Sanitize the extracted bold text content
      const sanitizedBoldText = sanitizeText(boldText);
      return <strong key={partIndex}>{sanitizedBoldText}</strong>;
    } else if (part.match(/^__(.*__)$/)) {
      const boldText = part.replace(/^__(.*__)$/, '$1');
      // Sanitize the extracted bold text content
      const sanitizedBoldText = sanitizeText(boldText);
      return <strong key={partIndex}>{sanitizedBoldText}</strong>;
    } else {
      // Replace line breaks with spaces for inline rendering
      // The text is already sanitized above
      return part.replace(/\n/g, ' ');
    }
  });
};

export default MarkdownRenderer;
</file>

<file path="src/features/chat/components/SourceContentViewer.tsx">
import React, { useEffect, useRef, useState } from 'react';
import { ScrollArea } from '@/shared/components/ui/scroll-area';
import { Badge } from '@/shared/components/ui/badge';
import { Citation } from '@/types/message';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/shared/components/ui/accordion';

interface SourceContentViewerProps {
  citation: Citation | null;
  sourceContent?: string;
  sourceSummary?: string;
  sourceUrl?: string;
  className?: string;
  isOpenedFromSourceList?: boolean;
}

const SourceContentViewer = ({ 
  citation, 
  sourceContent, 
  sourceSummary,
  sourceUrl,
  className = '',
  isOpenedFromSourceList = false
}: SourceContentViewerProps) => {
  const highlightedContentRef = useRef<HTMLDivElement>(null);
  const scrollAreaViewportRef = useRef<HTMLDivElement>(null);
  
  // Control accordion state based on how the viewer was opened
  const [accordionValue, setAccordionValue] = useState<string>(
    isOpenedFromSourceList ? "guide" : ""
  );

  // Check if we have valid citation line data (indicating a real citation click)
  const hasValidCitationLines = citation && 
    typeof citation.chunk_lines_from === 'number' && 
    typeof citation.chunk_lines_to === 'number' &&
    citation.chunk_lines_from > 0;

  console.log('SourceContentViewer: Render with citation', {
    citationId: citation?.citation_id,
    sourceId: citation?.source_id,
    hasValidCitationLines,
    isOpenedFromSourceList,
    chunkLinesFrom: citation?.chunk_lines_from,
    chunkLinesTo: citation?.chunk_lines_to
  });

  // Auto-scroll to highlighted content when citation changes and has valid line data
  useEffect(() => {
    console.log('SourceContentViewer: Auto-scroll effect triggered', {
      hasValidCitationLines,
      citationId: citation?.citation_id,
      hasHighlightedRef: !!highlightedContentRef.current,
      hasScrollAreaRef: !!scrollAreaViewportRef.current
    });

    if (hasValidCitationLines && highlightedContentRef.current && scrollAreaViewportRef.current) {
      console.log('SourceContentViewer: Starting auto-scroll process');
      
      // Increased delay to ensure DOM has fully updated
      const timer = setTimeout(() => {
        if (highlightedContentRef.current && scrollAreaViewportRef.current) {
          console.log('SourceContentViewer: Executing auto-scroll');
          
          // Find the actual viewport element within the ScrollArea
          const scrollAreaElement = scrollAreaViewportRef.current;
          const viewport = scrollAreaElement.querySelector('[data-radix-scroll-area-viewport]') as HTMLElement;
          
          if (viewport && highlightedContentRef.current) {
            const highlightedElement = highlightedContentRef.current;
            
            console.log('SourceContentViewer: Scroll calculation', {
              highlightedOffsetTop: highlightedElement.offsetTop,
              highlightedHeight: highlightedElement.clientHeight,
              viewportHeight: viewport.clientHeight,
              currentScrollTop: viewport.scrollTop
            });
            
            // Calculate the scroll position to center the highlighted content
            const scrollTop = highlightedElement.offsetTop - (viewport.clientHeight / 2) + (highlightedElement.clientHeight / 2);
            const targetScrollTop = Math.max(0, scrollTop);
            
            console.log('SourceContentViewer: Scrolling to position', { targetScrollTop });
            
            viewport.scrollTo({
              top: targetScrollTop,
              behavior: 'smooth'
            });
          } else {
            console.log('SourceContentViewer: Viewport or highlighted element not found', {
              viewport: !!viewport,
              highlightedElement: !!highlightedContentRef.current
            });
          }
        }
      }, 300); // Increased delay for better reliability

      return () => clearTimeout(timer);
    }
  }, [citation?.citation_id, citation?.chunk_lines_from, citation?.chunk_lines_to, citation?.source_id, hasValidCitationLines]);

  // Close guide when a real citation is clicked (has valid line data)
  useEffect(() => {
    if (hasValidCitationLines) {
      console.log('SourceContentViewer: Closing guide for real citation');
      setAccordionValue("");
    }
  }, [hasValidCitationLines]);

  if (!citation || !sourceContent) {
    return (
      <div className="p-4 text-center text-gray-500">
        <p className="text-sm">Select a citation to view source content</p>
      </div>
    );
  }

  const getSourceIcon = (type: string) => {
    const iconMap: Record<string, string> = {
      'pdf': '/file-types/PDF.svg',
      'text': '/file-types/TXT.png',
      'website': '/file-types/WEB.svg',
      'youtube': '/file-types/MP3.png',
      'audio': '/file-types/MP3.png',
      'doc': '/file-types/DOC.png',
      'multiple-websites': '/file-types/WEB.svg',
      'copied-text': '/file-types/TXT.png'
    };

    const iconUrl = iconMap[type] || iconMap['text']; // fallback to TXT icon
    
    return (
      <img 
        src={iconUrl} 
        alt={`${type} icon`} 
        className="w-full h-full object-contain"
        onError={(e) => {
          // Fallback to a simple text indicator if image fails to load
          const target = e.target as HTMLImageElement;
          target.style.display = 'none';
          target.parentElement!.innerHTML = '📄';
        }}
      />
    );
  };

  // Split content into lines for highlighting
  const lines = sourceContent.split('\n');
  
  // Determine the highlight range based on whether we have valid citation line data
  let startLine: number;
  let endLine: number;
  
  if (hasValidCitationLines) {
    // For real citations with valid line data, highlight the specific lines
    startLine = citation.chunk_lines_from!;
    endLine = citation.chunk_lines_to!;
    console.log('SourceContentViewer: Will highlight lines', { startLine, endLine });
  } else {
    // For source list clicks or citations without line data, don't highlight
    startLine = -1;
    endLine = -1;
    console.log('SourceContentViewer: No highlighting (no valid line data)');
  }

  const renderHighlightedContent = () => {
    return lines.map((line, index) => {
      const lineNumber = index + 1;
      const isHighlighted = startLine > 0 && lineNumber >= startLine && lineNumber <= endLine;
      const isFirstHighlightedLine = isHighlighted && lineNumber === startLine;
      
      return (
        <div
          key={index}
          ref={isFirstHighlightedLine ? highlightedContentRef : null}
          className={`py-2 px-3 rounded leading-relaxed ${
            isHighlighted 
              ? 'border-l-4' 
              : 'hover:bg-gray-50'
          }`}
          style={isHighlighted ? { 
            backgroundColor: '#eadef9', 
            borderLeftColor: '#9333ea' 
          } : {}}
        >
          <span className={isHighlighted ? 'font-medium' : ''}>{line}</span>
        </div>
      );
    });
  };

  return (
    <div className={`flex flex-col h-full overflow-hidden ${className}`}>
      {/* Header */}
      <div className="p-4 border-b border-gray-200 flex-shrink-0">
        <div className="flex items-center space-x-2 mb-2">
          <div className="w-6 h-6 bg-white rounded border border-gray-200 flex items-center justify-center flex-shrink-0 overflow-hidden">
            {getSourceIcon(citation.source_type)}
          </div>
          <span className="font-medium text-gray-900 truncate">{citation.source_title}</span>
        </div>
      </div>

      {/* Source Guide Accordion */}
      {sourceSummary && (
        <div className="border-b border-gray-200 flex-shrink-0">
          <Accordion type="single" value={accordionValue} onValueChange={setAccordionValue} collapsible>
            <AccordionItem value="guide" className="border-0">
              <AccordionTrigger 
                className="px-4 py-3 text-sm font-medium hover:no-underline hover:bg-blue-50" 
                style={{ color: '#234776' }}
                chevronColor="#234776"
              >
                <div className="flex items-center space-x-2">
                  <svg xmlns="http://www.w3.org/2000/svg" height="16px" viewBox="0 -960 960 960" width="16px" fill="#234776">
                    <path d="M166.67-120.67 120-167.33l317.67-318L254-531l194-121-16.33-228 175 147L818-818.33l-85.67 211.66L880-432l-228.67-16.67-120.66 194L485-438.33 166.67-120.67Zm24.66-536L120-728l72-72 71.33 71.33-72 72Zm366.34 233 58-94.33 111 8.33-72-85 41.66-102.66-102.66 41.66-85-71.66L517-616.67l-94.33 59 108 26.67 27 107.33Zm171 303.67-71.34-72 71.34-71.33 71.33 72L728.67-120ZM575-576Z"/>
                  </svg>
                  <span>Source guide</span>
                </div>
              </AccordionTrigger>
              <AccordionContent className="px-4 pb-4">
                <div className="text-sm text-gray-700 space-y-4">
                  <div>
                    <h4 className="font-medium mb-2">Summary</h4>
                    <p className="leading-relaxed">{sourceSummary}</p>
                  </div>
                  
                  {/* Show URL for website sources */}
                  {citation.source_type === 'website' && sourceUrl && (
                    <div>
                      <h4 className="font-medium mb-2">URL</h4>
                      <a 
                        href={sourceUrl} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="text-blue-600 hover:text-blue-800 hover:underline break-all text-sm"
                      >
                        {sourceUrl}
                      </a>
                    </div>
                  )}
                </div>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </div>
      )}

      {/* Content */}
      <ScrollArea className="flex-1 h-full" ref={scrollAreaViewportRef}>
        <div className="p-4">
          <div className="prose prose-gray max-w-none space-y-1">
            {renderHighlightedContent()}
          </div>
        </div>
      </ScrollArea>
    </div>
  );
};

export default SourceContentViewer;
</file>

<file path="src/features/chat/components/SourceViewer.tsx">
import React from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/shared/components/ui/dialog';
import { Badge } from '@/shared/components/ui/badge';
import { ScrollArea } from '@/shared/components/ui/scroll-area';
import { Citation } from '@/types/message';

interface SourceViewerProps {
  citation: Citation | null;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

const SourceViewer = ({ citation, open, onOpenChange }: SourceViewerProps) => {
  if (!citation) return null;

  const getSourceIcon = (type: string) => {
    switch (type) {
      case 'pdf':
        return '📄';
      case 'text':
        return '📝';
      case 'website':
        return '🌐';
      case 'youtube':
        return '📺';
      case 'audio':
        return '🎵';
      default:
        return '📄';
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <span className="text-xl">{getSourceIcon(citation.source_type)}</span>
            <span>{citation.source_title}</span>
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4">
          <div className="flex items-center space-x-2">
            <Badge variant="outline" className="text-xs">
              Citation {citation.citation_id}
            </Badge>
            {citation.chunk_lines_from && citation.chunk_lines_to && (
              <Badge variant="outline" className="text-xs">
                Lines {citation.chunk_lines_from}-{citation.chunk_lines_to}
              </Badge>
            )}
          </div>
          
          {citation.excerpt && (
            <div className="border-l-4 border-blue-500 pl-4">
              <h4 className="font-medium text-gray-900 mb-2">Source Excerpt</h4>
              <ScrollArea className="max-h-64">
                <p className="text-sm text-gray-700 leading-relaxed">
                  {citation.excerpt}
                </p>
              </ScrollArea>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default SourceViewer;
</file>

<file path="src/features/chat/hooks/index.ts">
// Chat Hooks
export { useChatMessages } from './useChatMessages';
</file>

<file path="src/features/chat/hooks/useChatMessages.tsx">
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/features/authentication';
import { EnhancedChatMessage, Citation, MessageSegment } from '@/types/message';
import { ChatContext, N8nChatResponse } from '@/types/chat';
import { useToast } from '@/shared/hooks/use-toast';
import { useEffect, useRef, useCallback } from 'react';

// Type for the expected message structure from n8n_chat_histories
interface N8nMessageFormat {
  type: 'human' | 'ai';
  content: string | {
    segments: Array<{ text: string; citation_id?: number }>;
    citations: Array<{
      citation_id: number;
      source_id: string;
      source_title: string;
      source_type: string;
      page_number?: number;
      chunk_index?: number;
      excerpt?: string;
    }>;
  };
  additional_kwargs?: any;
  response_metadata?: any;
  tool_calls?: any[];
  invalid_tool_calls?: any[];
}

// Helper function to safely parse JSON content
const safeJsonParse = <T,>(content: string, fallback: T): T => {
  try {
    return JSON.parse(content) as T;
  } catch (error) {
    console.warn('Failed to parse JSON:', error);
    return fallback;
  }
};

// Helper function to extract text from various content formats
const extractTextContent = (content: any): string => {
  if (typeof content === 'string') return content;
  if (typeof content === 'object' && content !== null) {
    if ('segments' in content && Array.isArray(content.segments)) {
      return content.segments.map((s: any) => s.text || '').join(' ');
    }
    if ('output' in content && Array.isArray(content.output)) {
      return content.output.map((o: any) => o.text || '').join(' ');
    }
    if ('text' in content) return content.text;
  }
  return 'Unable to parse message content';
};

const transformMessage = (item: any, sourceMap: Map<string, any>): EnhancedChatMessage => {
  console.log('Processing message item:', item);
  
  // Handle the message format based on your JSON examples
  let transformedMessage: EnhancedChatMessage['message'];
  
  // Check if message is an object and has the expected structure
  if (item.message && 
      typeof item.message === 'object' && 
      !Array.isArray(item.message) &&
      'type' in item.message && 
      'content' in item.message) {
    
    // Type assertion with proper checking
    const messageObj = item.message as unknown as N8nMessageFormat;
    
    // Check if this is an AI message with JSON content that needs parsing
    if (messageObj.type === 'ai' && typeof messageObj.content === 'string') {
      try {
        const parsedContent = safeJsonParse<N8nChatResponse['content']>(
          messageObj.content,
          { output: [{ text: messageObj.content }] }
        );
        
        if (parsedContent.output && Array.isArray(parsedContent.output)) {
          // Transform the parsed content into segments and citations
          const segments: MessageSegment[] = [];
          const citations: Citation[] = [];
          let citationIdCounter = 1;
          
          parsedContent.output.forEach((outputItem) => {
            // Add the text segment
            segments.push({
              text: outputItem.text,
              citation_id: outputItem.citations && outputItem.citations.length > 0 ? citationIdCounter : undefined
            });
            
            // Process citations if they exist
            if (outputItem.citations && outputItem.citations.length > 0) {
              outputItem.citations.forEach((citation) => {
                const sourceInfo = sourceMap.get(citation.chunk_source_id);
                citations.push({
                  citation_id: citationIdCounter,
                  source_id: citation.chunk_source_id,
                  source_title: sourceInfo?.title || 'Unknown Source',
                  source_type: sourceInfo?.type || 'pdf',
                  chunk_lines_from: citation.chunk_lines_from,
                  chunk_lines_to: citation.chunk_lines_to,
                  chunk_index: citation.chunk_index,
                  excerpt: `Lines ${citation.chunk_lines_from}-${citation.chunk_lines_to}`
                });
              });
              citationIdCounter++;
            }
          });
          
          transformedMessage = {
            type: 'ai',
            content: {
              segments,
              citations
            },
            additional_kwargs: messageObj.additional_kwargs,
            response_metadata: messageObj.response_metadata,
            tool_calls: messageObj.tool_calls,
            invalid_tool_calls: messageObj.invalid_tool_calls
          };
        } else {
          // Fallback for AI messages that don't match expected format
          transformedMessage = {
            type: 'ai',
            content: messageObj.content,
            additional_kwargs: messageObj.additional_kwargs,
            response_metadata: messageObj.response_metadata,
            tool_calls: messageObj.tool_calls,
            invalid_tool_calls: messageObj.invalid_tool_calls
          };
        }
      } catch (parseError) {
        console.log('Failed to parse AI content as JSON, treating as plain text:', parseError);
        // If parsing fails, treat as regular string content
        transformedMessage = {
          type: 'ai',
          content: messageObj.content,
          additional_kwargs: messageObj.additional_kwargs,
          response_metadata: messageObj.response_metadata,
          tool_calls: messageObj.tool_calls,
          invalid_tool_calls: messageObj.invalid_tool_calls
        };
      }
    } else {
      // Handle non-AI messages or AI messages that don't need parsing
      transformedMessage = {
        type: messageObj.type === 'human' ? 'human' : 'ai',
        content: messageObj.content || 'Empty message',
        additional_kwargs: messageObj.additional_kwargs,
        response_metadata: messageObj.response_metadata,
        tool_calls: messageObj.tool_calls,
        invalid_tool_calls: messageObj.invalid_tool_calls
      };
    }
  } else if (typeof item.message === 'string') {
    // Handle case where message is just a string
    transformedMessage = {
      type: 'human',
      content: item.message
    };
  } else {
    // Fallback for any other cases
    transformedMessage = {
      type: 'human',
      content: 'Unable to parse message'
    };
  }

  console.log('Transformed message:', transformedMessage);

  return {
    id: item.id,
    session_id: item.session_id,
    message: transformedMessage
  };
};

export const useChatMessages = (notebookId?: string) => {
  const { user } = useAuth();
  const queryClient = useQueryClient();
  const { toast } = useToast();

  const {
    data: messages = [],
    isLoading,
    error,
  } = useQuery({
    queryKey: ['chat-messages', notebookId],
    queryFn: async () => {
      if (!notebookId) return [];
      
      const { data, error } = await supabase
        .from('n8n_chat_histories')
        .select('*')
        .eq('session_id', notebookId)
        .order('id', { ascending: true });

      if (error) throw error;
      
      // Also fetch sources to get proper source titles
      const { data: sourcesData } = await supabase
        .from('sources')
        .select('id, title, type')
        .eq('notebook_id', notebookId);
      
      const sourceMap = new Map(sourcesData?.map(s => [s.id, s]) || []);
      
      console.log('Raw data from database:', data);
      console.log('Sources map:', sourceMap);
      
      // Transform the data to match our expected format
      return data.map((item) => transformMessage(item, sourceMap));
    },
    enabled: !!notebookId && !!user,
    refetchOnMount: true,
    refetchOnReconnect: true,
  });

  // Track connection status
  const connectionRetryCount = useRef(0);
  const maxRetries = 3;

  // Set up Realtime subscription with retry logic
  useEffect(() => {
    if (!notebookId || !user) return;

    console.log('Setting up Realtime subscription for notebook:', notebookId);

    const setupSubscription = () => {
      const channel = supabase
        .channel(`chat-messages-${notebookId}`)
        .on(
          'postgres_changes',
          {
            event: 'INSERT',
            schema: 'public',
            table: 'n8n_chat_histories',
            filter: `session_id=eq.${notebookId}`
          },
          async (payload) => {
          console.log('Realtime: New message received:', payload);
          
          // Fetch sources for proper transformation
          const { data: sourcesData } = await supabase
            .from('sources')
            .select('id, title, type')
            .eq('notebook_id', notebookId);
          
          const sourceMap = new Map(sourcesData?.map(s => [s.id, s]) || []);
          
          // Transform the new message
          const newMessage = transformMessage(payload.new, sourceMap);
          
          // Update the query cache with the new message
          queryClient.setQueryData(['chat-messages', notebookId], (oldMessages: EnhancedChatMessage[] = []) => {
            // Check if message already exists to prevent duplicates
            const messageExists = oldMessages.some(msg => msg.id === newMessage.id);
            if (messageExists) {
              console.log('Message already exists, skipping:', newMessage.id);
              return oldMessages;
            }
            
            console.log('Adding new message to cache:', newMessage);
            return [...oldMessages, newMessage];
          });
        }
      )
      .subscribe((status) => {
        console.log('Realtime subscription status:', status);
        
        if (status === 'SUBSCRIBED') {
          connectionRetryCount.current = 0;
          console.log('Successfully connected to Realtime');
        } else if (status === 'CHANNEL_ERROR' || status === 'TIMED_OUT') {
          console.error('Realtime connection error:', status);
          
          if (connectionRetryCount.current < maxRetries) {
            connectionRetryCount.current++;
            console.log(`Retrying connection (${connectionRetryCount.current}/${maxRetries})...`);
            
            setTimeout(() => {
              supabase.removeChannel(channel);
              setupSubscription();
            }, 2000 * connectionRetryCount.current);
          } else {
            toast({
              title: "Connection Error",
              description: "Unable to connect to chat service. Please refresh the page.",
              variant: "destructive",
            });
          }
        }
      });

      return channel;
    };

    const channel = setupSubscription();

    return () => {
      console.log('Cleaning up Realtime subscription');
      if (channel) {
        supabase.removeChannel(channel);
      }
    };
  }, [notebookId, user, queryClient, toast]);

  const sendMessage = useMutation({
    mutationFn: async (messageData: {
      notebookId: string;
      role: 'user' | 'assistant';
      content: string;
      context?: ChatContext;
    }) => {
      if (!user) throw new Error('User not authenticated');

      // Call the enhanced edge function
      const { data, error } = await supabase.functions.invoke('send-chat-message', {
        body: {
          session_id: messageData.notebookId,
          message: messageData.content,
          user_id: user.id,
          context: messageData.context
        }
      });

      if (error) {
        console.error('Edge function error:', error);
        throw new Error(error.message || 'Failed to send message');
      }

      if (data?.error) {
        console.error('Webhook error:', data.error);
        throw new Error(data.error);
      }

      return data;
    },
    onSuccess: (data) => {
      console.log('Message sent successfully:', data);
      // The AI response will appear via Realtime subscription
    },
    onError: (error) => {
      console.error('Failed to send message:', error);
      toast({
        title: "Error sending message",
        description: error instanceof Error ? error.message : "Failed to send message. Please try again.",
        variant: "destructive",
      });
    },
  });

  const deleteChatHistory = useMutation({
    mutationFn: async (notebookId: string) => {
      if (!user) throw new Error('User not authenticated');

      console.log('Deleting chat history for notebook:', notebookId);
      
      const { error } = await supabase
        .from('n8n_chat_histories')
        .delete()
        .eq('session_id', notebookId);

      if (error) {
        console.error('Error deleting chat history:', error);
        throw error;
      }
      
      console.log('Chat history deleted successfully');
      return notebookId;
    },
    onSuccess: (notebookId) => {
      console.log('Chat history cleared for notebook:', notebookId);
      toast({
        title: "Chat history cleared",
        description: "All messages have been deleted successfully.",
      });
      
      // Clear the query data and refetch to confirm
      queryClient.setQueryData(['chat-messages', notebookId], []);
      queryClient.invalidateQueries({
        queryKey: ['chat-messages', notebookId]
      });
    },
    onError: (error) => {
      console.error('Failed to delete chat history:', error);
      toast({
        title: "Error",
        description: "Failed to clear chat history. Please try again.",
        variant: "destructive",
      });
    }
  });

  return {
    messages,
    isLoading,
    error,
    sendMessage: sendMessage.mutate,
    sendMessageAsync: sendMessage.mutateAsync,
    isSending: sendMessage.isPending,
    deleteChatHistory: deleteChatHistory.mutate,
    isDeletingChatHistory: deleteChatHistory.isPending,
  };
};
</file>

<file path="src/features/chat/services/index.ts">
// Chat Services - placeholder for future chat API services
export {};
</file>

<file path="src/features/chat/types/index.ts">
// Chat Types - placeholder for future chat types
export {};
</file>

<file path="src/features/chat/index.ts">
// Chat Feature Exports
export * from './components';
export * from './hooks';
export * from './services';
export * from './types';
</file>

<file path="src/features/crops/components/CropCard.tsx">
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card';
import { Badge } from '@/shared/components/ui/badge';
import { Progress } from '@/shared/components/ui/progress';
import { Sprout, Sun, Wheat, Package, Clock } from 'lucide-react';
import { Crop } from '../types';

interface CropCardProps {
  crop: Crop;
  onSelect?: (crop: Crop) => void;
}

export function CropCard({ crop, onSelect }: CropCardProps) {
  const getStageIcon = (stage: Crop['stage']) => {
    switch (stage) {
      case 'germination':
        return <Sprout className="h-4 w-4" />;
      case 'vegetative':
        return <Sun className="h-4 w-4" />;
      case 'flowering':
        return <Wheat className="h-4 w-4" />;
      case 'maturity':
        return <Package className="h-4 w-4" />;
    }
  };

  const getHealthColor = (health: Crop['health']) => {
    switch (health) {
      case 'excellent':
        return 'text-green-600 bg-green-50';
      case 'good':
        return 'text-blue-600 bg-blue-50';
      case 'warning':
        return 'text-orange-600 bg-orange-50';
      case 'critical':
        return 'text-red-600 bg-red-50';
    }
  };

  const getProgressPercentage = (planted: string, harvest: string) => {
    const plantedDate = new Date(planted);
    const harvestDate = new Date(harvest);
    const today = new Date();
    const totalDays = harvestDate.getTime() - plantedDate.getTime();
    const daysPassed = today.getTime() - plantedDate.getTime();
    return Math.min(100, Math.max(0, (daysPassed / totalDays) * 100));
  };

  return (
    <Card 
      className="hover:shadow-lg transition-shadow cursor-pointer"
      onClick={() => onSelect?.(crop)}
    >
      <CardHeader>
        <div className="flex items-start justify-between">
          <div>
            <CardTitle className="text-lg">{crop.name}</CardTitle>
            <CardDescription>{crop.localName} • {crop.variety}</CardDescription>
          </div>
          <Badge className={getHealthColor(crop.health)}>
            {crop.health}
          </Badge>
        </div>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">Area</span>
            <span className="font-medium">{crop.area} ha</span>
          </div>
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">Stage</span>
            <div className="flex items-center gap-1">
              {getStageIcon(crop.stage)}
              <span className="font-medium capitalize">{crop.stage}</span>
            </div>
          </div>
          <div>
            <div className="flex items-center justify-between text-sm mb-1">
              <span className="text-gray-600">Progress</span>
              <span className="font-medium">
                {Math.round(getProgressPercentage(crop.plantedDate, crop.expectedHarvest))}%
              </span>
            </div>
            <Progress 
              value={getProgressPercentage(crop.plantedDate, crop.expectedHarvest)} 
              className="h-2"
            />
          </div>
          <div className="pt-2 border-t">
            <p className="text-sm text-gray-600 mb-1">Next Action:</p>
            <p className="text-sm font-medium flex items-center gap-1">
              <Clock className="h-3 w-3" />
              {crop.nextAction}
            </p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/features/crops/components/CropGuidesList.tsx">
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/shared/components/ui/card';
import { Button } from '@/shared/components/ui/button';
import { CropGuide } from './types';

interface CropGuidesListProps {
  cropGuides: Record<string, CropGuide>;
}

export function CropGuidesList({ cropGuides }: CropGuidesListProps) {
  return (
    <div className="grid md:grid-cols-2 gap-6">
      {Object.entries(cropGuides).map(([crop, guide]) => (
        <Card key={crop}>
          <CardHeader>
            <CardTitle className="capitalize">{crop} Growing Guide</CardTitle>
          </CardHeader>
          <CardContent>
            <dl className="space-y-3">
              <div className="flex justify-between">
                <dt className="text-sm text-gray-600">Season:</dt>
                <dd className="text-sm font-medium">{guide.season}</dd>
              </div>
              <div className="flex justify-between">
                <dt className="text-sm text-gray-600">Water Needs:</dt>
                <dd className="text-sm font-medium">{guide.waterNeeds}</dd>
              </div>
              <div className="flex justify-between">
                <dt className="text-sm text-gray-600">Soil Type:</dt>
                <dd className="text-sm font-medium">{guide.soilType}</dd>
              </div>
              <div className="flex justify-between">
                <dt className="text-sm text-gray-600">Spacing:</dt>
                <dd className="text-sm font-medium">{guide.spacing}</dd>
              </div>
              <div>
                <dt className="text-sm text-gray-600 mb-1">Fertilizer:</dt>
                <dd className="text-sm font-medium">{guide.fertilizer}</dd>
              </div>
            </dl>
            <Button className="w-full mt-4" variant="outline">
              View Full Guide
            </Button>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}
</file>

<file path="src/features/crops/components/CropManagement.tsx">
import React from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/shared/components/ui/tabs';
import { Button } from '@/shared/components/ui/button';
import { Input } from '@/shared/components/ui/input';
import UnifiedHeader from '@/components/layout/UnifiedHeader';
import { Filter, Search } from 'lucide-react';
import { CropCard } from './CropCard';
import { CropSummaryStats } from './CropSummaryStats';
import { CropPlantingCalendar } from './CropPlantingCalendar';
import { CropGuidesList } from './CropGuidesList';
import { PestDiseaseManager } from './PestDiseaseManager';
import { useCropData } from '../hooks';


export function CropManagement() {
  const {
    crops,
    selectedCrop,
    setSelectedCrop,
    searchTerm,
    setSearchTerm,
    summaryStats,
    cropGuides,
    pestDiseases
  } = useCropData();

  return (
    <div className="min-h-screen bg-gradient-to-b from-green-50 to-emerald-50">
      <UnifiedHeader variant="full" />

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Search and Filter */}
        <div className="mb-6 flex gap-4">
          <div className="flex-1 relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder="Search crops..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
          <Button variant="outline">
            <Filter className="h-4 w-4 mr-2" />
            Filter
          </Button>
        </div>

        <Tabs defaultValue="overview" className="space-y-4">
          <TabsList>
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="calendar">Planting Calendar</TabsTrigger>
            <TabsTrigger value="guides">Crop Guides</TabsTrigger>
            <TabsTrigger value="pests">Pest & Disease</TabsTrigger>
          </TabsList>

          <TabsContent value="overview">
            <CropSummaryStats stats={summaryStats} />
            
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
              {crops.map((crop) => (
                <CropCard 
                  key={crop.id} 
                  crop={crop} 
                  onSelect={setSelectedCrop}
                />
              ))}
            </div>
          </TabsContent>

          <TabsContent value="calendar">
            <CropPlantingCalendar />
          </TabsContent>

          <TabsContent value="guides">
            <CropGuidesList cropGuides={cropGuides} />
          </TabsContent>

          <TabsContent value="pests">
            <PestDiseaseManager pestDiseases={pestDiseases} />
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
}
</file>

<file path="src/features/crops/components/CropPlantingCalendar.tsx">
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card';

export function CropPlantingCalendar() {
  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

  return (
    <Card>
      <CardHeader>
        <CardTitle>Planting Calendar</CardTitle>
        <CardDescription>
          Optimal planting and harvesting times for your region
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {/* Calendar header */}
          <div className="grid grid-cols-12 gap-2 text-xs">
            {months.map((month) => (
              <div key={month} className="text-center font-medium text-gray-600">
                {month}
              </div>
            ))}
          </div>
          
          {/* Maize planting season */}
          <div className="relative h-8 bg-gray-100 rounded">
            <div className="absolute left-[16.66%] right-[41.66%] h-full bg-green-400 rounded flex items-center justify-center">
              <span className="text-xs font-medium">Maize</span>
            </div>
          </div>
          
          {/* Rice planting season */}
          <div className="relative h-8 bg-gray-100 rounded">
            <div className="absolute left-[25%] right-[33.33%] h-full bg-blue-400 rounded flex items-center justify-center">
              <span className="text-xs font-medium">Rice</span>
            </div>
          </div>
          
          {/* Coffee harvest season */}
          <div className="relative h-8 bg-gray-100 rounded">
            <div className="absolute left-[75%] right-0 h-full bg-orange-400 rounded flex items-center justify-center">
              <span className="text-xs font-medium">Coffee Harvest</span>
            </div>
          </div>
        </div>
        
        <div className="mt-6 p-4 bg-blue-50 rounded-lg">
          <p className="text-sm text-blue-800">
            <strong>Tip:</strong> The calendar shows general planting windows. 
            Always check current weather conditions and soil moisture before planting.
          </p>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/features/crops/components/CropSummaryStats.tsx">
import React from 'react';
import { Card, CardContent } from '@/shared/components/ui/card';
import { Wheat, Sprout, TrendingUp, CheckCircle } from 'lucide-react';

interface CropSummaryStatsProps {
  stats: {
    totalArea: number;
    activeCrops: number;
    expectedYield: number;
    overallHealth: string;
  };
}

export function CropSummaryStats({ stats }: CropSummaryStatsProps) {
  return (
    <div className="grid md:grid-cols-4 gap-4 mb-6">
      <Card>
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Total Area</p>
              <p className="text-2xl font-bold">{stats.totalArea.toFixed(1)} ha</p>
            </div>
            <Wheat className="h-8 w-8 text-green-600" />
          </div>
        </CardContent>
      </Card>
      
      <Card>
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Active Crops</p>
              <p className="text-2xl font-bold">{stats.activeCrops}</p>
            </div>
            <Sprout className="h-8 w-8 text-blue-600" />
          </div>
        </CardContent>
      </Card>
      
      <Card>
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Expected Yield</p>
              <p className="text-2xl font-bold">{stats.expectedYield.toFixed(1)}t</p>
            </div>
            <TrendingUp className="h-8 w-8 text-orange-600" />
          </div>
        </CardContent>
      </Card>
      
      <Card>
        <CardContent className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-gray-600">Health Status</p>
              <p className="text-2xl font-bold">{stats.overallHealth}</p>
            </div>
            <CheckCircle className="h-8 w-8 text-green-600" />
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
</file>

<file path="src/features/crops/components/index.ts">
// Crops Components
export * from './CropCard';
export * from './CropGuidesList';
export * from './CropPlantingCalendar';
export * from './CropSummaryStats';
export * from './PestDiseaseManager';
export * from './CropManagement';
</file>

<file path="src/features/crops/components/PestDiseaseManager.tsx">
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card';
import { Button } from '@/shared/components/ui/button';
import { Bug, AlertTriangle } from 'lucide-react';
import { PestDisease } from './types';

interface PestDiseaseManagerProps {
  pestDiseases: PestDisease[];
}

export function PestDiseaseManager({ pestDiseases }: PestDiseaseManagerProps) {
  const getSeverityIcon = (severity: PestDisease['severity']) => {
    switch (severity) {
      case 'high':
        return <Bug className="h-8 w-8 text-red-500 mt-1" />;
      case 'medium':
        return <AlertTriangle className="h-8 w-8 text-orange-500 mt-1" />;
      case 'low':
        return <AlertTriangle className="h-8 w-8 text-yellow-500 mt-1" />;
    }
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Common Pests & Diseases</CardTitle>
        <CardDescription>
          Early detection and treatment recommendations
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {pestDiseases.map((item) => (
            <div key={item.id} className="flex items-start space-x-4 p-4 border rounded-lg">
              {getSeverityIcon(item.severity)}
              <div className="flex-1">
                <h4 className="font-semibold">{item.name}</h4>
                <p className="text-sm text-gray-600 mt-1">
                  Affects: {item.affects} • Season: {item.season}
                </p>
                <p className="text-sm mt-2">
                  {item.description}
                </p>
                <Button size="sm" variant="outline" className="mt-2">
                  View Treatment
                </Button>
              </div>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/features/crops/hooks/index.ts">
// Crops Hooks
export { useCropData } from './useCropData';
</file>

<file path="src/features/crops/hooks/useCropData.ts">
import { useState, useMemo } from 'react';
import { Crop, CropGuide, PestDisease } from '../types';

const mockCrops: Crop[] = [
  {
    id: '1',
    name: 'Maize',
    localName: 'Mahindi',
    plantedDate: '2024-03-15',
    expectedHarvest: '2024-07-15',
    area: 2.5,
    variety: 'H614D',
    stage: 'flowering',
    health: 'excellent',
    lastAction: 'Applied fertilizer',
    nextAction: 'Monitor for pests',
    yield: 4500
  },
  {
    id: '2',
    name: 'Coffee',
    localName: 'Kahawa',
    plantedDate: '2022-04-20',
    expectedHarvest: '2024-10-01',
    area: 1.5,
    variety: 'Arabica',
    stage: 'maturity',
    health: 'good',
    lastAction: 'Pruned branches',
    nextAction: 'Prepare for harvest',
    yield: 800
  },
  {
    id: '3',
    name: 'Rice',
    localName: 'Mchele',
    plantedDate: '2024-04-01',
    expectedHarvest: '2024-08-01',
    area: 3.0,
    variety: 'IR64',
    stage: 'vegetative',
    health: 'warning',
    lastAction: 'Irrigated field',
    nextAction: 'Apply pesticide',
    yield: 3200
  }
];

const cropGuides: Record<string, CropGuide> = {
  maize: {
    season: 'March - July',
    waterNeeds: '500-800mm',
    soilType: 'Well-drained loamy',
    spacing: '75cm x 25cm',
    fertilizer: 'DAP at planting, CAN at knee height'
  },
  coffee: {
    season: 'Year-round (harvest Oct-Dec)',
    waterNeeds: '1200-1500mm',
    soilType: 'Deep, well-drained volcanic',
    spacing: '2.5m x 2.5m',
    fertilizer: 'NPK 20:10:10 quarterly'
  },
  rice: {
    season: 'April - August',
    waterNeeds: '1200-1500mm',
    soilType: 'Clay loam, water retentive',
    spacing: '20cm x 20cm',
    fertilizer: 'Urea in splits'
  }
};

const pestDiseases: PestDisease[] = [
  {
    id: '1',
    name: 'Fall Armyworm',
    affects: 'Maize',
    season: 'All year',
    description: 'Look for ragged holes in leaves and larvae in whorls. Apply recommended pesticides early morning or late evening.',
    treatment: 'Apply recommended pesticides early morning or late evening',
    severity: 'high'
  },
  {
    id: '2',
    name: 'Coffee Berry Disease',
    affects: 'Coffee',
    season: 'Rainy season',
    description: 'Dark sunken lesions on berries. Prevent with copper-based fungicides before and during flowering.',
    treatment: 'Prevent with copper-based fungicides before and during flowering',
    severity: 'medium'
  }
];

export function useCropData() {
  const [selectedCrop, setSelectedCrop] = useState<Crop | null>(null);
  const [searchTerm, setSearchTerm] = useState('');

  const filteredCrops = useMemo(() => {
    return mockCrops.filter(crop => 
      crop.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      crop.localName.toLowerCase().includes(searchTerm.toLowerCase())
    );
  }, [searchTerm]);

  const summaryStats = useMemo(() => {
    const totalArea = mockCrops.reduce((sum, crop) => sum + crop.area, 0);
    const activeCrops = mockCrops.length;
    const expectedYield = mockCrops.reduce((sum, crop) => sum + (crop.yield * crop.area / 1000), 0);
    const healthyCount = mockCrops.filter(crop => crop.health === 'excellent' || crop.health === 'good').length;
    const overallHealth = healthyCount / mockCrops.length >= 0.8 ? 'Good' : 'Fair';

    return {
      totalArea,
      activeCrops,
      expectedYield,
      overallHealth
    };
  }, []);

  return {
    crops: filteredCrops,
    allCrops: mockCrops,
    selectedCrop,
    setSelectedCrop,
    searchTerm,
    setSearchTerm,
    summaryStats,
    cropGuides,
    pestDiseases
  };
}
</file>

<file path="src/features/crops/services/cropApi.ts">
/**
 * Crop API 서비스
 * 작물 관리 관련 CRUD 작업을 위한 API 서비스
 */

import { safeApiCall, handleApiError, supabase } from '@/services/core/apiClient';
import type { Database } from '@/integrations/supabase/types';

type Crop = Database['public']['Tables']['crops']['Row'];
type CropInsert = Database['public']['Tables']['crops']['Insert'];
type CropUpdate = Database['public']['Tables']['crops']['Update'];

type FarmActivity = Database['public']['Tables']['farm_activities']['Row'];
type FarmActivityInsert = Database['public']['Tables']['farm_activities']['Insert'];

/**
 * 농장의 작물 목록 조회
 */
export const getCrops = async (farmId: string): Promise<Crop[]> => {
  try {
    const crops = await safeApiCall(async () =>
      supabase
        .from('crops')
        .select('*')
        .eq('farm_id', farmId)
        .order('created_at', { ascending: false })
    );

    return crops || [];
  } catch (error) {
    console.error('Error fetching crops:', error);
    handleApiError(error);
  }
};

/**
 * 특정 작물 조회
 */
export const getCrop = async (id: string): Promise<Crop> => {
  try {
    const crop = await safeApiCall(async () =>
      supabase
        .from('crops')
        .select('*')
        .eq('id', id)
        .single()
    );

    return crop;
  } catch (error) {
    console.error('Error fetching crop:', error);
    handleApiError(error);
  }
};

/**
 * 작물 생성
 */
export const createCrop = async (data: CropInsert): Promise<Crop> => {
  try {
    const crop = await safeApiCall(async () =>
      supabase
        .from('crops')
        .insert(data)
        .select()
        .single()
    );

    return crop;
  } catch (error) {
    console.error('Error creating crop:', error);
    handleApiError(error);
  }
};

/**
 * 작물 업데이트
 */
export const updateCrop = async (
  id: string,
  updates: CropUpdate
): Promise<Crop> => {
  try {
    const crop = await safeApiCall(async () =>
      supabase
        .from('crops')
        .update({
          ...updates,
          updated_at: new Date().toISOString(),
        })
        .eq('id', id)
        .select()
        .single()
    );

    return crop;
  } catch (error) {
    console.error('Error updating crop:', error);
    handleApiError(error);
  }
};

/**
 * 작물 삭제
 */
export const deleteCrop = async (id: string): Promise<void> => {
  try {
    await safeApiCall(async () =>
      supabase
        .from('crops')
        .delete()
        .eq('id', id)
    );
  } catch (error) {
    console.error('Error deleting crop:', error);
    handleApiError(error);
  }
};

/**
 * 작물 성장 단계 업데이트
 */
export const updateCropGrowthStage = async (
  id: string,
  growthStage: string
): Promise<Crop> => {
  try {
    return await updateCrop(id, { growth_stage: growthStage });
  } catch (error) {
    console.error('Error updating crop growth stage:', error);
    handleApiError(error);
  }
};

/**
 * 작물 건강 상태 업데이트
 */
export const updateCropHealthStatus = async (
  id: string,
  healthStatus: string
): Promise<Crop> => {
  try {
    return await updateCrop(id, { health_status: healthStatus });
  } catch (error) {
    console.error('Error updating crop health status:', error);
    handleApiError(error);
  }
};

/**
 * 작물 활동 기록 조회
 */
export const getCropActivities = async (cropId: string): Promise<FarmActivity[]> => {
  try {
    const activities = await safeApiCall(async () =>
      supabase
        .from('farm_activities')
        .select('*')
        .eq('crop_id', cropId)
        .order('date', { ascending: false })
    );

    return activities || [];
  } catch (error) {
    console.error('Error fetching crop activities:', error);
    handleApiError(error);
  }
};

/**
 * 작물 활동 기록 추가
 */
export const addCropActivity = async (
  data: FarmActivityInsert
): Promise<FarmActivity> => {
  try {
    const activity = await safeApiCall(async () =>
      supabase
        .from('farm_activities')
        .insert(data)
        .select()
        .single()
    );

    return activity;
  } catch (error) {
    console.error('Error adding crop activity:', error);
    handleApiError(error);
  }
};

/**
 * 농장의 모든 작물 통계 조회
 */
export const getCropStatistics = async (farmId: string) => {
  try {
    const crops = await getCrops(farmId);
    
    const statistics = {
      totalCrops: crops.length,
      totalArea: crops.reduce((sum, crop) => sum + (crop.area_hectares || 0), 0),
      byHealthStatus: {} as Record<string, number>,
      byGrowthStage: {} as Record<string, number>,
      byCropType: {} as Record<string, number>,
    };

    crops.forEach(crop => {
      // 건강 상태별 집계
      if (crop.health_status) {
        statistics.byHealthStatus[crop.health_status] = 
          (statistics.byHealthStatus[crop.health_status] || 0) + 1;
      }

      // 성장 단계별 집계
      if (crop.growth_stage) {
        statistics.byGrowthStage[crop.growth_stage] = 
          (statistics.byGrowthStage[crop.growth_stage] || 0) + 1;
      }

      // 작물 종류별 집계
      statistics.byCropType[crop.name] = 
        (statistics.byCropType[crop.name] || 0) + 1;
    });

    return statistics;
  } catch (error) {
    console.error('Error fetching crop statistics:', error);
    handleApiError(error);
  }
};
</file>

<file path="src/features/crops/services/index.ts">
// Crops Services
export * from './cropApi';
</file>

<file path="src/features/crops/types/index.ts">
// Crops Types
export * from './types';
</file>

<file path="src/features/crops/types/types.ts">
export interface Crop {
  id: string;
  name: string;
  localName: string;
  plantedDate: string;
  expectedHarvest: string;
  area: number; // hectares
  variety: string;
  stage: 'germination' | 'vegetative' | 'flowering' | 'maturity';
  health: 'excellent' | 'good' | 'warning' | 'critical';
  lastAction: string;
  nextAction: string;
  yield: number; // expected kg/hectare
}

export interface CropGuide {
  season: string;
  waterNeeds: string;
  soilType: string;
  spacing: string;
  fertilizer: string;
}

export interface PestDisease {
  id: string;
  name: string;
  affects: string;
  season: string;
  description: string;
  treatment: string;
  severity: 'low' | 'medium' | 'high';
}
</file>

<file path="src/features/crops/index.ts">
// Crops Feature Exports
export * from './components';
export * from './hooks';
export * from './services';
export * from './types';
</file>

<file path="src/features/dashboard/components/AgriDashboardStats.tsx">
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card';
import { Badge } from '@/shared/components/ui/badge';
import { Progress } from '@/shared/components/ui/progress';
import { 
  Wheat, 
  Cloud, 
  Bug, 
  TrendingUp, 
  Calendar,
  MapPin,
  Users,
  BookOpen,
  BarChart3,
  Clock
} from 'lucide-react';
import { useAuth } from '@/features/authentication';
import { getCategoryIcon, getCategoryName, AGRICULTURAL_CATEGORIES } from '@/utils/agricultureTemplates';

interface KnowledgeEntry {
  id: string;
  title: string;
  category: string;
  created_at: string;
  updated_at: string;
  tags: string[];
  crop_types: string[];
  sources: any[];
}

interface AgriDashboardStatsProps {
  knowledgeEntries: KnowledgeEntry[];
  isLoading: boolean;
}

const AgriDashboardStats = ({ knowledgeEntries, isLoading }: AgriDashboardStatsProps) => {
  const { profile } = useAuth();

  // Calculate statistics
  const totalEntries = knowledgeEntries?.length || 0;
  const categoryCounts = knowledgeEntries?.reduce((acc, entry) => {
    const category = entry.category || 'general_farming';
    acc[category] = (acc[category] || 0) + 1;
    return acc;
  }, {} as Record<string, number>) || {};

  const recentEntries = knowledgeEntries?.filter(entry => {
    const oneWeekAgo = new Date();
    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
    return new Date(entry.created_at) > oneWeekAgo;
  })?.length || 0;

  const cropSpecificEntries = knowledgeEntries?.filter(entry => 
    entry.crop_types && entry.crop_types.length > 0
  )?.length || 0;

  const weatherRelatedEntries = knowledgeEntries?.filter(entry => 
    entry.category === 'weather_climate'
  )?.length || 0;

  if (isLoading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        {[1, 2, 3, 4].map(i => (
          <Card key={i} className="animate-pulse">
            <CardHeader className="pb-2">
              <div className="h-4 bg-gray-200 rounded w-3/4"></div>
            </CardHeader>
            <CardContent>
              <div className="h-8 bg-gray-200 rounded w-1/2 mb-2"></div>
              <div className="h-3 bg-gray-200 rounded w-full"></div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  return (
    <div className="space-y-8">
      {/* Welcome Section with Farmer Info */}
      {profile && (
        <Card className="bg-gradient-to-r from-green-50 to-blue-50 border-green-200">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="text-2xl text-green-800">
                  Welcome back, {profile.full_name || 'Farmer'}!
                </CardTitle>
                <CardDescription className="text-green-600 mt-2">
                  {profile.farm_name && `${profile.farm_name} • `}
                  {profile.farm_location && `${profile.farm_location} • `}
                  {profile.farm_size && `${profile.farm_size} ${profile.farm_size_unit}`}
                </CardDescription>
              </div>
              <div className="flex items-center space-x-4">
                <div className="text-center">
                  <div className="flex items-center space-x-1 text-sm text-green-600">
                    <MapPin className="h-4 w-4" />
                    <span>{profile.region?.replace('_', ' ').toUpperCase()}</span>
                  </div>
                </div>
                <div className="text-center">
                  <div className="flex items-center space-x-1 text-sm text-green-600">
                    <Calendar className="h-4 w-4" />
                    <span>{profile.farming_experience} years exp.</span>
                  </div>
                </div>
              </div>
            </div>
            {profile.primary_crops && profile.primary_crops.length > 0 && (
              <div className="flex flex-wrap gap-2 mt-4">
                <span className="text-sm font-medium text-green-700">Primary crops:</span>
                {profile.primary_crops.slice(0, 5).map(crop => (
                  <Badge key={crop} variant="secondary" className="bg-green-100 text-green-800">
                    {crop.replace('_', ' ').toUpperCase()}
                  </Badge>
                ))}
                {profile.primary_crops.length > 5 && (
                  <Badge variant="secondary" className="bg-green-100 text-green-800">
                    +{profile.primary_crops.length - 5} more
                  </Badge>
                )}
              </div>
            )}
          </CardHeader>
        </Card>
      )}

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Knowledge Entries</CardTitle>
            <BookOpen className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalEntries}</div>
            <p className="text-xs text-muted-foreground">
              Total agricultural knowledge entries
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Recent Activity</CardTitle>
            <Clock className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{recentEntries}</div>
            <p className="text-xs text-muted-foreground">
              New entries this week
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Crop-Specific</CardTitle>
            <Wheat className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{cropSpecificEntries}</div>
            <p className="text-xs text-muted-foreground">
              Entries with crop information
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Weather Insights</CardTitle>
            <Cloud className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{weatherRelatedEntries}</div>
            <p className="text-xs text-muted-foreground">
              Weather & climate entries
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Knowledge Categories Breakdown */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <BarChart3 className="h-5 w-5" />
              <span>Knowledge Categories</span>
            </CardTitle>
            <CardDescription>
              Distribution of your agricultural knowledge entries
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {Object.entries(AGRICULTURAL_CATEGORIES).map(([key, category]) => {
              const count = categoryCounts[key] || 0;
              const percentage = totalEntries > 0 ? (count / totalEntries) * 100 : 0;
              
              return (
                <div key={key} className="space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <span className="text-lg">{category.icon}</span>
                      <span className="text-sm font-medium">{category.name}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="text-sm font-bold">{count}</span>
                      <span className="text-xs text-muted-foreground">
                        ({percentage.toFixed(0)}%)
                      </span>
                    </div>
                  </div>
                  <Progress value={percentage} className="h-2" />
                </div>
              );
            })}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <TrendingUp className="h-5 w-5" />
              <span>Quick Actions</span>
            </CardTitle>
            <CardDescription>
              Common agricultural knowledge entry types
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="grid grid-cols-1 gap-3">
              <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <Cloud className="h-5 w-5 text-blue-600" />
                  <div>
                    <p className="font-medium text-blue-900">Weather Forecast</p>
                    <p className="text-sm text-blue-600">Track weekly weather patterns</p>
                  </div>
                </div>
                <Badge variant="secondary">Guide</Badge>
              </div>

              <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <Wheat className="h-5 w-5 text-green-600" />
                  <div>
                    <p className="font-medium text-green-900">Crop Planning</p>
                    <p className="text-sm text-green-600">Plan planting schedules</p>
                  </div>
                </div>
                <Badge variant="secondary">Template</Badge>
              </div>

              <div className="flex items-center justify-between p-3 bg-red-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <Bug className="h-5 w-5 text-red-600" />
                  <div>
                    <p className="font-medium text-red-900">Pest Control</p>
                    <p className="text-sm text-red-600">Identify and manage pests</p>
                  </div>
                </div>
                <Badge variant="secondary">Reference</Badge>
              </div>

              <div className="flex items-center justify-between p-3 bg-purple-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <TrendingUp className="h-5 w-5 text-purple-600" />
                  <div>
                    <p className="font-medium text-purple-900">Market Prices</p>
                    <p className="text-sm text-purple-600">Track crop market trends</p>
                  </div>
                </div>
                <Badge variant="secondary">Analysis</Badge>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default AgriDashboardStats;
</file>

<file path="src/features/dashboard/components/AgriKnowledgeGrid.tsx">
import React, { useState, useMemo } from 'react';
import { Button } from '@/shared/components/ui/button';
import { Input } from '@/shared/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/shared/components/ui/select';
import { Badge } from '@/shared/components/ui/badge';
import { Checkbox } from '@/shared/components/ui/checkbox';
import NotebookCard from './NotebookCard';
import BulkActions from './BulkActions';
import { Check, Grid3X3, List, ChevronDown, Search, Filter, Plus } from 'lucide-react';
import { useNotebooks } from '@/hooks/useNotebooks';
import { useNavigate } from 'react-router-dom';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
  DropdownMenuLabel,
} from '@/shared/components/ui/dropdown-menu';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/shared/components/ui/dialog';
import { 
  AGRICULTURAL_CATEGORIES, 
  KNOWLEDGE_TEMPLATES, 
  getCategoryIcon, 
  getCategoryColor,
  getCategoryName 
} from '@/utils/agricultureTemplates';

const AgriKnowledgeGrid = () => {
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [sortBy, setSortBy] = useState('Most recent');
  const [filterCategory, setFilterCategory] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [showTemplateDialog, setShowTemplateDialog] = useState(false);
  const [selectedEntries, setSelectedEntries] = useState<string[]>([]);
  
  const {
    notebooks,
    isLoading,
    createNotebook,
    isCreating
  } = useNotebooks();
  const navigate = useNavigate();

  // Filter and search notebooks
  const filteredNotebooks = useMemo(() => {
    if (!notebooks) return [];
    
    let filtered = [...notebooks];
    
    // Filter by category
    if (filterCategory !== 'all') {
      filtered = filtered.filter(notebook => 
        notebook.category === filterCategory
      );
    }
    
    // Search filter
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(notebook =>
        notebook.title.toLowerCase().includes(query) ||
        notebook.description?.toLowerCase().includes(query) ||
        notebook.tags?.some(tag => tag.toLowerCase().includes(query)) ||
        notebook.crop_types?.some(crop => crop.toLowerCase().includes(query))
      );
    }
    
    return filtered;
  }, [notebooks, filterCategory, searchQuery]);

  // Sort notebooks
  const sortedNotebooks = useMemo(() => {
    const sorted = [...filteredNotebooks];
    
    if (sortBy === 'Most recent') {
      return sorted.sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime());
    } else if (sortBy === 'Title') {
      return sorted.sort((a, b) => a.title.localeCompare(b.title));
    } else if (sortBy === 'Category') {
      return sorted.sort((a, b) => (a.category || '').localeCompare(b.category || ''));
    }
    
    return sorted;
  }, [filteredNotebooks, sortBy]);

  const handleCreateFromTemplate = (template: any) => {
    createNotebook({
      title: template.title,
      description: template.description,
      category: template.category,
      subcategory: template.subcategory,
      tags: template.tags,
      crop_types: template.crop_types,
      difficulty_level: template.difficulty_level,
      knowledge_type: template.knowledge_type,
      season: template.season,
      icon: template.icon,
      color: template.color,
      is_template: false,
      template_category: template.id,
    }, {
      onSuccess: data => {
        console.log('Navigating to notebook:', data.id);
        navigate(`/notebook/${data.id}`);
        setShowTemplateDialog(false);
      },
      onError: error => {
        console.error('Failed to create notebook:', error);
      }
    });
  };

  const handleCreateBlank = () => {
    createNotebook({
      title: 'New Knowledge Entry',
      description: '',
      category: 'general_farming',
      knowledge_type: 'guide',
    }, {
      onSuccess: data => {
        console.log('Navigating to notebook:', data.id);
        navigate(`/notebook/${data.id}`);
      },
      onError: error => {
        console.error('Failed to create notebook:', error);
      }
    });
  };

  const handleNotebookClick = (notebookId: string, e: React.MouseEvent) => {
    const target = e.target as HTMLElement;
    const isDeleteAction = target.closest('[data-delete-action="true"]') || target.closest('.delete-button') || target.closest('[role="dialog"]');
    const isCheckboxAction = target.closest('[data-checkbox-action="true"]') || target.closest('input[type="checkbox"]');
    
    if (isDeleteAction || isCheckboxAction) {
      console.log('Click prevented due to action');
      return;
    }
    navigate(`/notebook/${notebookId}`);
  };

  const handleSelectEntry = (entryId: string, checked: boolean) => {
    if (checked) {
      setSelectedEntries(prev => [...prev, entryId]);
    } else {
      setSelectedEntries(prev => prev.filter(id => id !== entryId));
    }
  };

  const handleRefresh = () => {
    // This will be handled by the useNotebooks hook's real-time updates
    window.location.reload();
  };

  // Get category stats for filter dropdown
  const categoryStats = useMemo(() => {
    const stats = { all: notebooks?.length || 0 };
    notebooks?.forEach(notebook => {
      const category = notebook.category || 'general_farming';
      stats[category] = (stats[category] || 0) + 1;
    });
    return stats;
  }, [notebooks]);

  if (isLoading) {
    return (
      <div className="space-y-6">
        {/* Stats skeleton */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          {[1, 2, 3, 4].map(i => (
            <div key={i} className="h-24 bg-gray-200 rounded-lg animate-pulse"></div>
          ))}
        </div>
        
        {/* Grid skeleton */}
        <div className="text-center py-16">
          <p className="text-gray-600">Loading knowledge entries...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Bulk Actions */}
      <BulkActions
        selectedEntries={selectedEntries}
        allEntries={sortedNotebooks}
        onSelectionChange={setSelectedEntries}
        onRefresh={handleRefresh}
      />

      {/* Header with search and filters */}
      <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4">
        <div className="flex flex-col sm:flex-row gap-4 flex-1">
          {/* Search */}
          <div className="relative flex-1 max-w-md">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder="Search knowledge entries..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
          
          {/* Category filter */}
          <Select value={filterCategory} onValueChange={setFilterCategory}>
            <SelectTrigger className="w-48">
              <SelectValue placeholder="Filter by category" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">
                All Categories ({categoryStats.all})
              </SelectItem>
              <DropdownMenuSeparator />
              {Object.entries(AGRICULTURAL_CATEGORIES).map(([key, category]) => (
                <SelectItem key={key} value={key}>
                  <div className="flex items-center space-x-2">
                    <span>{category.icon}</span>
                    <span>{category.name}</span>
                    <span className="text-gray-500">({categoryStats[key] || 0})</span>
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* Actions */}
        <div className="flex items-center space-x-4">
          {/* Sort dropdown */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <div className="flex items-center space-x-2 bg-white rounded-lg border px-3 py-2 cursor-pointer hover:bg-gray-50 transition-colors">
                <span className="text-sm text-gray-600">{sortBy}</span>
                <ChevronDown className="h-4 w-4 text-gray-400" />
              </div>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-48">
              <DropdownMenuItem onClick={() => setSortBy('Most recent')} className="flex items-center justify-between">
                Most recent
                {sortBy === 'Most recent' && <Check className="h-4 w-4" />}
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSortBy('Title')} className="flex items-center justify-between">
                Title
                {sortBy === 'Title' && <Check className="h-4 w-4" />}
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSortBy('Category')} className="flex items-center justify-between">
                Category
                {sortBy === 'Category' && <Check className="h-4 w-4" />}
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          {/* Create dropdown */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button className="bg-green-600 hover:bg-green-700 text-white" disabled={isCreating}>
                <Plus className="h-4 w-4 mr-2" />
                {isCreating ? 'Creating...' : 'Create'}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel>Create Knowledge Entry</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={handleCreateBlank}>
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 bg-gray-100 rounded flex items-center justify-center">
                    📝
                  </div>
                  <div>
                    <p className="font-medium">Blank Entry</p>
                    <p className="text-sm text-gray-500">Start from scratch</p>
                  </div>
                </div>
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setShowTemplateDialog(true)}>
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 bg-blue-100 rounded flex items-center justify-center">
                    📋
                  </div>
                  <div>
                    <p className="font-medium">From Template</p>
                    <p className="text-sm text-gray-500">Use agricultural templates</p>
                  </div>
                </div>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      {/* Results summary */}
      <div className="flex items-center justify-between text-sm text-gray-600">
        <div>
          Showing {sortedNotebooks.length} of {notebooks?.length || 0} knowledge entries
          {filterCategory !== 'all' && (
            <span> in {getCategoryName(filterCategory)}</span>
          )}
          {searchQuery && (
            <span> matching "{searchQuery}"</span>
          )}
        </div>
        
        {(filterCategory !== 'all' || searchQuery) && (
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => {
              setFilterCategory('all');
              setSearchQuery('');
            }}
          >
            Clear filters
          </Button>
        )}
      </div>

      {/* Knowledge entries grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {sortedNotebooks.map(notebook => (
          <div key={notebook.id} onClick={e => handleNotebookClick(notebook.id, e)}>
            <NotebookCard 
              notebook={{
                id: notebook.id,
                title: notebook.title,
                date: new Date(notebook.updated_at).toLocaleDateString('en-US', {
                  month: 'short',
                  day: 'numeric',
                  year: 'numeric'
                }),
                sources: notebook.sources?.[0]?.count || 0,
                icon: notebook.icon || getCategoryIcon(notebook.category || 'general_farming'),
                color: notebook.color || getCategoryColor(notebook.category || 'general_farming'),
                category: notebook.category,
                tags: notebook.tags,
                crop_types: notebook.crop_types,
                difficulty_level: notebook.difficulty_level,
                knowledge_type: notebook.knowledge_type,
              }}
              isSelected={selectedEntries.includes(notebook.id)}
              onSelect={handleSelectEntry}
              showCheckbox={true}
            />
          </div>
        ))}
      </div>

      {/* Empty state */}
      {sortedNotebooks.length === 0 && (
        <div className="text-center py-16">
          <div className="max-w-md mx-auto">
            {searchQuery || filterCategory !== 'all' ? (
              <>
                <div className="text-6xl mb-4">🔍</div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">No matching entries found</h3>
                <p className="text-gray-600 mb-4">
                  Try adjusting your search or filter criteria
                </p>
                <Button 
                  variant="outline" 
                  onClick={() => {
                    setFilterCategory('all');
                    setSearchQuery('');
                  }}
                >
                  Clear filters
                </Button>
              </>
            ) : (
              <>
                <div className="text-6xl mb-4">🌾</div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">No knowledge entries yet</h3>
                <p className="text-gray-600 mb-4">
                  Start building your agricultural knowledge base
                </p>
                <Button onClick={() => setShowTemplateDialog(true)}>
                  Create your first entry
                </Button>
              </>
            )}
          </div>
        </div>
      )}

      {/* Template selection dialog */}
      <Dialog open={showTemplateDialog} onOpenChange={setShowTemplateDialog}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Choose a Knowledge Entry Template</DialogTitle>
            <DialogDescription>
              Select from our agricultural templates to get started quickly
            </DialogDescription>
          </DialogHeader>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 py-4">
            {KNOWLEDGE_TEMPLATES.map(template => (
              <div
                key={template.id}
                className="p-4 border rounded-lg cursor-pointer hover:border-green-500 transition-colors"
                onClick={() => handleCreateFromTemplate(template)}
              >
                <div className="flex items-start space-x-3">
                  <div className={`w-10 h-10 ${template.color} rounded-lg flex items-center justify-center text-lg`}>
                    {template.icon}
                  </div>
                  <div className="flex-1 min-w-0">
                    <h4 className="font-medium text-gray-900 mb-1">{template.title}</h4>
                    <p className="text-sm text-gray-600 mb-2">{template.description}</p>
                    <div className="flex flex-wrap gap-1">
                      <Badge variant="secondary" className="text-xs">
                        {getCategoryName(template.category)}
                      </Badge>
                      <Badge variant="outline" className="text-xs">
                        {template.knowledge_type}
                      </Badge>
                      {template.difficulty_level && (
                        <Badge variant="outline" className="text-xs">
                          {template.difficulty_level}
                        </Badge>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setShowTemplateDialog(false)}>
              Cancel
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default AgriKnowledgeGrid;
</file>

<file path="src/features/dashboard/components/AlertsSection.tsx">
import React from 'react';
import { AlertTriangle } from 'lucide-react';

interface Alert {
  type: 'warning' | 'info';
  message: string;
  urgent: boolean;
}

interface AlertsSectionProps {
  alerts: Alert[];
}

export function AlertsSection({ alerts }: AlertsSectionProps) {
  if (alerts.length === 0) return null;

  return (
    <div className="mb-6 space-y-3">
      {alerts.map((alert, index) => (
        <div
          key={index}
          className={`p-4 rounded-lg flex items-start space-x-3 ${
            alert.type === 'warning' 
              ? 'bg-orange-50 border border-orange-200' 
              : 'bg-blue-50 border border-blue-200'
          }`}
        >
          <AlertTriangle className={`h-5 w-5 ${
            alert.type === 'warning' ? 'text-orange-600' : 'text-blue-600'
          }`} />
          <p className={`text-sm ${
            alert.type === 'warning' ? 'text-orange-800' : 'text-blue-800'
          }`}>
            {alert.message}
          </p>
        </div>
      ))}
    </div>
  );
}
</file>

<file path="src/features/dashboard/components/BulkActions.tsx">
import React, { useState } from 'react';
import { Button } from '@/shared/components/ui/button';
import { Checkbox } from '@/shared/components/ui/checkbox';
import { Badge } from '@/shared/components/ui/badge';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
  DropdownMenuLabel,
} from '@/shared/components/ui/dropdown-menu';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/shared/components/ui/alert-dialog';
import { 
  MoreVertical, 
  Archive, 
  Trash2, 
  Download, 
  Tag, 
  Copy,
  CheckCircle,
  X
} from 'lucide-react';
import { useToast } from '@/shared/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

interface KnowledgeEntry {
  id: string;
  title: string;
  category?: string;
  tags?: string[];
  crop_types?: string[];
  is_archived?: boolean;
}

interface BulkActionsProps {
  selectedEntries: string[];
  allEntries: KnowledgeEntry[];
  onSelectionChange: (selected: string[]) => void;
  onRefresh: () => void;
}

const BulkActions = ({ 
  selectedEntries, 
  allEntries, 
  onSelectionChange, 
  onRefresh 
}: BulkActionsProps) => {
  const [loading, setLoading] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [showArchiveDialog, setShowArchiveDialog] = useState(false);
  const { toast } = useToast();

  const selectedCount = selectedEntries.length;
  const totalCount = allEntries.length;
  const isAllSelected = selectedCount === totalCount && totalCount > 0;
  const isPartiallySelected = selectedCount > 0 && selectedCount < totalCount;

  const handleSelectAll = () => {
    if (isAllSelected) {
      onSelectionChange([]);
    } else {
      onSelectionChange(allEntries.map(entry => entry.id));
    }
  };

  const handleBulkArchive = async () => {
    setLoading(true);
    try {
      const { error } = await supabase
        .from('notebooks')
        .update({ 
          is_archived: true,
          updated_at: new Date().toISOString()
        })
        .in('id', selectedEntries);

      if (error) throw error;

      toast({
        title: "Entries Archived",
        description: `${selectedCount} knowledge entries have been archived.`,
      });

      onSelectionChange([]);
      onRefresh();
    } catch (error) {
      console.error('Archive error:', error);
      toast({
        title: "Archive Failed",
        description: "Failed to archive entries. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
      setShowArchiveDialog(false);
    }
  };

  const handleBulkDelete = async () => {
    setLoading(true);
    try {
      // First delete related sources
      const { error: sourcesError } = await supabase
        .from('sources')
        .delete()
        .in('notebook_id', selectedEntries);

      if (sourcesError) throw sourcesError;

      // Then delete the notebooks
      const { error: notebooksError } = await supabase
        .from('notebooks')
        .delete()
        .in('id', selectedEntries);

      if (notebooksError) throw notebooksError;

      toast({
        title: "Entries Deleted",
        description: `${selectedCount} knowledge entries have been permanently deleted.`,
      });

      onSelectionChange([]);
      onRefresh();
    } catch (error) {
      console.error('Delete error:', error);
      toast({
        title: "Delete Failed",
        description: "Failed to delete entries. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
      setShowDeleteDialog(false);
    }
  };

  const handleExport = async () => {
    setLoading(true);
    try {
      // Get full data for selected entries
      const { data: entries, error } = await supabase
        .from('notebooks')
        .select(`
          *,
          sources (
            title,
            type,
            url,
            summary
          ),
          notes (
            title,
            content
          )
        `)
        .in('id', selectedEntries);

      if (error) throw error;

      // Create export data
      const exportData = {
        exported_at: new Date().toISOString(),
        entries_count: entries?.length || 0,
        entries: entries?.map(entry => ({
          id: entry.id,
          title: entry.title,
          description: entry.description,
          category: entry.category,
          subcategory: entry.subcategory,
          tags: entry.tags,
          crop_types: entry.crop_types,
          difficulty_level: entry.difficulty_level,
          knowledge_type: entry.knowledge_type,
          season: entry.season,
          created_at: entry.created_at,
          updated_at: entry.updated_at,
          sources: entry.sources,
          notes: entry.notes
        }))
      };

      // Download as JSON
      const blob = new Blob([JSON.stringify(exportData, null, 2)], {
        type: 'application/json'
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `agricultural-knowledge-export-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      toast({
        title: "Export Complete",
        description: `${selectedCount} knowledge entries have been exported.`,
      });

      onSelectionChange([]);
    } catch (error) {
      console.error('Export error:', error);
      toast({
        title: "Export Failed",
        description: "Failed to export entries. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleDuplicate = async () => {
    setLoading(true);
    try {
      // Get the entries to duplicate
      const { data: originalEntries, error: fetchError } = await supabase
        .from('notebooks')
        .select('*')
        .in('id', selectedEntries);

      if (fetchError) throw fetchError;

      // Create duplicates
      const duplicates = originalEntries?.map(entry => ({
        ...entry,
        id: undefined, // Let Supabase generate new ID
        title: `Copy of ${entry.title}`,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }));

      if (duplicates) {
        const { error: insertError } = await supabase
          .from('notebooks')
          .insert(duplicates);

        if (insertError) throw insertError;
      }

      toast({
        title: "Entries Duplicated",
        description: `${selectedCount} knowledge entries have been duplicated.`,
      });

      onSelectionChange([]);
      onRefresh();
    } catch (error) {
      console.error('Duplicate error:', error);
      toast({
        title: "Duplication Failed",
        description: "Failed to duplicate entries. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  if (selectedCount === 0) {
    return null;
  }

  return (
    <>
      <div className="flex items-center justify-between p-4 bg-blue-50 border border-blue-200 rounded-lg mb-4">
        <div className="flex items-center space-x-4">
          <Checkbox
            checked={isAllSelected}
            ref={(el) => {
              if (el) el.indeterminate = isPartiallySelected;
            }}
            onCheckedChange={handleSelectAll}
          />
          <div className="flex items-center space-x-2">
            <CheckCircle className="h-4 w-4 text-blue-600" />
            <span className="font-medium text-blue-900">
              {selectedCount} selected
            </span>
            {selectedCount < totalCount && (
              <button
                onClick={handleSelectAll}
                className="text-blue-600 hover:text-blue-800 text-sm underline"
              >
                Select all {totalCount}
              </button>
            )}
          </div>
        </div>

        <div className="flex items-center space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => onSelectionChange([])}
          >
            <X className="h-4 w-4 mr-1" />
            Clear
          </Button>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" disabled={loading}>
                <MoreVertical className="h-4 w-4 mr-1" />
                Actions
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-48">
              <DropdownMenuLabel>Bulk Actions</DropdownMenuLabel>
              <DropdownMenuSeparator />
              
              <DropdownMenuItem onClick={handleExport} disabled={loading}>
                <Download className="h-4 w-4 mr-2" />
                Export Selected
              </DropdownMenuItem>
              
              <DropdownMenuItem onClick={handleDuplicate} disabled={loading}>
                <Copy className="h-4 w-4 mr-2" />
                Duplicate Selected
              </DropdownMenuItem>
              
              <DropdownMenuSeparator />
              
              <DropdownMenuItem 
                onClick={() => setShowArchiveDialog(true)} 
                disabled={loading}
              >
                <Archive className="h-4 w-4 mr-2" />
                Archive Selected
              </DropdownMenuItem>
              
              <DropdownMenuItem 
                onClick={() => setShowDeleteDialog(true)} 
                disabled={loading}
                className="text-red-600 focus:text-red-600"
              >
                <Trash2 className="h-4 w-4 mr-2" />
                Delete Selected
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      {/* Archive Confirmation Dialog */}
      <AlertDialog open={showArchiveDialog} onOpenChange={setShowArchiveDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Archive Knowledge Entries?</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to archive {selectedCount} knowledge entries? 
              Archived entries can be restored later but won't appear in your main view.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel disabled={loading}>Cancel</AlertDialogCancel>
            <AlertDialogAction 
              onClick={handleBulkArchive}
              disabled={loading}
              className="bg-orange-600 hover:bg-orange-700"
            >
              {loading ? 'Archiving...' : 'Archive Entries'}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Confirmation Dialog */}
      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Knowledge Entries?</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to permanently delete {selectedCount} knowledge entries? 
              This action cannot be undone and will also delete all associated sources and notes.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel disabled={loading}>Cancel</AlertDialogCancel>
            <AlertDialogAction 
              onClick={handleBulkDelete}
              disabled={loading}
              className="bg-red-600 hover:bg-red-700"
            >
              {loading ? 'Deleting...' : 'Delete Permanently'}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
};

export default BulkActions;
</file>

<file path="src/features/dashboard/components/CropStatusSummary.tsx">
import React from 'react';
import { useTranslation } from 'react-i18next';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card';
import { Link } from 'react-router-dom';

interface CropStatus {
  name: string;
  localName: string;
  health: 'excellent' | 'good' | 'warning' | 'critical';
  nextAction: string;
  daysToHarvest?: number;
}

interface CropStatusSummaryProps {
  crops: CropStatus[];
}

export function CropStatusSummary({ crops }: CropStatusSummaryProps) {
  const { t } = useTranslation();

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>{t('dashboard.cropStatus')}</span>
          <Link to="/crops" className="text-sm font-normal text-blue-600 hover:underline">
            Manage All →
          </Link>
        </CardTitle>
        <CardDescription>
          Current status and upcoming actions
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          {crops.map((crop, index) => (
            <div key={index} className={`p-4 rounded-lg border ${
              crop.health === 'excellent' ? 'season-growing' :
              crop.health === 'good' ? 'season-planting' :
              crop.health === 'warning' ? 'season-harvest' :
              'season-fallow'
            }`}>
              <div className="flex items-start justify-between mb-2">
                <div>
                  <h4 className="font-semibold">{crop.name}</h4>
                  <p className="text-sm text-gray-600">{crop.localName}</p>
                </div>
                <span className={`px-2 py-1 rounded text-xs font-medium crop-health-${crop.health}`}>
                  {crop.health}
                </span>
              </div>
              <p className="text-sm text-gray-700">{crop.nextAction}</p>
              {crop.daysToHarvest && (
                <p className="text-xs text-gray-500 mt-1">
                  {crop.daysToHarvest} days to harvest
                </p>
              )}
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/features/dashboard/components/DashboardHeader.tsx">
import React, { useState } from 'react';
import { Button } from '@/shared/components/ui/button';
import { Badge } from '@/shared/components/ui/badge';
import { User, LogOut, Settings, Wheat, Shield } from 'lucide-react';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from '@/shared/components/ui/dropdown-menu';
import { useLogout } from '@/services/authService';
import { useAuth } from '@/features/authentication';
import Logo from '@/shared/components/ui/Logo';
import UserProfileDialog from '@/components/profile/UserProfileDialog';
import { getRoleInfo, type UserRole } from '@/utils/permissions';

interface DashboardHeaderProps {
  userEmail?: string;
}

const DashboardHeader = ({ userEmail }: DashboardHeaderProps) => {
  const { logout } = useLogout();
  const { profile } = useAuth();
  const [showProfileDialog, setShowProfileDialog] = useState(false);

  const getUserInitial = () => {
    if (profile?.full_name) {
      return profile.full_name.charAt(0).toUpperCase();
    }
    if (userEmail) {
      return userEmail.charAt(0).toUpperCase();
    }
    return 'U';
  };

  const getRoleBadge = () => {
    if (!profile?.user_role) return null;
    const roleInfo = getRoleInfo(profile.user_role as UserRole);
    return (
      <Badge variant="secondary" className={`text-xs bg-${roleInfo.color}-100 text-${roleInfo.color}-800`}>
        {roleInfo.icon} {roleInfo.name}
      </Badge>
    );
  };

  return (
    <>
      <header className="bg-white border-b px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Logo />
            <div>
              <h1 className="text-xl font-medium text-gray-900">AI4AgriWeather</h1>
              <p className="text-sm text-gray-500">Smart Farm Assistant</p>
            </div>
          </div>
          
          <div className="flex items-center space-x-4">
            {/* User info display */}
            {profile && (
              <div className="hidden md:flex items-center space-x-3">
                <div className="text-right">
                  <div className="flex items-center space-x-2 justify-end">
                    <p className="text-sm font-medium text-gray-900">
                      {profile.full_name || 'User'}
                    </p>
                    {getRoleBadge()}
                  </div>
                  <p className="text-xs text-gray-500">
                    {profile.farm_name || profile.user_role?.replace('_', ' ') || 'Farmer'}
                  </p>
                </div>
                {profile.farm_location && (
                  <div className="flex items-center text-xs text-gray-500">
                    <Wheat className="h-3 w-3 mr-1" />
                    <span>{profile.farm_location}</span>
                  </div>
                )}
              </div>
            )}

            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="p-0">
                  <div className="w-10 h-10 bg-green-500 rounded-full flex items-center justify-center cursor-pointer hover:bg-green-600 transition-colors">
                    <span className="text-white font-medium">{getUserInitial()}</span>
                  </div>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56">
                <div className="px-2 py-1.5 text-sm">
                  <div className="font-medium">{profile?.full_name || 'User'}</div>
                  <div className="text-xs text-gray-500">{userEmail}</div>
                </div>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={() => setShowProfileDialog(true)} className="cursor-pointer">
                  <Settings className="h-4 w-4 mr-2" />
                  Profile Settings
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={logout} className="cursor-pointer text-red-600 focus:text-red-600">
                  <LogOut className="h-4 w-4 mr-2" />
                  Sign Out
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>
      </header>

      <UserProfileDialog 
        open={showProfileDialog} 
        onOpenChange={setShowProfileDialog} 
      />
    </>
  );
};

export default DashboardHeader;
</file>

<file path="src/features/dashboard/components/EmptyDashboard.tsx">
import React, { useState } from 'react';
import { Button } from '@/shared/components/ui/button';
import { Upload, FileText, Globe, Video, Wheat, Cloud, Bug, TrendingUp, Plus, Sparkles } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { useNotebooks } from '@/hooks/useNotebooks';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/shared/components/ui/dialog';
import { Badge } from '@/shared/components/ui/badge';
import { KNOWLEDGE_TEMPLATES, getCategoryName } from '@/utils/agricultureTemplates';
const EmptyDashboard = () => {
  const navigate = useNavigate();
  const [showTemplateDialog, setShowTemplateDialog] = useState(false);
  const {
    createNotebook,
    isCreating
  } = useNotebooks();
  
  const handleCreateFromTemplate = (template: any) => {
    createNotebook({
      title: template.title,
      description: template.description,
      category: template.category,
      subcategory: template.subcategory,
      tags: template.tags,
      crop_types: template.crop_types,
      difficulty_level: template.difficulty_level,
      knowledge_type: template.knowledge_type,
      season: template.season,
      icon: template.icon,
      color: template.color,
      is_template: false,
      template_category: template.id,
    }, {
      onSuccess: data => {
        console.log('Navigating to notebook:', data.id);
        navigate(`/notebook/${data.id}`);
        setShowTemplateDialog(false);
      },
      onError: error => {
        console.error('Failed to create notebook:', error);
      }
    });
  };

  const handleCreateBlank = () => {
    console.log('Create notebook button clicked');
    console.log('isCreating:', isCreating);
    createNotebook({
      title: 'New Knowledge Entry',
      description: '',
      category: 'general_farming',
      knowledge_type: 'guide',
    }, {
      onSuccess: data => {
        console.log('Navigating to notebook:', data.id);
        navigate(`/notebook/${data.id}`);
      },
      onError: error => {
        console.error('Failed to create notebook:', error);
      }
    });
  };
  return (
    <div className="text-center py-16">
      <div className="mb-12">
        <div className="text-6xl mb-6">🌾</div>
        <h2 className="text-3xl font-medium text-gray-900 mb-4">Start Your Agricultural Knowledge Journey</h2>
        <p className="text-lg text-gray-600 max-w-2xl mx-auto">
          Build a comprehensive knowledge base for your farm with AI-powered agricultural insights and templates
        </p>
      </div>

      {/* Knowledge Categories */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-6xl mx-auto mb-12">
        <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg border border-blue-200 p-6 text-center">
          <div className="w-12 h-12 bg-blue-500 rounded-lg mx-auto mb-4 flex items-center justify-center">
            <Cloud className="h-6 w-6 text-white" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">Weather & Climate</h3>
          <p className="text-gray-600 text-sm">Track weather patterns and climate impacts on your crops</p>
        </div>

        <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-lg border border-green-200 p-6 text-center">
          <div className="w-12 h-12 bg-green-500 rounded-lg mx-auto mb-4 flex items-center justify-center">
            <Wheat className="h-6 w-6 text-white" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">Crop Management</h3>
          <p className="text-gray-600 text-sm">Plan planting, fertilization, and harvest activities</p>
        </div>

        <div className="bg-gradient-to-br from-red-50 to-red-100 rounded-lg border border-red-200 p-6 text-center">
          <div className="w-12 h-12 bg-red-500 rounded-lg mx-auto mb-4 flex items-center justify-center">
            <Bug className="h-6 w-6 text-white" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">Pest & Disease</h3>
          <p className="text-gray-600 text-sm">Identify and manage agricultural pests and diseases</p>
        </div>

        <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg border border-purple-200 p-6 text-center">
          <div className="w-12 h-12 bg-purple-500 rounded-lg mx-auto mb-4 flex items-center justify-center">
            <TrendingUp className="h-6 w-6 text-white" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">Market Information</h3>
          <p className="text-gray-600 text-sm">Track prices and market trends for your products</p>
        </div>
      </div>

      {/* Source Types */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto mb-12">
        <div className="bg-white rounded-lg border border-gray-200 p-6 text-center">
          <div className="w-12 h-12 bg-blue-100 rounded-lg mx-auto mb-4 flex items-center justify-center">
            <FileText className="h-6 w-6 text-blue-600" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">Agricultural Documents</h3>
          <p className="text-gray-600">Research papers, farming guides, and technical reports</p>
        </div>

        <div className="bg-white rounded-lg border border-gray-200 p-6 text-center">
          <div className="w-12 h-12 bg-green-100 rounded-lg mx-auto mb-4 flex items-center justify-center">
            <Globe className="h-6 w-6 text-green-600" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">Online Resources</h3>
          <p className="text-gray-600">Agricultural websites, extension services, and market data</p>
        </div>

        <div className="bg-white rounded-lg border border-gray-200 p-6 text-center">
          <div className="w-12 h-12 bg-purple-100 rounded-lg mx-auto mb-4 flex items-center justify-center">
            <Video className="h-6 w-6 text-purple-600" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">Multimedia Content</h3>
          <p className="text-gray-600">Training videos, audio guides, and visual references</p>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
        <Dialog open={showTemplateDialog} onOpenChange={setShowTemplateDialog}>
          <DialogTrigger asChild>
            <Button size="lg" className="bg-green-600 hover:bg-green-700" disabled={isCreating}>
              <Sparkles className="h-5 w-5 mr-2" />
              Start with Template
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Choose an Agricultural Template</DialogTitle>
              <DialogDescription>
                Select from our pre-built templates to get started quickly with proven agricultural knowledge structures
              </DialogDescription>
            </DialogHeader>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 py-4">
              {KNOWLEDGE_TEMPLATES.slice(0, 6).map(template => (
                <div
                  key={template.id}
                  className="p-4 border rounded-lg cursor-pointer hover:border-green-500 transition-colors"
                  onClick={() => handleCreateFromTemplate(template)}
                >
                  <div className="flex items-start space-x-3">
                    <div className={`w-10 h-10 ${template.color} rounded-lg flex items-center justify-center text-lg`}>
                      {template.icon}
                    </div>
                    <div className="flex-1 min-w-0">
                      <h4 className="font-medium text-gray-900 mb-1">{template.title}</h4>
                      <p className="text-sm text-gray-600 mb-2">{template.description}</p>
                      <div className="flex flex-wrap gap-1">
                        <Badge variant="secondary" className="text-xs">
                          {getCategoryName(template.category)}
                        </Badge>
                        <Badge variant="outline" className="text-xs">
                          {template.knowledge_type}
                        </Badge>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </DialogContent>
        </Dialog>

        <Button 
          onClick={handleCreateBlank} 
          size="lg" 
          variant="outline" 
          className="border-green-600 text-green-600 hover:bg-green-50" 
          disabled={isCreating}
        >
          <Plus className="h-5 w-5 mr-2" />
          {isCreating ? 'Creating...' : 'Start from Scratch'}
        </Button>
      </div>
    </div>
  );
};
export default EmptyDashboard;
</file>

<file path="src/features/dashboard/components/FarmDashboard.tsx">
import React from 'react';
import UnifiedHeader from '@/components/layout/UnifiedHeader';
import {
  WeatherSummaryCard,
  CropStatusSummary,
  AlertsSection,
  QuickActionsGrid,
  RecentKnowledgeSection,
  RecentActivitiesCard
} from './';
import { useDashboardData } from '../hooks';


export function FarmDashboard() {
  const {
    weather,
    crops,
    alerts,
    knowledgeEntries,
    notebooksCount,
    isKnowledgeLoading
  } = useDashboardData();

  return (
    <div className="min-h-screen bg-gradient-to-b from-sky-50 to-green-50">
      <UnifiedHeader variant="full" />

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Alerts Section */}
        <AlertsSection alerts={alerts} />

        {/* Weather Overview */}
        <WeatherSummaryCard weather={weather} />

        {/* Crops Status & Quick Actions */}
        <div className="grid md:grid-cols-2 gap-6 mb-6">
          <CropStatusSummary crops={crops} />
          <QuickActionsGrid />
        </div>

        {/* Knowledge Base & Activities */}
        <div className="grid md:grid-cols-2 gap-6">
          <RecentKnowledgeSection 
            knowledgeEntries={knowledgeEntries} 
            isLoading={isKnowledgeLoading} 
          />
          <RecentActivitiesCard notebooksCount={notebooksCount} />
        </div>
      </main>
    </div>
  );
}
</file>

<file path="src/features/dashboard/components/index.ts">
// Dashboard Components
export * from './AgriDashboardStats';
export * from './AgriKnowledgeGrid';
export * from './BulkActions';
export * from './DashboardHeader';
export * from './EmptyDashboard';
export * from './NotebookCard';
export * from './NotebookGrid';
export * from './FarmDashboard';

// Farm Dashboard Components
export * from './AlertsSection';
export * from './CropStatusSummary';
export * from './QuickActionsGrid';
export * from './RecentActivitiesCard';
export * from './RecentKnowledgeSection';
export * from './WeatherSummaryCard';
</file>

<file path="src/features/dashboard/components/NotebookCard.tsx">
import React, { useState } from 'react';
import { Trash2, Calendar, Target, Sprout } from 'lucide-react';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/shared/components/ui/alert-dialog';
import { Badge } from '@/shared/components/ui/badge';
import { Checkbox } from '@/shared/components/ui/checkbox';
import { useNotebookDelete } from '@/hooks/useNotebookDelete';
import { getCategoryName } from '@/utils/agricultureTemplates';

interface NotebookCardProps {
  notebook: {
    id: string;
    title: string;
    date: string;
    sources: number;
    icon: string;
    color: string;
    hasCollaborators?: boolean;
    category?: string;
    tags?: string[];
    crop_types?: string[];
    difficulty_level?: string;
    knowledge_type?: string;
  };
  isSelected?: boolean;
  onSelect?: (id: string, selected: boolean) => void;
  showCheckbox?: boolean;
}

const NotebookCard = ({
  notebook,
  isSelected = false,
  onSelect,
  showCheckbox = false
}: NotebookCardProps) => {
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const {
    deleteNotebook,
    isDeleting
  } = useNotebookDelete();

  const handleDeleteClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    console.log('Delete button clicked for notebook:', notebook.id);
    setShowDeleteDialog(true);
  };

  const handleConfirmDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    console.log('Confirming delete for notebook:', notebook.id);
    deleteNotebook(notebook.id);
    setShowDeleteDialog(false);
  };

  const handleCheckboxChange = (checked: boolean) => {
    if (onSelect) {
      onSelect(notebook.id, checked);
    }
  };

  // Generate CSS classes from color name
  const colorName = notebook.color || 'gray';
  const backgroundClass = `bg-${colorName}-100`;
  const borderClass = `border-${colorName}-200`;

  return <div 
      className={`rounded-lg border ${borderClass} ${backgroundClass} p-4 hover:shadow-md transition-shadow cursor-pointer relative flex flex-col h-64 ${isSelected ? 'ring-2 ring-blue-500' : ''}`}
    >
      {/* Selection checkbox */}
      {showCheckbox && (
        <div className="absolute top-3 left-3 z-10" data-checkbox-action="true">
          <Checkbox
            checked={isSelected}
            onCheckedChange={handleCheckboxChange}
            className="bg-white shadow-sm"
          />
        </div>
      )}

      <div className="absolute top-3 right-3" data-delete-action="true">
        <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
          <AlertDialogTrigger asChild>
            <button onClick={handleDeleteClick} className="p-1 hover:bg-red-50 rounded text-gray-400 hover:text-red-500 transition-colors delete-button" disabled={isDeleting} data-delete-action="true">
              <Trash2 className="h-4 w-4" />
            </button>
          </AlertDialogTrigger>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Delete this knowledge entry?</AlertDialogTitle>
              <AlertDialogDescription>
                You're about to delete this knowledge entry and all of its content. This cannot be undone.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>Cancel</AlertDialogCancel>
              <AlertDialogAction onClick={handleConfirmDelete} className="bg-red-600 hover:bg-red-700" disabled={isDeleting}>
                {isDeleting ? 'Deleting...' : 'Delete'}
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </div>
      
      {/* Header with icon and category */}
      <div className="flex items-start justify-between mb-3">
        <div className="w-12 h-12 rounded-lg flex items-center justify-center bg-white/50">
          <span className="text-2xl">{notebook.icon}</span>
        </div>
        {notebook.category && (
          <Badge variant="secondary" className="text-xs bg-white/70">
            {getCategoryName(notebook.category)}
          </Badge>
        )}
      </div>
      
      {/* Title */}
      <h3 className="text-gray-900 mb-3 pr-2 line-clamp-2 text-lg font-medium leading-tight flex-grow-0">
        {notebook.title}
      </h3>
      
      {/* Agricultural metadata */}
      <div className="flex-grow space-y-2">
        {/* Knowledge type and difficulty */}
        <div className="flex items-center gap-2 flex-wrap">
          {notebook.knowledge_type && (
            <Badge variant="outline" className="text-xs px-2 py-0.5">
              <Target className="h-3 w-3 mr-1" />
              {notebook.knowledge_type}
            </Badge>
          )}
          {notebook.difficulty_level && (
            <Badge variant="outline" className="text-xs px-2 py-0.5">
              {notebook.difficulty_level}
            </Badge>
          )}
        </div>
        
        {/* Crop types */}
        {notebook.crop_types && notebook.crop_types.length > 0 && (
          <div className="flex items-center gap-1 flex-wrap">
            <Sprout className="h-3 w-3 text-green-600 flex-shrink-0" />
            <div className="flex gap-1 flex-wrap">
              {notebook.crop_types.slice(0, 2).map(crop => (
                <Badge key={crop} variant="secondary" className="text-xs bg-green-100 text-green-800">
                  {crop.replace('_', ' ').toUpperCase()}
                </Badge>
              ))}
              {notebook.crop_types.length > 2 && (
                <Badge variant="secondary" className="text-xs bg-green-100 text-green-800">
                  +{notebook.crop_types.length - 2}
                </Badge>
              )}
            </div>
          </div>
        )}
        
        {/* Tags */}
        {notebook.tags && notebook.tags.length > 0 && (
          <div className="flex gap-1 flex-wrap">
            {notebook.tags.slice(0, 2).map(tag => (
              <Badge key={tag} variant="outline" className="text-xs">
                #{tag}
              </Badge>
            ))}
            {notebook.tags.length > 2 && (
              <Badge variant="outline" className="text-xs">
                +{notebook.tags.length - 2} more
              </Badge>
            )}
          </div>
        )}
      </div>
      
      {/* Footer with date and sources */}
      <div className="flex items-center justify-between text-sm text-gray-500 mt-auto pt-2 border-t border-white/30">
        <div className="flex items-center gap-1">
          <Calendar className="h-3 w-3" />
          <span>{notebook.date}</span>
        </div>
        <span>{notebook.sources} source{notebook.sources !== 1 ? 's' : ''}</span>
      </div>
    </div>;
};

export default NotebookCard;
</file>

<file path="src/features/dashboard/components/NotebookGrid.tsx">
import React, { useState, useMemo } from 'react';
import { Button } from '@/shared/components/ui/button';
import NotebookCard from './NotebookCard';
import { Check, Grid3X3, List, ChevronDown } from 'lucide-react';
import { useNotebooks } from '@/hooks/useNotebooks';
import { useNavigate } from 'react-router-dom';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/shared/components/ui/dropdown-menu';

const NotebookGrid = () => {
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [sortBy, setSortBy] = useState('Most recent');
  const {
    notebooks,
    isLoading,
    createNotebook,
    isCreating
  } = useNotebooks();
  const navigate = useNavigate();

  const sortedNotebooks = useMemo(() => {
    if (!notebooks) return [];
    
    const sorted = [...notebooks];
    
    if (sortBy === 'Most recent') {
      return sorted.sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime());
    } else if (sortBy === 'Title') {
      return sorted.sort((a, b) => a.title.localeCompare(b.title));
    }
    
    return sorted;
  }, [notebooks, sortBy]);

  const handleCreateNotebook = () => {
    createNotebook({
      title: 'Untitled notebook',
      description: ''
    }, {
      onSuccess: data => {
        console.log('Navigating to notebook:', data.id);
        navigate(`/notebook/${data.id}`);
      },
      onError: error => {
        console.error('Failed to create notebook:', error);
      }
    });
  };

  const handleNotebookClick = (notebookId: string, e: React.MouseEvent) => {
    // Check if the click is coming from a delete action or other interactive element
    const target = e.target as HTMLElement;
    const isDeleteAction = target.closest('[data-delete-action="true"]') || target.closest('.delete-button') || target.closest('[role="dialog"]');
    if (isDeleteAction) {
      console.log('Click prevented due to delete action');
      return;
    }
    navigate(`/notebook/${notebookId}`);
  };

  if (isLoading) {
    return <div className="text-center py-16">
        <p className="text-gray-600">Loading notebooks...</p>
      </div>;
  }

  return <div>
      <div className="flex items-center justify-between mb-8">
        <Button className="bg-black hover:bg-gray-800 text-white rounded-full px-6" onClick={handleCreateNotebook} disabled={isCreating}>
          {isCreating ? 'Creating...' : '+ Create new'}
        </Button>
        
        <div className="flex items-center space-x-4">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <div className="flex items-center space-x-2 bg-white rounded-lg border px-3 py-2 cursor-pointer hover:bg-gray-50 transition-colors">
                <span className="text-sm text-gray-600">{sortBy}</span>
                <ChevronDown className="h-4 w-4 text-gray-400" />
              </div>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-48">
              <DropdownMenuItem onClick={() => setSortBy('Most recent')} className="flex items-center justify-between">
                Most recent
                {sortBy === 'Most recent' && <Check className="h-4 w-4" />}
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSortBy('Title')} className="flex items-center justify-between">
                Title
                {sortBy === 'Title' && <Check className="h-4 w-4" />}
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {sortedNotebooks.map(notebook => <div key={notebook.id} onClick={e => handleNotebookClick(notebook.id, e)}>
            <NotebookCard notebook={{
          id: notebook.id,
          title: notebook.title,
          date: new Date(notebook.updated_at).toLocaleDateString('en-US', {
            month: 'short',
            day: 'numeric',
            year: 'numeric'
          }),
          sources: notebook.sources?.[0]?.count || 0,
          icon: notebook.icon || '📝',
          color: notebook.color || 'bg-gray-100'
        }} />
          </div>)}
      </div>
    </div>;
};

export default NotebookGrid;
</file>

<file path="src/features/dashboard/components/QuickActionsGrid.tsx">
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card';
import { Button } from '@/shared/components/ui/button';
import { 
  Cloud, 
  Wheat, 
  Calendar,
  TrendingUp
} from 'lucide-react';
import { Link } from 'react-router-dom';

export function QuickActionsGrid() {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Quick Actions</CardTitle>
        <CardDescription>
          Common tasks and information
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 gap-3">
          <Button variant="outline" asChild className="h-auto flex-col py-4">
            <Link to="/chat">
              <Cloud className="h-8 w-8 mb-2 text-blue-600" />
              <span>Ask About Weather</span>
            </Link>
          </Button>
          <Button variant="outline" asChild className="h-auto flex-col py-4">
            <Link to="/knowledge">
              <Wheat className="h-8 w-8 mb-2 text-green-600" />
              <span>Knowledge Base</span>
            </Link>
          </Button>
          <Button variant="outline" asChild className="h-auto flex-col py-4">
            <Link to="/crops">
              <Calendar className="h-8 w-8 mb-2 text-orange-600" />
              <span>Planting Calendar</span>
            </Link>
          </Button>
          <Button variant="outline" asChild className="h-auto flex-col py-4">
            <Link to="/community">
              <TrendingUp className="h-8 w-8 mb-2 text-purple-600" />
              <span>Market Prices</span>
            </Link>
          </Button>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/features/dashboard/components/RecentActivitiesCard.tsx">
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card';

interface RecentActivitiesCardProps {
  notebooksCount: number;
}

export function RecentActivitiesCard({ notebooksCount }: RecentActivitiesCardProps) {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Recent Activities</CardTitle>
        <CardDescription>
          Your farming journey
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-3">
          <div className="flex items-center space-x-3 text-sm">
            <div className="w-2 h-2 bg-green-500 rounded-full"></div>
            <span className="text-gray-600">Yesterday</span>
            <span>Applied fertilizer to maize field</span>
          </div>
          <div className="flex items-center space-x-3 text-sm">
            <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
            <span className="text-gray-600">3 days ago</span>
            <span>Received weather advisory for upcoming rain</span>
          </div>
          <div className="flex items-center space-x-3 text-sm">
            <div className="w-2 h-2 bg-orange-500 rounded-full"></div>
            <span className="text-gray-600">1 week ago</span>
            <span>Harvested 2 hectares of rice</span>
          </div>
          {notebooksCount > 0 && (
            <div className="flex items-center space-x-3 text-sm">
              <div className="w-2 h-2 bg-purple-500 rounded-full"></div>
              <span className="text-gray-600">Today</span>
              <span>Added {notebooksCount} knowledge entries</span>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/features/dashboard/components/RecentKnowledgeSection.tsx">
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card';
import { Button } from '@/shared/components/ui/button';
import { 
  Cloud, 
  Wheat, 
  AlertTriangle,
  Book,
  Plus
} from 'lucide-react';
import { Link } from 'react-router-dom';
import { formatDistanceToNow } from 'date-fns';

interface KnowledgeEntry {
  id: string;
  title: string;
  description?: string;
  updated_at?: string;
  icon: React.ComponentType<{ className?: string }>;
}

interface RecentKnowledgeSectionProps {
  knowledgeEntries: KnowledgeEntry[];
  isLoading: boolean;
}

function getKnowledgeIcon(title: string) {
  const titleLower = title.toLowerCase();
  if (titleLower.includes('weather') || titleLower.includes('climate')) return Cloud;
  if (titleLower.includes('crop') || titleLower.includes('plant')) return Wheat;
  if (titleLower.includes('pest') || titleLower.includes('disease')) return AlertTriangle;
  return Book;
}

export function RecentKnowledgeSection({ knowledgeEntries, isLoading }: RecentKnowledgeSectionProps) {
  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>Recent Knowledge Entries</span>
          <Link to="/knowledge" className="text-sm font-normal text-blue-600 hover:underline">
            View All →
          </Link>
        </CardTitle>
        <CardDescription>
          Your latest agricultural insights
        </CardDescription>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          <div className="text-center py-4">
            <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-green-600 mx-auto mb-2"></div>
            <p className="text-sm text-gray-500">Loading...</p>
          </div>
        ) : knowledgeEntries.length > 0 ? (
          <div className="space-y-3">
            {knowledgeEntries.map((entry) => {
              const IconComponent = entry.icon;
              return (
                <div key={entry.id} className="flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50 transition-colors">
                  <div className="p-1 bg-green-100 rounded">
                    <IconComponent className="h-4 w-4 text-green-600" />
                  </div>
                  <div className="flex-1 min-w-0">
                    <Link 
                      to={`/knowledge/${entry.id}`}
                      className="font-medium text-sm text-gray-900 hover:text-green-600 truncate block"
                    >
                      {entry.title}
                    </Link>
                    {entry.description && (
                      <p className="text-xs text-gray-600 mt-1 line-clamp-2">
                        {entry.description}
                      </p>
                    )}
                    <p className="text-xs text-gray-500 mt-1">
                      {entry.updated_at 
                        ? formatDistanceToNow(new Date(entry.updated_at), { addSuffix: true })
                        : 'Recently'
                      }
                    </p>
                  </div>
                </div>
              );
            })}
            <Button asChild variant="outline" className="w-full mt-2">
              <Link to="/knowledge/new">
                <Plus className="h-4 w-4 mr-2" />
                Add New Knowledge
              </Link>
            </Button>
          </div>
        ) : (
          <div className="text-center py-6">
            <Book className="h-12 w-12 text-gray-400 mx-auto mb-3" />
            <p className="text-sm text-gray-600 mb-3">No knowledge entries yet</p>
            <Button asChild size="sm">
              <Link to="/knowledge/new">
                <Plus className="h-4 w-4 mr-2" />
                Create First Entry
              </Link>
            </Button>
          </div>
        )}
      </CardContent>
    </Card>
  );
}

export { getKnowledgeIcon };
</file>

<file path="src/features/dashboard/components/WeatherSummaryCard.tsx">
import React from 'react';
import { useTranslation } from 'react-i18next';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card';
import { 
  Cloud, 
  Droplets, 
  Thermometer, 
  Wind 
} from 'lucide-react';
import { Link } from 'react-router-dom';

interface WeatherData {
  temperature: number;
  humidity: number;
  rainfall: number;
  windSpeed: number;
  condition: 'sunny' | 'rainy' | 'cloudy' | 'stormy';
}

interface WeatherSummaryCardProps {
  weather: WeatherData;
}

export function WeatherSummaryCard({ weather }: WeatherSummaryCardProps) {
  const { t } = useTranslation();

  return (
    <Card className="mb-6 weather-sunny">
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>{t('weather.current')}</span>
          <Link to="/weather" className="text-sm font-normal text-blue-600 hover:underline">
            View Details →
          </Link>
        </CardTitle>
        <CardDescription>
          {t('dashboard.quickWeather')}
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="bg-white/80 rounded-lg p-4">
            <div className="flex items-center space-x-2 text-gray-600 mb-1">
              <Thermometer className="h-4 w-4" />
              <span className="text-sm">{t('dashboard.temperature')}</span>
            </div>
            <p className="text-2xl font-bold">{weather.temperature}°C</p>
          </div>
          <div className="bg-white/80 rounded-lg p-4">
            <div className="flex items-center space-x-2 text-gray-600 mb-1">
              <Droplets className="h-4 w-4" />
              <span className="text-sm">{t('dashboard.humidity')}</span>
            </div>
            <p className="text-2xl font-bold">{weather.humidity}%</p>
          </div>
          <div className="bg-white/80 rounded-lg p-4">
            <div className="flex items-center space-x-2 text-gray-600 mb-1">
              <Cloud className="h-4 w-4" />
              <span className="text-sm">{t('dashboard.rainfall')}</span>
            </div>
            <p className="text-2xl font-bold">{weather.rainfall}mm</p>
          </div>
          <div className="bg-white/80 rounded-lg p-4">
            <div className="flex items-center space-x-2 text-gray-600 mb-1">
              <Wind className="h-4 w-4" />
              <span className="text-sm">{t('dashboard.windSpeed')}</span>
            </div>
            <p className="text-2xl font-bold">{weather.windSpeed}km/h</p>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}
</file>

<file path="src/features/dashboard/hooks/index.ts">
// Dashboard Hooks
export { useDashboardData } from './useDashboardData';
</file>

<file path="src/features/dashboard/hooks/useDashboardData.ts">
import { useMemo } from 'react';
import { useNotebooks } from '@/features/notebook/hooks';
import { WeatherData, CropStatus, Alert, KnowledgeEntry } from '../types';
import { getKnowledgeIcon } from '../components/RecentKnowledgeSection';

// Mock data - will be replaced with real API calls
const mockWeatherData: WeatherData = {
  temperature: 28,
  humidity: 65,
  rainfall: 2.5,
  windSpeed: 12,
  condition: 'sunny'
};

const mockCropsData: CropStatus[] = [
  {
    name: 'Maize',
    localName: 'Mahindi',
    health: 'excellent',
    nextAction: 'Apply fertilizer in 3 days',
    daysToHarvest: 45
  },
  {
    name: 'Coffee',
    localName: 'Kahawa',
    health: 'good',
    nextAction: 'Monitor for pests',
    daysToHarvest: 120
  }
];

const mockAlertsData: Alert[] = [
  {
    type: 'warning',
    message: 'Heavy rainfall expected in 2 days. Prepare drainage.',
    urgent: true
  },
  {
    type: 'info',
    message: 'Optimal planting window for rice starts next week.',
    urgent: false
  }
];

export function useDashboardData() {
  const { data: notebooks = [], isLoading: notebooksLoading } = useNotebooks();
  
  // Transform notebooks to knowledge entries
  const recentKnowledgeEntries: KnowledgeEntry[] = useMemo(() => 
    notebooks
      .slice(0, 3)
      .map(notebook => ({
        id: notebook.id,
        title: notebook.title || 'Untitled',
        description: notebook.description,
        updated_at: notebook.updated_at,
        icon: getKnowledgeIcon(notebook.title || '')
      })), 
    [notebooks]
  );

  return {
    weather: mockWeatherData,
    crops: mockCropsData,
    alerts: mockAlertsData,
    knowledgeEntries: recentKnowledgeEntries,
    notebooksCount: notebooks.length,
    isKnowledgeLoading: notebooksLoading
  };
}
</file>

<file path="src/features/dashboard/services/index.ts">
// Dashboard Services - placeholder for future dashboard API services
export {};
</file>

<file path="src/features/dashboard/types/index.ts">
// Dashboard Types
export * from './types';
</file>

<file path="src/features/dashboard/types/types.ts">
export interface WeatherData {
  temperature: number;
  humidity: number;
  rainfall: number;
  windSpeed: number;
  condition: 'sunny' | 'rainy' | 'cloudy' | 'stormy';
}

export interface CropStatus {
  name: string;
  localName: string;
  health: 'excellent' | 'good' | 'warning' | 'critical';
  nextAction: string;
  daysToHarvest?: number;
}

export interface Alert {
  type: 'warning' | 'info';
  message: string;
  urgent: boolean;
}

export interface KnowledgeEntry {
  id: string;
  title: string;
  description?: string;
  updated_at?: string;
  icon: React.ComponentType<{ className?: string }>;
}
</file>

<file path="src/features/dashboard/index.ts">
// Dashboard Feature Exports
export * from './components';
export * from './hooks';
export * from './services';
export * from './types';
</file>

<file path="src/features/knowledge/components/index.ts">
// Knowledge Components
export * from './KnowledgeBase';
export * from './KnowledgeEntry';
export * from './NewKnowledgeEntry';
</file>

<file path="src/features/knowledge/components/KnowledgeBase.tsx">
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { useNotebooks } from '@/hooks/useNotebooks';
import { useAuth } from '@/features/authentication';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card';
import { Button } from '@/shared/components/ui/button';
import { Input } from '@/shared/components/ui/input';
import { Badge } from '@/shared/components/ui/badge';
import UnifiedHeader from '@/components/layout/UnifiedHeader';
import { 
  Plus, 
  Search, 
  Book, 
  Calendar,
  Wheat,
  Cloud,
  Bug,
  DollarSign,
  FileText,
  Clock,
  Eye,
  Trash2,
  MoreHorizontal
} from 'lucide-react';
import { Link } from 'react-router-dom';
import { formatDistanceToNow } from 'date-fns';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/shared/components/ui/dropdown-menu';

const useKnowledgeCategories = () => {
  const { t } = useTranslation();
  return [
    { id: 'weather', name: t('knowledge.weatherClimate'), icon: Cloud, color: 'bg-blue-100 text-blue-800' },
    { id: 'crops', name: t('knowledge.cropManagement'), icon: Wheat, color: 'bg-green-100 text-green-800' },
    { id: 'pests', name: t('knowledge.pestDisease'), icon: Bug, color: 'bg-orange-100 text-orange-800' },
    { id: 'market', name: t('knowledge.marketInfo'), icon: DollarSign, color: 'bg-purple-100 text-purple-800' },
    { id: 'general', name: t('knowledge.generalFarming'), icon: FileText, color: 'bg-gray-100 text-gray-800' }
  ];
};

export function KnowledgeBase() {
  const { t } = useTranslation();
  const { user } = useAuth();
  const { data: notebooks = [], isLoading, error } = useNotebooks();
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const knowledgeCategories = useKnowledgeCategories();

  const filteredNotebooks = notebooks.filter(notebook => {
    const matchesSearch = notebook.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         notebook.description?.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesCategory = !selectedCategory || 
                           notebook.title?.toLowerCase().includes(selectedCategory) ||
                           notebook.description?.toLowerCase().includes(selectedCategory);
    
    return matchesSearch && matchesCategory;
  });

  const getCategoryFromTitle = (title: string) => {
    const titleLower = title.toLowerCase();
    if (titleLower.includes('weather') || titleLower.includes('climate') || titleLower.includes('rain')) {
      return knowledgeCategories.find(c => c.id === 'weather');
    }
    if (titleLower.includes('crop') || titleLower.includes('plant') || titleLower.includes('seed')) {
      return knowledgeCategories.find(c => c.id === 'crops');
    }
    if (titleLower.includes('pest') || titleLower.includes('disease') || titleLower.includes('insect')) {
      return knowledgeCategories.find(c => c.id === 'pests');
    }
    if (titleLower.includes('market') || titleLower.includes('price') || titleLower.includes('sell')) {
      return knowledgeCategories.find(c => c.id === 'market');
    }
    return knowledgeCategories.find(c => c.id === 'general');
  };

  const getNotebookIcon = (title: string) => {
    const category = getCategoryFromTitle(title);
    return category?.icon || FileText;
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-green-50 to-emerald-50">
        <UnifiedHeader variant="full" />
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto mb-4"></div>
            <p className="text-gray-600">Loading your knowledge base...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-green-50 to-emerald-50">
        <UnifiedHeader variant="full" />
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <p className="text-red-600">Error loading knowledge base: {error.message}</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-green-50 to-emerald-50">
      <UnifiedHeader variant="full" />

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Search and Filters */}
        <div className="mb-6 space-y-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder={t('knowledge.searchPlaceholder')}
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
          
          {/* Category Filters */}
          <div className="flex flex-wrap gap-2">
            <Button
              variant={selectedCategory === null ? "default" : "outline"}
              size="sm"
              onClick={() => setSelectedCategory(null)}
            >
              {t('knowledge.allCategories')}
            </Button>
            {knowledgeCategories.map((category) => {
              const IconComponent = category.icon;
              return (
                <Button
                  key={category.id}
                  variant={selectedCategory === category.id ? "default" : "outline"}
                  size="sm"
                  onClick={() => setSelectedCategory(selectedCategory === category.id ? null : category.id)}
                  className="flex items-center gap-1"
                >
                  <IconComponent className="h-3 w-3" />
                  {category.name}
                </Button>
              );
            })}
          </div>
        </div>

        {/* Empty State */}
        {filteredNotebooks.length === 0 && !searchTerm && (
          <Card className="text-center py-12">
            <CardContent>
              <Book className="h-16 w-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                {t('knowledge.startBuilding')}
              </h3>
              <p className="text-gray-600 mb-6 max-w-md mx-auto">
                {t('knowledge.storeImportant')}
              </p>
              <Button asChild>
                <Link to="/knowledge/new">
                  <Plus className="h-4 w-4 mr-2" />
                  {t('knowledge.createFirst')}
                </Link>
              </Button>
            </CardContent>
          </Card>
        )}

        {/* Search Results Empty State */}
        {filteredNotebooks.length === 0 && searchTerm && (
          <Card className="text-center py-12">
            <CardContent>
              <Search className="h-16 w-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                {t('knowledge.noResults')}
              </h3>
              <p className="text-gray-600 mb-4">
                {t('knowledge.noMatch')} "{searchTerm}"
              </p>
              <Button variant="outline" onClick={() => setSearchTerm('')}>
                {t('knowledge.clearSearch')}
              </Button>
            </CardContent>
          </Card>
        )}

        {/* Knowledge Base Grid */}
        {filteredNotebooks.length > 0 && (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredNotebooks.map((notebook) => {
              const IconComponent = getNotebookIcon(notebook.title || '');
              const category = getCategoryFromTitle(notebook.title || '');
              
              return (
                <Card key={notebook.id} className="hover:shadow-lg transition-shadow group">
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="flex items-start space-x-3 flex-1">
                        <div className="p-2 bg-green-100 rounded-lg">
                          <IconComponent className="h-5 w-5 text-green-600" />
                        </div>
                        <div className="flex-1 min-w-0">
                          <CardTitle className="text-lg truncate">
                            {notebook.title || 'Untitled Knowledge Entry'}
                          </CardTitle>
                          {category && (
                            <Badge className={category.color} variant="secondary">
                              {category.name}
                            </Badge>
                          )}
                        </div>
                      </div>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="sm" className="opacity-0 group-hover:opacity-100">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem asChild>
                            <Link to={`/knowledge/${notebook.id}`}>
                              <Eye className="h-4 w-4 mr-2" />
                              View
                            </Link>
                          </DropdownMenuItem>
                          <DropdownMenuItem className="text-red-600">
                            <Trash2 className="h-4 w-4 mr-2" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <CardDescription className="mb-4 line-clamp-3">
                      {notebook.description || 'No description available'}
                    </CardDescription>
                    
                    <div className="flex items-center justify-between text-sm text-gray-500">
                      <div className="flex items-center space-x-1">
                        <Clock className="h-3 w-3" />
                        <span>
                          {notebook.updated_at 
                            ? formatDistanceToNow(new Date(notebook.updated_at), { addSuffix: true })
                            : 'Recently'
                          }
                        </span>
                      </div>
                      <div className="flex items-center space-x-1">
                        <Calendar className="h-3 w-3" />
                        <span>
                          {notebook.created_at 
                            ? new Date(notebook.created_at).toLocaleDateString()
                            : 'Today'
                          }
                        </span>
                      </div>
                    </div>
                    
                    <Button asChild className="w-full mt-4" variant="outline">
                      <Link to={`/knowledge/${notebook.id}`}>
                        Open Knowledge Entry
                      </Link>
                    </Button>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        )}

        {/* Stats Summary */}
        {notebooks.length > 0 && (
          <Card className="mt-8">
            <CardContent className="p-6">
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                <div>
                  <p className="text-2xl font-bold text-green-600">{notebooks.length}</p>
                  <p className="text-sm text-gray-600">{t('knowledge.totalEntries')}</p>
                </div>
                <div>
                  <p className="text-2xl font-bold text-blue-600">
                    {notebooks.filter(n => getCategoryFromTitle(n.title || '').id === 'weather').length}
                  </p>
                  <p className="text-sm text-gray-600">{t('knowledge.weatherEntries')}</p>
                </div>
                <div>
                  <p className="text-2xl font-bold text-green-600">
                    {notebooks.filter(n => getCategoryFromTitle(n.title || '').id === 'crops').length}
                  </p>
                  <p className="text-sm text-gray-600">{t('knowledge.cropEntries')}</p>
                </div>
                <div>
                  <p className="text-2xl font-bold text-orange-600">
                    {notebooks.filter(n => getCategoryFromTitle(n.title || '').id === 'pests').length}
                  </p>
                  <p className="text-sm text-gray-600">{t('knowledge.pestEntries')}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </main>
    </div>
  );
}
</file>

<file path="src/features/knowledge/components/KnowledgeEntry.tsx">
import React, { useState } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { useNotebook } from '@/hooks/useNotebooks';
import { useSources } from '@/hooks/useSources';
import { useChatMessages } from '@/hooks/useChatMessages';
import { useNotebookGeneration } from '@/hooks/useNotebookGeneration';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card';
import { Button } from '@/shared/components/ui/button';
import { Input } from '@/shared/components/ui/input';
import { ScrollArea } from '@/shared/components/ui/scroll-area';
import { Separator } from '@/shared/components/ui/separator';
import { Badge } from '@/shared/components/ui/badge';
import UnifiedHeader from '@/components/layout/UnifiedHeader';
import { 
  ArrowLeft,
  Plus,
  FileText,
  MessageSquare,
  Send,
  Paperclip,
  Mic,
  Book,
  Wheat,
  Cloud,
  Bug,
  DollarSign,
  Upload,
  Link as LinkIcon,
  Youtube,
  Loader2
} from 'lucide-react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/shared/components/ui/tabs';
import AddSourcesDialog from '@/components/notebook/AddSourcesDialog';
import MarkdownRenderer from '@/components/notebook/MarkdownRenderer';
import ChatArea from '@/components/notebook/ChatArea';
import SourcesSidebar from '@/components/notebook/SourcesSidebar';
// Debug component removed for production

const knowledgeCategories = [
  { id: 'weather', name: 'Weather & Climate', icon: Cloud, color: 'bg-blue-100 text-blue-800' },
  { id: 'crops', name: 'Crop Management', icon: Wheat, color: 'bg-green-100 text-green-800' },
  { id: 'pests', name: 'Pest & Disease', icon: Bug, color: 'bg-orange-100 text-orange-800' },
  { id: 'market', name: 'Market Information', icon: DollarSign, color: 'bg-purple-100 text-purple-800' },
  { id: 'general', name: 'General Farming', icon: FileText, color: 'bg-gray-100 text-gray-800' }
];

export function KnowledgeEntry() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [showAddSources, setShowAddSources] = useState(false);
  const [activeTab, setActiveTab] = useState('chat');
  const [questionToSend, setQuestionToSend] = useState<string | null>(null);
  
  const { data: notebook, isLoading: notebookLoading, error: notebookError } = useNotebook(id!);
  const { data: sources = [] } = useSources(id!);
  const { data: messages = [] } = useChatMessages(id!);
  
  const getCategoryFromTitle = (title: string) => {
    const titleLower = title.toLowerCase();
    if (titleLower.includes('weather') || titleLower.includes('climate') || titleLower.includes('rain')) {
      return knowledgeCategories.find(c => c.id === 'weather');
    }
    if (titleLower.includes('crop') || titleLower.includes('plant') || titleLower.includes('seed')) {
      return knowledgeCategories.find(c => c.id === 'crops');
    }
    if (titleLower.includes('pest') || titleLower.includes('disease') || titleLower.includes('insect')) {
      return knowledgeCategories.find(c => c.id === 'pests');
    }
    if (titleLower.includes('market') || titleLower.includes('price') || titleLower.includes('sell')) {
      return knowledgeCategories.find(c => c.id === 'market');
    }
    return knowledgeCategories.find(c => c.id === 'general');
  };

  if (notebookLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-green-50 to-emerald-50">
        <UnifiedHeader variant="full" showBackButton onBackClick={() => navigate('/knowledge')} />
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <Loader2 className="h-8 w-8 animate-spin text-green-600 mx-auto mb-4" />
            <p className="text-gray-600">Loading knowledge entry...</p>
          </div>
        </div>
      </div>
    );
  }

  if (notebookError || !notebook) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-green-50 to-emerald-50">
        <UnifiedHeader variant="full" showBackButton onBackClick={() => navigate('/knowledge')} />
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <p className="text-red-600 mb-4">Knowledge entry not found</p>
            <Button asChild>
              <Link to="/knowledge">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Knowledge Base
              </Link>
            </Button>
          </div>
        </div>
      </div>
    );
  }

  const category = getCategoryFromTitle(notebook.title || '');
  const IconComponent = category?.icon || FileText;

  const handleSendQuestion = (question: string) => {
    setQuestionToSend(question);
    setActiveTab('chat');
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <AppHeader 
        title={notebook.title || 'Knowledge Entry'} 
        subtitle={notebook.description || category?.name}
        showBackButton 
        onBackClick={() => navigate('/knowledge')} 
      />

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="grid lg:grid-cols-4 gap-6 h-[calc(100vh-180px)]">
          {/* Sources Sidebar */}
          <div className="lg:col-span-1">
            <Card className="h-full">
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <FileText className="h-5 w-5" />
                  Sources ({sources?.length || 0})
                </CardTitle>
                <CardDescription>
                  Documents and references for this knowledge entry
                </CardDescription>
              </CardHeader>
              <CardContent className="p-0">
                <SourcesSidebar notebookId={id!} />
              </CardContent>
            </Card>
          </div>

          {/* Main Content Area */}
          <div className="lg:col-span-2">
            <Card className="h-full">
              <Tabs value={activeTab} onValueChange={setActiveTab} className="h-full flex flex-col">
                <div className="px-6 pt-6">
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="chat" className="flex items-center gap-2">
                      <MessageSquare className="h-4 w-4" />
                      AI Assistant
                    </TabsTrigger>
                    <TabsTrigger value="overview" className="flex items-center gap-2">
                      <Book className="h-4 w-4" />
                      Overview
                    </TabsTrigger>
                  </TabsList>
                </div>
                
                <TabsContent value="chat" className="flex-1 px-6 pb-6">
                  <ChatArea 
                    notebookId={id!} 
                    hasSource={sources.length > 0}
                    notebook={notebook}
                    questionToSend={questionToSend}
                    onQuestionSent={() => setQuestionToSend(null)}
                  />
                </TabsContent>
                
                <TabsContent value="overview" className="flex-1 px-6 pb-6">
                  <ScrollArea className="h-full">
                    <div className="space-y-4">
                      <div>
                        <h3 className="text-lg font-semibold mb-2">Description</h3>
                        <p className="text-gray-600">
                          {notebook.description || 'No description available for this knowledge entry.'}
                        </p>
                      </div>
                      
                      <Separator />
                      
                      <div>
                        <h3 className="text-lg font-semibold mb-2">Entry Details</h3>
                        <dl className="space-y-2">
                          <div className="flex justify-between">
                            <dt className="text-sm text-gray-600">Created:</dt>
                            <dd className="text-sm font-medium">
                              {notebook.created_at ? new Date(notebook.created_at).toLocaleDateString() : 'Unknown'}
                            </dd>
                          </div>
                          <div className="flex justify-between">
                            <dt className="text-sm text-gray-600">Last Updated:</dt>
                            <dd className="text-sm font-medium">
                              {notebook.updated_at ? new Date(notebook.updated_at).toLocaleDateString() : 'Unknown'}
                            </dd>
                          </div>
                          <div className="flex justify-between">
                            <dt className="text-sm text-gray-600">Sources:</dt>
                            <dd className="text-sm font-medium">{sources.length} files</dd>
                          </div>
                          <div className="flex justify-between">
                            <dt className="text-sm text-gray-600">Conversations:</dt>
                            <dd className="text-sm font-medium">{messages.length} messages</dd>
                          </div>
                        </dl>
                      </div>

                      {notebook.example_questions && notebook.example_questions.length > 0 && (
                        <>
                          <Separator />
                          <div>
                            <h3 className="text-lg font-semibold mb-2">Suggested Questions</h3>
                            <div className="space-y-2">
                              {notebook.example_questions.map((question, index) => (
                                <Button
                                  key={index}
                                  variant="outline"
                                  className="w-full text-left justify-start h-auto p-3 whitespace-normal"
                                  onClick={() => handleSendQuestion(question)}
                                >
                                  {question}
                                </Button>
                              ))}
                            </div>
                          </div>
                        </>
                      )}
                    </div>
                  </ScrollArea>
                </TabsContent>
              </Tabs>
            </Card>
          </div>

          {/* Notes Sidebar */}
          <div className="lg:col-span-1">
            <Card className="h-full">
              <CardHeader>
                <CardTitle className="text-lg">Notes</CardTitle>
                <CardDescription>
                  Your personal notes and insights
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-sm text-gray-500 text-center py-8">
                  Notes feature coming soon...
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* Add Sources Dialog */}
      <AddSourcesDialog
        open={showAddSources}
        onOpenChange={setShowAddSources}
        notebookId={id!}
      />
    </div>
  );
}
</file>

<file path="src/features/knowledge/components/NewKnowledgeEntry.tsx">
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { useNavigate, Link } from 'react-router-dom';
import { useCreateNotebook } from '@/hooks/useNotebooks';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card';
import { Button } from '@/shared/components/ui/button';
import { Input } from '@/shared/components/ui/input';
import { Label } from '@/shared/components/ui/label';
import { Textarea } from '@/shared/components/ui/textarea';
import UnifiedHeader from '@/components/layout/UnifiedHeader';
import { 
  ArrowLeft,
  Book,
  Wheat,
  Cloud,
  Bug,
  DollarSign,
  FileText,
  Loader2,
  Plus
} from 'lucide-react';
import { useToast } from '@/shared/hooks/use-toast';

const knowledgeCategories = [
  { 
    id: 'weather', 
    name: 'Weather & Climate', 
    icon: Cloud, 
    color: 'bg-blue-100 text-blue-800 border-blue-200',
    description: 'Weather forecasts, climate patterns, seasonal information'
  },
  { 
    id: 'crops', 
    name: 'Crop Management', 
    icon: Wheat, 
    color: 'bg-green-100 text-green-800 border-green-200',
    description: 'Planting guides, harvest times, crop varieties, cultivation techniques'
  },
  { 
    id: 'pests', 
    name: 'Pest & Disease', 
    icon: Bug, 
    color: 'bg-orange-100 text-orange-800 border-orange-200',
    description: 'Pest identification, disease prevention, treatment methods'
  },
  { 
    id: 'market', 
    name: 'Market Information', 
    icon: DollarSign, 
    color: 'bg-purple-100 text-purple-800 border-purple-200',
    description: 'Market prices, selling strategies, buyer information'
  },
  { 
    id: 'general', 
    name: 'General Farming', 
    icon: FileText, 
    color: 'bg-gray-100 text-gray-800 border-gray-200',
    description: 'General agricultural knowledge, techniques, and resources'
  }
];

const suggestedTopics = {
  weather: [
    'Seasonal rainfall patterns in Tanzania',
    'How to interpret weather forecasts for farming',
    'Climate change impacts on agriculture',
    'Best practices during dry seasons'
  ],
  crops: [
    'Maize cultivation best practices',
    'Coffee farming techniques',
    'Rice growing in Tanzania',
    'Organic farming methods'
  ],
  pests: [
    'Fall armyworm identification and control',
    'Coffee berry disease prevention',
    'Integrated pest management strategies',
    'Natural pesticide alternatives'
  ],
  market: [
    'Understanding commodity prices',
    'When to sell your harvest',
    'Cooperative marketing benefits',
    'Export opportunities for farmers'
  ],
  general: [
    'Soil health and fertility management',
    'Water conservation techniques',
    'Farm record keeping',
    'Agricultural technology adoption'
  ]
};

export function NewKnowledgeEntry() {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const { toast } = useToast();
  const createNotebook = useCreateNotebook();
  
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [isCreating, setIsCreating] = useState(false);

  const handleCategorySelect = (categoryId: string) => {
    setSelectedCategory(categoryId);
    
    // Auto-suggest title prefix based on category
    if (!title) {
      const category = knowledgeCategories.find(c => c.id === categoryId);
      if (category) {
        setTitle(`${category.name}: `);
      }
    }
  };

  const handleSuggestedTopic = (topic: string) => {
    setTitle(topic);
    setDescription(`Knowledge entry about: ${topic}`);
  };

  const handleCreate = async () => {
    if (!title.trim()) {
      toast({
        title: "Title Required",
        description: "Please enter a title for your knowledge entry.",
        variant: "destructive",
      });
      return;
    }

    setIsCreating(true);
    
    try {
      const result = await createNotebook.mutateAsync({
        title: title.trim(),
        description: description.trim() || undefined,
      });

      toast({
        title: "Knowledge Entry Created",
        description: "Your new knowledge entry has been created successfully.",
      });

      // Navigate to the new knowledge entry
      navigate(`/knowledge/${result.id}`);
    } catch (error) {
      console.error('Error creating knowledge entry:', error);
      toast({
        title: "Creation Failed",
        description: "Failed to create knowledge entry. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsCreating(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-green-50 to-emerald-50">
      <AppHeader 
        title="New Knowledge Entry" 
        subtitle="Create agricultural knowledge documentation"
        showBackButton 
        onBackClick={() => navigate('/knowledge')} 
      />

      <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="space-y-8">
          {/* Category Selection */}
          <Card>
            <CardHeader>
              <CardTitle>{t('knowledge.chooseCategory')}</CardTitle>
              <CardDescription>
                {t('knowledge.selectType')}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
                {knowledgeCategories.map((category) => {
                  const IconComponent = category.icon;
                  return (
                    <Card
                      key={category.id}
                      className={`cursor-pointer transition-all hover:shadow-md ${
                        selectedCategory === category.id 
                          ? 'ring-2 ring-green-500 bg-green-50' 
                          : 'hover:bg-gray-50'
                      }`}
                      onClick={() => handleCategorySelect(category.id)}
                    >
                      <CardContent className="p-4">
                        <div className="flex items-start space-x-3">
                          <div className={`p-2 rounded-lg ${category.color}`}>
                            <IconComponent className="h-5 w-5" />
                          </div>
                          <div className="flex-1">
                            <h3 className="font-semibold text-sm">{category.name}</h3>
                            <p className="text-xs text-gray-600 mt-1">
                              {category.description}
                            </p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  );
                })}
              </div>
            </CardContent>
          </Card>

          {/* Suggested Topics */}
          {selectedCategory && (
            <Card>
              <CardHeader>
                <CardTitle>Suggested Topics</CardTitle>
                <CardDescription>
                  Popular topics for {knowledgeCategories.find(c => c.id === selectedCategory)?.name}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid md:grid-cols-2 gap-2">
                  {suggestedTopics[selectedCategory as keyof typeof suggestedTopics]?.map((topic, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      className="text-left justify-start h-auto p-3 whitespace-normal"
                      onClick={() => handleSuggestedTopic(topic)}
                    >
                      <Plus className="h-3 w-3 mr-2 flex-shrink-0" />
                      {topic}
                    </Button>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Entry Details */}
          <Card>
            <CardHeader>
              <CardTitle>{t('knowledge.entryDetails')}</CardTitle>
              <CardDescription>
                {t('knowledge.provideBasic')}
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="title">{t('knowledge.titleRequired')}</Label>
                <Input
                  id="title"
                  placeholder={t('knowledge.titlePlaceholder')}
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  className="text-lg"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">{t('knowledge.descriptionOptional')}</Label>
                <Textarea
                  id="description"
                  placeholder={t('knowledge.descriptionPlaceholder')}
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  rows={3}
                />
              </div>

              <div className="flex items-center justify-between pt-4">
                <p className="text-sm text-gray-600">
                  {t('knowledge.addSourcesAfter')}
                </p>
                <Button 
                  onClick={handleCreate}
                  disabled={!title.trim() || isCreating}
                  size="lg"
                >
                  {isCreating ? (
                    <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      {t('knowledge.creating')}
                    </>
                  ) : (
                    <>
                      <Plus className="h-4 w-4 mr-2" />
                      {t('knowledge.createKnowledgeEntry')}
                    </>
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Tips */}
          <Card className="bg-blue-50 border-blue-200">
            <CardContent className="p-6">
              <h3 className="font-semibold text-blue-900 mb-2">💡 Tips for creating effective knowledge entries</h3>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>• Use descriptive titles that clearly indicate the topic</li>
                <li>• Upload relevant documents, PDFs, or web links as sources</li>
                <li>• Ask the AI assistant questions to explore the topic deeply</li>
                <li>• Organize related information under appropriate categories</li>
                <li>• Update entries as you learn new information</li>
              </ul>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  );
}
</file>

<file path="src/features/knowledge/hooks/index.ts">
// Knowledge Hooks - placeholder for future knowledge hooks
export {};
</file>

<file path="src/features/knowledge/services/index.ts">
// Knowledge Services - placeholder for future knowledge API services
export {};
</file>

<file path="src/features/knowledge/types/index.ts">
// Knowledge Types - placeholder for future knowledge types
export {};
</file>

<file path="src/features/knowledge/index.ts">
// Knowledge Feature Exports
export * from './components';
export * from './hooks';
export * from './services';
export * from './types';
</file>

<file path="src/features/notebook/components/AddSourcesDialog.tsx">
import React, { useState, useCallback, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/shared/components/ui/dialog';
import { Button } from '@/shared/components/ui/button';
import { Upload, FileText, Link, Copy } from 'lucide-react';
import MultipleWebsiteUrlsDialog from './MultipleWebsiteUrlsDialog';
import CopiedTextDialog from './CopiedTextDialog';
import { useSources } from '@/hooks/useSources';
import { useFileUpload } from '@/hooks/useFileUpload';
import { useDocumentProcessing } from '@/hooks/useDocumentProcessing';
import { useNotebookGeneration } from '@/hooks/useNotebookGeneration';
import { useToast } from '@/shared/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

interface AddSourcesDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  notebookId?: string;
}

const AddSourcesDialog = ({
  open,
  onOpenChange,
  notebookId
}: AddSourcesDialogProps) => {
  const [dragActive, setDragActive] = useState(false);
  const [showCopiedTextDialog, setShowCopiedTextDialog] = useState(false);
  const [showMultipleWebsiteDialog, setShowMultipleWebsiteDialog] = useState(false);
  const [isLocallyProcessing, setIsLocallyProcessing] = useState(false);

  const {
    addSourceAsync,
    updateSource,
    isAdding
  } = useSources(notebookId);

  const {
    uploadFile,
    isUploading
  } = useFileUpload();

  const {
    processDocumentAsync,
    isProcessing
  } = useDocumentProcessing();

  const {
    generateNotebookContentAsync,
    isGenerating
  } = useNotebookGeneration();

  const {
    toast
  } = useToast();

  // Reset local processing state when dialog opens
  useEffect(() => {
    if (open) {
      setIsLocallyProcessing(false);
    }
  }, [open]);

  const handleDrag = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  }, []);

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const files = Array.from(e.dataTransfer.files);
      handleFileUpload(files);
    }
  }, []);

  const handleFileSelect = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const files = Array.from(e.target.files);
      handleFileUpload(files);
    }
  }, []);

  const processFileAsync = async (file: File, sourceId: string, notebookId: string) => {
    try {
      console.log('Starting file processing for:', file.name, 'source:', sourceId);
      const fileType = file.type.includes('pdf') ? 'pdf' : file.type.includes('audio') ? 'audio' : 'text';

      // Update status to uploading
      updateSource({
        sourceId,
        updates: {
          processing_status: 'uploading'
        }
      });

      // Upload the file
      const filePath = await uploadFile(file, notebookId, sourceId);
      if (!filePath) {
        throw new Error('File upload failed - no file path returned');
      }
      console.log('File uploaded successfully:', filePath);

      // Update with file path and set to processing
      updateSource({
        sourceId,
        updates: {
          file_path: filePath,
          processing_status: 'processing'
        }
      });

      // Start document processing
      try {
        await processDocumentAsync({
          sourceId,
          filePath,
          sourceType: fileType
        });

        // Generate notebook content
        await generateNotebookContentAsync({
          notebookId,
          filePath,
          sourceType: fileType
        });
        
        console.log('Document processing completed for:', sourceId);
        
        // Update status to completed after successful processing
        updateSource({
          sourceId,
          updates: {
            processing_status: 'completed'
          }
        });
      } catch (processingError) {
        console.error('Document processing failed:', processingError);

        // Update to completed with basic info if processing fails
        updateSource({
          sourceId,
          updates: {
            processing_status: 'completed'
          }
        });
      }
    } catch (error) {
      console.error('File processing failed for:', file.name, error);

      // Update status to failed
      updateSource({
        sourceId,
        updates: {
          processing_status: 'failed'
        }
      });
    }
  };

  const handleFileUpload = async (files: File[]) => {
    if (!notebookId) {
      toast({
        title: "Error",
        description: "No notebook selected",
        variant: "destructive"
      });
      return;
    }

    console.log('Processing multiple files with delay strategy:', files.length);
    setIsLocallyProcessing(true);

    try {
      // Step 1: Create the first source immediately (this will trigger generation if it's the first source)
      const firstFile = files[0];
      const firstFileType = firstFile.type.includes('pdf') ? 'pdf' : firstFile.type.includes('audio') ? 'audio' : 'text';
      const firstSourceData = {
        notebookId,
        title: firstFile.name,
        type: firstFileType as 'pdf' | 'text' | 'website' | 'youtube' | 'audio',
        file_size: firstFile.size,
        processing_status: 'pending',
        metadata: {
          fileName: firstFile.name,
          fileType: firstFile.type
        }
      };
      
      console.log('Creating first source for:', firstFile.name);
      const firstSource = await addSourceAsync(firstSourceData);
      
      let remainingSources = [];
      
      // Step 2: If there are more files, add a delay before creating the rest
      if (files.length > 1) {
        console.log('Adding 150ms delay before creating remaining sources...');
        await new Promise(resolve => setTimeout(resolve, 150));
        
        // Create remaining sources
        remainingSources = await Promise.all(files.slice(1).map(async (file, index) => {
          const fileType = file.type.includes('pdf') ? 'pdf' : file.type.includes('audio') ? 'audio' : 'text';
          const sourceData = {
            notebookId,
            title: file.name,
            type: fileType as 'pdf' | 'text' | 'website' | 'youtube' | 'audio',
            file_size: file.size,
            processing_status: 'pending',
            metadata: {
              fileName: file.name,
              fileType: file.type
            }
          };
          console.log('Creating source for:', file.name);
          return await addSourceAsync(sourceData);
        }));
        
        console.log('Remaining sources created:', remainingSources.length);
      }

      // Combine all created sources
      const allCreatedSources = [firstSource, ...remainingSources];

      console.log('All sources created successfully:', allCreatedSources.length);

      // Step 3: Close dialog immediately
      setIsLocallyProcessing(false);
      onOpenChange(false);

      // Step 4: Show success toast
      toast({
        title: "Files Added",
        description: `${files.length} file${files.length > 1 ? 's' : ''} added and processing started`
      });

      // Step 5: Process files in parallel (background)
      const processingPromises = files.map((file, index) => processFileAsync(file, allCreatedSources[index].id, notebookId));

      // Don't await - let processing happen in background
      Promise.allSettled(processingPromises).then(results => {
        const successful = results.filter(r => r.status === 'fulfilled').length;
        const failed = results.filter(r => r.status === 'rejected').length;

        console.log('File processing completed:', {
          successful,
          failed
        });

        if (failed > 0) {
          toast({
            title: "Processing Issues",
            description: `${failed} file${failed > 1 ? 's' : ''} had processing issues. Check the sources list for details.`,
            variant: "destructive"
          });
        }
      });
    } catch (error) {
      console.error('Error creating sources:', error);
      setIsLocallyProcessing(false);
      toast({
        title: "Error",
        description: "Failed to add files. Please try again.",
        variant: "destructive"
      });
    }
  };

  const handleTextSubmit = async (title: string, content: string) => {
    if (!notebookId) return;
    setIsLocallyProcessing(true);

    try {
      // Create source record first to get the ID
      const createdSource = await addSourceAsync({
        notebookId,
        title,
        type: 'text',
        content,
        processing_status: 'processing',
        metadata: {
          characterCount: content.length,
          webhookProcessed: true
        }
      });

      // Send to webhook endpoint with source ID
      const { data, error } = await supabase.functions.invoke('process-additional-sources', {
        body: {
          type: 'copied-text',
          notebookId,
          title,
          content,
          sourceIds: [createdSource.id], // Pass the source ID
          timestamp: new Date().toISOString()
        }
      });

      if (error) {
        console.error('Error processing text source:', error);
        throw error;
      }

      console.log('Text processing initiated successfully');
      
      toast({
        title: "Success",
        description: "Text has been added and sent for processing"
      });
    } catch (error) {
      console.error('Error adding text source:', error);
      
      // Update source status to failed if processing fails
      if (createdSource?.id) {
        updateSource({
          sourceId: createdSource.id,
          updates: {
            processing_status: 'failed'
          }
        });
      }
      
      toast({
        title: "Error",
        description: "Failed to add text source",
        variant: "destructive"
      });
    } finally {
      setIsLocallyProcessing(false);
    }

    onOpenChange(false);
  };

  const handleMultipleWebsiteSubmit = async (urls: string[]) => {
    if (!notebookId) return;
    setIsLocallyProcessing(true);

    try {
      console.log('Creating sources for multiple websites with delay strategy:', urls.length);
      
      // Create the first source immediately (this will trigger generation if it's the first source)
      const firstSource = await addSourceAsync({
        notebookId,
        title: `Website 1: ${urls[0]}`,
        type: 'website',
        url: urls[0],
        processing_status: 'processing',
        metadata: {
          originalUrl: urls[0],
          webhookProcessed: true
        }
      });
      
      console.log('First source created:', firstSource.id);
      
      let remainingSources = [];
      
      // If there are more URLs, add a delay before creating the rest
      if (urls.length > 1) {
        console.log('Adding 150ms delay before creating remaining sources...');
        await new Promise(resolve => setTimeout(resolve, 150));
        
        // Create remaining sources
        remainingSources = await Promise.all(urls.slice(1).map(async (url, index) => {
          return await addSourceAsync({
            notebookId,
            title: `Website ${index + 2}: ${url}`,
            type: 'website',
            url,
            processing_status: 'processing',
            metadata: {
              originalUrl: url,
              webhookProcessed: true
            }
          });
        }));
        
        console.log('Remaining sources created:', remainingSources.length);
      }

      // Combine all created sources
      const allCreatedSources = [firstSource, ...remainingSources];

      // Send to webhook endpoint with all source IDs
      const { data, error } = await supabase.functions.invoke('process-additional-sources', {
        body: {
          type: 'multiple-websites',
          notebookId,
          urls,
          sourceIds: allCreatedSources.map(source => source.id), // Pass array of source IDs
          timestamp: new Date().toISOString()
        }
      });

      if (error) {
        console.error('Error processing websites:', error);
        throw error;
      }

      console.log('Website processing initiated successfully for', urls.length, 'URLs');
      
      toast({
        title: "Success",
        description: `${urls.length} website${urls.length > 1 ? 's' : ''} added and sent for processing`
      });

      onOpenChange(false);
    } catch (error) {
      console.error('Error adding multiple websites:', error);
      
      // Update all source statuses to failed if processing fails
      if (allCreatedSources?.length > 0) {
        allCreatedSources.forEach(source => {
          updateSource({
            sourceId: source.id,
            updates: {
              processing_status: 'failed'
            }
          });
        });
      }
      
      toast({
        title: "Error",
        description: "Failed to add websites",
        variant: "destructive"
      });
    } finally {
      setIsLocallyProcessing(false);
    }
  };

  // Use local processing state instead of global processing states
  const isProcessingFiles = isLocallyProcessing;

  return (
    <>
      <Dialog open={open} onOpenChange={onOpenChange}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader className="pb-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <div className="w-6 h-6 bg-black rounded flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" height="16px" viewBox="0 -960 960 960" width="16px" fill="#FFFFFF">
                    <path d="M480-80q-33 0-56.5-23.5T400-160h160q0 33-23.5 56.5T480-80ZM320-200v-80h320v80H320Zm10-120q-69-41-109.5-110T180-580q0-125 87.5-212.5T480-880q125 0 212.5 87.5T780-580q0 81-40.5 150T630-320H330Zm24-80h252q45-32 69.5-79T700-580q0-92-64-156t-156-64q-92 0-156 64t-64 156q0 54 24.5 101t69.5 79Zm126 0Z" />
                  </svg>
                </div>
                <DialogTitle className="text-xl font-medium">InsightsLM</DialogTitle>
              </div>
            </div>
          </DialogHeader>

          <div className="space-y-6">
            <div>
              <h2 className="text-xl font-medium mb-2">Add sources</h2>
              <p className="text-gray-600 text-sm mb-1">Sources let InsightsLM base its responses on the information that matters most to you.</p>
              <p className="text-gray-500 text-xs">
                (Examples: marketing plans, course reading, research notes, meeting transcripts, sales documents, etc.)
              </p>
            </div>

            {/* File Upload Area */}
            <div 
              className={`border-2 border-dashed rounded-lg p-12 text-center transition-colors ${
                dragActive ? 'border-blue-400 bg-blue-50' : 'border-gray-300 hover:border-gray-400'
              } ${isProcessingFiles ? 'opacity-50 pointer-events-none' : ''}`}
              onDragEnter={handleDrag}
              onDragLeave={handleDrag}
              onDragOver={handleDrag}
              onDrop={handleDrop}
            >
              <div className="flex flex-col items-center space-y-4">
                <div className="w-12 h-12 rounded-full flex items-center justify-center bg-slate-100">
                  <Upload className="h-6 w-6 text-slate-600" />
                </div>
                <div>
                  <h3 className="font-medium text-gray-900 mb-2">
                    {isProcessingFiles ? 'Processing files...' : 'Upload sources'}
                  </h3>
                  <p className="text-gray-600 text-sm">
                    {isProcessingFiles ? (
                      'Please wait while we process your files'
                    ) : (
                      <>
                        Drag & drop or{' '}
                        <button 
                          className="text-blue-600 hover:underline" 
                          onClick={() => document.getElementById('file-upload')?.click()}
                          disabled={isProcessingFiles}
                        >
                          choose file
                        </button>{' '}
                        to upload
                      </>
                    )}
                  </p>
                </div>
                <p className="text-xs text-gray-500">
                  Supported file types: PDF, txt, Markdown, Audio (e.g. mp3)
                </p>
                <input
                  id="file-upload"
                  type="file"
                  multiple
                  className="hidden"
                  accept=".pdf,.txt,.md,.mp3,.wav,.m4a"
                  onChange={handleFileSelect}
                  disabled={isProcessingFiles}
                />
              </div>
            </div>

            {/* Integration Options */}
            <div className="grid grid-cols-2 gap-4">
              <Button
                variant="outline"
                className="h-auto p-4 flex flex-col items-center space-y-2"
                onClick={() => setShowMultipleWebsiteDialog(true)}
                disabled={isProcessingFiles}
              >
                <Link className="h-6 w-6 text-green-600" />
                <span className="font-medium">Link - Website</span>
                <span className="text-sm text-gray-500">Multiple URLs at once</span>
              </Button>

              <Button
                variant="outline"
                className="h-auto p-4 flex flex-col items-center space-y-2"
                onClick={() => setShowCopiedTextDialog(true)}
                disabled={isProcessingFiles}
              >
                <Copy className="h-6 w-6 text-purple-600" />
                <span className="font-medium">Paste Text - Copied Text</span>
                <span className="text-sm text-gray-500">Add copied content</span>
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Sub-dialogs */}
      <CopiedTextDialog 
        open={showCopiedTextDialog} 
        onOpenChange={setShowCopiedTextDialog} 
        onSubmit={handleTextSubmit} 
      />

      <MultipleWebsiteUrlsDialog 
        open={showMultipleWebsiteDialog} 
        onOpenChange={setShowMultipleWebsiteDialog} 
        onSubmit={handleMultipleWebsiteSubmit} 
      />
    </>
  );
};

export default AddSourcesDialog;
</file>

<file path="src/features/notebook/components/AudioPlayer.tsx">
import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/shared/components/ui/button';
import { Card } from '@/shared/components/ui/card';
import { Slider } from '@/shared/components/ui/slider';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/shared/components/ui/dropdown-menu';
import { Play, Pause, RotateCcw, Volume2, Download, MoreVertical, Trash2, Loader2, RefreshCw, AlertTriangle } from 'lucide-react';
import { useToast } from '@/shared/hooks/use-toast';

interface AudioPlayerProps {
  audioUrl: string;
  title?: string;
  notebookId?: string;
  expiresAt?: string | null;
  onError?: () => void;
  onDeleted?: () => void;
  onRetry?: () => void;
  onUrlRefresh?: (notebookId: string) => void;
}

const AudioPlayer = ({ 
  audioUrl, 
  title = "Deep Dive Conversation", 
  notebookId,
  expiresAt,
  onError,
  onDeleted,
  onRetry,
  onUrlRefresh
}: AudioPlayerProps) => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [volume, setVolume] = useState(1);
  const [loading, setLoading] = useState(true);
  const [isDeleting, setIsDeleting] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);
  const [audioError, setAudioError] = useState<string | null>(null);
  const [retryCount, setRetryCount] = useState(0);
  const [autoRetryInProgress, setAutoRetryInProgress] = useState(false);
  const audioRef = useRef<HTMLAudioElement>(null);
  const { toast } = useToast();

  // Check if audio is expired
  const isExpired = expiresAt ? new Date(expiresAt) <= new Date() : false;

  useEffect(() => {
    const audio = audioRef.current;
    if (!audio) return;

    const updateTime = () => setCurrentTime(audio.currentTime);
    const updateDuration = () => {
      setDuration(audio.duration);
      setLoading(false);
      setAudioError(null);
      setRetryCount(0);
    };
    const handleEnded = () => setIsPlaying(false);
    const handleError = async (e: Event) => {
      console.error('Audio error:', e);
      setLoading(false);
      setIsPlaying(false);
      
      // If the URL has expired and we have a notebookId, try to refresh it automatically
      if ((isExpired || audioError?.includes('403') || audioError?.includes('expired')) && 
          notebookId && onUrlRefresh && retryCount < 2 && !autoRetryInProgress) {
        console.log('Audio URL expired or access denied, attempting automatic refresh...');
        setAutoRetryInProgress(true);
        setRetryCount(prev => prev + 1);
        onUrlRefresh(notebookId);
        return;
      }

      if (retryCount < 2 && !autoRetryInProgress) {
        // Auto-retry up to 2 times for transient errors
        setTimeout(() => {
          setRetryCount(prev => prev + 1);
          audio.load();
        }, 1000 * (retryCount + 1)); // Exponential backoff
      } else {
        setAudioError('Failed to load audio');
        setAutoRetryInProgress(false);
        onError?.();
      }
    };

    const handleCanPlay = () => {
      setLoading(false);
      setAudioError(null);
      setRetryCount(0);
      setAutoRetryInProgress(false);
    };

    const handleLoadStart = () => {
      if (autoRetryInProgress) {
        setLoading(true);
      }
    };

    audio.addEventListener('timeupdate', updateTime);
    audio.addEventListener('loadedmetadata', updateDuration);
    audio.addEventListener('canplay', handleCanPlay);
    audio.addEventListener('loadstart', handleLoadStart);
    audio.addEventListener('ended', handleEnded);
    audio.addEventListener('error', handleError);

    return () => {
      audio.removeEventListener('timeupdate', updateTime);
      audio.removeEventListener('loadedmetadata', updateDuration);
      audio.removeEventListener('canplay', handleCanPlay);
      audio.removeEventListener('loadstart', handleLoadStart);
      audio.removeEventListener('ended', handleEnded);
      audio.removeEventListener('error', handleError);
    };
  }, [onError, isExpired, retryCount, notebookId, onUrlRefresh, audioError, autoRetryInProgress]);

  // Reload audio when URL changes (for automatic refresh)
  useEffect(() => {
    const audio = audioRef.current;
    if (audio && autoRetryInProgress) {
      console.log('Reloading audio with new URL...');
      audio.load();
    }
  }, [audioUrl, autoRetryInProgress]);

  const togglePlayPause = () => {
    const audio = audioRef.current;
    if (!audio || audioError) return;

    if (isPlaying) {
      audio.pause();
    } else {
      const playPromise = audio.play();
      if (playPromise !== undefined) {
        playPromise.catch(error => {
          console.error('Play failed:', error);
          setAudioError('Playback failed');
        });
      }
    }
    setIsPlaying(!isPlaying);
  };

  const handleSeek = (value: number[]) => {
    const audio = audioRef.current;
    if (!audio || audioError) return;

    const time = value[0];
    audio.currentTime = time;
    setCurrentTime(time);
  };

  const handleVolumeChange = (value: number[]) => {
    const audio = audioRef.current;
    if (!audio) return;

    const vol = value[0];
    audio.volume = vol;
    setVolume(vol);
  };

  const restart = () => {
    const audio = audioRef.current;
    if (!audio || audioError) return;

    audio.currentTime = 0;
    setCurrentTime(0);
  };

  const retryLoad = () => {
    const audio = audioRef.current;
    if (!audio) return;

    setLoading(true);
    setAudioError(null);
    setRetryCount(0);
    setAutoRetryInProgress(false);
    audio.load();
  };

  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  const downloadAudio = async () => {
    setIsDownloading(true);
    
    try {
      // Fetch the audio file
      const response = await fetch(audioUrl);
      if (!response.ok) {
        throw new Error('Failed to fetch audio file');
      }
      
      // Create a blob from the response
      const blob = await response.blob();
      
      // Create a temporary URL for the blob
      const blobUrl = URL.createObjectURL(blob);
      
      // Create a temporary anchor element and trigger download
      const link = document.createElement('a');
      link.href = blobUrl;
      link.download = `${title}.mp3`;
      document.body.appendChild(link);
      link.click();
      
      // Clean up
      document.body.removeChild(link);
      URL.revokeObjectURL(blobUrl);
      
      toast({
        title: "Download Started",
        description: "Your audio file is being downloaded.",
      });
    } catch (error) {
      console.error('Download failed:', error);
      toast({
        title: "Download Failed",
        description: "Failed to download the audio file. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsDownloading(false);
    }
  };

  const deleteAudio = async () => {
    if (!notebookId) {
      toast({
        title: "Error",
        description: "Cannot delete audio - notebook ID not found",
        variant: "destructive",
      });
      return;
    }

    setIsDeleting(true);
    
    try {
      const { supabase } = await import('@/integrations/supabase/client');
      
      // First, try to remove all files in the notebook folder from storage
      try {
        console.log('Attempting to list files in folder:', notebookId);
        
        // List all files in the notebook folder
        const { data: files, error: listError } = await supabase.storage
          .from('audio')
          .list(notebookId);

        if (listError) {
          console.error('Error listing files:', listError);
        } else if (files && files.length > 0) {
          // Delete all files in the folder
          const filePaths = files.map(file => `${notebookId}/${file.name}`);
          console.log('Deleting files:', filePaths);
          
          const { error: deleteError } = await supabase.storage
            .from('audio')
            .remove(filePaths);

          if (deleteError) {
            console.error('Error deleting files from storage:', deleteError);
          } else {
            console.log('Successfully deleted files from storage');
          }
        }
      } catch (storageError) {
        console.error('Storage operation failed:', storageError);
        // Continue with database update even if storage deletion fails
      }

      // Update the notebook to clear audio overview fields
      const { error } = await supabase
        .from('notebooks')
        .update({
          audio_overview_url: null,
          audio_url_expires_at: null,
          audio_overview_generation_status: null
        })
        .eq('id', notebookId);

      if (error) {
        console.error('Error updating notebook:', error);
        throw error;
      }

      toast({
        title: "Audio Deleted",
        description: "The audio overview and associated files have been successfully deleted.",
      });

      // Call the onDeleted callback to update parent component
      onDeleted?.();

    } catch (error) {
      console.error('Failed to delete audio:', error);
      toast({
        title: "Delete Failed",
        description: "Failed to delete the audio overview. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsDeleting(false);
    }
  };

  return (
    <Card className="p-4 space-y-4">
      <audio ref={audioRef} src={audioUrl} preload="metadata" />
      
      <div className="flex items-center justify-between">
        <div className="flex-1">
          <h4 className="font-medium text-gray-900">{title}</h4>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="sm" disabled={isDeleting}>
              {isDeleting ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <MoreVertical className="h-4 w-4" />
              )}
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={downloadAudio} disabled={isDownloading}>
              {isDownloading ? (
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
              ) : (
                <Download className="h-4 w-4 mr-2" />
              )}
              {isDownloading ? 'Downloading...' : 'Download'}
            </DropdownMenuItem>
            <DropdownMenuItem 
              onClick={deleteAudio}
              className="text-red-600 focus:text-red-600"
              disabled={isDeleting}
            >
              <Trash2 className="h-4 w-4 mr-2" />
              Delete
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>

      {/* Auto-refresh indicator */}
      {autoRetryInProgress && (
        <div className="flex items-center justify-between p-3 bg-blue-50 rounded-md border border-blue-200">
          <div className="flex items-center space-x-2">
            <Loader2 className="h-4 w-4 text-blue-600 animate-spin" />
            <span className="text-sm text-blue-600">Refreshing audio access...</span>
          </div>
        </div>
      )}

      {/* Error State */}
      {audioError && !autoRetryInProgress && (
        <div className="flex items-center justify-between p-3 bg-red-50 rounded-md border border-red-200">
          <div className="flex items-center space-x-2">
            <AlertTriangle className="h-4 w-4 text-red-600" />
            <span className="text-sm text-red-600">{audioError}</span>
          </div>
          <Button
            variant="outline"
            size="sm"
            onClick={onRetry || retryLoad}
            className="text-red-600 border-red-300 hover:bg-red-50"
          >
            <RefreshCw className="h-4 w-4 mr-1" />
            Retry
          </Button>
        </div>
      )}

      {/* Progress Bar */}
      <div className="space-y-2">
        <Slider
          value={[currentTime]}
          max={duration || 100}
          step={1}
          onValueChange={handleSeek}
          className="w-full"
          disabled={loading || !!audioError}
        />
        <div className="flex justify-between text-xs text-gray-500">
          <span>{formatTime(currentTime)}</span>
          <span>{formatTime(duration)}</span>
        </div>
      </div>

      {/* Controls */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Button
            variant="ghost"
            size="sm"
            onClick={restart}
            disabled={loading || !!audioError}
          >
            <RotateCcw className="h-4 w-4" />
          </Button>
          
          <Button
            variant="default"
            size="sm"
            onClick={togglePlayPause}
            disabled={loading || !!audioError}
            className="w-12"
          >
            {loading ? (
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white" />
            ) : isPlaying ? (
              <Pause className="h-4 w-4" />
            ) : (
              <Play className="h-4 w-4" />
            )}
          </Button>
        </div>

        {/* Volume Control */}
        <div className="flex items-center space-x-2 w-24">
          <Volume2 className="h-4 w-4 text-gray-500" />
          <Slider
            value={[volume]}
            max={1}
            step={0.1}
            onValueChange={handleVolumeChange}
            className="flex-1"
          />
        </div>
      </div>
    </Card>
  );
};

export default AudioPlayer;
</file>

<file path="src/features/notebook/components/ChatArea.tsx">
import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/shared/components/ui/button';
import { Input } from '@/shared/components/ui/input';
import { Send, Upload, FileText, Loader2, RefreshCw } from 'lucide-react';
import { Card } from '@/shared/components/ui/card';
import { ScrollArea } from '@/shared/components/ui/scroll-area';
import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from '@/shared/components/ui/carousel';
import { useChatMessages } from '@/hooks/useChatMessages';
import { useSources } from '@/hooks/useSources';
import MarkdownRenderer from '@/components/chat/MarkdownRenderer';
import SaveToNoteButton from './SaveToNoteButton';
import AddSourcesDialog from './AddSourcesDialog';
import { Citation } from '@/types/message';

interface ChatAreaProps {
  hasSource: boolean;
  notebookId?: string;
  notebook?: {
    id: string;
    title: string;
    description?: string;
    generation_status?: string;
    icon?: string;
    example_questions?: string[];
  } | null;
  onCitationClick?: (citation: Citation) => void;
  questionToSend?: string | null;
  onQuestionSent?: () => void;
}

const ChatArea = ({
  hasSource,
  notebookId,
  notebook,
  onCitationClick,
  questionToSend,
  onQuestionSent
}: ChatAreaProps) => {
  const [message, setMessage] = useState('');
  const [pendingUserMessage, setPendingUserMessage] = useState<string | null>(null);
  const [showAiLoading, setShowAiLoading] = useState(false);
  const [clickedQuestions, setClickedQuestions] = useState<Set<string>>(new Set());
  const [showAddSourcesDialog, setShowAddSourcesDialog] = useState(false);
  
  const isGenerating = notebook?.generation_status === 'generating';
  
  const {
    messages,
    sendMessage,
    sendMessageAsync,
    isSending,
    deleteChatHistory,
    isDeletingChatHistory
  } = useChatMessages(notebookId);
  
  const {
    sources
  } = useSources(notebookId);
  
  const sourceCount = sources?.length || 0;

  // Check if at least one source has been successfully processed or is ready for chat
  const hasProcessedSource = sources?.some(source => 
    source.processing_status === 'completed' || 
    source.processing_status === 'processed' ||
    (source.type === 'text' && source.content) || // Text sources don't need processing
    (source.type === 'website' && source.url) ||   // Website sources can work with URL
    source.processing_status === 'pending'         // Allow pending sources for basic chat
  ) || false;

  // Check if any source is actually in a processing state (to show appropriate UI)
  const hasProcessingSources = sources?.some(source => 
    source.processing_status === 'pending' ||
    source.processing_status === 'processing' ||
    source.processing_status === 'uploading'
  ) || false;

  // Always allow chat - sources enhance the experience but aren't required for basic agricultural advice
  const isChatDisabled = false;

  // Debug logging
  console.log('Chat Debug Info:', {
    sourceCount,
    hasProcessedSource,
    isChatDisabled,
    sources: sources?.map(s => ({ 
      id: s.id, 
      type: s.type, 
      processing_status: s.processing_status,
      title: s.title 
    }))
  });

  // Track when we send a message to show loading state
  const [lastMessageCount, setLastMessageCount] = useState(0);

  // Ref for auto-scrolling to the most recent message
  const latestMessageRef = useRef<HTMLDivElement>(null);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  useEffect(() => {
    // If we have new messages and we have a pending message, clear it
    if (messages.length > lastMessageCount && pendingUserMessage) {
      setPendingUserMessage(null);
      setShowAiLoading(false);
    }
    setLastMessageCount(messages.length);
  }, [messages.length, lastMessageCount, pendingUserMessage]);

  // Auto-scroll when pending message is set, when messages update, or when AI loading appears
  useEffect(() => {
    if (latestMessageRef.current && scrollAreaRef.current) {
      // Find the viewport within the ScrollArea
      const viewport = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');
      if (viewport) {
        // Use a small delay to ensure the DOM has updated
        setTimeout(() => {
          latestMessageRef.current?.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }, 50);
      }
    }
  }, [pendingUserMessage, messages.length, showAiLoading]);

  const handleSendMessage = async (messageText?: string) => {
    const textToSend = messageText || message.trim();
    if (textToSend && notebookId) {
      try {
        // Store the pending message to display immediately
        setPendingUserMessage(textToSend);
        setMessage('');
        
        // Show AI loading after user message is sent
        setShowAiLoading(true);
        
        // Use sendMessageAsync for proper async handling
        await sendMessageAsync({
          notebookId: notebookId,
          role: 'user',
          content: textToSend
        });
      } catch (error) {
        console.error('Failed to send message:', error);
        // Clear pending message on error
        setPendingUserMessage(null);
        setShowAiLoading(false);
      }
    }
  };

  // Handle questionToSend from parent component
  useEffect(() => {
    if (questionToSend && notebookId) {
      handleSendMessage(questionToSend);
      onQuestionSent?.();
    }
  }, [questionToSend, notebookId, onQuestionSent]);

  const handleRefreshChat = () => {
    if (notebookId) {
      console.log('Refresh button clicked for notebook:', notebookId);
      deleteChatHistory(notebookId);
      // Reset clicked questions when chat is refreshed
      setClickedQuestions(new Set());
    }
  };
  const handleCitationClick = (citation: Citation) => {
    onCitationClick?.(citation);
  };
  const handleExampleQuestionClick = (question: string) => {
    // Add question to clicked set to remove it from display
    setClickedQuestions(prev => new Set(prev).add(question));
    setMessage(question);
    handleSendMessage(question);
  };

  // Helper function to determine if message is from user
  const isUserMessage = (msg: any) => {
    const messageType = msg.message?.type || msg.message?.role;
    return messageType === 'human' || messageType === 'user';
  };

  // Helper function to determine if message is from AI
  const isAiMessage = (msg: any) => {
    const messageType = msg.message?.type || msg.message?.role;
    return messageType === 'ai' || messageType === 'assistant';
  };

  // Get the index of the last message for auto-scrolling
  const shouldShowScrollTarget = () => {
    return messages.length > 0 || pendingUserMessage || showAiLoading;
  };

  // Show refresh button if there are any messages (including system messages)
  const shouldShowRefreshButton = messages.length > 0;

  // Get example questions from the notebook, filtering out clicked ones
  const exampleQuestions = notebook?.example_questions?.filter(q => !clickedQuestions.has(q)) || [];

  // Update placeholder text based on processing status
  const getPlaceholderText = () => {
    if (sourceCount === 0) {
      return "Ask me anything about farming and agriculture...";
    } else if (hasProcessedSource) {
      return "Ask questions about your sources or farming in general...";
    } else {
      return "Ask general farming questions while sources are processing...";
    }
  };
  return <div className="flex-1 flex flex-col h-full overflow-hidden">
      {/* Chat Header */}
      <div className="p-4 border-b border-gray-200 flex-shrink-0">
        <div className="max-w-4xl mx-auto flex items-center justify-between">
          <h2 className="text-lg font-medium text-gray-900">AI Assistant</h2>
          {shouldShowRefreshButton && <Button variant="ghost" size="sm" onClick={handleRefreshChat} disabled={isDeletingChatHistory || isChatDisabled} className="flex items-center space-x-2">
              <RefreshCw className={`h-4 w-4 ${isDeletingChatHistory ? 'animate-spin' : ''}`} />
              <span>{isDeletingChatHistory ? 'Clearing...' : 'Clear Chat'}</span>
            </Button>}
        </div>
      </div>

      <ScrollArea className="flex-1 h-full" ref={scrollAreaRef}>
        {/* Document Summary */}
        <div className="p-8 border-b border-gray-200">
          <div className="max-w-4xl mx-auto">
            <div className="flex items-center space-x-4 mb-6">
              <div className="w-10 h-10 flex items-center justify-center bg-transparent">
                {isGenerating ? <Loader2 className="text-black font-normal w-10 h-10 animate-spin" /> : <span className="text-[40px] leading-none">{notebook?.icon || '🌾'}</span>}
              </div>
              <div>
                <h1 className="text-2xl font-medium text-gray-900">
                  {isGenerating ? 'Generating content...' : notebook?.title || 'Agricultural Knowledge Assistant'}
                </h1>
                <p className="text-sm text-gray-600">
                  {sourceCount > 0 ? `${sourceCount} source${sourceCount !== 1 ? 's' : ''} available` : 'Ready for general agricultural questions'}
                </p>
              </div>
            </div>
            
            <div className="bg-gray-50 rounded-lg p-6 mb-6">
              {isGenerating ? <div className="flex items-center space-x-2 text-gray-600">
                  <p>AI is analyzing your source and generating a title and description...</p>
                </div> : <MarkdownRenderer content={notebook?.description || (sourceCount > 0 ? 'Ask questions about your uploaded sources or general farming topics.' : 'I\'m here to help with all your agricultural questions. Feel free to ask about crops, weather, pests, farming techniques, and more!')} className="prose prose-gray max-w-none text-gray-700 leading-relaxed" />}
            </div>

            {/* Show a helpful hint when no sources are available */}
            {sourceCount === 0 && !messages.length && !pendingUserMessage && (
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                <div className="flex items-start space-x-3">
                  <div className="text-blue-600 mt-0.5">💡</div>
                  <div>
                    <p className="text-sm text-blue-800 mb-2">
                      <strong>Get started:</strong> You can ask me anything about farming and agriculture!
                    </p>
                    <p className="text-xs text-blue-600">
                      For more detailed answers about specific documents, consider uploading sources using the "Add Sources" button.
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* Chat Messages */}
            {(messages.length > 0 || pendingUserMessage || showAiLoading) && <div className="mb-6 space-y-4">
                {messages.map((msg, index) => <div key={msg.id} className={`flex ${isUserMessage(msg) ? 'justify-end' : 'justify-start'}`}>
                    <div className={`${isUserMessage(msg) ? 'max-w-xs lg:max-w-md px-4 py-2 bg-blue-500 text-white rounded-lg' : 'w-full'}`}>
                      <div className={isUserMessage(msg) ? '' : 'prose prose-gray max-w-none text-gray-800'}>
                        <MarkdownRenderer content={msg.message.content} className={isUserMessage(msg) ? '' : ''} onCitationClick={handleCitationClick} isUserMessage={isUserMessage(msg)} />
                      </div>
                      {isAiMessage(msg) && <div className="mt-2 flex justify-start">
                          <SaveToNoteButton content={msg.message.content} notebookId={notebookId} />
                        </div>}
                    </div>
                  </div>)}
                
                {/* Pending user message */}
                {pendingUserMessage && <div className="flex justify-end">
                    <div className="max-w-xs lg:max-w-md px-4 py-2 bg-blue-500 text-white rounded-lg">
                      <MarkdownRenderer content={pendingUserMessage} className="" isUserMessage={true} />
                    </div>
                  </div>}
                
                {/* AI Loading Indicator */}
                {showAiLoading && <div className="flex justify-start" ref={latestMessageRef}>
                    <div className="flex items-center space-x-2 px-4 py-3 bg-gray-100 rounded-lg">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{
                animationDelay: '0.1s'
              }}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{
                animationDelay: '0.2s'
              }}></div>
                    </div>
                  </div>}
                
                {/* Scroll target for when no AI loading is shown */}
                {!showAiLoading && shouldShowScrollTarget() && <div ref={latestMessageRef} />}
              </div>}
          </div>
        </div>
      </ScrollArea>

      {/* Chat Input - Fixed at bottom */}
      <div className="p-6 border-t border-gray-200 flex-shrink-0">
        <div className="max-w-4xl mx-auto">
          <div className="flex space-x-4">
            <div className="flex-1 relative">
              <Input placeholder={getPlaceholderText()} value={message} onChange={e => setMessage(e.target.value)} onKeyDown={e => e.key === 'Enter' && !isChatDisabled && !isSending && !pendingUserMessage && handleSendMessage()} className="pr-20" disabled={isChatDisabled || isSending || !!pendingUserMessage} />
              <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-sm text-gray-500">
                {sourceCount} source{sourceCount !== 1 ? 's' : ''}
              </div>
            </div>
            <Button onClick={() => handleSendMessage()} disabled={!message.trim() || isChatDisabled || isSending || !!pendingUserMessage}>
              {isSending || pendingUserMessage ? <Loader2 className="h-4 w-4 animate-spin" /> : <Send className="h-4 w-4" />}
            </Button>
          </div>
          
          {/* Example Questions Carousel */}
          {!isChatDisabled && !pendingUserMessage && !showAiLoading && exampleQuestions.length > 0 && <div className="mt-4">
              <Carousel className="w-full max-w-4xl">
                <CarouselContent className="-ml-2 md:-ml-4">
                  {exampleQuestions.map((question, index) => <CarouselItem key={index} className="pl-2 md:pl-4 basis-auto">
                      <Button variant="outline" size="sm" className="text-left whitespace-nowrap h-auto py-2 px-3 text-sm" onClick={() => handleExampleQuestionClick(question)}>
                        {question}
                      </Button>
                    </CarouselItem>)}
                </CarouselContent>
                {exampleQuestions.length > 2 && <>
                    <CarouselPrevious className="left-0" />
                    <CarouselNext className="right-0" />
                  </>}
              </Carousel>
            </div>}
        </div>
      </div>
      
      {/* Footer */}
      <div className="p-4 border-t border-gray-200 flex-shrink-0">
        <p className="text-center text-sm text-gray-500">AI4AgriWeather can be inaccurate; please double-check its responses.</p>
      </div>
      
      {/* Add Sources Dialog */}
      <AddSourcesDialog open={showAddSourcesDialog} onOpenChange={setShowAddSourcesDialog} notebookId={notebookId} />
    </div>;
};

export default ChatArea;
</file>

<file path="src/features/notebook/components/CopiedTextDialog.tsx">
import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/shared/components/ui/dialog';
import { Button } from '@/shared/components/ui/button';
import { Textarea } from '@/shared/components/ui/textarea';
import { Input } from '@/shared/components/ui/input';
import { Label } from '@/shared/components/ui/label';
import { Copy, ClipboardPaste } from 'lucide-react';

interface CopiedTextDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSubmit: (title: string, content: string) => void;
}

const CopiedTextDialog = ({
  open,
  onOpenChange,
  onSubmit
}: CopiedTextDialogProps) => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Auto-populate with clipboard content when dialog opens
  useEffect(() => {
    if (open) {
      navigator.clipboard.readText()
        .then(text => {
          if (text && text.trim()) {
            setContent(text);
            // Generate a default title based on content length
            const words = text.trim().split(' ').slice(0, 8).join(' ');
            setTitle(words.length > 50 ? words.substring(0, 50) + '...' : words);
          }
        })
        .catch(err => {
          console.log('Could not read clipboard:', err);
        });
    }
  }, [open]);

  const handleSubmit = async () => {
    if (!title.trim() || !content.trim()) {
      return;
    }

    setIsSubmitting(true);
    try {
      await onSubmit(title.trim(), content.trim());
      setTitle('');
      setContent('');
      onOpenChange(false);
    } catch (error) {
      console.error('Error submitting copied text:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleClose = () => {
    setTitle('');
    setContent('');
    onOpenChange(false);
  };

  const handlePasteFromClipboard = async () => {
    try {
      const text = await navigator.clipboard.readText();
      if (text) {
        setContent(text);
        if (!title.trim()) {
          const words = text.trim().split(' ').slice(0, 8).join(' ');
          setTitle(words.length > 50 ? words.substring(0, 50) + '...' : words);
        }
      }
    } catch (err) {
      console.error('Could not read clipboard:', err);
    }
  };

  const isValid = title.trim() !== '' && content.trim() !== '';
  const characterCount = content.length;

  return (
    <Dialog open={open} onOpenChange={handleClose}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Copy className="h-5 w-5 text-purple-600" />
            <span>Add Copied Text</span>
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          <div>
            <p className="text-sm text-gray-600 mb-4">
              This dialog automatically reads from your clipboard. You can also manually paste content below.
            </p>
          </div>

          <div className="space-y-2">
            <Label htmlFor="title" className="text-sm font-medium">
              Title
            </Label>
            <Input
              id="title"
              placeholder="Enter a title for this content..."
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <Label htmlFor="content" className="text-sm font-medium">
                Content
              </Label>
              <Button
                variant="outline"
                size="sm"
                onClick={handlePasteFromClipboard}
                className="flex items-center space-x-1"
              >
                <ClipboardPaste className="h-4 w-4" />
                <span>Paste from Clipboard</span>
              </Button>
            </div>
            <Textarea
              id="content"
              placeholder="Your copied content will appear here..."
              value={content}
              onChange={(e) => setContent(e.target.value)}
              className="min-h-[200px] resize-y"
            />
            <div className="flex justify-between text-xs text-gray-500">
              <span>{characterCount} characters</span>
              {characterCount > 10000 && (
                <span className="text-amber-600">Large content may take longer to process</span>
              )}
            </div>
          </div>

          <div className="flex justify-end space-x-2 pt-4">
            <Button variant="outline" onClick={handleClose}>
              Cancel
            </Button>
            <Button 
              onClick={handleSubmit} 
              disabled={!isValid || isSubmitting}
            >
              {isSubmitting ? 'Adding...' : 'Add Copied Text'}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default CopiedTextDialog;
</file>

<file path="src/features/notebook/components/index.ts">
// Notebook Components
export * from './AddSourcesDialog';
export * from './AudioPlayer';
export * from './ChatArea';
export * from './CopiedTextDialog';
export * from './MobileNotebookTabs';
export * from './MultipleWebsiteUrlsDialog';
export * from './NoteEditor';
export * from './NotebookHeader';
export * from './PasteTextDialog';
export * from './RenameSourceDialog';
export * from './SaveToNoteButton';
export * from './SourcesSidebar';
export * from './StudioSidebar';
export * from './WebsiteUrlInput';
export * from './YouTubeUrlInput';
</file>

<file path="src/features/notebook/components/MobileNotebookTabs.tsx">
import React from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/shared/components/ui/tabs';
import { FileText, MessageCircle, NotebookPen } from 'lucide-react';
import SourcesSidebar from './SourcesSidebar';
import ChatArea from './ChatArea';
import StudioSidebar from './StudioSidebar';
import { Citation } from '@/types/message';

interface MobileNotebookTabsProps {
  hasSource: boolean;
  notebookId?: string;
  notebook?: {
    id: string;
    title: string;
    description?: string;
    generation_status?: string;
    icon?: string;
    example_questions?: string[];
  } | null;
  selectedCitation?: Citation | null;
  onCitationClose?: () => void;
  setSelectedCitation?: (citation: Citation | null) => void;
  onCitationClick?: (citation: Citation) => void;
}

const MobileNotebookTabs = ({
  hasSource,
  notebookId,
  notebook,
  selectedCitation,
  onCitationClose,
  setSelectedCitation,
  onCitationClick
}: MobileNotebookTabsProps) => {
  return (
    <Tabs defaultValue="chat" className="flex-1 flex flex-col overflow-hidden">
      <TabsList className="grid w-full grid-cols-3 bg-gray-100 p-1 h-12 rounded-none border-b border-gray-200">
        <TabsTrigger 
          value="sources" 
          className="flex items-center space-x-2 text-sm data-[state=active]:bg-white data-[state=active]:shadow-sm"
        >
          <FileText className="h-4 w-4" />
          <span className="hidden sm:inline">Sources</span>
        </TabsTrigger>
        <TabsTrigger 
          value="chat" 
          className="flex items-center space-x-2 text-sm data-[state=active]:bg-white data-[state=active]:shadow-sm"
        >
          <MessageCircle className="h-4 w-4" />
          <span className="hidden sm:inline">Chat</span>
        </TabsTrigger>
        <TabsTrigger 
          value="studio" 
          className="flex items-center space-x-2 text-sm data-[state=active]:bg-white data-[state=active]:shadow-sm"
        >
          <NotebookPen className="h-4 w-4" />
          <span className="hidden sm:inline">Notes</span>
        </TabsTrigger>
      </TabsList>

      <TabsContent value="sources" className="flex-1 overflow-hidden mt-0">
        <SourcesSidebar 
          hasSource={hasSource}
          notebookId={notebookId}
          selectedCitation={selectedCitation}
          onCitationClose={onCitationClose}
          setSelectedCitation={setSelectedCitation}
        />
      </TabsContent>

      <TabsContent value="chat" className="flex-1 overflow-hidden mt-0">
        <ChatArea 
          hasSource={hasSource}
          notebookId={notebookId}
          notebook={notebook}
          onCitationClick={onCitationClick}
        />
      </TabsContent>

      <TabsContent value="studio" className="flex-1 overflow-hidden mt-0">
        <StudioSidebar 
          notebookId={notebookId}
          onCitationClick={onCitationClick}
        />
      </TabsContent>
    </Tabs>
  );
};

export default MobileNotebookTabs;
</file>

<file path="src/features/notebook/components/MultipleWebsiteUrlsDialog.tsx">
import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/shared/components/ui/dialog';
import { Button } from '@/shared/components/ui/button';
import { Textarea } from '@/shared/components/ui/textarea';
import { Label } from '@/shared/components/ui/label';
import { Link } from 'lucide-react';

interface MultipleWebsiteUrlsDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSubmit: (urls: string[]) => void;
}

const MultipleWebsiteUrlsDialog = ({
  open,
  onOpenChange,
  onSubmit
}: MultipleWebsiteUrlsDialogProps) => {
  const [urlsText, setUrlsText] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async () => {
    // Parse URLs from textarea - split by newlines and filter out empty lines
    const urls = urlsText
      .split('\n')
      .map(url => url.trim())
      .filter(url => url !== '');
    
    if (urls.length === 0) {
      return;
    }

    setIsSubmitting(true);
    try {
      await onSubmit(urls);
      setUrlsText('');
      onOpenChange(false);
    } catch (error) {
      console.error('Error submitting URLs:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleClose = () => {
    setUrlsText('');
    onOpenChange(false);
  };

  // Count valid URLs for display
  const validUrls = urlsText
    .split('\n')
    .map(url => url.trim())
    .filter(url => url !== '');
  
  const isValid = validUrls.length > 0;

  return (
    <Dialog open={open} onOpenChange={handleClose}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Link className="h-5 w-5 text-green-600" />
            <span>Add Multiple Website URLs</span>
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          <div>
            <Label className="text-sm font-medium">Website URLs</Label>
            <p className="text-sm text-gray-600 mb-3">
              Enter multiple website URLs, one per line. Each URL will be scraped as a separate source.
            </p>
          </div>

          <div>
            <Textarea
              placeholder={`Enter URLs one per line, for example:
https://example.com
https://another-site.com
https://third-website.org`}
              value={urlsText}
              onChange={(e) => setUrlsText(e.target.value)}
              className="min-h-32 resize-y"
              rows={6}
            />
            {validUrls.length > 0 && (
              <p className="text-sm text-gray-500 mt-2">
                {validUrls.length} URL{validUrls.length !== 1 ? 's' : ''} detected
              </p>
            )}
          </div>

          <div className="flex justify-end space-x-2 pt-4">
            <Button variant="outline" onClick={handleClose}>
              Cancel
            </Button>
            <Button 
              onClick={handleSubmit} 
              disabled={!isValid || isSubmitting}
            >
              {isSubmitting ? 'Adding...' : `Add ${validUrls.length} Website${validUrls.length !== 1 ? 's' : ''}`}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default MultipleWebsiteUrlsDialog;
</file>

<file path="src/features/notebook/components/NotebookHeader.tsx">
import React, { useState } from 'react';
import { Button } from '@/shared/components/ui/button';
import { Input } from '@/shared/components/ui/input';
import { User, LogOut } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { useNotebookUpdate } from '@/hooks/useNotebookUpdate';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/shared/components/ui/dropdown-menu';
import { useLogout } from '@/services/authService';
import Logo from '@/shared/components/ui/Logo';

interface NotebookHeaderProps {
  title: string;
  notebookId?: string;
}

const NotebookHeader = ({ title, notebookId }: NotebookHeaderProps) => {
  const navigate = useNavigate();
  const { logout } = useLogout();
  const [isEditing, setIsEditing] = useState(false);
  const [editedTitle, setEditedTitle] = useState(title);
  const { updateNotebook, isUpdating } = useNotebookUpdate();

  const handleTitleClick = () => {
    if (notebookId) {
      setIsEditing(true);
      setEditedTitle(title);
    }
  };

  const handleTitleSubmit = () => {
    if (notebookId && editedTitle.trim() && editedTitle !== title) {
      updateNotebook({
        id: notebookId,
        updates: { title: editedTitle.trim() }
      });
    }
    setIsEditing(false);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleTitleSubmit();
    } else if (e.key === 'Escape') {
      setEditedTitle(title);
      setIsEditing(false);
    }
  };

  const handleBlur = () => {
    handleTitleSubmit();
  };

  const handleIconClick = () => {
    navigate('/');
  };

  return (
    <header className="bg-white border-b border-gray-200 px-6 py-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2">
            <button 
              onClick={handleIconClick}
              className="hover:bg-gray-50 rounded transition-colors p-1"
            >
              <Logo />
            </button>
            {isEditing ? (
              <Input
                value={editedTitle}
                onChange={(e) => setEditedTitle(e.target.value)}
                onKeyDown={handleKeyDown}
                onBlur={handleBlur}
                className="text-lg font-medium text-gray-900 border-none shadow-none p-0 h-auto focus-visible:ring-0 min-w-[300px] w-auto"
                autoFocus
                disabled={isUpdating}
              />
            ) : (
              <span 
                className="text-lg font-medium text-gray-900 cursor-pointer hover:bg-gray-50 rounded px-2 py-1 transition-colors"
                onClick={handleTitleClick}
              >
                {title}
              </span>
            )}
          </div>
        </div>
        
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="p-0">
                  <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center cursor-pointer hover:bg-purple-600 transition-colors">
                    <User className="h-4 w-4 text-white" />
                  </div>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-48">
                <DropdownMenuItem onClick={logout} className="cursor-pointer">
                  <LogOut className="h-4 w-4 mr-2" />
                  Sign Out
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>
      </div>
    </header>
  );
};

export default NotebookHeader;
</file>

<file path="src/features/notebook/components/NoteEditor.tsx">
import React, { useState, useEffect } from 'react';
import { Button } from '@/shared/components/ui/button';
import { Input } from '@/shared/components/ui/input';
import { Textarea } from '@/shared/components/ui/textarea';
import { Trash2, Save, X, Wand2 } from 'lucide-react';
import { Note } from '@/hooks/useNotes';
import MarkdownRenderer from '@/components/chat/MarkdownRenderer';
import { Citation } from '@/types/message';
import { supabase } from '@/integrations/supabase/client';

interface NoteEditorProps {
  note?: Note;
  onSave: (title: string, content: string) => void;
  onDelete?: () => void;
  onCancel: () => void;
  isLoading?: boolean;
  onCitationClick?: (citation: Citation) => void;
}

const NoteEditor = ({ note, onSave, onDelete, onCancel, isLoading, onCitationClick }: NoteEditorProps) => {
  const [title, setTitle] = useState(note?.title || '');
  const [content, setContent] = useState(note?.content || '');
  // AI response notes should NEVER be in edit mode - they're read-only
  const [isEditing, setIsEditing] = useState(!note || note.source_type === 'user');
  const [isGeneratingTitle, setIsGeneratingTitle] = useState(false);

  useEffect(() => {
    setTitle(note?.title || '');
    setContent(note?.content || '');
    // AI response notes should NEVER be editable - they open in view mode
    setIsEditing(!note || note.source_type === 'user');
  }, [note]);

  const handleSave = () => {
    if (title.trim() && content.trim()) {
      onSave(title.trim(), content.trim());
    }
  };

  const handleEdit = () => {
    // Only allow editing of user notes, not AI responses
    if (note?.source_type === 'ai_response') {
      console.log('NoteEditor: Cannot edit AI response note');
      return;
    }
    setIsEditing(true);
  };

  const handleCancelEdit = () => {
    if (note) {
      setTitle(note.title);
      setContent(note.content);
      // AI response notes should return to view mode, user notes can be cancelled
      setIsEditing(note.source_type === 'ai_response' ? false : false);
    } else {
      onCancel();
    }
  };

  const handleGenerateTitle = async () => {
    if (!note || note.source_type !== 'ai_response') return;
    
    setIsGeneratingTitle(true);
    try {
      const { data, error } = await supabase.functions.invoke('generate-note-title', {
        body: { content: note.content }
      });
      
      if (error) throw error;
      
      if (data?.title) {
        setTitle(data.title);
      }
    } catch (error) {
      console.error('Error generating title:', error);
    } finally {
      setIsGeneratingTitle(false);
    }
  };

  // Parse AI response content if it's structured
  const parseContent = (contentStr: string) => {
    try {
      const parsed = JSON.parse(contentStr);
      if (parsed.segments && parsed.citations) {
        return parsed;
      }
    } catch (e) {
      // Not JSON, return as string
    }
    return contentStr;
  };

  const isAIResponse = note?.source_type === 'ai_response';
  const parsedContent = isAIResponse ? parseContent(content) : content;

  if (!isEditing && note) {
    // View mode for existing notes
    return (
      <div className="flex flex-col h-full">
        {/* Header */}
        <div className="p-4 border-b border-gray-200 flex-shrink-0">
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-medium text-gray-900">
              {isAIResponse ? 'AI Response' : 'Note'}
            </h3>
            <div className="flex items-center space-x-2">
              {!isAIResponse && (
                <Button variant="ghost" size="sm" onClick={handleEdit}>
                  Edit
                </Button>
              )}
              <Button variant="ghost" size="sm" onClick={onCancel}>
                <X className="h-4 w-4" />
              </Button>
            </div>
          </div>
          
          <h2 className="text-lg font-semibold text-gray-900">{title}</h2>
        </div>

        {/* Content */}
        <div className="flex-1 p-4 overflow-auto">
          {isAIResponse && typeof parsedContent === 'object' ? (
            <MarkdownRenderer 
              content={parsedContent}
              className="prose max-w-none"
              onCitationClick={onCitationClick}
            />
          ) : (
            <div className="whitespace-pre-wrap text-gray-700">{typeof parsedContent === 'string' ? parsedContent : content}</div>
          )}
        </div>

        {/* Footer */}
        <div className="p-4 border-t border-gray-200 flex-shrink-0">
          <div className="flex justify-between">
            <div>
              {note && onDelete && (
                <Button 
                  variant="ghost" 
                  size="sm" 
                  onClick={onDelete}
                  disabled={isLoading}
                  className="text-red-600 hover:text-red-700"
                >
                  <Trash2 className="h-4 w-4 mr-2" />
                  Delete
                </Button>
              )}
            </div>
            <div className="text-xs text-gray-500">
              {note?.created_at && new Date(note.created_at).toLocaleDateString()}
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Edit mode (only for user notes or new notes)
  return (
    <div className="flex flex-col h-full">
      {/* Header */}
      <div className="p-4 border-b border-gray-200 flex-shrink-0">
        <div className="flex items-center justify-between mb-4">
          <h3 className="font-medium text-gray-900">
            {note ? 'Edit Note' : 'New Note'}
          </h3>
          <Button variant="ghost" size="sm" onClick={handleCancelEdit}>
            <X className="h-4 w-4" />
          </Button>
        </div>
        
        <div className="flex space-x-2 mb-4">
          <Input
            placeholder="Note title"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            className="flex-1"
          />
          {isAIResponse && (
            <Button 
              variant="outline" 
              size="sm"
              onClick={handleGenerateTitle}
              disabled={isGeneratingTitle}
            >
              <Wand2 className="h-4 w-4 mr-2" />
              {isGeneratingTitle ? 'Generating...' : 'Generate Title'}
            </Button>
          )}
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 p-4 overflow-hidden">
        <Textarea
          placeholder="Write your note here..."
          value={content}
          onChange={(e) => setContent(e.target.value)}
          className="w-full h-full resize-none border-0 focus-visible:ring-0 p-0"
        />
      </div>

      {/* Footer */}
      <div className="p-4 border-t border-gray-200 flex-shrink-0">
        <div className="flex justify-between">
          <div>
            {note && onDelete && !isAIResponse && (
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={onDelete}
                disabled={isLoading}
                className="text-red-600 hover:text-red-700"
              >
                <Trash2 className="h-4 w-4 mr-2" />
                Delete
              </Button>
            )}
          </div>
          <Button 
            onClick={handleSave}
            disabled={!title.trim() || !content.trim() || isLoading}
            size="sm"
          >
            <Save className="h-4 w-4 mr-2" />
            {isLoading ? 'Saving...' : 'Save'}
          </Button>
        </div>
      </div>
    </div>
  );
};

export default NoteEditor;
</file>

<file path="src/features/notebook/components/PasteTextDialog.tsx">
import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/shared/components/ui/dialog';
import { Button } from '@/shared/components/ui/button';
import { Textarea } from '@/shared/components/ui/textarea';
import { Input } from '@/shared/components/ui/input';
import { Label } from '@/shared/components/ui/label';
import { Copy } from 'lucide-react';

interface PasteTextDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSubmit: (title: string, content: string) => void;
}

const PasteTextDialog = ({ open, onOpenChange, onSubmit }: PasteTextDialogProps) => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!content.trim()) return;

    setIsLoading(true);
    try {
      await onSubmit(title.trim() || 'Pasted Text', content.trim());
      setTitle('');
      setContent('');
      onOpenChange(false);
    } catch (error) {
      console.error('Error adding text source:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handlePasteFromClipboard = async () => {
    try {
      const text = await navigator.clipboard.readText();
      setContent(text);
    } catch (error) {
      console.error('Failed to read clipboard:', error);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[80vh]">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Copy className="h-5 w-5 text-gray-600" />
            <span>Add Text Source</span>
          </DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="text-title">Title (optional)</Label>
            <Input
              id="text-title"
              placeholder="Enter a title for this text..."
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <Label htmlFor="text-content">Content</Label>
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={handlePasteFromClipboard}
              >
                <Copy className="h-4 w-4 mr-2" />
                Paste from clipboard
              </Button>
            </div>
            <Textarea
              id="text-content"
              placeholder="Paste or type your text here..."
              value={content}
              onChange={(e) => setContent(e.target.value)}
              rows={12}
              required
              className="min-h-[300px]"
            />
            <p className="text-xs text-gray-500">
              {content.length} characters
            </p>
          </div>

          <div className="flex space-x-2 pt-4">
            <Button
              type="button"
              variant="outline"
              className="flex-1"
              onClick={() => onOpenChange(false)}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              className="flex-1"
              disabled={!content.trim() || isLoading}
            >
              {isLoading ? 'Adding...' : 'Add Source'}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default PasteTextDialog;
</file>

<file path="src/features/notebook/components/RenameSourceDialog.tsx">
import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/shared/components/ui/dialog';
import { Button } from '@/shared/components/ui/button';
import { Input } from '@/shared/components/ui/input';
import { Label } from '@/shared/components/ui/label';
import { useSourceUpdate } from '@/hooks/useSourceUpdate';

interface RenameSourceDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  source: any;
  notebookId?: string;
}

const RenameSourceDialog = ({ open, onOpenChange, source, notebookId }: RenameSourceDialogProps) => {
  const [title, setTitle] = useState('');
  const { updateSource, isUpdating } = useSourceUpdate();

  useEffect(() => {
    if (source && open) {
      setTitle(source.title);
    }
  }, [source, open]);

  const handleSave = async () => {
    if (!source || !title.trim()) return;

    await updateSource({
      sourceId: source.id,
      title: title.trim(),
    });

    onOpenChange(false);
    setTitle('');
  };

  const handleCancel = () => {
    onOpenChange(false);
    setTitle('');
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Rename {source?.title}?</DialogTitle>
          <DialogDescription>
            Enter a new name for this source.
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid gap-2">
            <Label htmlFor="source-name">Source Name *</Label>
            <Input
              id="source-name"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Enter source name"
            />
          </div>
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={handleCancel}>
            Cancel
          </Button>
          <Button 
            onClick={handleSave}
            disabled={!title.trim() || isUpdating}
          >
            {isUpdating ? 'Saving...' : 'Save'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default RenameSourceDialog;
</file>

<file path="src/features/notebook/components/SaveToNoteButton.tsx">
import React from 'react';
import { Button } from '@/shared/components/ui/button';
import { FileText } from 'lucide-react';
import { useNotes } from '@/hooks/useNotes';

interface SaveToNoteButtonProps {
  content: string | { segments: any[]; citations: any[] };
  notebookId?: string;
  onSaved?: () => void;
}

const SaveToNoteButton = ({ content, notebookId, onSaved }: SaveToNoteButtonProps) => {
  const { createNote, isCreating } = useNotes(notebookId);

  const handleSaveToNote = () => {
    if (!notebookId) return;
    
    console.log('SaveToNoteButton: Saving content:', content);
    console.log('SaveToNoteButton: Content type:', typeof content);
    console.log('SaveToNoteButton: Is object with segments:', typeof content === 'object' && content && 'segments' in content);
    
    // Handle both string content and enhanced content with citations
    let contentText: string;
    let title: string;
    let source_type: 'user' | 'ai_response';
    let extracted_text: string | undefined;
    
    // Check if this is an AI response with structured content (object with segments)
    const isAIResponse = typeof content === 'object' && content && 'segments' in content && Array.isArray(content.segments);
    
    if (isAIResponse) {
      console.log('SaveToNoteButton: Detected AI response with segments');
      // For AI responses with citations, save the structured content as JSON
      contentText = JSON.stringify(content);
      // Generate title from the first segment's text
      const firstSegmentText = content.segments[0]?.text || 'AI Response';
      title = firstSegmentText.length > 50 ? firstSegmentText.substring(0, 47) + '...' : firstSegmentText;
      source_type = 'ai_response';
      
      // Extract text for preview from first few segments
      extracted_text = content.segments
        .slice(0, 3)
        .map((segment: any) => segment.text)
        .join(' ')
        .substring(0, 200);
    } else {
      console.log('SaveToNoteButton: Detected user message');
      // For simple string content (typically user messages)
      const contentString = typeof content === 'string' ? content : String(content);
      contentText = contentString;
      const firstLine = contentString.split('\n')[0];
      title = firstLine.length > 50 ? firstLine.substring(0, 47) + '...' : firstLine;
      source_type = 'user';
      extracted_text = undefined; // User notes don't need extracted text
    }
    
    console.log('SaveToNoteButton: Final source_type:', source_type);
    console.log('SaveToNoteButton: Final title:', title);
    
    createNote({ title, content: contentText, source_type, extracted_text });
    onSaved?.();
  };

  if (!notebookId) return null;

  return (
    <Button
      variant="ghost"
      size="sm"
      onClick={handleSaveToNote}
      disabled={isCreating}
      className="flex items-center space-x-1 text-gray-600 hover:text-gray-800"
    >
      <FileText className="h-3 w-3" />
      <span className="text-xs">{isCreating ? 'Saving...' : 'Save to note'}</span>
    </Button>
  );
};

export default SaveToNoteButton;
</file>

<file path="src/features/notebook/components/SourcesSidebar.tsx">
import React, { useState } from 'react';
import { Button } from '@/shared/components/ui/button';
import { Plus, MoreVertical, Trash2, Edit, Loader2, CheckCircle, XCircle, Upload } from 'lucide-react';
import { Card } from '@/shared/components/ui/card';
import { ScrollArea } from '@/shared/components/ui/scroll-area';
import { ContextMenu, ContextMenuContent, ContextMenuItem, ContextMenuTrigger } from '@/shared/components/ui/context-menu';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/shared/components/ui/alert-dialog';
import AddSourcesDialog from './AddSourcesDialog';
import RenameSourceDialog from './RenameSourceDialog';
import SourceContentViewer from '@/components/chat/SourceContentViewer';
import { useSources } from '@/hooks/useSources';
import { useSourceDelete } from '@/hooks/useSourceDelete';
import { Citation } from '@/types/message';

interface SourcesSidebarProps {
  hasSource: boolean;
  notebookId?: string;
  selectedCitation?: Citation | null;
  onCitationClose?: () => void;
  setSelectedCitation?: (citation: Citation | null) => void;
}

const SourcesSidebar = ({
  hasSource,
  notebookId,
  selectedCitation,
  onCitationClose,
  setSelectedCitation
}: SourcesSidebarProps) => {
  const [showAddSourcesDialog, setShowAddSourcesDialog] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [showRenameDialog, setShowRenameDialog] = useState(false);
  const [selectedSource, setSelectedSource] = useState<any>(null);
  const [selectedSourceForViewing, setSelectedSourceForViewing] = useState<any>(null);

  const {
    sources,
    isLoading
  } = useSources(notebookId);

  const {
    deleteSource,
    isDeleting
  } = useSourceDelete();

  // Get the source content for the selected citation
  const getSourceContent = (citation: Citation) => {
    const source = sources?.find(s => s.id === citation.source_id);
    return source?.content || '';
  };

  // Get the source summary for the selected citation
  const getSourceSummary = (citation: Citation) => {
    const source = sources?.find(s => s.id === citation.source_id);
    return source?.summary || '';
  };

  // Get the source URL for the selected citation
  const getSourceUrl = (citation: Citation) => {
    const source = sources?.find(s => s.id === citation.source_id);
    return source?.url || '';
  };

  // Get the source summary for a selected source
  const getSelectedSourceSummary = () => {
    return selectedSourceForViewing?.summary || '';
  };

  // Get the source content for a selected source  
  const getSelectedSourceContent = () => {
    return selectedSourceForViewing?.content || '';
  };

  // Get the source URL for a selected source
  const getSelectedSourceUrl = () => {
    return selectedSourceForViewing?.url || '';
  };

  
  const renderSourceIcon = (type: string) => {
    const iconMap: Record<string, string> = {
      'pdf': '/file-types/PDF.svg',
      'text': '/file-types/TXT.png',
      'website': '/file-types/WEB.svg',
      'youtube': '/file-types/MP3.png',
      'audio': '/file-types/MP3.png',
      'doc': '/file-types/DOC.png',
      'multiple-websites': '/file-types/WEB.svg',
      'copied-text': '/file-types/TXT.png'
    };

    const iconUrl = iconMap[type] || iconMap['text']; // fallback to TXT icon

    return (
      <img 
        src={iconUrl} 
        alt={`${type} icon`} 
        className="w-full h-full object-contain" 
        onError={(e) => {
          // Fallback to a simple text indicator if image fails to load
          const target = e.target as HTMLImageElement;
          target.style.display = 'none';
          target.parentElement!.innerHTML = '📄';
        }} 
      />
    );
  };

  const renderProcessingStatus = (status: string) => {
    switch (status) {
      case 'uploading':
        return <Upload className="h-4 w-4 animate-pulse text-blue-500" />;
      case 'processing':
        return <Loader2 className="h-4 w-4 animate-spin text-blue-500" />;
      case 'completed':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'failed':
        return <XCircle className="h-4 w-4 text-red-500" />;
      case 'pending':
        return <Loader2 className="h-4 w-4 animate-pulse text-orange-500" />;
      default:
        return null;
    }
  };

  const handleRemoveSource = (source: any) => {
    setSelectedSource(source);
    setShowDeleteDialog(true);
  };

  const handleRenameSource = (source: any) => {
    setSelectedSource(source);
    setShowRenameDialog(true);
  };

  const handleSourceClick = (source: any) => {
    console.log('SourcesSidebar: Source clicked from list', {
      sourceId: source.id,
      sourceTitle: source.title
    });

    // Clear any existing citation state first
    if (setSelectedCitation) {
      setSelectedCitation(null);
    }

    // Set the selected source for viewing
    setSelectedSourceForViewing(source);

    // Create a mock citation for the selected source without line data (this prevents auto-scroll)
    const mockCitation: Citation = {
      citation_id: -1, // Use negative ID to indicate this is a mock citation
      source_id: source.id,
      source_title: source.title,
      source_type: source.type,
      chunk_index: 0,
      excerpt: 'Full document view'
      // Deliberately omitting chunk_lines_from and chunk_lines_to to prevent auto-scroll
    };

    console.log('SourcesSidebar: Created mock citation', mockCitation);

    // Set the mock citation after a small delay to ensure state is clean
    setTimeout(() => {
      if (setSelectedCitation) {
        setSelectedCitation(mockCitation);
      }
    }, 50);
  };

  const handleBackToSources = () => {
    console.log('SourcesSidebar: Back to sources clicked');
    setSelectedSourceForViewing(null);
    onCitationClose?.();
  };

  const confirmDelete = () => {
    if (selectedSource) {
      deleteSource(selectedSource.id);
      setShowDeleteDialog(false);
      setSelectedSource(null);
    }
  };

  // If we have a selected citation, show the content viewer
  if (selectedCitation) {
    console.log('SourcesSidebar: Rendering content viewer for citation', {
      citationId: selectedCitation.citation_id,
      sourceId: selectedCitation.source_id,
      hasLineData: !!(selectedCitation.chunk_lines_from && selectedCitation.chunk_lines_to),
      isFromSourceList: selectedCitation.citation_id === -1
    });

    // Determine which citation to display and get appropriate content/summary/url
    const displayCitation = selectedCitation;
    const sourceContent = selectedSourceForViewing ? getSelectedSourceContent() : getSourceContent(selectedCitation);
    const sourceSummary = selectedSourceForViewing ? getSelectedSourceSummary() : getSourceSummary(selectedCitation);
    const sourceUrl = selectedSourceForViewing ? getSelectedSourceUrl() : getSourceUrl(selectedCitation);

    return (
      <div className="w-full bg-gray-50 border-r border-gray-200 flex flex-col h-full overflow-hidden">
        <div className="p-4 border-b border-gray-200 flex-shrink-0">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-medium text-gray-900 cursor-pointer hover:text-gray-700" onClick={handleBackToSources}>
              Sources
            </h2>
            <Button variant="ghost" onClick={handleBackToSources} className="p-2 [&_svg]:!w-6 [&_svg]:!h-6">
              <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="currentColor">
                <path d="M440-440v240h-80v-160H200v-80h240Zm160-320v160h160v80H520v-240h80Z" />
              </svg>
            </Button>
          </div>
        </div>
        
        <SourceContentViewer 
          citation={displayCitation} 
          sourceContent={sourceContent} 
          sourceSummary={sourceSummary}
          sourceUrl={sourceUrl}
          className="flex-1 overflow-hidden" 
          isOpenedFromSourceList={selectedCitation.citation_id === -1}
        />
      </div>
    );
  }

  return (
    <div className="w-full bg-gray-50 border-r border-gray-200 flex flex-col h-full overflow-hidden">
      <div className="p-4 border-b border-gray-200 flex-shrink-0">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-medium text-gray-900">Sources</h2>
        </div>
        
        <div className="flex space-x-2">
          <Button variant="outline" size="sm" className="flex-1" onClick={() => setShowAddSourcesDialog(true)}>
            <Plus className="h-4 w-4 mr-2" />
            Add
          </Button>
        </div>
      </div>

      <ScrollArea className="flex-1 h-full">
        <div className="p-4">
          {isLoading ? (
            <div className="text-center py-8">
              <p className="text-sm text-gray-600">Loading sources...</p>
            </div>
          ) : sources && sources.length > 0 ? (
            <div className="space-y-4">
              {sources.map((source) => (
                <ContextMenu key={source.id}>
                  <ContextMenuTrigger>
                    <Card className="p-3 border border-gray-200 cursor-pointer hover:bg-gray-50" onClick={() => handleSourceClick(source)}>
                      <div className="flex items-start justify-between space-x-3">
                        <div className="flex items-center space-x-2 flex-1 min-w-0">
                          <div className="w-6 h-6 bg-white rounded border border-gray-200 flex items-center justify-center flex-shrink-0 overflow-hidden">
                            {renderSourceIcon(source.type)}
                          </div>
                          <div className="flex-1 min-w-0">
                            <span className="text-sm text-gray-900 truncate block">{source.title}</span>
                          </div>
                        </div>
                        <div className="flex-shrink-0 py-[4px]">
                          {renderProcessingStatus(source.processing_status)}
                        </div>
                      </div>
                    </Card>
                  </ContextMenuTrigger>
                  <ContextMenuContent>
                    <ContextMenuItem onClick={() => handleRenameSource(source)}>
                      <Edit className="h-4 w-4 mr-2" />
                      Rename source
                    </ContextMenuItem>
                    <ContextMenuItem onClick={() => handleRemoveSource(source)} className="text-red-600 focus:text-red-600">
                      <Trash2 className="h-4 w-4 mr-2" />
                      Remove source
                    </ContextMenuItem>
                  </ContextMenuContent>
                </ContextMenu>
              ))}
            </div>
          ) : (
            <div className="text-center py-8">
              <div className="w-16 h-16 bg-gray-200 rounded-lg mx-auto mb-4 flex items-center justify-center">
                <span className="text-gray-400 text-2xl">📄</span>
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">Saved sources will appear here</h3>
              <p className="text-sm text-gray-600 mb-4">Click Add source above to add PDFs, text, or audio files.</p>
            </div>
          )}
        </div>
      </ScrollArea>

      <AddSourcesDialog 
        open={showAddSourcesDialog} 
        onOpenChange={setShowAddSourcesDialog} 
        notebookId={notebookId} 
      />

      <RenameSourceDialog 
        open={showRenameDialog} 
        onOpenChange={setShowRenameDialog} 
        source={selectedSource} 
        notebookId={notebookId} 
      />

      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Delete {selectedSource?.title}?</AlertDialogTitle>
            <AlertDialogDescription>
              You're about to delete this source. This cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction 
              onClick={confirmDelete} 
              className="bg-red-600 hover:bg-red-700" 
              disabled={isDeleting}
            >
              {isDeleting ? 'Deleting...' : 'Delete'}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

export default SourcesSidebar;
</file>

<file path="src/features/notebook/components/StudioSidebar.tsx">
import React, { useState, useEffect } from 'react';
import { Button } from '@/shared/components/ui/button';
import { Card } from '@/shared/components/ui/card';
import { ScrollArea } from '@/shared/components/ui/scroll-area';
import { MoreVertical, Plus, Edit, Bot, User, Loader2, AlertCircle, CheckCircle2, RefreshCw } from 'lucide-react';
import { useNotes, Note } from '@/hooks/useNotes';
import { useAudioOverview } from '@/hooks/useAudioOverview';
import { useNotebooks } from '@/hooks/useNotebooks';
import { useSources } from '@/hooks/useSources';
import { useQueryClient } from '@tanstack/react-query';
import NoteEditor from './NoteEditor';
import AudioPlayer from './AudioPlayer';
import { Citation } from '@/types/message';

interface StudioSidebarProps {
  notebookId?: string;
  isExpanded?: boolean;
  onCitationClick?: (citation: Citation) => void;
}

const StudioSidebar = ({
  notebookId,
  isExpanded,
  onCitationClick
}: StudioSidebarProps) => {
  const [editingNote, setEditingNote] = useState<Note | null>(null);
  const [isCreatingNote, setIsCreatingNote] = useState(false);
  const [audioError, setAudioError] = useState(false);
  const {
    notes,
    isLoading,
    createNote,
    updateNote,
    deleteNote,
    isCreating,
    isUpdating,
    isDeleting
  } = useNotes(notebookId);
  const {
    notebooks
  } = useNotebooks();
  const {
    sources
  } = useSources(notebookId);
  const {
    generateAudioOverview,
    refreshAudioUrl,
    autoRefreshIfExpired,
    isGenerating,
    isAutoRefreshing,
    generationStatus,
    checkAudioExpiry
  } = useAudioOverview(notebookId);
  const queryClient = useQueryClient();
  const notebook = notebooks?.find(n => n.id === notebookId);
  const hasValidAudio = notebook?.audio_overview_url && !checkAudioExpiry(notebook.audio_url_expires_at);
  const currentStatus = generationStatus || notebook?.audio_overview_generation_status;
  
  // Check if at least one source has been successfully processed
  const hasProcessedSource = sources?.some(source => 
    source.processing_status === 'completed' || 
    source.processing_status === 'processed'
  ) || false;
  
  // Debug logging for source processing status
  console.log('🔍 Sources processing status check:', {
    sourcesCount: sources?.length || 0,
    hasProcessedSource,
    sourceStatuses: sources?.map(s => ({ id: s.id, title: s.title, status: s.processing_status })) || []
  });

  // Auto-refresh expired URLs
  useEffect(() => {
    if (!notebookId || !notebook?.audio_overview_url) return;
    
    const checkAndRefresh = async () => {
      if (checkAudioExpiry(notebook.audio_url_expires_at)) {
        console.log('Detected expired audio URL, initiating auto-refresh...');
        await autoRefreshIfExpired(notebookId, notebook.audio_url_expires_at);
      }
    };

    // Check immediately
    checkAndRefresh();

    // Set up periodic check every 5 minutes
    const interval = setInterval(checkAndRefresh, 5 * 60 * 1000);

    return () => clearInterval(interval);
  }, [notebookId, notebook?.audio_overview_url, notebook?.audio_url_expires_at, autoRefreshIfExpired, checkAudioExpiry]);

  const handleCreateNote = () => {
    setIsCreatingNote(true);
    setEditingNote(null);
  };

  const handleEditNote = (note: Note) => {
    console.log('StudioSidebar: Opening note', {
      noteId: note.id,
      sourceType: note.source_type
    });
    setEditingNote(note);
    setIsCreatingNote(false);
  };

  const handleSaveNote = (title: string, content: string) => {
    if (editingNote) {
      // Only allow updating user notes, not AI responses
      if (editingNote.source_type === 'user') {
        updateNote({
          id: editingNote.id,
          title,
          content
        });
      }
    } else {
      createNote({
        title,
        content,
        source_type: 'user'
      });
    }
    setEditingNote(null);
    setIsCreatingNote(false);
  };

  const handleDeleteNote = () => {
    if (editingNote) {
      deleteNote(editingNote.id);
      setEditingNote(null);
    }
  };

  const handleCancel = () => {
    setEditingNote(null);
    setIsCreatingNote(false);
  };

  const handleGenerateAudio = () => {
    if (notebookId) {
      generateAudioOverview(notebookId);
      setAudioError(false);
    }
  };

  const handleAudioError = () => {
    setAudioError(true);
  };

  const handleAudioRetry = () => {
    // Regenerate the audio overview
    handleGenerateAudio();
  };

  const handleAudioDeleted = () => {
    // Refresh the notebooks data to update the UI
    if (notebookId) {
      queryClient.invalidateQueries({
        queryKey: ['notebooks']
      });
    }
    setAudioError(false);
  };

  const handleUrlRefresh = (notebookId: string) => {
    refreshAudioUrl(notebookId);
  };

  const getStatusDisplay = () => {
    if (isAutoRefreshing) {
      return {
        icon: null,
        text: "Refreshing URL...",
        description: "Updating audio access"
      };
    }
    
    if (currentStatus === 'generating' || isGenerating) {
      return {
        icon: <Loader2 className="h-4 w-4 animate-spin text-blue-600" />,
        text: "Generating audio...",
        description: "This may take a few minutes"
      };
    } else if (currentStatus === 'failed') {
      return {
        icon: <AlertCircle className="h-4 w-4 text-red-600" />,
        text: "Generation failed",
        description: "Please try again"
      };
    } else if (currentStatus === 'completed' && hasValidAudio) {
      return {
        icon: <CheckCircle2 className="h-4 w-4 text-green-600" />,
        text: "Ready to play",
        description: "Audio overview available"
      };
    }
    return null;
  };

  const isEditingMode = editingNote || isCreatingNote;
  const getPreviewText = (note: Note) => {
    if (note.source_type === 'ai_response') {
      // Use extracted_text if available, otherwise parse the content
      if (note.extracted_text) {
        return note.extracted_text;
      }
      try {
        const parsed = JSON.parse(note.content);
        if (parsed.segments && parsed.segments[0]) {
          return parsed.segments[0].text;
        }
      } catch (e) {
        // If parsing fails, use content as-is
      }
    }

    // For user notes or fallback, use the content directly
    const contentToUse = note.content;
    return contentToUse.length > 100 ? contentToUse.substring(0, 100) + '...' : contentToUse;
  };

  if (isEditingMode) {
    return <div className="w-full bg-gray-50 border-l border-gray-200 flex flex-col h-full overflow-hidden">
        <NoteEditor note={editingNote || undefined} onSave={handleSaveNote} onDelete={editingNote ? handleDeleteNote : undefined} onCancel={handleCancel} isLoading={isCreating || isUpdating || isDeleting} onCitationClick={onCitationClick} />
      </div>;
  }

  return <div className="w-full bg-gray-50 border-l border-gray-200 flex flex-col h-full overflow-hidden">
      <div className="p-4 border-b border-gray-200 flex-shrink-0">
        <h2 className="text-lg font-medium text-gray-900 mb-4">Studio</h2>
        
        {/* Audio Overview */}
        <Card className="p-4 mb-4 border border-gray-200">
          <div className="flex items-center justify-between mb-3">
            <h3 className="font-medium text-gray-900">Audio Overview</h3>
          </div>

          {hasValidAudio && !audioError && currentStatus !== 'generating' && !isAutoRefreshing ? <AudioPlayer 
              audioUrl={notebook.audio_overview_url} 
              title="Deep Dive Conversation" 
              notebookId={notebookId} 
              expiresAt={notebook.audio_url_expires_at} 
              onError={handleAudioError} 
              onRetry={handleAudioRetry} 
              onDeleted={handleAudioDeleted}
              onUrlRefresh={handleUrlRefresh}
            /> : <Card className="p-3 border border-gray-200">
              {/* Hide this div when generating or auto-refreshing */}
              {currentStatus !== 'generating' && !isGenerating && !isAutoRefreshing && <div className="flex items-center space-x-3 mb-3">
                  <div className="w-8 h-8 rounded flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#111827">
                      <path d="M280-120v-123q-104-14-172-93T40-520h80q0 83 58.5 141.5T320-320h10q5 0 10-1 13 20 28 37.5t32 32.5q-10 3-19.5 4.5T360-243v123h-80Zm20-282q-43-8-71.5-40.5T200-520v-240q0-50 35-85t85-35q50 0 85 35t35 85v160H280v80q0 31 5 60.5t15 57.5Zm340 2q-50 0-85-35t-35-85v-240q0-50 35-85t85-35q50 0 85 35t35 85v240q0 50-35 85t-85 35Zm-40 280v-123q-104-14-172-93t-68-184h80q0 83 58.5 141.5T640-320q83 0 141.5-58.5T840-520h80q0 105-68 184t-172 93v123h-80Zm40-360q17 0 28.5-11.5T680-520v-240q0-17-11.5-28.5T640-800q-17 0-28.5 11.5T600-760v240q0 17 11.5 28.5T640-480Zm0-160Z" />
                    </svg>
                  </div>
                  <div className="flex-1">
                    <h4 className="font-medium text-gray-900">Deep Dive conversation</h4>
                    <p className="text-sm text-gray-600">Two hosts</p>
                  </div>
                </div>}
              
              {/* Status Display */}
              {getStatusDisplay() && <div className="flex items-center space-x-2 mb-3 p-2 rounded-md bg-transparent">
                  {getStatusDisplay()!.icon}
                  <div className="flex-1">
                    <p className="text-sm font-medium text-slate-900">{getStatusDisplay()!.text}</p>
                    <p className="text-xs text-slate-900">{getStatusDisplay()!.description}</p>
                  </div>
                </div>}
              
              {/* Audio error div */}
              {audioError && <div className="flex items-center space-x-2 mb-3 p-2 bg-red-50 rounded-md">
                  <AlertCircle className="h-4 w-4 text-red-600" />
                  <div className="flex-1">
                    <p className="text-sm text-red-600">Audio unavailable</p>
                  </div>
                  <Button size="sm" variant="outline" onClick={handleAudioRetry} className="text-red-600 border-red-300 hover:bg-red-50">
                    <RefreshCw className="h-4 w-4 mr-1" />
                    Retry
                  </Button>
                </div>}
              
              <div className="flex space-x-2">
                <Button size="sm" onClick={handleGenerateAudio} disabled={isGenerating || currentStatus === 'generating' || !hasProcessedSource || isAutoRefreshing} className="flex-1 text-white bg-slate-900 hover:bg-slate-800">
                  {isGenerating || currentStatus === 'generating' ? <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      Generating...
                    </> : 'Generate'}
                </Button>
              </div>
            </Card>}
        </Card>

        {/* Notes Section */}
        <div className="mb-4">
          <div className="flex items-center justify-between mb-3">
            <h3 className="font-medium text-gray-900">Notes</h3>
            
          </div>
          
          <Button variant="outline" size="sm" className="w-full mb-4" onClick={handleCreateNote}>
            <Plus className="h-4 w-4 mr-2" />
            Add note
          </Button>
        </div>
      </div>

      {/* Saved Notes Area */}
      <ScrollArea className="flex-1 h-full">
        <div className="p-4">
          {isLoading ? <div className="text-center py-8">
              <p className="text-sm text-gray-600">Loading notes...</p>
            </div> : notes && notes.length > 0 ? <div className="space-y-3">
              {notes.map(note => <Card key={note.id} className="p-3 border border-gray-200 hover:bg-gray-50 cursor-pointer" onClick={() => handleEditNote(note)}>
                  <div className="flex items-start justify-between">
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center space-x-2 mb-1">
                        {note.source_type === 'ai_response' ? <Bot className="h-3 w-3 text-blue-600" /> : <User className="h-3 w-3 text-gray-600" />}
                        <span className="text-xs text-gray-500 uppercase">
                          {note.source_type === 'ai_response' ? 'AI Response' : 'Note'}
                        </span>
                      </div>
                      <h4 className="font-medium text-gray-900 truncate">{note.title}</h4>
                      <p className="text-sm text-gray-600 line-clamp-2 mt-1">
                        {getPreviewText(note)}
                      </p>
                      <p className="text-xs text-gray-500 mt-2">
                        {new Date(note.updated_at).toLocaleDateString()}
                      </p>
                    </div>
                    {note.source_type === 'user' && <Button variant="ghost" size="sm" className="ml-2">
                        <Edit className="h-3 w-3" />
                      </Button>}
                  </div>
                </Card>)}
            </div> : <div className="text-center py-8">
              <div className="w-16 h-16 bg-gray-200 rounded-lg mx-auto mb-4 flex items-center justify-center">
                <span className="text-gray-400 text-2xl">📄</span>
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">Saved notes will appear here</h3>
              <p className="text-sm text-gray-600">
                Save a chat message to create a new note, or click Add note above.
              </p>
            </div>}
        </div>
      </ScrollArea>
    </div>;
};

export default StudioSidebar;
</file>

<file path="src/features/notebook/components/WebsiteUrlInput.tsx">
import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/shared/components/ui/dialog';
import { Button } from '@/shared/components/ui/button';
import { Input } from '@/shared/components/ui/input';
import { Label } from '@/shared/components/ui/label';
import { Globe } from 'lucide-react';

interface WebsiteUrlInputProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSubmit: (url: string) => void;
}

const WebsiteUrlInput = ({ open, onOpenChange, onSubmit }: WebsiteUrlInputProps) => {
  const [url, setUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!url.trim()) return;

    setIsLoading(true);
    try {
      await onSubmit(url.trim());
      setUrl('');
      onOpenChange(false);
    } catch (error) {
      console.error('Error adding website source:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Globe className="h-5 w-5 text-blue-600" />
            <span>Add Website</span>
          </DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="website-url">Website URL</Label>
            <Input
              id="website-url"
              type="url"
              placeholder="https://example.com"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              required
            />
            <p className="text-xs text-gray-500">
              Enter the URL of the website you want to add as a source
            </p>
          </div>

          <div className="flex space-x-2 pt-4">
            <Button
              type="button"
              variant="outline"
              className="flex-1"
              onClick={() => onOpenChange(false)}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              className="flex-1"
              disabled={!url.trim() || isLoading}
            >
              {isLoading ? 'Adding...' : 'Add Source'}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default WebsiteUrlInput;
</file>

<file path="src/features/notebook/components/YouTubeUrlInput.tsx">
import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/shared/components/ui/dialog';
import { Button } from '@/shared/components/ui/button';
import { Input } from '@/shared/components/ui/input';
import { Label } from '@/shared/components/ui/label';
import { Youtube } from 'lucide-react';

interface YouTubeUrlInputProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSubmit: (url: string) => void;
}

const YouTubeUrlInput = ({ open, onOpenChange, onSubmit }: YouTubeUrlInputProps) => {
  const [url, setUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!url.trim()) return;

    setIsLoading(true);
    try {
      await onSubmit(url.trim());
      setUrl('');
      onOpenChange(false);
    } catch (error) {
      console.error('Error adding YouTube source:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Youtube className="h-5 w-5 text-red-600" />
            <span>Add YouTube Video</span>
          </DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="youtube-url">YouTube URL</Label>
            <Input
              id="youtube-url"
              type="url"
              placeholder="https://www.youtube.com/watch?v=..."
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              required
            />
            <p className="text-xs text-gray-500">
              Paste the full YouTube video URL
            </p>
          </div>

          <div className="flex space-x-2 pt-4">
            <Button
              type="button"
              variant="outline"
              className="flex-1"
              onClick={() => onOpenChange(false)}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              className="flex-1"
              disabled={!url.trim() || isLoading}
            >
              {isLoading ? 'Adding...' : 'Add Source'}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default YouTubeUrlInput;
</file>

<file path="src/features/notebook/hooks/index.ts">
// Notebook Hooks
export { useNotebooks, useCreateNotebook, useNotebook } from './useNotebooks';
export * from './useNotebookDelete';
export * from './useNotebookGeneration';
export * from './useNotebookUpdate';
export * from './useNotes';
export * from './useSourceDelete';
export * from './useSourceUpdate';
export * from './useSources';
export * from './useFileUpload';
export * from './useDocumentProcessing';
export * from './useAudioOverview';
</file>

<file path="src/features/notebook/hooks/useAudioOverview.tsx">
import { useState, useEffect } from 'react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/shared/hooks/use-toast';

export const useAudioOverview = (notebookId?: string) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [generationStatus, setGenerationStatus] = useState<string | null>(null);
  const [isAutoRefreshing, setIsAutoRefreshing] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Set up realtime subscription for notebook updates
  useEffect(() => {
    if (!notebookId) return;

    const channel = supabase
      .channel('notebook-audio-updates')
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: 'notebooks',
          filter: `id=eq.${notebookId}`
        },
        (payload) => {
          console.log('Notebook updated:', payload);
          const newData = payload.new as any;
          
          if (newData.audio_overview_generation_status) {
            setGenerationStatus(newData.audio_overview_generation_status);
            
            if (newData.audio_overview_generation_status === 'completed' && newData.audio_overview_url) {
              setIsGenerating(false);
              toast({
                title: "Audio Overview Ready!",
                description: "Your deep dive conversation is ready to play!",
              });
              
              // Invalidate queries to refresh the UI
              queryClient.invalidateQueries({ queryKey: ['notebooks'] });
            } else if (newData.audio_overview_generation_status === 'failed') {
              setIsGenerating(false);
              toast({
                title: "Generation Failed",
                description: "Failed to generate audio overview. Please try again.",
                variant: "destructive",
              });
            }
          }
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [notebookId, toast, queryClient]);

  const generateAudioOverview = useMutation({
    mutationFn: async (notebookId: string) => {
      setIsGenerating(true);
      setGenerationStatus('generating');
      
      const { data, error } = await supabase.functions.invoke('generate-audio-overview', {
        body: { notebookId }
      });

      if (error) {
        console.error('Error starting audio generation:', error);
        throw error;
      }

      return data;
    },
    onSuccess: (data, notebookId) => {
      console.log('Audio generation started successfully:', data);
    },
    onError: (error) => {
      console.error('Audio generation failed to start:', error);
      setIsGenerating(false);
      setGenerationStatus(null);
      
      toast({
        title: "Failed to Start Generation",
        description: error.message || "Failed to start audio generation. Please try again.",
        variant: "destructive",
      });
    }
  });

  const refreshAudioUrl = useMutation({
    mutationFn: async ({ notebookId, silent = false }: { notebookId: string; silent?: boolean }) => {
      if (!silent) {
        setIsAutoRefreshing(true);
      }

      const { data, error } = await supabase.functions.invoke('refresh-audio-url', {
        body: { notebookId }
      });

      if (error) {
        console.error('Error refreshing audio URL:', error);
        throw error;
      }

      return data;
    },
    onSuccess: (data, variables) => {
      console.log('Audio URL refreshed successfully:', data);
      // Invalidate queries to refresh the UI with new URL
      queryClient.invalidateQueries({ queryKey: ['notebooks'] });
      
      if (!variables.silent) {
        setIsAutoRefreshing(false);
      }
    },
    onError: (error, variables) => {
      console.error('Failed to refresh audio URL:', error);
      if (!variables.silent) {
        setIsAutoRefreshing(false);
        toast({
          title: "Failed to Refresh URL",
          description: "Unable to refresh the audio URL. Please try again.",
          variant: "destructive",
        });
      }
    }
  });

  const checkAudioExpiry = (expiresAt: string | null): boolean => {
    if (!expiresAt) return true;
    return new Date(expiresAt) <= new Date();
  };

  const autoRefreshIfExpired = async (notebookId: string, expiresAt: string | null) => {
    if (checkAudioExpiry(expiresAt) && !isAutoRefreshing && !refreshAudioUrl.isPending) {
      console.log('Audio URL expired, auto-refreshing...');
      try {
        await refreshAudioUrl.mutateAsync({ notebookId, silent: true });
      } catch (error) {
        console.error('Auto-refresh failed:', error);
      }
    }
  };

  return {
    generateAudioOverview: generateAudioOverview.mutate,
    refreshAudioUrl: (notebookId: string) => refreshAudioUrl.mutate({ notebookId }),
    autoRefreshIfExpired,
    isGenerating: isGenerating || generateAudioOverview.isPending,
    isAutoRefreshing,
    generationStatus,
    checkAudioExpiry,
  };
};
</file>

<file path="src/features/notebook/hooks/useDocumentProcessing.tsx">
import { useMutation } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/shared/hooks/use-toast';

export const useDocumentProcessing = () => {
  const { toast } = useToast();

  const processDocument = useMutation({
    mutationFn: async ({
      sourceId,
      filePath,
      sourceType
    }: {
      sourceId: string;
      filePath: string;
      sourceType: string;
    }) => {
      console.log('Initiating document processing for:', { sourceId, filePath, sourceType });

      const { data, error } = await supabase.functions.invoke('process-document', {
        body: {
          sourceId,
          filePath,
          sourceType
        }
      });

      if (error) {
        console.error('Document processing error:', error);
        throw error;
      }

      return data;
    },
    onSuccess: (data) => {
      console.log('Document processing initiated successfully:', data);
    },
    onError: (error) => {
      console.error('Failed to initiate document processing:', error);
      toast({
        title: "Processing Error",
        description: "Failed to start document processing. Please try again.",
        variant: "destructive",
      });
    },
  });

  return {
    processDocumentAsync: processDocument.mutateAsync,
    processDocument: processDocument.mutate,
    isProcessing: processDocument.isPending,
  };
};
</file>

<file path="src/features/notebook/hooks/useFileUpload.tsx">
import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/shared/hooks/use-toast';

export const useFileUpload = () => {
  const [isUploading, setIsUploading] = useState(false);
  const { toast } = useToast();

  const uploadFile = async (file: File, notebookId: string, sourceId: string): Promise<string | null> => {
    try {
      setIsUploading(true);
      
      // Get file extension
      const fileExtension = file.name.split('.').pop() || 'bin';
      
      // Create file path: sources/{notebook_id}/{source_id}.{extension}
      const filePath = `${notebookId}/${sourceId}.${fileExtension}`;
      
      console.log('Uploading file to:', filePath);
      
      // Upload file to Supabase storage
      const { data, error } = await supabase.storage
        .from('sources')
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: false
        });

      if (error) {
        console.error('Upload error:', error);
        throw error;
      }

      console.log('File uploaded successfully:', data);
      return filePath;
    } catch (error) {
      console.error('File upload failed:', error);
      toast({
        title: "Upload Error",
        description: `Failed to upload ${file.name}. Please try again.`,
        variant: "destructive",
      });
      return null;
    } finally {
      setIsUploading(false);
    }
  };

  const getFileUrl = (filePath: string): string => {
    const { data } = supabase.storage
      .from('sources')
      .getPublicUrl(filePath);
    
    return data.publicUrl;
  };

  return {
    uploadFile,
    getFileUrl,
    isUploading,
  };
};
</file>

<file path="src/features/notebook/hooks/useNotebookDelete.tsx">
/**
 * 노트북 삭제 훅 - 새로운 API 서비스 기반
 * notebooks API 서비스를 사용하여 안전한 노트북 삭제 수행
 */

import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useAuth } from '@/features/authentication/hooks';
import { useToast } from '@/shared/hooks/use-toast';
import { deleteNotebook } from '../services';
import type { Notebook } from '../services/types';

export const useNotebookDelete = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const deleteNotebookMutation = useMutation({
    mutationFn: async (notebookId: string): Promise<Notebook> => {
      console.log('Starting notebook deletion process for:', notebookId);
      
      try {
        const deletedNotebook = await deleteNotebook(notebookId);
        console.log('Notebook deleted successfully:', deletedNotebook.title);
        return deletedNotebook;
      } catch (error) {
        console.error('Error in deletion process:', error);
        throw error;
      }
    },
    onSuccess: (deletedNotebook, notebookId) => {
      console.log('Delete mutation success, invalidating queries');
      
      // 관련된 모든 쿼리 무효화
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
      queryClient.invalidateQueries({ queryKey: ['sources', notebookId] });
      queryClient.invalidateQueries({ queryKey: ['notebook', notebookId] });
      
      // 성공 토스트
      toast({
        title: "Notebook deleted",
        description: `"${deletedNotebook?.title || 'Notebook'}" and all its sources have been successfully deleted.`,
      });
    },
    onError: (error: any) => {
      console.error('Delete mutation error:', error);
      
      let errorMessage = "Failed to delete the notebook. Please try again.";
      
      // 에러 타입에 따른 구체적인 메시지 제공
      if (error?.code === 'PGRST116') {
        errorMessage = "Notebook not found or you don't have permission to delete it.";
      } else if (error?.message?.includes('foreign key')) {
        errorMessage = "Cannot delete notebook due to data dependencies. Please contact support.";
      } else if (error?.message?.includes('network') || error?.message?.includes('Network')) {
        errorMessage = "Network error. Please check your connection and try again.";
      } else if (error?.message?.includes('auth') || error?.message?.includes('JWT')) {
        errorMessage = "Authentication error. Please sign in again.";
      } else if (error?.message) {
        errorMessage = error.message;
      }
      
      // 에러 토스트
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });

  return {
    deleteNotebook: deleteNotebookMutation.mutate,
    deleteNotebookAsync: deleteNotebookMutation.mutateAsync,
    isDeleting: deleteNotebookMutation.isPending,
    error: deleteNotebookMutation.error,
  };
};
</file>

<file path="src/features/notebook/hooks/useNotebookDelete.tsx.backup">
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';

export const useNotebookDelete = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const deleteNotebook = useMutation({
    mutationFn: async (notebookId: string) => {
      console.log('Starting notebook deletion process for:', notebookId);
      
      try {
        // First, get the notebook details for better error reporting
        const { data: notebook, error: fetchError } = await supabase
          .from('notebooks')
          .select('id, title')
          .eq('id', notebookId)
          .single();

        if (fetchError) {
          console.error('Error fetching notebook:', fetchError);
          throw new Error('Failed to find notebook');
        }

        console.log('Found notebook to delete:', notebook.title);

        // Get all sources for this notebook to delete their files
        const { data: sources, error: sourcesError } = await supabase
          .from('sources')
          .select('id, title, file_path, type')
          .eq('notebook_id', notebookId);

        if (sourcesError) {
          console.error('Error fetching sources for notebook:', sourcesError);
          throw new Error('Failed to fetch sources for cleanup');
        }

        console.log(`Found ${sources?.length || 0} sources to clean up`);

        // Delete all files from storage for sources that have file_path
        const filesToDelete = sources?.filter(source => source.file_path).map(source => source.file_path) || [];
        
        if (filesToDelete.length > 0) {
          console.log('Deleting files from storage:', filesToDelete);
          
          const { error: storageError } = await supabase.storage
            .from('sources')
            .remove(filesToDelete);

          if (storageError) {
            console.error('Error deleting files from storage:', storageError);
            // Don't throw here - we still want to delete the notebook
            // even if some files can't be deleted (they might already be gone)
          } else {
            console.log('All files deleted successfully from storage');
          }
        } else {
          console.log('No files to delete from storage (URL-based sources or no file_paths)');
        }

        // Delete the notebook - this will cascade delete all sources
        const { error: deleteError } = await supabase
          .from('notebooks')
          .delete()
          .eq('id', notebookId);

        if (deleteError) {
          console.error('Error deleting notebook:', deleteError);
          throw deleteError;
        }
        
        console.log('Notebook deleted successfully with cascade deletion');
        return notebook;
      } catch (error) {
        console.error('Error in deletion process:', error);
        throw error;
      }
    },
    onSuccess: (deletedNotebook, notebookId) => {
      console.log('Delete mutation success, invalidating queries');
      
      // Invalidate all related queries
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
      queryClient.invalidateQueries({ queryKey: ['sources', notebookId] });
      queryClient.invalidateQueries({ queryKey: ['notebook', notebookId] });
      
      toast({
        title: "Notebook deleted",
        description: `"${deletedNotebook?.title || 'Notebook'}" and all its sources have been successfully deleted.`,
      });
    },
    onError: (error: any) => {
      console.error('Delete mutation error:', error);
      
      let errorMessage = "Failed to delete the notebook. Please try again.";
      
      // Provide more specific error messages based on the error type
      if (error?.code === 'PGRST116') {
        errorMessage = "Notebook not found or you don't have permission to delete it.";
      } else if (error?.message?.includes('foreign key')) {
        errorMessage = "Cannot delete notebook due to data dependencies. Please contact support.";
      } else if (error?.message?.includes('network')) {
        errorMessage = "Network error. Please check your connection and try again.";
      }
      
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });

  return {
    deleteNotebook: deleteNotebook.mutate,
    isDeleting: deleteNotebook.isPending,
  };
};
</file>

<file path="src/features/notebook/hooks/useNotebookGeneration.tsx">
/**
 * 노트북 생성 훅 - 새로운 API 서비스 기반
 * notebooks generation API 서비스를 사용하여 콘텐츠 생성 관리
 */

import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useAuth } from '@/features/authentication/hooks';
import { useToast } from '@/shared/hooks/use-toast';
import { 
  generateNotebookContent,
  generateAudioOverview,
  refreshAudioUrl,
  autoRefreshIfExpired,
  generationUtils
} from '../services';
import type { 
  NotebookContentGenerationRequest,
  AudioOverviewGenerationRequest,
  AudioUrlRefreshRequest,
  NotebookApiResponse 
} from '../services/types';

/**
 * 노트북 콘텐츠 생성 훅
 */
export const useNotebookGeneration = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const generateContentMutation = useMutation({
    mutationFn: async (request: NotebookContentGenerationRequest): Promise<NotebookApiResponse> => {
      console.log('Starting notebook content generation for:', request.notebookId, 
                  'with source type:', request.sourceType);
      
      try {
        const response = await generateNotebookContent(request);
        console.log('Notebook content generation response:', response);
        return response;
      } catch (error) {
        console.error('Error generating notebook content:', error);
        throw error;
      }
    },
    onSuccess: (data) => {
      console.log('Notebook generation successful:', data);
      
      // 관련 쿼리들 무효화하여 UI 새로고침
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
      queryClient.invalidateQueries({ queryKey: ['notebook'] });
      
      toast({
        title: "Content Generated",
        description: "Notebook title and description have been generated successfully.",
      });
    },
    onError: (error: any) => {
      console.error('Notebook generation failed:', error);
      
      let errorMessage = "Failed to generate notebook content. Please try again.";
      
      // 에러 타입에 따른 구체적인 메시지 제공
      if (error?.message?.includes('network') || error?.message?.includes('Network')) {
        errorMessage = "Network error. Please check your connection and try again.";
      } else if (error?.message?.includes('auth') || error?.message?.includes('JWT')) {
        errorMessage = "Authentication error. Please sign in again.";
      } else if (error?.message?.includes('timeout')) {
        errorMessage = "Generation request timed out. Please try again.";
      } else if (error?.message?.includes('quota') || error?.message?.includes('limit')) {
        errorMessage = "You've reached your generation limit. Please try again later.";
      } else if (error?.message) {
        errorMessage = error.message;
      }
      
      toast({
        title: "Generation Failed",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });

  return {
    generateNotebookContent: generateContentMutation.mutate,
    generateNotebookContentAsync: generateContentMutation.mutateAsync,
    isGenerating: generateContentMutation.isPending,
    error: generateContentMutation.error,
  };
};

/**
 * 오디오 개요 생성 훅
 */
export const useAudioOverviewGeneration = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const generateAudioMutation = useMutation({
    mutationFn: async (request: AudioOverviewGenerationRequest): Promise<NotebookApiResponse> => {
      console.log('Starting audio overview generation for notebook:', request.notebookId);
      
      try {
        const response = await generateAudioOverview(request);
        console.log('Audio overview generation response:', response);
        return response;
      } catch (error) {
        console.error('Error generating audio overview:', error);
        throw error;
      }
    },
    onSuccess: (data, variables) => {
      console.log('Audio generation successful:', data);
      
      // 관련 쿼리들 무효화
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
      queryClient.invalidateQueries({ queryKey: ['notebook', variables.notebookId] });
      
      toast({
        title: "Audio Generated",
        description: "Audio overview has been generated successfully.",
      });
    },
    onError: (error: any) => {
      console.error('Audio generation failed:', error);
      
      let errorMessage = "Failed to generate audio overview. Please try again.";
      
      if (error?.message?.includes('network') || error?.message?.includes('Network')) {
        errorMessage = "Network error. Please check your connection and try again.";
      } else if (error?.message?.includes('timeout')) {
        errorMessage = "Audio generation timed out. Please try again.";
      } else if (error?.message) {
        errorMessage = error.message;
      }
      
      toast({
        title: "Audio Generation Failed",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });

  return {
    generateAudioOverview: generateAudioMutation.mutate,
    generateAudioOverviewAsync: generateAudioMutation.mutateAsync,
    isGeneratingAudio: generateAudioMutation.isPending,
    error: generateAudioMutation.error,
  };
};

/**
 * 오디오 URL 새로고침 훅
 */
export const useAudioUrlRefresh = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const refreshUrlMutation = useMutation({
    mutationFn: async (request: AudioUrlRefreshRequest): Promise<NotebookApiResponse> => {
      console.log('Refreshing audio URL for notebook:', request.notebookId, 
                  'silent:', request.silent);
      
      try {
        const response = await refreshAudioUrl(request);
        console.log('Audio URL refresh response:', response);
        return response;
      } catch (error) {
        console.error('Error refreshing audio URL:', error);
        throw error;
      }
    },
    onSuccess: (data, variables) => {
      console.log('Audio URL refresh successful:', data);
      
      // 관련 쿼리들 무효화
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
      queryClient.invalidateQueries({ queryKey: ['notebook', variables.notebookId] });
      
      if (!variables.silent) {
        toast({
          title: "Audio URL Refreshed",
          description: "Audio URL has been refreshed successfully.",
        });
      }
    },
    onError: (error: any, variables) => {
      console.error('Audio URL refresh failed:', error);
      
      if (!variables.silent) {
        toast({
          title: "Refresh Failed",
          description: "Failed to refresh audio URL. Please try again.",
          variant: "destructive",
        });
      }
    },
  });

  return {
    refreshAudioUrl: refreshUrlMutation.mutate,
    refreshAudioUrlAsync: refreshUrlMutation.mutateAsync,
    isRefreshing: refreshUrlMutation.isPending,
    error: refreshUrlMutation.error,
  };
};

/**
 * 자동 오디오 URL 갱신 훅 (만료 확인 포함)
 */
export const useAutoAudioRefresh = () => {
  const { refreshAudioUrlAsync } = useAudioUrlRefresh();

  const autoRefresh = async (notebookId: string, expiresAt: string | null): Promise<NotebookApiResponse | null> => {
    try {
      return await autoRefreshIfExpired(notebookId, expiresAt);
    } catch (error) {
      console.error('Auto-refresh failed:', error);
      return null;
    }
  };

  return {
    autoRefresh,
    ...generationUtils, // 유틸리티 함수들 노출
  };
};
</file>

<file path="src/features/notebook/hooks/useNotebookGeneration.tsx.backup">
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

export const useNotebookGeneration = () => {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  const generateNotebookContent = useMutation({
    mutationFn: async ({ notebookId, filePath, sourceType }: { 
      notebookId: string; 
      filePath?: string;
      sourceType: string;
    }) => {
      console.log('Starting notebook content generation for:', notebookId, 'with source type:', sourceType);
      
      const { data, error } = await supabase.functions.invoke('generate-notebook-content', {
        body: {
          notebookId,
          filePath,
          sourceType
        }
      });

      if (error) {
        console.error('Edge function error:', error);
        throw error;
      }

      return data;
    },
    onSuccess: (data) => {
      console.log('Notebook generation successful:', data);
      
      // Invalidate relevant queries to refresh the UI
      queryClient.invalidateQueries({ queryKey: ['notebooks'] });
      queryClient.invalidateQueries({ queryKey: ['notebook'] });
      
      toast({
        title: "Content Generated",
        description: "Notebook title and description have been generated successfully.",
      });
    },
    onError: (error) => {
      console.error('Notebook generation failed:', error);
      
      toast({
        title: "Generation Failed",
        description: "Failed to generate notebook content. Please try again.",
        variant: "destructive",
      });
    },
  });

  return {
    generateNotebookContent: generateNotebookContent.mutate,
    generateNotebookContentAsync: generateNotebookContent.mutateAsync,
    isGenerating: generateNotebookContent.isPending,
  };
};
</file>

<file path="src/features/notebook/hooks/useNotebooks.tsx">
/**
 * 노트북 관리 훅 - 새로운 API 서비스 기반
 * notebooks API 서비스와 실시간 구독 서비스를 사용하여
 * 노트북의 생명주기를 관리
 */

import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useEffect } from 'react';
import { useAuth } from '@/features/authentication/hooks';
import { 
  getNotebooks, 
  getNotebook, 
  createNotebook 
} from '../services';
import { subscribeToUserNotebooks, RealtimeManager } from '@/services/core/realtime';
import type { 
  Notebook,
  NotebookWithSources,
  NotebookCreateInput,
  GetNotebooksOptions 
} from '../services/types';

/**
 * 메인 노트북 관리 훅
 */
export const useNotebooks = (options: GetNotebooksOptions = {}) => {
  const { user, isAuthenticated, loading: authLoading } = useAuth();
  const queryClient = useQueryClient();

  const {
    data: notebooks = [],
    isLoading,
    error,
    isError,
  } = useQuery({
    queryKey: ['notebooks', user?.id, options],
    queryFn: async (): Promise<NotebookWithSources[]> => {
      if (!user?.id) {
        console.log('No user found, returning empty notebooks array');
        return [];
      }
      
      return await getNotebooks(user.id, options);
    },
    enabled: isAuthenticated && !authLoading && !!user?.id,
    retry: (failureCount, error: any) => {
      // 인증 관련 에러는 재시도하지 않음
      if (error?.message?.includes('JWT') || error?.message?.includes('auth')) {
        return false;
      }
      return failureCount < 3;
    },
  });

  // 실시간 구독 설정
  useEffect(() => {
    if (!user?.id || !isAuthenticated) return;

    console.log('Setting up real-time subscription for notebooks');

    let realtimeManager: RealtimeManager;

    try {
      realtimeManager = subscribeToUserNotebooks(user.id, {
        onInsert: (notebook) => {
          console.log('Real-time notebook insert:', notebook);
          queryClient.invalidateQueries({ queryKey: ['notebooks', user.id] });
        },
        onUpdate: (notebook) => {
          console.log('Real-time notebook update:', notebook);
          queryClient.invalidateQueries({ queryKey: ['notebooks', user.id] });
          queryClient.invalidateQueries({ queryKey: ['notebook', notebook.id] });
        },
        onDelete: (payload) => {
          console.log('Real-time notebook delete:', payload);
          queryClient.invalidateQueries({ queryKey: ['notebooks', user.id] });
        },
      });
    } catch (error) {
      console.error('Failed to set up real-time subscription:', error);
    }

    return () => {
      console.log('Cleaning up real-time subscription');
      realtimeManager?.unsubscribe();
    };
  }, [user?.id, isAuthenticated, queryClient]);

  const createNotebookMutation = useMutation({
    mutationFn: async (notebookData: NotebookCreateInput): Promise<Notebook> => {
      console.log('Creating notebook with data:', notebookData);
      console.log('Current user:', user?.id);
      
      if (!user?.id) {
        console.error('User not authenticated');
        throw new Error('User not authenticated');
      }

      return await createNotebook(user.id, notebookData);
    },
    onSuccess: (data) => {
      console.log('Mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
    },
    onError: (error) => {
      console.error('Mutation error:', error);
    },
  });

  return {
    notebooks,
    isLoading: authLoading || isLoading,
    error: error?.message || null,
    isError,
    createNotebook: createNotebookMutation.mutate,
    createNotebookAsync: createNotebookMutation.mutateAsync,
    isCreating: createNotebookMutation.isPending,
  };
};

/**
 * 노트북 생성 전용 훅
 */
export const useCreateNotebook = () => {
  const { user } = useAuth();
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (notebookData: NotebookCreateInput): Promise<Notebook> => {
      console.log('Creating notebook with data:', notebookData);
      console.log('Current user:', user?.id);
      
      if (!user?.id) {
        console.error('User not authenticated');
        throw new Error('User not authenticated');
      }

      return await createNotebook(user.id, notebookData);
    },
    onSuccess: (data) => {
      console.log('Mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
    },
    onError: (error) => {
      console.error('Mutation error:', error);
    },
  });
};

/**
 * 개별 노트북 조회 훅
 */
export const useNotebook = (notebookId: string) => {
  const { user, isAuthenticated } = useAuth();

  return useQuery({
    queryKey: ['notebook', notebookId],
    queryFn: async (): Promise<Notebook> => {
      if (!user?.id || !notebookId) {
        throw new Error('User not authenticated or notebook ID missing');
      }

      console.log('🔍 Fetching notebook:', notebookId, 'for user:', user.id);
      
      const notebook = await getNotebook(notebookId, user.id);
      
      console.log('✅ Notebook fetched successfully:', notebook);
      return notebook;
    },
    enabled: isAuthenticated && !!notebookId && !!user?.id,
  });
};
</file>

<file path="src/features/notebook/hooks/useNotebooks.tsx.backup">
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';

export const useNotebooks = () => {
  const { user, isAuthenticated, loading: authLoading } = useAuth();
  const queryClient = useQueryClient();

  const {
    data: notebooks = [],
    isLoading,
    error,
    isError,
  } = useQuery({
    queryKey: ['notebooks', user?.id],
    queryFn: async () => {
      if (!user) {
        console.log('No user found, returning empty notebooks array');
        return [];
      }
      
      console.log('Fetching notebooks for user:', user.id);
      
      // First get the notebooks
      const { data: notebooksData, error: notebooksError } = await supabase
        .from('notebooks')
        .select('*')
        .eq('user_id', user.id)
        .order('updated_at', { ascending: false });

      if (notebooksError) {
        console.error('Error fetching notebooks:', notebooksError);
        throw notebooksError;
      }

      // Then get source counts separately for each notebook
      const notebooksWithCounts = await Promise.all(
        (notebooksData || []).map(async (notebook) => {
          const { count, error: countError } = await supabase
            .from('sources')
            .select('*', { count: 'exact', head: true })
            .eq('notebook_id', notebook.id);

          if (countError) {
            console.error('Error fetching source count for notebook:', notebook.id, countError);
            return { ...notebook, sources: [{ count: 0 }] };
          }

          return { ...notebook, sources: [{ count: count || 0 }] };
        })
      );

      console.log('Fetched notebooks:', notebooksWithCounts?.length || 0);
      return notebooksWithCounts || [];
    },
    enabled: isAuthenticated && !authLoading,
    retry: (failureCount, error) => {
      // Don't retry on auth errors
      if (error?.message?.includes('JWT') || error?.message?.includes('auth')) {
        return false;
      }
      return failureCount < 3;
    },
  });

  // Set up real-time subscription for notebooks updates
  useEffect(() => {
    if (!user?.id || !isAuthenticated) return;

    console.log('Setting up real-time subscription for notebooks');

    const channel = supabase
      .channel('notebooks-changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'notebooks',
          filter: `user_id=eq.${user.id}`
        },
        (payload) => {
          console.log('Real-time notebook update received:', payload);
          
          // Invalidate and refetch notebooks when any change occurs
          queryClient.invalidateQueries({ queryKey: ['notebooks', user.id] });
        }
      )
      .subscribe();

    return () => {
      console.log('Cleaning up real-time subscription');
      supabase.removeChannel(channel);
    };
  }, [user?.id, isAuthenticated, queryClient]);

  const createNotebook = useMutation({
    mutationFn: async (notebookData: { title: string; description?: string }) => {
      console.log('Creating notebook with data:', notebookData);
      console.log('Current user:', user?.id);
      
      if (!user) {
        console.error('User not authenticated');
        throw new Error('User not authenticated');
      }

      const { data, error } = await supabase
        .from('notebooks')
        .insert({
          title: notebookData.title,
          description: notebookData.description,
          user_id: user.id,
          generation_status: 'pending',
        })
        .select()
        .single();

      if (error) {
        console.error('Error creating notebook:', error);
        throw error;
      }
      
      console.log('Notebook created successfully:', data);
      return data;
    },
    onSuccess: (data) => {
      console.log('Mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
    },
    onError: (error) => {
      console.error('Mutation error:', error);
    },
  });

  return {
    notebooks,
    isLoading: authLoading || isLoading,
    error: error?.message || null,
    isError,
    createNotebook: createNotebook.mutate,
    isCreating: createNotebook.isPending,
  };
};

// Export the create notebook hook separately for convenience
export const useCreateNotebook = () => {
  const { user } = useAuth();
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (notebookData: { title: string; description?: string }) => {
      console.log('Creating notebook with data:', notebookData);
      console.log('Current user:', user?.id);
      
      if (!user) {
        console.error('User not authenticated');
        throw new Error('User not authenticated');
      }

      const { data, error } = await supabase
        .from('notebooks')
        .insert({
          title: notebookData.title,
          description: notebookData.description,
          user_id: user.id,
          generation_status: 'pending',
        })
        .select()
        .single();

      if (error) {
        console.error('Error creating notebook:', error);
        throw error;
      }
      
      console.log('Notebook created successfully:', data);
      return data;
    },
    onSuccess: (data) => {
      console.log('Mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
    },
    onError: (error) => {
      console.error('Mutation error:', error);
    },
  });
};

// Get individual notebook
export const useNotebook = (notebookId: string) => {
  const { user, isAuthenticated } = useAuth();

  return useQuery({
    queryKey: ['notebook', notebookId],
    queryFn: async () => {
      if (!user || !notebookId) {
        throw new Error('User not authenticated or notebook ID missing');
      }

      console.log('🔍 Fetching notebook:', notebookId, 'for user:', user.id);

      const { data, error } = await supabase
        .from('notebooks')
        .select('*')
        .eq('id', notebookId)
        .eq('user_id', user.id)
        .single();

      if (error) {
        console.error('❌ Error fetching notebook:', error);
        throw error;
      }

      console.log('✅ Notebook fetched successfully:', data);
      return data;
    },
    enabled: isAuthenticated && !!notebookId,
  });
};
</file>

<file path="src/features/notebook/hooks/useNotebookUpdate.tsx">
/**
 * 노트북 업데이트 훅 - 새로운 API 서비스 기반
 * notebooks API 서비스를 사용하여 안전한 노트북 업데이트 수행
 */

import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useAuth } from '@/features/authentication/hooks';
import { useToast } from '@/shared/hooks/use-toast';
import { updateNotebook } from '../services';
import type { Notebook, NotebookUpdateInput } from '../services/types';

export const useNotebookUpdate = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const updateNotebookMutation = useMutation({
    mutationFn: async ({ 
      id, 
      updates 
    }: { 
      id: string; 
      updates: NotebookUpdateInput;
    }): Promise<Notebook> => {
      console.log('Updating notebook:', id, updates);
      
      try {
        const updatedNotebook = await updateNotebook(id, updates);
        console.log('Notebook updated successfully:', updatedNotebook);
        return updatedNotebook;
      } catch (error) {
        console.error('Error updating notebook:', error);
        throw error;
      }
    },
    onSuccess: (data) => {
      console.log('Update mutation success, invalidating queries');
      
      // 관련 쿼리들 무효화
      queryClient.invalidateQueries({ queryKey: ['notebook', data.id] });
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
      
      // 특정 경우에만 성공 토스트 표시 (제목 변경 시)
      toast({
        title: "Notebook updated",
        description: "The notebook has been updated successfully.",
      });
    },
    onError: (error: any) => {
      console.error('Update mutation error:', error);
      
      let errorMessage = "Failed to update the notebook. Please try again.";
      
      // 에러 타입에 따른 구체적인 메시지 제공
      if (error?.code === 'PGRST116') {
        errorMessage = "Notebook not found or you don't have permission to update it.";
      } else if (error?.message?.includes('network') || error?.message?.includes('Network')) {
        errorMessage = "Network error. Please check your connection and try again.";
      } else if (error?.message?.includes('auth') || error?.message?.includes('JWT')) {
        errorMessage = "Authentication error. Please sign in again.";
      } else if (error?.message?.includes('validation')) {
        errorMessage = "Invalid data provided. Please check your input and try again.";
      } else if (error?.message) {
        errorMessage = error.message;
      }
      
      // 에러 토스트
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });

  return {
    updateNotebook: updateNotebookMutation.mutate,
    updateNotebookAsync: updateNotebookMutation.mutateAsync,
    isUpdating: updateNotebookMutation.isPending,
    error: updateNotebookMutation.error,
  };
};
</file>

<file path="src/features/notebook/hooks/useNotebookUpdate.tsx.backup">
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';

export const useNotebookUpdate = () => {
  const queryClient = useQueryClient();

  const updateNotebook = useMutation({
    mutationFn: async ({ id, updates }: { id: string; updates: { title?: string; description?: string } }) => {
      console.log('Updating notebook:', id, updates);
      
      const { data, error } = await supabase
        .from('notebooks')
        .update(updates)
        .eq('id', id)
        .select()
        .single();

      if (error) {
        console.error('Error updating notebook:', error);
        throw error;
      }
      
      console.log('Notebook updated successfully:', data);
      return data;
    },
    onSuccess: (data) => {
      console.log('Mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['notebook', data.id] });
      queryClient.invalidateQueries({ queryKey: ['notebooks'] });
    },
    onError: (error) => {
      console.error('Mutation error:', error);
    },
  });

  return {
    updateNotebook: updateNotebook.mutate,
    isUpdating: updateNotebook.isPending,
  };
};
</file>

<file path="src/features/notebook/hooks/useNotes.tsx">
import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/features/authentication/hooks';

export interface Note {
  id: string;
  notebook_id: string;
  title: string;
  content: string;
  source_type: 'user' | 'ai_response';
  extracted_text?: string;
  created_at: string;
  updated_at: string;
}

export const useNotes = (notebookId?: string) => {
  const { user } = useAuth();
  const queryClient = useQueryClient();

  const { data: notes, isLoading } = useQuery({
    queryKey: ['notes', notebookId],
    queryFn: async () => {
      if (!notebookId) return [];
      
      const { data, error } = await supabase
        .from('notes')
        .select('*')
        .eq('notebook_id', notebookId)
        .order('updated_at', { ascending: false });
      
      if (error) throw error;
      return data as Note[];
    },
    enabled: !!notebookId && !!user,
  });

  const createNoteMutation = useMutation({
    mutationFn: async ({ 
      title, 
      content, 
      source_type = 'user',
      extracted_text 
    }: { 
      title: string; 
      content: string; 
      source_type?: 'user' | 'ai_response';
      extracted_text?: string;
    }) => {
      if (!notebookId) throw new Error('Notebook ID is required');
      
      const { data, error } = await supabase
        .from('notes')
        .insert([{
          notebook_id: notebookId,
          title,
          content,
          source_type,
          extracted_text,
        }])
        .select()
        .single();
      
      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['notes', notebookId] });
    },
  });

  const updateNoteMutation = useMutation({
    mutationFn: async ({ id, title, content }: { id: string; title: string; content: string }) => {
      const { data, error } = await supabase
        .from('notes')
        .update({ title, content, updated_at: new Date().toISOString() })
        .eq('id', id)
        .select()
        .single();
      
      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['notes', notebookId] });
    },
  });

  const deleteNoteMutation = useMutation({
    mutationFn: async (id: string) => {
      const { error } = await supabase
        .from('notes')
        .delete()
        .eq('id', id);
      
      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['notes', notebookId] });
    },
  });

  return {
    notes,
    isLoading,
    createNote: createNoteMutation.mutate,
    isCreating: createNoteMutation.isPending,
    updateNote: updateNoteMutation.mutate,
    isUpdating: updateNoteMutation.isPending,
    deleteNote: deleteNoteMutation.mutate,
    isDeleting: deleteNoteMutation.isPending,
  };
};
</file>

<file path="src/features/notebook/hooks/useSourceDelete.tsx">
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/features/authentication/hooks';
import { useToast } from '@/shared/hooks/use-toast';

export const useSourceDelete = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const deleteSource = useMutation({
    mutationFn: async (sourceId: string) => {
      console.log('Starting source deletion process for:', sourceId);
      
      try {
        // First, get the source details including file information
        const { data: source, error: fetchError } = await supabase
          .from('sources')
          .select('id, title, file_path, type')
          .eq('id', sourceId)
          .single();

        if (fetchError) {
          console.error('Error fetching source:', fetchError);
          throw new Error('Failed to find source');
        }

        console.log('Found source to delete:', source.title, 'with file_path:', source.file_path);

        // Delete the file from storage if it exists
        if (source.file_path) {
          console.log('Deleting file from storage:', source.file_path);
          
          const { error: storageError } = await supabase.storage
            .from('sources')
            .remove([source.file_path]);

          if (storageError) {
            console.error('Error deleting file from storage:', storageError);
            // Don't throw here - we still want to delete the database record
            // even if the file deletion fails (file might already be gone)
          } else {
            console.log('File deleted successfully from storage');
          }
        } else {
          console.log('No file to delete from storage (URL-based source or no file_path)');
        }

        // Delete the source record from the database
        const { error: deleteError } = await supabase
          .from('sources')
          .delete()
          .eq('id', sourceId);

        if (deleteError) {
          console.error('Error deleting source from database:', deleteError);
          throw deleteError;
        }
        
        console.log('Source deleted successfully from database');
        return source;
      } catch (error) {
        console.error('Error in source deletion process:', error);
        throw error;
      }
    },
    onSuccess: (deletedSource) => {
      console.log('Delete mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['sources'] });
      toast({
        title: "Source deleted",
        description: `"${deletedSource?.title || 'Source'}" has been successfully deleted.`,
      });
    },
    onError: (error: any) => {
      console.error('Delete mutation error:', error);
      
      let errorMessage = "Failed to delete the source. Please try again.";
      
      // Provide more specific error messages based on the error type
      if (error?.code === 'PGRST116') {
        errorMessage = "Source not found or you don't have permission to delete it.";
      } else if (error?.message?.includes('foreign key')) {
        errorMessage = "Cannot delete source due to data dependencies. Please contact support.";
      } else if (error?.message?.includes('network')) {
        errorMessage = "Network error. Please check your connection and try again.";
      }
      
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });

  return {
    deleteSource: deleteSource.mutate,
    isDeleting: deleteSource.isPending,
  };
};
</file>

<file path="src/features/notebook/hooks/useSourceDelete.tsx.backup">
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';

export const useSourceDelete = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const deleteSource = useMutation({
    mutationFn: async (sourceId: string) => {
      console.log('Starting source deletion process for:', sourceId);
      
      try {
        // First, get the source details including file information
        const { data: source, error: fetchError } = await supabase
          .from('sources')
          .select('id, title, file_path, type')
          .eq('id', sourceId)
          .single();

        if (fetchError) {
          console.error('Error fetching source:', fetchError);
          throw new Error('Failed to find source');
        }

        console.log('Found source to delete:', source.title, 'with file_path:', source.file_path);

        // Delete the file from storage if it exists
        if (source.file_path) {
          console.log('Deleting file from storage:', source.file_path);
          
          const { error: storageError } = await supabase.storage
            .from('sources')
            .remove([source.file_path]);

          if (storageError) {
            console.error('Error deleting file from storage:', storageError);
            // Don't throw here - we still want to delete the database record
            // even if the file deletion fails (file might already be gone)
          } else {
            console.log('File deleted successfully from storage');
          }
        } else {
          console.log('No file to delete from storage (URL-based source or no file_path)');
        }

        // Delete the source record from the database
        const { error: deleteError } = await supabase
          .from('sources')
          .delete()
          .eq('id', sourceId);

        if (deleteError) {
          console.error('Error deleting source from database:', deleteError);
          throw deleteError;
        }
        
        console.log('Source deleted successfully from database');
        return source;
      } catch (error) {
        console.error('Error in source deletion process:', error);
        throw error;
      }
    },
    onSuccess: (deletedSource) => {
      console.log('Delete mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['sources'] });
      toast({
        title: "Source deleted",
        description: `"${deletedSource?.title || 'Source'}" has been successfully deleted.`,
      });
    },
    onError: (error: any) => {
      console.error('Delete mutation error:', error);
      
      let errorMessage = "Failed to delete the source. Please try again.";
      
      // Provide more specific error messages based on the error type
      if (error?.code === 'PGRST116') {
        errorMessage = "Source not found or you don't have permission to delete it.";
      } else if (error?.message?.includes('foreign key')) {
        errorMessage = "Cannot delete source due to data dependencies. Please contact support.";
      } else if (error?.message?.includes('network')) {
        errorMessage = "Network error. Please check your connection and try again.";
      }
      
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });

  return {
    deleteSource: deleteSource.mutate,
    isDeleting: deleteSource.isPending,
  };
};
</file>

<file path="src/features/notebook/hooks/useSources.tsx">
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useAuth } from '@/features/authentication/hooks';
import { useNotebookGeneration } from './useNotebookGeneration';
import { useEffect, useMemo } from 'react';
import {
  getSources,
  createSource,
  updateSource as updateSourceService,
  updateSourceStatus,
  isFirstSource,
  Source,
  SourceCreateInput,
  SourceUpdateInput,
  SourceQueryOptions,
  ProcessingStatus,
} from '../services';
import { subscribeToNotebookSources } from '@/shared/services/core/realtime';

export const useSources = (notebookId?: string, options?: SourceQueryOptions) => {
  const { user } = useAuth();
  const queryClient = useQueryClient();
  const { generateNotebookContentAsync } = useNotebookGeneration();

  // Sources 데이터 조회
  const {
    data: sources = [],
    isLoading,
    error,
  } = useQuery({
    queryKey: ['sources', notebookId, options],
    queryFn: async () => {
      if (!notebookId) return [];
      
      console.log('📊 Fetching sources for notebook:', notebookId);
      const data = await getSources(notebookId, options);
      console.log('✅ Sources fetched successfully:', data.length, 'sources');
      
      return data;
    },
    enabled: !!notebookId,
    staleTime: 5 * 60 * 1000, // 5분간 캐시 유지
  });

  // 실시간 구독 설정
  useEffect(() => {
    if (!notebookId || !user) return;

    console.log('🔄 Setting up realtime subscription for sources, notebook:', notebookId);

    const subscription = subscribeToNotebookSources(notebookId, {
      onInsert: (newSource: Source) => {
        console.log('📥 Realtime INSERT:', newSource);
        queryClient.setQueryData(['sources', notebookId], (oldSources: Source[] = []) => {
          const exists = oldSources.some(source => source.id === newSource.id);
          if (exists) {
            console.log('Source already exists, skipping INSERT:', newSource.id);
            return oldSources;
          }
          return [newSource, ...oldSources];
        });
      },
      onUpdate: (updatedSource: Source) => {
        console.log('🔄 Realtime UPDATE:', updatedSource);
        queryClient.setQueryData(['sources', notebookId], (oldSources: Source[] = []) => {
          return oldSources.map(source => 
            source.id === updatedSource.id ? updatedSource : source
          );
        });
      },
      onDelete: ({ old_record: deletedSource }) => {
        console.log('🗑️ Realtime DELETE:', deletedSource);
        queryClient.setQueryData(['sources', notebookId], (oldSources: Source[] = []) => {
          return oldSources.filter(source => source.id !== deletedSource.id);
        });
      },
    });

    return () => {
      console.log('🧹 Cleaning up realtime subscription for sources');
      subscription.unsubscribe();
    };
  }, [notebookId, user, queryClient]);

  // 소스 추가 Mutation
  const addSource = useMutation({
    mutationFn: async (sourceData: SourceCreateInput) => {
      if (!user) throw new Error('User not authenticated');

      console.log('➕ Adding new source:', sourceData.title, 'type:', sourceData.type);
      const newSource = await createSource(sourceData);
      
      console.log('✅ Source created successfully:', newSource.id);
      return newSource;
    },
    onSuccess: async (newSource) => {
      console.log('🎉 Source added successfully:', newSource);
      
      // 첫 번째 소스인 경우 노트북 생성 트리거 확인
      if (notebookId) {
        const isFirst = await isFirstSource(notebookId);
        
        if (isFirst) {
          console.log('📝 This is the first source, checking notebook generation...');
          
          // 노트북 생성 상태 확인 및 트리거
          const canGenerate = 
            (newSource.type === 'pdf' && newSource.file_path) ||
            (newSource.type === 'text' && newSource.content) ||
            (newSource.type === 'website' && newSource.url) ||
            (newSource.type === 'youtube' && newSource.url) ||
            (newSource.type === 'audio' && newSource.file_path);
          
          if (canGenerate) {
            try {
              await generateNotebookContentAsync({
                notebookId,
                filePath: newSource.file_path || newSource.url,
                sourceType: newSource.type
              });
            } catch (error) {
              console.error('Failed to generate notebook content:', error);
            }
          }
        }
      }
    },
  });

  // 소스 업데이트 Mutation
  const updateSource = useMutation({
    mutationFn: async ({ sourceId, updates }: { 
      sourceId: string; 
      updates: SourceUpdateInput 
    }) => {
      console.log('🔄 Updating source:', sourceId, 'updates:', updates);
      return await updateSourceService(sourceId, updates);
    },
    onSuccess: async (updatedSource) => {
      console.log('✅ Source updated successfully:', updatedSource.id);
      
      // 파일 경로가 추가되고 첫 번째 소스인 경우 생성 트리거
      if (updatedSource.file_path && notebookId) {
        const currentSources = queryClient.getQueryData(['sources', notebookId]) as Source[] || [];
        const isFirst = currentSources.length === 1;
        
        if (isFirst) {
          try {
            await generateNotebookContentAsync({
              notebookId,
              filePath: updatedSource.file_path,
              sourceType: updatedSource.type
            });
          } catch (error) {
            console.error('Failed to generate notebook content:', error);
          }
        }
      }
    },
  });

  // 소스 완료 표시 Mutation
  const markSourceCompleted = useMutation({
    mutationFn: async (sourceId: string) => {
      return await updateSourceStatus(sourceId, 'completed');
    },
    onSuccess: (data) => {
      console.log('✅ Source marked as completed:', data.id);
    },
  });

  // 편의 함수들
  const sourcesByType = useMemo(() => {
    const grouped: Record<string, Source[]> = {};
    sources.forEach(source => {
      if (!grouped[source.type]) {
        grouped[source.type] = [];
      }
      grouped[source.type].push(source);
    });
    return grouped;
  }, [sources]);

  const sourcesByStatus = useMemo(() => {
    const grouped: Record<ProcessingStatus, Source[]> = {
      pending: [],
      processing: [],
      completed: [],
      failed: [],
      cancelled: [],
    };
    sources.forEach(source => {
      const status = source.processing_status as ProcessingStatus || 'pending';
      grouped[status].push(source);
    });
    return grouped;
  }, [sources]);

  const sourceStats = useMemo(() => {
    return {
      total: sources.length,
      completed: sourcesByStatus.completed.length,
      pending: sourcesByStatus.pending.length,
      processing: sourcesByStatus.processing.length,
      failed: sourcesByStatus.failed.length,
      totalFileSize: sources.reduce((sum, source) => sum + (source.file_size || 0), 0),
    };
  }, [sources, sourcesByStatus]);

  return {
    // 데이터
    sources,
    sourcesByType,
    sourcesByStatus,
    sourceStats,
    
    // 상태
    isLoading,
    error,
    
    // 액션
    addSource: addSource.mutate,
    addSourceAsync: addSource.mutateAsync,
    isAdding: addSource.isPending,
    
    updateSource: updateSource.mutate,
    updateSourceAsync: updateSource.mutateAsync,
    isUpdating: updateSource.isPending,
    
    markSourceCompleted: markSourceCompleted.mutate,
    markSourceCompletedAsync: markSourceCompleted.mutateAsync,
    
    // 유틸리티
    refetch: () => queryClient.invalidateQueries({ queryKey: ['sources', notebookId] }),
  };
};
</file>

<file path="src/features/notebook/hooks/useSources.tsx.backup">
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { useNotebookGeneration } from './useNotebookGeneration';
import { useEffect } from 'react';

export const useSources = (notebookId?: string) => {
  const { user } = useAuth();
  const queryClient = useQueryClient();
  const { generateNotebookContentAsync } = useNotebookGeneration();

  // Debug logging removed to reduce console noise

  const {
    data: sources = [],
    isLoading,
    error,
  } = useQuery({
    queryKey: ['sources', notebookId],
    queryFn: async () => {
      if (!notebookId) return [];
      
      console.log('🔍 Fetching sources for notebook:', notebookId);
      
      const { data, error } = await supabase
        .from('sources')
        .select('*')
        .eq('notebook_id', notebookId)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('❌ Error fetching sources:', error);
        throw error;
      }
      
      console.log('✅ Sources fetched successfully:', data?.length || 0, 'sources');
      console.log('📋 Sources data:', data);
      return data;
    },
    enabled: !!notebookId,
  });

  // Set up Realtime subscription for sources table
  useEffect(() => {
    if (!notebookId || !user) return;

    console.log('Setting up Realtime subscription for sources table, notebook:', notebookId);

    const channel = supabase
      .channel('sources-changes')
      .on(
        'postgres_changes',
        {
          event: '*', // Listen to all events (INSERT, UPDATE, DELETE)
          schema: 'public',
          table: 'sources',
          filter: `notebook_id=eq.${notebookId}`
        },
        (payload: any) => {
          console.log('Realtime: Sources change received:', payload);
          
          // Update the query cache based on the event type
          queryClient.setQueryData(['sources', notebookId], (oldSources: any[] = []) => {
            switch (payload.eventType) {
              case 'INSERT':
                // Add new source if it doesn't already exist
                const newSource = payload.new as any;
                const existsInsert = oldSources.some(source => source.id === newSource?.id);
                if (existsInsert) {
                  console.log('Source already exists, skipping INSERT:', newSource?.id);
                  return oldSources;
                }
                console.log('Adding new source to cache:', newSource);
                return [newSource, ...oldSources];
                
              case 'UPDATE':
                // Update existing source
                const updatedSource = payload.new as any;
                console.log('Updating source in cache:', updatedSource?.id);
                return oldSources.map(source => 
                  source.id === updatedSource?.id ? updatedSource : source
                );
                
              case 'DELETE':
                // Remove deleted source
                const deletedSource = payload.old as any;
                console.log('Removing source from cache:', deletedSource?.id);
                return oldSources.filter(source => source.id !== deletedSource?.id);
                
              default:
                console.log('Unknown event type:', payload.eventType);
                return oldSources;
            }
          });
        }
      )
      .subscribe((status) => {
        console.log('Realtime subscription status for sources:', status);
      });

    return () => {
      console.log('Cleaning up Realtime subscription for sources');
      supabase.removeChannel(channel);
    };
  }, [notebookId, user, queryClient]);

  const addSource = useMutation({
    mutationFn: async (sourceData: {
      notebookId: string;
      title: string;
      type: 'pdf' | 'text' | 'website' | 'youtube' | 'audio';
      content?: string;
      url?: string;
      file_path?: string;
      file_size?: number;
      processing_status?: string;
      metadata?: any;
    }) => {
      if (!user) throw new Error('User not authenticated');

      const { data, error } = await supabase
        .from('sources')
        .insert({
          notebook_id: sourceData.notebookId,
          title: sourceData.title,
          type: sourceData.type,
          content: sourceData.content,
          url: sourceData.url,
          file_path: sourceData.file_path,
          file_size: sourceData.file_size,
          processing_status: sourceData.processing_status,
          metadata: sourceData.metadata || {},
        })
        .select()
        .single();

      if (error) throw error;
      return data;
    },
    onSuccess: async (newSource) => {
      console.log('🎉 Source added successfully:', newSource);
      console.log('📝 Source details:', {
        id: newSource.id,
        title: newSource.title,
        type: newSource.type,
        processing_status: newSource.processing_status,
        file_path: newSource.file_path,
        url: newSource.url,
        notebook_id: newSource.notebook_id
      });
      
      // The Realtime subscription will handle updating the cache
      // But we still check for first source to trigger generation
      const currentSources = queryClient.getQueryData(['sources', notebookId]) as any[] || [];
      const isFirstSource = currentSources.length === 0;
      
      if (isFirstSource && notebookId) {
        console.log('This is the first source, checking notebook generation status...');
        
        // Check notebook generation status
        const { data: notebook } = await supabase
          .from('notebooks')
          .select('generation_status')
          .eq('id', notebookId)
          .single();
        
        if (notebook?.generation_status === 'pending') {
          console.log('Triggering notebook content generation...');
          
          // Determine if we can trigger generation based on source type and available data
          const canGenerate = 
            (newSource.type === 'pdf' && newSource.file_path) ||
            (newSource.type === 'text' && newSource.content) ||
            (newSource.type === 'website' && newSource.url) ||
            (newSource.type === 'youtube' && newSource.url) ||
            (newSource.type === 'audio' && newSource.file_path);
          
          if (canGenerate) {
            try {
              await generateNotebookContentAsync({
                notebookId,
                filePath: newSource.file_path || newSource.url,
                sourceType: newSource.type
              });
            } catch (error) {
              console.error('Failed to generate notebook content:', error);
            }
          } else {
            console.log('Source not ready for generation yet - missing required data');
          }
        }
      }
    },
  });

  const updateSource = useMutation({
    mutationFn: async ({ sourceId, updates }: { 
      sourceId: string; 
      updates: { 
        title?: string;
        file_path?: string;
        processing_status?: string;
      }
    }) => {
      const { data, error } = await supabase
        .from('sources')
        .update(updates)
        .eq('id', sourceId)
        .select()
        .single();

      if (error) throw error;
      return data;
    },
    onSuccess: async (updatedSource) => {
      // The Realtime subscription will handle updating the cache
      
      // If file_path was added and this is the first source, trigger generation
      if (updatedSource.file_path && notebookId) {
        const currentSources = queryClient.getQueryData(['sources', notebookId]) as any[] || [];
        const isFirstSource = currentSources.length === 1;
        
        if (isFirstSource) {
          const { data: notebook } = await supabase
            .from('notebooks')
            .select('generation_status')
            .eq('id', notebookId)
            .single();
          
          if (notebook?.generation_status === 'pending') {
            console.log('File path updated, triggering notebook content generation...');
            
            try {
              await generateNotebookContentAsync({
                notebookId,
                filePath: updatedSource.file_path,
                sourceType: updatedSource.type
              });
            } catch (error) {
              console.error('Failed to generate notebook content:', error);
            }
          }
        }
      }
    },
  });

  const markSourceCompleted = useMutation({
    mutationFn: async (sourceId: string) => {
      const { data, error } = await supabase
        .from('sources')
        .update({ processing_status: 'completed' })
        .eq('id', sourceId)
        .select()
        .single();

      if (error) throw error;
      return data;
    },
    onSuccess: (data) => {
      console.log('✅ Manually marked source as completed:', data.id);
    },
  });

  return {
    sources,
    isLoading,
    error,
    addSource: addSource.mutate,
    addSourceAsync: addSource.mutateAsync,
    isAdding: addSource.isPending,
    updateSource: updateSource.mutate,
    isUpdating: updateSource.isPending,
    markSourceCompleted: markSourceCompleted.mutate,
    markSourceCompletedAsync: markSourceCompleted.mutateAsync,
  };
};
</file>

<file path="src/features/notebook/hooks/useSourceUpdate.tsx">
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/features/authentication/hooks';
import { useToast } from '@/shared/hooks/use-toast';

export const useSourceUpdate = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const updateSource = useMutation({
    mutationFn: async ({ sourceId, title }: { sourceId: string; title: string }) => {
      console.log('Updating source:', sourceId, 'with title:', title);
      
      const { data, error } = await supabase
        .from('sources')
        .update({ title })
        .eq('id', sourceId)
        .select()
        .single();

      if (error) {
        console.error('Error updating source:', error);
        throw error;
      }
      
      console.log('Source updated successfully');
      return data;
    },
    onSuccess: () => {
      console.log('Update mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['sources'] });
      toast({
        title: "Source renamed",
        description: "The source has been successfully renamed.",
      });
    },
    onError: (error) => {
      console.error('Update mutation error:', error);
      toast({
        title: "Error",
        description: "Failed to rename the source. Please try again.",
        variant: "destructive",
      });
    },
  });

  return {
    updateSource: updateSource.mutate,
    isUpdating: updateSource.isPending,
  };
};
</file>

<file path="src/features/notebook/hooks/useSourceUpdate.tsx.backup">
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';

export const useSourceUpdate = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const updateSource = useMutation({
    mutationFn: async ({ sourceId, title }: { sourceId: string; title: string }) => {
      console.log('Updating source:', sourceId, 'with title:', title);
      
      const { data, error } = await supabase
        .from('sources')
        .update({ title })
        .eq('id', sourceId)
        .select()
        .single();

      if (error) {
        console.error('Error updating source:', error);
        throw error;
      }
      
      console.log('Source updated successfully');
      return data;
    },
    onSuccess: () => {
      console.log('Update mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['sources'] });
      toast({
        title: "Source renamed",
        description: "The source has been successfully renamed.",
      });
    },
    onError: (error) => {
      console.error('Update mutation error:', error);
      toast({
        title: "Error",
        description: "Failed to rename the source. Please try again.",
        variant: "destructive",
      });
    },
  });

  return {
    updateSource: updateSource.mutate,
    isUpdating: updateSource.isPending,
  };
};
</file>

<file path="src/features/notebook/services/documentProcessing.ts">
/**
 * 문서 처리 서비스
 * 문서 처리 트리거, 상태 확인, 재시도 등을 담당
 */

import { supabase } from '@/shared/services/core/apiClient';
import { getSource, updateSourceStatus } from './sourcesApi';
import {
  Source,
  DocumentProcessingStatus,
  ProcessingStatus,
  SourceType,
} from './types';

// 처리 상태 체크 간격 (밀리초)
const POLLING_INTERVALS = {
  default: 2000,  // 2초
  fast: 1000,     // 1초
  slow: 5000,     // 5초
} as const;

// 최대 대기 시간 (밀리초)
const MAX_PROCESSING_TIME = {
  pdf: 5 * 60 * 1000,     // 5분
  text: 30 * 1000,        // 30초
  website: 2 * 60 * 1000, // 2분
  youtube: 3 * 60 * 1000, // 3분
  audio: 10 * 60 * 1000,  // 10분
} as const;

// 활성 처리 모니터링을 위한 맵
const activeProcessing = new Map<string, NodeJS.Timeout>();

/**
 * 문서 처리 트리거
 */
export const triggerDocumentProcessing = async (sourceId: string): Promise<void> => {
  const source = await getSource(sourceId);
  
  if (!source) {
    throw new Error(`Source not found: ${sourceId}`);
  }

  // 이미 처리 중이거나 완료된 경우
  if (source.processing_status === 'processing' || source.processing_status === 'completed') {
    console.log(`Source ${sourceId} is already ${source.processing_status}`);
    return;
  }

  // 처리 시작
  await updateSourceStatus(sourceId, 'processing', {
    processingStartTime: new Date().toISOString(),
  });

  // 처리 모니터링 시작
  startProcessingMonitoring(sourceId, source.type);

  // Edge Function 호출 (실제 문서 처리)
  await callDocumentProcessingFunction(source);
};

/**
 * 처리 상태 확인
 */
export const checkProcessingStatus = async (sourceId: string): Promise<DocumentProcessingStatus> => {
  const source = await getSource(sourceId);
  
  if (!source) {
    throw new Error(`Source not found: ${sourceId}`);
  }

  const metadata = source.metadata as Record<string, any> || {};
  const startTime = metadata.processingStartTime ? new Date(metadata.processingStartTime) : new Date();
  const now = new Date();
  const elapsed = now.getTime() - startTime.getTime();

  // 진행률 추정 (타입별로 다르게 계산)
  const estimatedDuration = MAX_PROCESSING_TIME[source.type] || MAX_PROCESSING_TIME.text;
  const estimatedProgress = Math.min(Math.round((elapsed / estimatedDuration) * 100), 95);

  // 남은 시간 추정
  const estimatedTimeRemaining = source.processing_status === 'processing' 
    ? Math.max(0, Math.round((estimatedDuration - elapsed) / 1000))
    : 0;

  return {
    sourceId,
    status: source.processing_status as ProcessingStatus || 'pending',
    progress: source.processing_status === 'completed' ? 100 : estimatedProgress,
    message: getProcessingMessage(source.processing_status as ProcessingStatus, source.type),
    error: metadata.processingError || undefined,
    estimatedTimeRemaining,
    lastUpdated: new Date(source.updated_at),
  };
};

/**
 * 처리 재시도
 */
export const retryProcessing = async (sourceId: string): Promise<void> => {
  const source = await getSource(sourceId);
  
  if (!source) {
    throw new Error(`Source not found: ${sourceId}`);
  }

  // 재시도 카운트 증가
  const metadata = source.metadata as Record<string, any> || {};
  const retryCount = (metadata.retryCount || 0) + 1;

  if (retryCount > 3) {
    throw new Error('최대 재시도 횟수를 초과했습니다.');
  }

  // 상태 초기화 및 재시도 정보 업데이트
  await updateSourceStatus(sourceId, 'pending', {
    ...metadata,
    retryCount,
    lastRetryTime: new Date().toISOString(),
    processingError: null,
  });

  // 잠시 대기 후 처리 트리거
  setTimeout(() => {
    triggerDocumentProcessing(sourceId).catch(console.error);
  }, 1000);
};

/**
 * 처리 취소
 */
export const cancelProcessing = async (sourceId: string): Promise<void> => {
  // 활성 모니터링 중지
  const timeout = activeProcessing.get(sourceId);
  if (timeout) {
    clearTimeout(timeout);
    activeProcessing.delete(sourceId);
  }

  // 상태 업데이트
  await updateSourceStatus(sourceId, 'cancelled', {
    cancelledAt: new Date().toISOString(),
  });
};

/**
 * 대기 중인 모든 소스 처리 시작
 */
export const processPendingSources = async (notebookId?: string): Promise<void> => {
  let query = supabase
    .from('sources')
    .select('*')
    .eq('processing_status', 'pending')
    .order('created_at', { ascending: true });

  if (notebookId) {
    query = query.eq('notebook_id', notebookId);
  }

  const { data: pendingSources, error } = await query;
  
  if (error) throw error;

  // 순차적으로 처리 (동시 처리로 인한 부하 방지)
  for (const source of pendingSources || []) {
    try {
      await triggerDocumentProcessing(source.id);
      
      // 다음 처리 전 짧은 대기
      await new Promise(resolve => setTimeout(resolve, 500));
    } catch (error) {
      console.error(`Failed to process source ${source.id}:`, error);
      
      // 에러 발생해도 다른 소스는 계속 처리
      await updateSourceStatus(source.id, 'failed', {
        processingError: error instanceof Error ? error.message : 'Unknown error',
      });
    }
  }
};

/**
 * 처리 통계 조회
 */
export const getProcessingStats = async (notebookId?: string) => {
  let query = supabase
    .from('sources')
    .select('processing_status');

  if (notebookId) {
    query = query.eq('notebook_id', notebookId);
  }

  const { data, error } = await query;
  if (error) throw error;

  const stats = {
    total: 0,
    pending: 0,
    processing: 0,
    completed: 0,
    failed: 0,
    cancelled: 0,
  };

  data?.forEach((source) => {
    stats.total++;
    const status = source.processing_status as ProcessingStatus || 'pending';
    stats[status]++;
  });

  return stats;
};

// 내부 헬퍼 함수들

/**
 * 문서 처리 Edge Function 호출
 */
const callDocumentProcessingFunction = async (source: Source): Promise<void> => {
  try {
    // 실제 구현에서는 Edge Function을 호출
    // 현재는 시뮬레이션을 위한 타임아웃 사용
    const processingTime = getProcessingTime(source.type);
    
    setTimeout(async () => {
      try {
        // 처리 완료 시뮬레이션
        await updateSourceStatus(source.id, 'completed', {
          processingCompletedAt: new Date().toISOString(),
          processingDuration: processingTime,
        });
        
        // 활성 처리에서 제거
        activeProcessing.delete(source.id);
      } catch (error) {
        console.error(`Failed to complete processing for source ${source.id}:`, error);
        await updateSourceStatus(source.id, 'failed', {
          processingError: error instanceof Error ? error.message : 'Processing failed',
        });
        
        activeProcessing.delete(source.id);
      }
    }, processingTime);

  } catch (error) {
    console.error('Failed to trigger document processing:', error);
    await updateSourceStatus(source.id, 'failed', {
      processingError: error instanceof Error ? error.message : 'Failed to start processing',
    });
  }
};

/**
 * 처리 모니터링 시작
 */
const startProcessingMonitoring = (sourceId: string, sourceType: SourceType): void => {
  // 기존 모니터링이 있으면 중지
  const existingTimeout = activeProcessing.get(sourceId);
  if (existingTimeout) {
    clearTimeout(existingTimeout);
  }

  const maxTime = MAX_PROCESSING_TIME[sourceType];
  const interval = POLLING_INTERVALS.default;

  // 최대 대기 시간 후 타임아웃 처리
  const timeoutId = setTimeout(async () => {
    try {
      const source = await getSource(sourceId);
      
      // 아직 처리 중이면 타임아웃으로 처리
      if (source.processing_status === 'processing') {
        await updateSourceStatus(sourceId, 'failed', {
          processingError: 'Processing timeout',
          processingTimeout: true,
        });
      }
    } catch (error) {
      console.error(`Failed to handle timeout for source ${sourceId}:`, error);
    } finally {
      activeProcessing.delete(sourceId);
    }
  }, maxTime);

  activeProcessing.set(sourceId, timeoutId);
};

/**
 * 소스 타입별 처리 시간 반환 (시뮬레이션용)
 */
const getProcessingTime = (sourceType: SourceType): number => {
  const baseTimes = {
    pdf: 15000,     // 15초
    text: 3000,     // 3초
    website: 8000,  // 8초
    youtube: 12000, // 12초
    audio: 25000,   // 25초
  };

  const baseTime = baseTimes[sourceType] || baseTimes.text;
  
  // 약간의 랜덤성 추가 (±20%)
  const variation = baseTime * 0.2;
  return baseTime + (Math.random() - 0.5) * variation;
};

/**
 * 처리 상태별 메시지 반환
 */
const getProcessingMessage = (status: ProcessingStatus, sourceType: SourceType): string => {
  const typeNames = {
    pdf: 'PDF 문서',
    text: '텍스트',
    website: '웹페이지',
    youtube: 'YouTube 동영상',
    audio: '오디오 파일',
  };

  const typeName = typeNames[sourceType] || '문서';

  switch (status) {
    case 'pending':
      return `${typeName} 처리 대기 중입니다.`;
    case 'processing':
      return `${typeName}를 분석하고 있습니다.`;
    case 'completed':
      return `${typeName} 처리가 완료되었습니다.`;
    case 'failed':
      return `${typeName} 처리 중 오류가 발생했습니다.`;
    case 'cancelled':
      return `${typeName} 처리가 취소되었습니다.`;
    default:
      return '처리 상태를 확인할 수 없습니다.';
  }
};

/**
 * 모든 활성 처리 중지
 */
export const stopAllProcessing = (): void => {
  activeProcessing.forEach((timeout) => {
    clearTimeout(timeout);
  });
  activeProcessing.clear();
};

/**
 * 활성 처리 목록 조회
 */
export const getActiveProcessing = (): string[] => {
  return Array.from(activeProcessing.keys());
};

/**
 * 처리 상태 실시간 구독
 */
export const subscribeToProcessingUpdates = (
  notebookId: string,
  callback: (sourceId: string, status: DocumentProcessingStatus) => void
) => {
  const channel = supabase
    .channel('processing-updates')
    .on(
      'postgres_changes',
      {
        event: 'UPDATE',
        schema: 'public',
        table: 'sources',
        filter: `notebook_id=eq.${notebookId}`,
      },
      async (payload: any) => {
        const updatedSource = payload.new as Source;
        if (updatedSource.processing_status) {
          const status = await checkProcessingStatus(updatedSource.id);
          callback(updatedSource.id, status);
        }
      }
    )
    .subscribe();

  return () => {
    supabase.removeChannel(channel);
  };
};
</file>

<file path="src/features/notebook/services/fileUpload.ts">
/**
 * 파일 업로드 서비스
 * 소스 파일 업로드와 다중 파일 처리를 담당
 */

import { 
  uploadFile, 
  validateFile, 
  generateUniqueFilePath, 
  sanitizeFileName,
  FileUploadOptions as CoreFileUploadOptions 
} from '@/shared/services/core/storage';
import { createSource, updateSource } from './sourcesApi';
import {
  Source,
  SourceType,
  FileUploadOptions,
  FileUploadProgress,
  MultipleFileUploadResult,
  FileValidationResult,
  UploadCancellation,
  ProcessingStatus,
} from './types';

// 파일 타입별 설정
const FILE_TYPE_CONFIGS = {
  pdf: {
    maxSize: 50 * 1024 * 1024, // 50MB
    allowedTypes: ['application/pdf'],
    extensions: ['.pdf'],
  },
  audio: {
    maxSize: 100 * 1024 * 1024, // 100MB
    allowedTypes: [
      'audio/mpeg',
      'audio/mp3', 
      'audio/wav',
      'audio/x-wav',
      'audio/mp4',
      'audio/m4a',
      'audio/ogg',
      'audio/webm'
    ],
    extensions: ['.mp3', '.wav', '.m4a', '.mp4', '.ogg', '.webm'],
  },
} as const;

// 활성 업로드 추적을 위한 맵
const activeUploads = new Map<string, AbortController>();

/**
 * 파일 검증
 */
export const validateSourceFile = (
  file: File, 
  sourceType: SourceType
): FileValidationResult => {
  const errors: string[] = [];
  const warnings: string[] = [];

  const fileInfo = {
    name: file.name,
    size: file.size,
    type: file.type,
    extension: file.name.substring(file.name.lastIndexOf('.')).toLowerCase(),
  };

  // 파일 크기가 0인지 확인
  if (file.size === 0) {
    errors.push('파일이 비어있습니다.');
  }

  // 파일명 길이 확인
  if (file.name.length > 255) {
    errors.push('파일명이 너무 깁니다. (최대 255자)');
  }

  // 타입별 검증
  if (sourceType === 'pdf' || sourceType === 'audio') {
    const config = FILE_TYPE_CONFIGS[sourceType];
    
    try {
      validateFile(file, {
        maxSize: config.maxSize,
        allowedTypes: config.allowedTypes,
      });
    } catch (error: any) {
      errors.push(error.message);
    }
    
    // 확장자 추가 검증
    if (!config.extensions.includes(fileInfo.extension)) {
      errors.push(`지원되지 않는 파일 형식입니다. 지원 형식: ${config.extensions.join(', ')}`);
    }
  }

  // 용량이 큰 파일에 대한 경고
  if (file.size > 20 * 1024 * 1024) { // 20MB 이상
    warnings.push('파일 크기가 큽니다. 업로드와 처리에 시간이 오래 걸릴 수 있습니다.');
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings,
    fileInfo,
  };
};

/**
 * 파일 업로드와 소스 생성
 */
export const uploadSourceFile = async (options: FileUploadOptions): Promise<Source> => {
  const {
    notebookId,
    file,
    title,
    metadata = {},
    onProgress,
    onStatusChange,
    signal,
  } = options;

  // 파일 타입 결정
  const sourceType: SourceType = getSourceTypeFromFile(file);
  
  // 파일 검증
  const validation = validateSourceFile(file, sourceType);
  if (!validation.isValid) {
    throw new Error(`파일 검증 실패: ${validation.errors.join(', ')}`);
  }

  // AbortController 설정
  const abortController = signal ? signal : new AbortController();
  const sourceId = generateTempSourceId();
  
  if (!signal) {
    activeUploads.set(sourceId, abortController);
  }

  try {
    // 1. 먼저 소스 생성 (파일 경로 없이)
    const source = await createSource({
      notebookId,
      title: title || file.name,
      type: sourceType,
      processingStatus: 'pending',
      metadata: {
        ...metadata,
        originalFileName: file.name,
        fileSize: file.size,
        fileType: file.type,
        uploadStartTime: new Date().toISOString(),
      },
    });

    const actualSourceId = source.id;

    // 활성 업로드 맵 업데이트
    if (!signal) {
      activeUploads.delete(sourceId);
      activeUploads.set(actualSourceId, abortController);
    }

    // 진행률 초기화
    const initialProgress: FileUploadProgress = {
      sourceId: actualSourceId,
      fileName: file.name,
      progress: 0,
      status: 'uploading',
      uploadStartTime: new Date(),
    };

    onProgress?.(initialProgress);
    onStatusChange?.('processing');

    // 2. 파일 업로드
    const filePath = generateUniqueFilePath(notebookId, file.name);
    
    // 업로드 진행률 시뮬레이션 (실제 구현에서는 XHR의 progress 이벤트 사용)
    let progress = 0;
    const progressInterval = setInterval(() => {
      if (abortController.signal.aborted) {
        clearInterval(progressInterval);
        return;
      }
      
      progress += Math.random() * 15;
      if (progress > 85) progress = 85; // 85%까지만 시뮬레이션
      
      onProgress?.({
        ...initialProgress,
        progress: Math.min(progress, 85),
      });
    }, 100);

    const uploadResult = await uploadFile({
      bucket: 'sources',
      path: filePath,
      file: file,
      upsert: false,
    });

    clearInterval(progressInterval);

    // 업로드 취소 확인
    if (abortController.signal.aborted) {
      throw new Error('업로드가 취소되었습니다.');
    }

    // 진행률 100% 업데이트
    onProgress?.({
      ...initialProgress,
      progress: 100,
      status: 'completed',
    });

    // 3. 소스에 파일 정보 업데이트
    const updatedSource = await updateSource(actualSourceId, {
      filePath: uploadResult.path,
      fileSize: file.size,
      processingStatus: 'completed',
    });

    onStatusChange?.('completed');

    // 활성 업로드에서 제거
    if (!signal) {
      activeUploads.delete(actualSourceId);
    }

    return updatedSource;

  } catch (error: any) {
    // 에러 시 진행률 업데이트
    onProgress?.({
      sourceId: sourceId,
      fileName: file.name,
      progress: 0,
      status: 'failed',
      error: error.message,
      uploadStartTime: new Date(),
    });

    onStatusChange?.('failed');

    // 활성 업로드에서 제거
    if (!signal) {
      activeUploads.delete(sourceId);
    }

    throw error;
  }
};

/**
 * 다중 파일 업로드
 */
export const handleMultipleFiles = async (
  notebookId: string,
  files: File[],
  options: {
    onProgress?: (sourceId: string, progress: FileUploadProgress) => void;
    onFileComplete?: (source: Source) => void;
    onFileError?: (fileName: string, error: string) => void;
  } = {}
): Promise<MultipleFileUploadResult> => {
  const { onProgress, onFileComplete, onFileError } = options;
  
  const result: MultipleFileUploadResult = {
    successful: [],
    failed: [],
    total: files.length,
  };

  // 병렬 처리 제한 (동시에 3개 파일만 업로드)
  const concurrency = 3;
  const chunks = [];
  
  for (let i = 0; i < files.length; i += concurrency) {
    chunks.push(files.slice(i, i + concurrency));
  }

  for (const chunk of chunks) {
    const promises = chunk.map(async (file) => {
      try {
        const source = await uploadSourceFile({
          notebookId,
          file,
          onProgress: (progress) => onProgress?.(progress.sourceId, progress),
          onStatusChange: () => {}, // 개별 파일 상태는 onProgress로 처리
        });
        
        result.successful.push(source);
        onFileComplete?.(source);
      } catch (error: any) {
        const errorMessage = error.message || '알 수 없는 오류가 발생했습니다.';
        result.failed.push({
          fileName: file.name,
          error: errorMessage,
        });
        onFileError?.(file.name, errorMessage);
      }
    });

    // 청크 내의 모든 파일 업로드 완료 대기
    await Promise.allSettled(promises);
  }

  return result;
};

/**
 * 업로드 진행률 추적
 */
export const getUploadProgress = (sourceId: string): FileUploadProgress | null => {
  // 실제 구현에서는 상태 관리나 캐시에서 조회
  // 현재는 단순한 예시
  return null;
};

/**
 * 업로드 취소
 */
export const cancelUpload = (sourceId: string): boolean => {
  const controller = activeUploads.get(sourceId);
  if (controller) {
    controller.abort();
    activeUploads.delete(sourceId);
    return true;
  }
  return false;
};

/**
 * 모든 활성 업로드 취소
 */
export const cancelAllUploads = (): void => {
  activeUploads.forEach((controller) => {
    controller.abort();
  });
  activeUploads.clear();
};

/**
 * 활성 업로드 목록 조회
 */
export const getActiveUploads = (): string[] => {
  return Array.from(activeUploads.keys());
};

/**
 * 업로드 취소 핸들러 생성
 */
export const createUploadCancellation = (sourceId: string): UploadCancellation => {
  let isCancelled = false;
  
  return {
    sourceId,
    cancel: () => {
      if (!isCancelled) {
        cancelUpload(sourceId);
        isCancelled = true;
      }
    },
    isCancelled: () => isCancelled,
  };
};

// 헬퍼 함수들

/**
 * 파일로부터 소스 타입 결정
 */
const getSourceTypeFromFile = (file: File): SourceType => {
  const extension = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();
  
  if (extension === '.pdf') {
    return 'pdf';
  }
  
  if (FILE_TYPE_CONFIGS.audio.extensions.includes(extension)) {
    return 'audio';
  }
  
  // 기본값은 텍스트로 처리
  return 'text';
};

/**
 * 임시 소스 ID 생성 (실제 소스 생성 전 추적용)
 */
const generateTempSourceId = (): string => {
  return `temp_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
};

/**
 * 파일 크기를 읽기 쉬운 형식으로 변환
 */
export const formatFileSize = (bytes: number): string => {
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  if (bytes === 0) return '0 Bytes';
  
  const i = Math.floor(Math.log(bytes) / Math.log(1024));
  const size = (bytes / Math.pow(1024, i)).toFixed(1);
  
  return `${size} ${sizes[i]}`;
};

/**
 * 파일 타입별 아이콘 반환
 */
export const getFileTypeIcon = (sourceType: SourceType): string => {
  const icons: Record<SourceType, string> = {
    pdf: '📄',
    text: '📝',
    website: '🌐',
    youtube: '▶️',
    audio: '🎵',
  };
  
  return icons[sourceType] || '📄';
};

/**
 * 업로드 예상 시간 계산
 */
export const estimateUploadTime = (fileSize: number, uploadSpeed?: number): number => {
  // 기본 업로드 속도: 1MB/s (사용자 환경에 따라 조정)
  const avgUploadSpeed = uploadSpeed || 1024 * 1024; // bytes per second
  
  return Math.ceil(fileSize / avgUploadSpeed);
};
</file>

<file path="src/features/notebook/services/index.ts">
/**
 * Notebook 서비스 인덱스
 * 모든 notebook 관련 서비스와 타입을 export
 */

// 타입 정의
export * from './types';

// API 서비스
export * from './sourcesApi';
export * from './notebooksApi';
export * from './notebooksGeneration';

// 파일 업로드 서비스
export * from './fileUpload';

// 문서 처리 서비스
export * from './documentProcessing';

// 편의를 위한 기본 export
export { 
  getSources, 
  getSource, 
  createSource, 
  updateSource, 
  deleteSource,
  updateSourceStatus 
} from './sourcesApi';

export {
  uploadSourceFile,
  handleMultipleFiles,
  validateSourceFile,
  cancelUpload,
  formatFileSize,
  getFileTypeIcon
} from './fileUpload';

export {
  triggerDocumentProcessing,
  checkProcessingStatus,
  retryProcessing,
  cancelProcessing,
  processPendingSources
} from './documentProcessing';
</file>

<file path="src/features/notebook/services/notebooksApi.ts">
/**
 * Notebooks API 서비스
 * 노트북 CRUD 작업을 위한 공통 API 서비스
 */

import { safeApiCall, handleApiError, supabase } from '@/shared/services/core/apiClient';
import {
  Notebook,
  NotebookWithSources,
  NotebookCreateInput,
  NotebookUpdateInput,
  NotebookGenerationStatus,
  GetNotebooksOptions
} from './types';

/**
 * 사용자별 노트북 목록 조회
 */
export const getNotebooks = async (
  userId: string, 
  options: GetNotebooksOptions = {}
): Promise<NotebookWithSources[]> => {
  const {
    includeSourceCount = true,
    orderBy = 'updated_at',
    ascending = false
  } = options;

  try {
    console.log('Fetching notebooks for user:', userId);
    
    // 노트북 목록 조회
    const notebooksData = await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .select('*')
        .eq('user_id', userId)
        .order(orderBy, { ascending })
    );

    if (!includeSourceCount) {
      return notebooksData.map(notebook => ({
        ...notebook,
        sources: [{ count: 0 }]
      }));
    }

    // 각 노트북의 소스 개수를 조회
    const notebooksWithCounts = await Promise.all(
      (notebooksData || []).map(async (notebook) => {
        try {
          const { count } = await safeApiCall(async () =>
            supabase
              .from('sources')
              .select('*', { count: 'exact', head: true })
              .eq('notebook_id', notebook.id)
          );

          return { ...notebook, sources: [{ count: count || 0 }] };
        } catch (error) {
          console.error('Error fetching source count for notebook:', notebook.id, error);
          return { ...notebook, sources: [{ count: 0 }] };
        }
      })
    );

    console.log('Fetched notebooks:', notebooksWithCounts?.length || 0);
    return notebooksWithCounts || [];
  } catch (error) {
    console.error('Error fetching notebooks:', error);
    handleApiError(error);
  }
};

/**
 * 개별 노트북 조회
 */
export const getNotebook = async (id: string, userId: string): Promise<Notebook> => {
  try {
    console.log('Fetching notebook:', id, 'for user:', userId);
    
    const notebook = await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .select('*')
        .eq('id', id)
        .eq('user_id', userId)
        .single()
    );

    console.log('Notebook fetched successfully:', notebook);
    return notebook;
  } catch (error) {
    console.error('Error fetching notebook:', error);
    handleApiError(error);
  }
};

/**
 * 노트북 생성
 */
export const createNotebook = async (
  userId: string, 
  data: NotebookCreateInput
): Promise<Notebook> => {
  try {
    console.log('Creating notebook with data:', data);
    console.log('Current user:', userId);

    const notebook = await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .insert({
          title: data.title,
          description: data.description,
          color: data.color,
          icon: data.icon,
          user_id: userId,
          generation_status: 'pending' as NotebookGenerationStatus,
        })
        .select()
        .single()
    );

    console.log('Notebook created successfully:', notebook);
    return notebook;
  } catch (error) {
    console.error('Error creating notebook:', error);
    handleApiError(error);
  }
};

/**
 * 노트북 업데이트
 */
export const updateNotebook = async (
  id: string, 
  updates: NotebookUpdateInput
): Promise<Notebook> => {
  try {
    console.log('Updating notebook:', id, updates);
    
    const notebook = await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .update(updates)
        .eq('id', id)
        .select()
        .single()
    );

    console.log('Notebook updated successfully:', notebook);
    return notebook;
  } catch (error) {
    console.error('Error updating notebook:', error);
    handleApiError(error);
  }
};

/**
 * 노트북 삭제 (파일 정리 포함)
 */
export const deleteNotebook = async (id: string): Promise<Notebook> => {
  try {
    console.log('Starting notebook deletion process for:', id);
    
    // 노트북 정보 조회
    const notebook = await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .select('id, title')
        .eq('id', id)
        .single()
    );

    console.log('Found notebook to delete:', notebook.title);

    // 노트북과 연결된 소스들 조회
    const sources = await safeApiCall(async () =>
      supabase
        .from('sources')
        .select('id, title, file_path, type')
        .eq('notebook_id', id)
    );

    console.log(`Found ${sources?.length || 0} sources to clean up`);

    // 파일 경로가 있는 소스들의 파일을 스토리지에서 삭제
    const filesToDelete = sources?.filter(source => source.file_path)
      .map(source => source.file_path) || [];
    
    if (filesToDelete.length > 0) {
      console.log('Deleting files from storage:', filesToDelete);
      
      try {
        await safeApiCall(async () =>
          supabase.storage
            .from('sources')
            .remove(filesToDelete)
        );
        console.log('All files deleted successfully from storage');
      } catch (storageError) {
        console.error('Error deleting files from storage:', storageError);
        // 스토리지 삭제 실패해도 노트북 삭제는 계속 진행
      }
    } else {
      console.log('No files to delete from storage');
    }

    // 노트북 삭제 (cascade로 소스들도 함께 삭제됨)
    await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .delete()
        .eq('id', id)
    );
    
    console.log('Notebook deleted successfully with cascade deletion');
    return notebook;
  } catch (error) {
    console.error('Error in deletion process:', error);
    handleApiError(error);
  }
};

/**
 * 노트북 생성 상태 업데이트
 */
export const updateNotebookStatus = async (
  id: string, 
  status: NotebookGenerationStatus
): Promise<Notebook> => {
  try {
    console.log('Updating notebook status:', id, 'to:', status);
    
    const notebook = await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .update({ generation_status: status })
        .eq('id', id)
        .select()
        .single()
    );

    console.log('Notebook status updated successfully:', notebook);
    return notebook;
  } catch (error) {
    console.error('Error updating notebook status:', error);
    handleApiError(error);
  }
};
</file>

<file path="src/features/notebook/services/notebooksGeneration.ts">
/**
 * Notebooks 생성 관련 API 서비스
 * 노트북 콘텐츠 생성 및 오디오 관련 Edge Functions 호출
 */

import { safeApiCall, handleApiError, supabase } from '@/shared/services/core/apiClient';
import {
  NotebookContentGenerationRequest,
  AudioOverviewGenerationRequest,
  AudioUrlRefreshRequest,
  NotebookApiResponse
} from './types';

/**
 * 노트북 콘텐츠 생성 (Edge Function 호출)
 */
export const generateNotebookContent = async (
  request: NotebookContentGenerationRequest
): Promise<NotebookApiResponse> => {
  try {
    console.log('Starting notebook content generation for:', request.notebookId, 
                'with source type:', request.sourceType);
    
    const response = await safeApiCall(async () =>
      supabase.functions.invoke('generate-notebook-content', {
        body: {
          notebookId: request.notebookId,
          filePath: request.filePath,
          sourceType: request.sourceType
        }
      })
    );

    console.log('Notebook content generation response:', response);
    return response;
  } catch (error) {
    console.error('Error generating notebook content:', error);
    handleApiError(error);
  }
};

/**
 * 오디오 개요 생성 (Edge Function 호출)
 */
export const generateAudioOverview = async (
  request: AudioOverviewGenerationRequest
): Promise<NotebookApiResponse> => {
  try {
    console.log('Starting audio overview generation for notebook:', request.notebookId);
    
    const response = await safeApiCall(async () =>
      supabase.functions.invoke('generate-audio-overview', {
        body: { notebookId: request.notebookId }
      })
    );

    console.log('Audio overview generation response:', response);
    return response;
  } catch (error) {
    console.error('Error generating audio overview:', error);
    handleApiError(error);
  }
};

/**
 * 오디오 URL 갱신 (Edge Function 호출)
 */
export const refreshAudioUrl = async (
  request: AudioUrlRefreshRequest
): Promise<NotebookApiResponse> => {
  try {
    console.log('Refreshing audio URL for notebook:', request.notebookId, 
                'silent:', request.silent);
    
    const response = await safeApiCall(async () =>
      supabase.functions.invoke('refresh-audio-url', {
        body: { notebookId: request.notebookId }
      })
    );

    console.log('Audio URL refresh response:', response);
    return response;
  } catch (error) {
    console.error('Error refreshing audio URL:', error);
    handleApiError(error);
  }
};

/**
 * 오디오 URL 만료 확인
 */
export const checkAudioExpiry = (expiresAt: string | null): boolean => {
  if (!expiresAt) return true;
  return new Date(expiresAt) <= new Date();
};

/**
 * 만료된 오디오 URL 자동 갱신
 */
export const autoRefreshIfExpired = async (
  notebookId: string, 
  expiresAt: string | null
): Promise<NotebookApiResponse | null> => {
  try {
    if (checkAudioExpiry(expiresAt)) {
      console.log('Audio URL expired, auto-refreshing for notebook:', notebookId);
      
      const response = await refreshAudioUrl({ 
        notebookId, 
        silent: true 
      });
      
      console.log('Auto-refresh completed successfully');
      return response;
    }
    
    return null;
  } catch (error) {
    console.error('Auto-refresh failed for notebook:', notebookId, error);
    // 자동 갱신 실패는 에러를 throw하지 않음 (사용자 경험을 위해)
    return null;
  }
};

/**
 * 생성 관련 유틸리티 함수들
 */
export const generationUtils = {
  /**
   * 생성 상태가 완료되었는지 확인
   */
  isGenerationComplete: (status: string | null): boolean => {
    return status === 'completed';
  },

  /**
   * 생성 상태가 실패했는지 확인
   */
  isGenerationFailed: (status: string | null): boolean => {
    return status === 'failed';
  },

  /**
   * 생성이 진행 중인지 확인
   */
  isGenerationInProgress: (status: string | null): boolean => {
    return status === 'generating' || status === 'processing' || status === 'pending';
  },

  /**
   * 오디오가 재생 가능한 상태인지 확인
   */
  isAudioPlayable: (audioUrl: string | null, expiresAt: string | null): boolean => {
    return audioUrl !== null && !checkAudioExpiry(expiresAt);
  }
};
</file>

<file path="src/features/notebook/services/sourcesApi.ts">
/**
 * Sources API 서비스
 * 소스 CRUD 작업을 담당
 */

import { supabase, safeApiCall } from '@/shared/services/core/apiClient';
import { deleteFile } from '@/shared/services/core/storage';
import {
  Source,
  SourceInsert,
  SourceUpdate,
  SourceCreateInput,
  SourceUpdateInput,
  SourceQueryOptions,
  SourcesApiResponse,
  SourceApiResponse,
  ProcessingStatus,
  SourceType,
} from './types';

/**
 * 노트북별 소스 목록 조회
 */
export const getSources = async (
  notebookId: string,
  options?: SourceQueryOptions
): Promise<Source[]> => {
  return await safeApiCall(async () => {
    let query = supabase
      .from('sources')
      .select('*')
      .eq('notebook_id', notebookId);

    // 필터 적용
    if (options?.filter) {
      const { filter } = options;
      
      if (filter.type) {
        const types = Array.isArray(filter.type) ? filter.type : [filter.type];
        query = query.in('type', types);
      }
      
      if (filter.processingStatus) {
        const statuses = Array.isArray(filter.processingStatus) 
          ? filter.processingStatus 
          : [filter.processingStatus];
        query = query.in('processing_status', statuses);
      }
      
      if (filter.hasContent !== undefined) {
        if (filter.hasContent) {
          query = query.not('content', 'is', null);
        } else {
          query = query.is('content', null);
        }
      }
      
      if (filter.hasFile !== undefined) {
        if (filter.hasFile) {
          query = query.not('file_path', 'is', null);
        } else {
          query = query.is('file_path', null);
        }
      }
      
      if (filter.createdAfter) {
        query = query.gte('created_at', filter.createdAfter.toISOString());
      }
      
      if (filter.createdBefore) {
        query = query.lte('created_at', filter.createdBefore.toISOString());
      }
      
      if (filter.searchQuery) {
        query = query.or(
          `title.ilike.%${filter.searchQuery}%,content.ilike.%${filter.searchQuery}%`
        );
      }
    }

    // 정렬 적용
    if (options?.sort) {
      const { field, ascending = false } = options.sort;
      query = query.order(field, { ascending });
    } else {
      // 기본 정렬: 최신순
      query = query.order('created_at', { ascending: false });
    }

    // 페이지네이션
    if (options?.limit) {
      query = query.limit(options.limit);
      if (options.offset) {
        query = query.range(options.offset, options.offset + options.limit - 1);
      }
    }

    const { data, error } = await query;
    
    if (error) throw error;
    return data || [];
  });
};

/**
 * 개별 소스 조회
 */
export const getSource = async (sourceId: string): Promise<Source> => {
  return await safeApiCall(async () => {
    const { data, error } = await supabase
      .from('sources')
      .select('*')
      .eq('id', sourceId)
      .single();
      
    if (error) throw error;
    return data;
  });
};

/**
 * 소스 생성
 */
export const createSource = async (input: SourceCreateInput): Promise<Source> => {
  return await safeApiCall(async () => {
    const insertData: SourceInsert = {
      notebook_id: input.notebookId,
      title: input.title,
      type: input.type,
      content: input.content || null,
      url: input.url || null,
      processing_status: input.processingStatus || 'pending',
      metadata: input.metadata || {},
      display_name: input.displayName || null,
    };

    const { data, error } = await supabase
      .from('sources')
      .insert(insertData)
      .select()
      .single();
      
    if (error) throw error;
    return data;
  });
};

/**
 * 소스 업데이트
 */
export const updateSource = async (
  sourceId: string, 
  updates: SourceUpdateInput
): Promise<Source> => {
  return await safeApiCall(async () => {
    const updateData: SourceUpdate = {};
    
    // 업데이트할 필드만 포함
    if (updates.title !== undefined) updateData.title = updates.title;
    if (updates.content !== undefined) updateData.content = updates.content;
    if (updates.url !== undefined) updateData.url = updates.url;
    if (updates.filePath !== undefined) updateData.file_path = updates.filePath;
    if (updates.fileSize !== undefined) updateData.file_size = updates.fileSize;
    if (updates.processingStatus !== undefined) updateData.processing_status = updates.processingStatus;
    if (updates.metadata !== undefined) updateData.metadata = updates.metadata;
    if (updates.displayName !== undefined) updateData.display_name = updates.displayName;
    if (updates.summary !== undefined) updateData.summary = updates.summary;

    const { data, error } = await supabase
      .from('sources')
      .update(updateData)
      .eq('id', sourceId)
      .select()
      .single();
      
    if (error) throw error;
    return data;
  });
};

/**
 * 소스 삭제 (스토리지 파일 포함)
 */
export const deleteSource = async (sourceId: string): Promise<void> => {
  return await safeApiCall(async () => {
    // 먼저 소스 정보 조회
    const source = await getSource(sourceId);
    
    // 스토리지 파일 삭제 (있는 경우)
    if (source.file_path) {
      try {
        await deleteFile('sources', source.file_path);
        console.log(`✅ File deleted from storage: ${source.file_path}`);
      } catch (error) {
        console.warn(`⚠️  Failed to delete file from storage: ${source.file_path}`, error);
        // 파일 삭제 실패해도 계속 진행 (파일이 이미 없을 수 있음)
      }
    }
    
    // 데이터베이스에서 소스 삭제
    const { error } = await supabase
      .from('sources')
      .delete()
      .eq('id', sourceId);
      
    if (error) throw error;
    
    console.log(`✅ Source deleted successfully: ${sourceId}`);
  });
};

/**
 * 소스 처리 상태 업데이트
 */
export const updateSourceStatus = async (
  sourceId: string, 
  status: ProcessingStatus,
  metadata?: Record<string, any>
): Promise<Source> => {
  return await safeApiCall(async () => {
    const updateData: SourceUpdate = {
      processing_status: status,
    };
    
    if (metadata) {
      updateData.metadata = metadata;
    }
    
    const { data, error } = await supabase
      .from('sources')
      .update(updateData)
      .eq('id', sourceId)
      .select()
      .single();
      
    if (error) throw error;
    return data;
  });
};

/**
 * 노트북의 첫 번째 소스인지 확인
 */
export const isFirstSource = async (notebookId: string): Promise<boolean> => {
  return await safeApiCall(async () => {
    const { count, error } = await supabase
      .from('sources')
      .select('*', { count: 'exact', head: true })
      .eq('notebook_id', notebookId);
      
    if (error) throw error;
    return (count || 0) === 0;
  });
};

/**
 * 처리 완료된 소스 개수 조회
 */
export const getCompletedSourcesCount = async (notebookId: string): Promise<number> => {
  return await safeApiCall(async () => {
    const { count, error } = await supabase
      .from('sources')
      .select('*', { count: 'exact', head: true })
      .eq('notebook_id', notebookId)
      .eq('processing_status', 'completed');
      
    if (error) throw error;
    return count || 0;
  });
};

/**
 * 처리 대기중인 소스들 조회
 */
export const getPendingSources = async (notebookId?: string): Promise<Source[]> => {
  return await safeApiCall(async () => {
    let query = supabase
      .from('sources')
      .select('*')
      .in('processing_status', ['pending', 'processing'])
      .order('created_at', { ascending: true });

    if (notebookId) {
      query = query.eq('notebook_id', notebookId);
    }

    const { data, error } = await query;
    if (error) throw error;
    return data || [];
  });
};

/**
 * 소스 타입별 개수 조회
 */
export const getSourcesCountByType = async (notebookId: string): Promise<Record<SourceType, number>> => {
  return await safeApiCall(async () => {
    const { data, error } = await supabase
      .from('sources')
      .select('type')
      .eq('notebook_id', notebookId);
      
    if (error) throw error;
    
    const counts: Record<SourceType, number> = {
      pdf: 0,
      text: 0,
      website: 0,
      youtube: 0,
      audio: 0,
    };
    
    data?.forEach((source) => {
      counts[source.type as SourceType]++;
    });
    
    return counts;
  });
};

/**
 * 파일 크기 기준 가장 큰 소스들 조회
 */
export const getLargestSources = async (
  notebookId: string, 
  limit = 5
): Promise<Source[]> => {
  return await safeApiCall(async () => {
    const { data, error } = await supabase
      .from('sources')
      .select('*')
      .eq('notebook_id', notebookId)
      .not('file_size', 'is', null)
      .order('file_size', { ascending: false })
      .limit(limit);
      
    if (error) throw error;
    return data || [];
  });
};

/**
 * 최근 생성된 소스들 조회
 */
export const getRecentSources = async (
  notebookId: string,
  days = 7,
  limit = 10
): Promise<Source[]> => {
  return await safeApiCall(async () => {
    const dateThreshold = new Date();
    dateThreshold.setDate(dateThreshold.getDate() - days);
    
    const { data, error } = await supabase
      .from('sources')
      .select('*')
      .eq('notebook_id', notebookId)
      .gte('created_at', dateThreshold.toISOString())
      .order('created_at', { ascending: false })
      .limit(limit);
      
    if (error) throw error;
    return data || [];
  });
};

/**
 * 소스 제목 중복 체크
 */
export const checkTitleExists = async (
  notebookId: string, 
  title: string,
  excludeId?: string
): Promise<boolean> => {
  return await safeApiCall(async () => {
    let query = supabase
      .from('sources')
      .select('id')
      .eq('notebook_id', notebookId)
      .eq('title', title);
      
    if (excludeId) {
      query = query.neq('id', excludeId);
    }
    
    const { data, error } = await query;
    if (error) throw error;
    
    return (data?.length || 0) > 0;
  });
};

/**
 * 벌크 소스 상태 업데이트
 */
export const bulkUpdateSourceStatus = async (
  sourceIds: string[], 
  status: ProcessingStatus
): Promise<Source[]> => {
  return await safeApiCall(async () => {
    const { data, error } = await supabase
      .from('sources')
      .update({ processing_status: status })
      .in('id', sourceIds)
      .select();
      
    if (error) throw error;
    return data || [];
  });
};
</file>

<file path="src/features/notebook/services/types.ts">
/**
 * Sources 도메인 타입 정의
 */

import { Database, Tables, TablesInsert, TablesUpdate } from '@/integrations/supabase/types';

// 데이터베이스 스키마 기반 타입
export type Source = Tables<'sources'>;
export type SourceInsert = TablesInsert<'sources'>;
export type SourceUpdate = TablesUpdate<'sources'>;

// Source Type Enum
export type SourceType = Database['public']['Enums']['source_type'];

// 처리 상태 타입
export type ProcessingStatus = 
  | 'pending'     // 대기중
  | 'processing'  // 처리중
  | 'completed'   // 완료
  | 'failed'      // 실패
  | 'cancelled';  // 취소됨

// 파일 업로드 진행률 타입
export interface FileUploadProgress {
  sourceId: string;
  fileName: string;
  progress: number;        // 0-100
  status: 'uploading' | 'processing' | 'completed' | 'failed' | 'cancelled';
  error?: string;
  uploadStartTime: Date;
  estimatedTimeRemaining?: number; // seconds
}

// 소스 생성 입력 타입
export interface SourceCreateInput {
  notebookId: string;
  title: string;
  type: SourceType;
  content?: string;
  url?: string;
  file?: File;
  processingStatus?: ProcessingStatus;
  metadata?: Record<string, any>;
  displayName?: string;
}

// 소스 업데이트 입력 타입
export interface SourceUpdateInput {
  title?: string;
  content?: string;
  url?: string;
  filePath?: string;
  fileSize?: number;
  processingStatus?: ProcessingStatus;
  metadata?: Record<string, any>;
  displayName?: string;
  summary?: string;
}

// 진행률과 함께 사용되는 소스 타입
export interface SourceWithProgress extends Source {
  uploadProgress?: FileUploadProgress;
  isUploading?: boolean;
  isProcessing?: boolean;
  canRetry?: boolean;
}

// 파일 업로드 옵션
export interface FileUploadOptions {
  notebookId: string;
  file: File;
  title?: string;
  metadata?: Record<string, any>;
  onProgress?: (progress: FileUploadProgress) => void;
  onStatusChange?: (status: ProcessingStatus) => void;
  signal?: AbortSignal; // 업로드 취소용
}

// 다중 파일 업로드 결과
export interface MultipleFileUploadResult {
  successful: Source[];
  failed: Array<{
    fileName: string;
    error: string;
  }>;
  total: number;
}

// 소스 필터링 옵션
export interface SourceFilterOptions {
  type?: SourceType | SourceType[];
  processingStatus?: ProcessingStatus | ProcessingStatus[];
  hasContent?: boolean;
  hasFile?: boolean;
  createdAfter?: Date;
  createdBefore?: Date;
  searchQuery?: string; // 제목이나 내용에서 검색
}

// 소스 정렬 옵션
export interface SourceSortOptions {
  field: 'created_at' | 'updated_at' | 'title' | 'file_size';
  ascending?: boolean;
}

// 소스 쿼리 옵션 (필터링 + 정렬)
export interface SourceQueryOptions {
  filter?: SourceFilterOptions;
  sort?: SourceSortOptions;
  limit?: number;
  offset?: number;
}

// 문서 처리 상태 체크 결과
export interface DocumentProcessingStatus {
  sourceId: string;
  status: ProcessingStatus;
  progress?: number;
  message?: string;
  error?: string;
  estimatedTimeRemaining?: number;
  lastUpdated: Date;
}

// 파일 검증 결과
export interface FileValidationResult {
  isValid: boolean;
  errors: string[];
  warnings?: string[];
  fileInfo: {
    name: string;
    size: number;
    type: string;
    extension: string;
  };
}

// API 응답 타입들
export interface SourcesApiResponse {
  data: Source[];
  total: number;
  page?: number;
  pageSize?: number;
}

export interface SourceApiResponse {
  data: Source;
}

// 에러 타입
export interface SourceError {
  code: string;
  message: string;
  details?: any;
  sourceId?: string;
}

// 업로드 취소 핸들러
export interface UploadCancellation {
  sourceId: string;
  cancel: () => void;
  isCancelled: boolean;
}

// 소스 통계 타입 (대시보드용)
export interface SourceStats {
  total: number;
  byType: Record<SourceType, number>;
  byStatus: Record<ProcessingStatus, number>;
  totalFileSize: number;
  averageFileSize: number;
  recentlyAdded: number; // 최근 7일
  processingQueue: number; // 처리 대기중인 파일 수
}

// 실시간 구독 이벤트 타입
export interface SourceRealtimeEvent {
  eventType: 'INSERT' | 'UPDATE' | 'DELETE';
  new?: Source;
  old?: Source;
  notebookId: string;
}
</file>

<file path="src/features/notebook/types/index.ts">
// Notebook Types
export * from './types';
</file>

<file path="src/features/notebook/index.ts">
// Notebook Feature Exports
export * from './components';
export * from './hooks';
export * from './services';
export * from './types';
</file>

<file path="src/features/weather/components/index.ts">
// Weather Components
export * from './WeatherCenter';
</file>

<file path="src/features/weather/components/WeatherCenter.tsx">
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/shared/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/shared/components/ui/tabs';
import { Button } from '@/shared/components/ui/button';
import UnifiedHeader from '@/components/layout/UnifiedHeader';
import { 
  Cloud, 
  CloudRain, 
  Sun, 
  Wind, 
  Droplets,
  Thermometer,
  Eye,
  Gauge,
  TrendingUp,
  TrendingDown,
  Calendar,
  Bell,
  Info
} from 'lucide-react';
import {
  LineChart,
  Line,
  AreaChart,
  Area,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend
} from 'recharts';

// Mock data for weather forecast
const hourlyData = Array.from({ length: 24 }, (_, i) => ({
  hour: `${i}:00`,
  temperature: 22 + Math.random() * 10,
  humidity: 60 + Math.random() * 20,
  rainfall: Math.random() > 0.7 ? Math.random() * 5 : 0,
}));

const weeklyData = [
  { day: 'Mon', high: 32, low: 22, rainfall: 0, condition: 'sunny' },
  { day: 'Tue', high: 30, low: 21, rainfall: 2, condition: 'cloudy' },
  { day: 'Wed', high: 28, low: 20, rainfall: 15, condition: 'rainy' },
  { day: 'Thu', high: 29, low: 21, rainfall: 5, condition: 'cloudy' },
  { day: 'Fri', high: 31, low: 22, rainfall: 0, condition: 'sunny' },
  { day: 'Sat', high: 33, low: 23, rainfall: 0, condition: 'sunny' },
  { day: 'Sun', high: 32, low: 22, rainfall: 1, condition: 'cloudy' },
];

const agriculturalIndices = {
  evapotranspiration: 5.2,
  soilMoisture: 65,
  uvIndex: 8,
  growingDegreeDays: 18,
};

export function WeatherCenter() {
  const [alertsEnabled, setAlertsEnabled] = useState(true);

  const getWeatherIcon = (condition: string) => {
    switch (condition) {
      case 'sunny':
        return <Sun className="h-6 w-6 text-yellow-500" />;
      case 'cloudy':
        return <Cloud className="h-6 w-6 text-gray-500" />;
      case 'rainy':
        return <CloudRain className="h-6 w-6 text-blue-500" />;
      default:
        return <Cloud className="h-6 w-6 text-gray-500" />;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-sky-50">
      <UnifiedHeader variant="full" />

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Current Conditions */}
        <Card className="mb-6 bg-gradient-to-r from-blue-400 to-sky-300 text-white">
          <CardContent className="p-6">
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <h2 className="text-3xl font-bold mb-2">Current Conditions</h2>
                <div className="flex items-center space-x-4 mb-4">
                  <Sun className="h-16 w-16" />
                  <div>
                    <p className="text-5xl font-bold">28°C</p>
                    <p className="text-lg">Mostly Sunny</p>
                  </div>
                </div>
                <p className="text-sm opacity-90">
                  Good conditions for field work. UV protection recommended.
                </p>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-white/20 rounded-lg p-3">
                  <div className="flex items-center space-x-2 mb-1">
                    <Droplets className="h-4 w-4" />
                    <span className="text-sm">Humidity</span>
                  </div>
                  <p className="text-xl font-semibold">65%</p>
                </div>
                <div className="bg-white/20 rounded-lg p-3">
                  <div className="flex items-center space-x-2 mb-1">
                    <Wind className="h-4 w-4" />
                    <span className="text-sm">Wind Speed</span>
                  </div>
                  <p className="text-xl font-semibold">12 km/h</p>
                </div>
                <div className="bg-white/20 rounded-lg p-3">
                  <div className="flex items-center space-x-2 mb-1">
                    <Eye className="h-4 w-4" />
                    <span className="text-sm">Visibility</span>
                  </div>
                  <p className="text-xl font-semibold">10 km</p>
                </div>
                <div className="bg-white/20 rounded-lg p-3">
                  <div className="flex items-center space-x-2 mb-1">
                    <Gauge className="h-4 w-4" />
                    <span className="text-sm">Pressure</span>
                  </div>
                  <p className="text-xl font-semibold">1013 mb</p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Agricultural Indices */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>Agricultural Indices</CardTitle>
            <CardDescription>
              Key metrics for farming decisions
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-4 gap-4">
              <div className="text-center p-4 bg-green-50 rounded-lg">
                <p className="text-sm text-gray-600 mb-1">Evapotranspiration</p>
                <p className="text-2xl font-bold text-green-700">
                  {agriculturalIndices.evapotranspiration} mm/day
                </p>
                <p className="text-xs text-gray-500 mt-1">Moderate water loss</p>
              </div>
              <div className="text-center p-4 bg-blue-50 rounded-lg">
                <p className="text-sm text-gray-600 mb-1">Soil Moisture</p>
                <p className="text-2xl font-bold text-blue-700">
                  {agriculturalIndices.soilMoisture}%
                </p>
                <p className="text-xs text-gray-500 mt-1">Good for planting</p>
              </div>
              <div className="text-center p-4 bg-orange-50 rounded-lg">
                <p className="text-sm text-gray-600 mb-1">UV Index</p>
                <p className="text-2xl font-bold text-orange-700">
                  {agriculturalIndices.uvIndex}
                </p>
                <p className="text-xs text-gray-500 mt-1">Very High</p>
              </div>
              <div className="text-center p-4 bg-purple-50 rounded-lg">
                <p className="text-sm text-gray-600 mb-1">Growing Degree Days</p>
                <p className="text-2xl font-bold text-purple-700">
                  {agriculturalIndices.growingDegreeDays}°C
                </p>
                <p className="text-xs text-gray-500 mt-1">Accumulated today</p>
              </div>
            </div>
            <div className="mt-4 p-4 bg-blue-50 rounded-lg flex items-start space-x-2">
              <Info className="h-5 w-5 text-blue-600 mt-0.5" />
              <div className="text-sm text-blue-800">
                <p className="font-semibold mb-1">Irrigation Recommendation</p>
                <p>Based on current evapotranspiration and soil moisture, irrigate 20-25mm in the next 2 days for optimal crop growth.</p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Forecast Tabs */}
        <Tabs defaultValue="hourly" className="space-y-4">
          <TabsList className="grid w-full md:w-auto md:inline-grid grid-cols-3">
            <TabsTrigger value="hourly">24-Hour</TabsTrigger>
            <TabsTrigger value="weekly">7-Day</TabsTrigger>
            <TabsTrigger value="seasonal">Seasonal</TabsTrigger>
          </TabsList>

          <TabsContent value="hourly">
            <Card>
              <CardHeader>
                <CardTitle>24-Hour Forecast</CardTitle>
                <CardDescription>
                  Hourly temperature and rainfall predictions
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="h-80">
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart data={hourlyData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="hour" />
                      <YAxis yAxisId="temp" orientation="left" />
                      <YAxis yAxisId="rain" orientation="right" />
                      <Tooltip />
                      <Legend />
                      <Line 
                        yAxisId="temp"
                        type="monotone" 
                        dataKey="temperature" 
                        stroke="#ef4444" 
                        name="Temperature (°C)"
                      />
                      <Bar 
                        yAxisId="rain"
                        dataKey="rainfall" 
                        fill="#3b82f6" 
                        name="Rainfall (mm)"
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="weekly">
            <Card>
              <CardHeader>
                <CardTitle>7-Day Forecast</CardTitle>
                <CardDescription>
                  Weekly weather outlook for farm planning
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid gap-3">
                  {weeklyData.map((day, index) => (
                    <div 
                      key={index}
                      className="flex items-center justify-between p-3 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors"
                    >
                      <div className="flex items-center space-x-4">
                        <p className="font-semibold w-12">{day.day}</p>
                        {getWeatherIcon(day.condition)}
                        <div className="flex items-center space-x-2">
                          <TrendingUp className="h-4 w-4 text-red-500" />
                          <span className="font-medium">{day.high}°</span>
                          <TrendingDown className="h-4 w-4 text-blue-500" />
                          <span className="text-gray-600">{day.low}°</span>
                        </div>
                      </div>
                      <div className="flex items-center space-x-4">
                        {day.rainfall > 0 && (
                          <div className="flex items-center space-x-1 text-blue-600">
                            <Droplets className="h-4 w-4" />
                            <span className="text-sm">{day.rainfall}mm</span>
                          </div>
                        )}
                        <span className="text-sm text-gray-600 capitalize">
                          {day.condition}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="seasonal">
            <Card>
              <CardHeader>
                <CardTitle>Seasonal Outlook</CardTitle>
                <CardDescription>
                  Long-term predictions and historical comparisons
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="p-4 bg-green-50 rounded-lg">
                    <h4 className="font-semibold text-green-800 mb-2">
                      Next 3 Months: Above Average Rainfall Expected
                    </h4>
                    <p className="text-sm text-green-700">
                      La Niña conditions are likely to bring 20-30% more rainfall than average. 
                      Good for water-intensive crops but monitor for flooding risks.
                    </p>
                  </div>
                  <div className="grid md:grid-cols-3 gap-4">
                    <div className="text-center p-4 border rounded-lg">
                      <Calendar className="h-8 w-8 mx-auto mb-2 text-blue-600" />
                      <p className="font-semibold">Masika (Long Rains)</p>
                      <p className="text-sm text-gray-600">March - May</p>
                      <p className="text-xs mt-1">Expected: Normal</p>
                    </div>
                    <div className="text-center p-4 border rounded-lg">
                      <Calendar className="h-8 w-8 mx-auto mb-2 text-green-600" />
                      <p className="font-semibold">Vuli (Short Rains)</p>
                      <p className="text-sm text-gray-600">October - December</p>
                      <p className="text-xs mt-1">Expected: Above Normal</p>
                    </div>
                    <div className="text-center p-4 border rounded-lg">
                      <Calendar className="h-8 w-8 mx-auto mb-2 text-orange-600" />
                      <p className="font-semibold">Kiangazi (Dry)</p>
                      <p className="text-sm text-gray-600">June - September</p>
                      <p className="text-xs mt-1">Expected: Drier than usual</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Weather Alerts */}
        {alertsEnabled && (
          <Card className="mt-6 border-orange-200 bg-orange-50">
            <CardHeader>
              <CardTitle className="text-orange-800">Active Weather Alerts</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="flex items-start space-x-3">
                  <CloudRain className="h-5 w-5 text-orange-600 mt-0.5" />
                  <div>
                    <p className="font-semibold text-orange-800">Heavy Rainfall Warning</p>
                    <p className="text-sm text-orange-700">
                      Expected 40-60mm of rain in the next 48 hours. Ensure proper drainage in fields and postpone fertilizer application.
                    </p>
                    <p className="text-xs text-orange-600 mt-1">Valid until: Tomorrow 6:00 PM</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </main>
    </div>
  );
}
</file>

<file path="src/features/weather/hooks/index.ts">
// Weather Hooks - placeholder for future hooks
export {};
</file>

<file path="src/features/weather/services/index.ts">
// Weather Services
export * from './weatherApi';
</file>

<file path="src/features/weather/services/weatherApi.ts">
/**
 * Weather API 서비스
 * 날씨 데이터 관련 CRUD 작업을 위한 API 서비스
 */

import { safeApiCall, handleApiError, supabase } from '@/services/core/apiClient';
import type { Database } from '@/integrations/supabase/types';

type WeatherData = Database['public']['Tables']['weather_data']['Row'];
type WeatherDataInsert = Database['public']['Tables']['weather_data']['Insert'];
type WeatherAlert = Database['public']['Tables']['weather_alerts']['Row'];
type WeatherAlertInsert = Database['public']['Tables']['weather_alerts']['Insert'];

/**
 * 농장의 날씨 데이터 조회 (기간별)
 */
export const getWeatherData = async (
  farmId: string,
  startDate?: string,
  endDate?: string
): Promise<WeatherData[]> => {
  try {
    let query = supabase
      .from('weather_data')
      .select('*')
      .eq('farm_id', farmId)
      .order('recorded_at', { ascending: false });

    if (startDate) {
      query = query.gte('recorded_at', startDate);
    }
    if (endDate) {
      query = query.lte('recorded_at', endDate);
    }

    const weatherData = await safeApiCall(async () => query);

    return weatherData || [];
  } catch (error) {
    console.error('Error fetching weather data:', error);
    handleApiError(error);
  }
};

/**
 * 최신 날씨 데이터 조회
 */
export const getLatestWeatherData = async (farmId: string): Promise<WeatherData | null> => {
  try {
    const data = await safeApiCall(async () =>
      supabase
        .from('weather_data')
        .select('*')
        .eq('farm_id', farmId)
        .order('recorded_at', { ascending: false })
        .limit(1)
        .single()
    );

    return data;
  } catch (error) {
    console.error('Error fetching latest weather data:', error);
    return null;
  }
};

/**
 * 날씨 데이터 기록
 */
export const recordWeatherData = async (data: WeatherDataInsert): Promise<WeatherData> => {
  try {
    const weatherData = await safeApiCall(async () =>
      supabase
        .from('weather_data')
        .insert(data)
        .select()
        .single()
    );

    return weatherData;
  } catch (error) {
    console.error('Error recording weather data:', error);
    handleApiError(error);
  }
};

/**
 * 날씨 데이터 일괄 기록
 */
export const recordWeatherDataBatch = async (
  dataArray: WeatherDataInsert[]
): Promise<WeatherData[]> => {
  try {
    const weatherData = await safeApiCall(async () =>
      supabase
        .from('weather_data')
        .insert(dataArray)
        .select()
    );

    return weatherData || [];
  } catch (error) {
    console.error('Error recording weather data batch:', error);
    handleApiError(error);
  }
};

/**
 * 날씨 알림 조회
 */
export const getWeatherAlerts = async (
  farmId: string,
  active?: boolean
): Promise<WeatherAlert[]> => {
  try {
    let query = supabase
      .from('weather_alerts')
      .select('*')
      .eq('farm_id', farmId)
      .order('created_at', { ascending: false });

    if (active !== undefined) {
      query = query.eq('is_active', active);
    }

    const alerts = await safeApiCall(async () => query);

    return alerts || [];
  } catch (error) {
    console.error('Error fetching weather alerts:', error);
    handleApiError(error);
  }
};

/**
 * 날씨 알림 생성
 */
export const createWeatherAlert = async (data: WeatherAlertInsert): Promise<WeatherAlert> => {
  try {
    const alert = await safeApiCall(async () =>
      supabase
        .from('weather_alerts')
        .insert(data)
        .select()
        .single()
    );

    return alert;
  } catch (error) {
    console.error('Error creating weather alert:', error);
    handleApiError(error);
  }
};

/**
 * 날씨 알림 비활성화
 */
export const deactivateWeatherAlert = async (id: string): Promise<void> => {
  try {
    await safeApiCall(async () =>
      supabase
        .from('weather_alerts')
        .update({ is_active: false })
        .eq('id', id)
    );
  } catch (error) {
    console.error('Error deactivating weather alert:', error);
    handleApiError(error);
  }
};

/**
 * 날씨 통계 조회
 */
export const getWeatherStatistics = async (
  farmId: string,
  days: number = 7
): Promise<{
  avgTemperature: number;
  totalRainfall: number;
  avgHumidity: number;
  avgWindSpeed: number;
  maxTemperature: number;
  minTemperature: number;
}> => {
  try {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - days);

    const weatherData = await getWeatherData(
      farmId,
      startDate.toISOString(),
      new Date().toISOString()
    );

    if (weatherData.length === 0) {
      return {
        avgTemperature: 0,
        totalRainfall: 0,
        avgHumidity: 0,
        avgWindSpeed: 0,
        maxTemperature: 0,
        minTemperature: 0,
      };
    }

    const statistics = weatherData.reduce(
      (acc, data) => {
        acc.sumTemperature += data.temperature || 0;
        acc.totalRainfall += data.rainfall || 0;
        acc.sumHumidity += data.humidity || 0;
        acc.sumWindSpeed += data.wind_speed || 0;
        acc.maxTemperature = Math.max(acc.maxTemperature, data.temperature || 0);
        acc.minTemperature = Math.min(acc.minTemperature, data.temperature || Infinity);
        return acc;
      },
      {
        sumTemperature: 0,
        totalRainfall: 0,
        sumHumidity: 0,
        sumWindSpeed: 0,
        maxTemperature: -Infinity,
        minTemperature: Infinity,
      }
    );

    const count = weatherData.length;

    return {
      avgTemperature: Math.round(statistics.sumTemperature / count * 10) / 10,
      totalRainfall: Math.round(statistics.totalRainfall * 10) / 10,
      avgHumidity: Math.round(statistics.sumHumidity / count * 10) / 10,
      avgWindSpeed: Math.round(statistics.sumWindSpeed / count * 10) / 10,
      maxTemperature: statistics.maxTemperature === -Infinity ? 0 : statistics.maxTemperature,
      minTemperature: statistics.minTemperature === Infinity ? 0 : statistics.minTemperature,
    };
  } catch (error) {
    console.error('Error fetching weather statistics:', error);
    handleApiError(error);
  }
};

/**
 * 외부 날씨 API에서 데이터 가져오기 (예시)
 */
export const fetchExternalWeatherData = async (
  latitude: number,
  longitude: number
): Promise<{
  temperature: number;
  humidity: number;
  rainfall: number;
  windSpeed: number;
  description: string;
}> => {
  try {
    // 여기에 실제 외부 날씨 API 호출 로직을 구현
    // 예: OpenWeatherMap, Weather API 등
    
    // 임시 데이터 반환
    return {
      temperature: 20 + Math.random() * 15,
      humidity: 40 + Math.random() * 40,
      rainfall: Math.random() * 10,
      windSpeed: Math.random() * 20,
      description: '맑음',
    };
  } catch (error) {
    console.error('Error fetching external weather data:', error);
    handleApiError(error);
  }
};
</file>

<file path="src/features/weather/types/index.ts">
// Weather Types
export * from './weather';
</file>

<file path="src/features/weather/types/weather.ts">
/**
 * 날씨 관련 타입 정의
 * 기상 데이터, 예보, 경고, 기상관측소 등 날씨와 관련된 모든 타입들을 정의합니다.
 */

import { BaseEntity, GeoLocation, LocationInfo, AlertSeverity, BaseFilter, SortOption, Units } from './domain';
import { Tables, TablesInsert, TablesUpdate } from '../integrations/supabase/types';

// === 기본 날씨 엔티티 (Supabase 기반) ===

// 날씨 데이터 타입
export type WeatherData = Tables<'weather_data'>;
export type WeatherDataInsert = TablesInsert<'weather_data'>;
export type WeatherDataUpdate = TablesUpdate<'weather_data'>;

// 기상관측소 타입
export type WeatherStation = Tables<'weather_stations'>;
export type WeatherStationInsert = TablesInsert<'weather_stations'>;
export type WeatherStationUpdate = TablesUpdate<'weather_stations'>;

// 날씨 경고 타입
export type WeatherAlert = Tables<'weather_alerts'>;
export type WeatherAlertInsert = TablesInsert<'weather_alerts'>;
export type WeatherAlertUpdate = TablesUpdate<'weather_alerts'>;

// === 현재 날씨 및 관측 데이터 ===

// 기상 측정 데이터 (단위 포함)
export interface WeatherMeasurement {
  temperature?: {
    value: number;
    unit: Units['temperature'];
  };
  humidity?: {
    value: number; // percentage
    unit: '%';
  };
  pressure?: {
    value: number;
    unit: Units['pressure'];
  };
  wind_speed?: {
    value: number;
    unit: Units['speed'];
  };
  wind_direction?: {
    value: number; // degrees (0-360)
    unit: 'degrees';
  };
  precipitation?: {
    value: number;
    unit: Units['precipitation'];
  };
  solar_radiation?: {
    value: number;
    unit: 'w/m2';
  };
  soil_temperature?: {
    value: number;
    unit: Units['temperature'];
  };
  soil_moisture?: {
    value: number; // percentage
    unit: '%';
  };
}

// 현재 날씨 상태
export interface CurrentWeather extends WeatherMeasurement {
  location: LocationInfo;
  recorded_at: Date | string;
  station_id: string;
  weather_condition?: WeatherCondition;
  feels_like_temperature?: number;
  visibility?: number; // km
  uv_index?: number;
  air_quality_index?: number;
}

// 날씨 상태
export type WeatherCondition = 
  | 'clear'           // 맑음
  | 'partly_cloudy'   // 구름조금
  | 'cloudy'          // 흐림
  | 'overcast'        // 구름많음
  | 'rain_light'      // 가벼운 비
  | 'rain_moderate'   // 보통 비
  | 'rain_heavy'      // 강한 비
  | 'thunderstorm'    // 뇌우
  | 'snow_light'      // 가벼운 눈
  | 'snow_moderate'   // 보통 눈
  | 'snow_heavy'      // 많은 눈
  | 'sleet'           // 진눈깨비
  | 'fog'             // 안개
  | 'mist'            // 박무
  | 'haze'            // 연무
  | 'dust'            // 황사
  | 'windy';          // 바람

// === 날씨 예보 ===

// 시간별 예보
export interface HourlyForecast extends WeatherMeasurement {
  forecast_time: Date | string;
  weather_condition: WeatherCondition;
  precipitation_probability?: number; // percentage
  cloud_cover?: number; // percentage
}

// 일별 예보
export interface DailyForecast {
  date: string; // YYYY-MM-DD
  weather_condition: WeatherCondition;
  temperature_min: number;
  temperature_max: number;
  humidity_min?: number;
  humidity_max?: number;
  precipitation_total?: number;
  precipitation_probability?: number;
  wind_speed_avg?: number;
  wind_speed_max?: number;
  wind_direction_avg?: number;
  sunrise?: string; // HH:MM
  sunset?: string;  // HH:MM
  moon_phase?: MoonPhase;
}

// 달의 위상
export type MoonPhase = 
  | 'new_moon'
  | 'waxing_crescent'
  | 'first_quarter'
  | 'waxing_gibbous'
  | 'full_moon'
  | 'waning_gibbous'
  | 'last_quarter'
  | 'waning_crescent';

// 종합 날씨 예보
export interface WeatherForecast {
  location: LocationInfo;
  current: CurrentWeather;
  hourly: HourlyForecast[]; // 다음 48시간
  daily: DailyForecast[];   // 다음 7일
  last_updated: Date | string;
  data_source: string;
}

// === 기상관측소 관련 ===

// 관측소 유형
export type StationType = 
  | 'automatic'       // 자동관측소
  | 'manual'         // 유인관측소
  | 'agricultural'   // 농업기상관측소
  | 'marine'         // 해상관측소
  | 'aviation'       // 항공기상관측소
  | 'research'       // 연구용관측소
  | 'private';       // 개인관측소

// 관측소 상태
export type StationStatus = 
  | 'active'         // 정상운영
  | 'maintenance'    // 점검중
  | 'inactive'       // 비활성
  | 'error'          // 오류
  | 'offline';       // 오프라인

// 관측소 생성 입력
export interface WeatherStationCreateInput {
  name: string;
  station_id: string;
  location_name: string;
  latitude: number;
  longitude: number;
  elevation?: number;
  station_type?: StationType;
  installation_date?: string;
  status?: StationStatus;
}

// 확장된 관측소 정보
export interface WeatherStationWithData extends WeatherStation {
  latest_data?: WeatherData;
  data_availability: {
    last_24h: number;    // 지난 24시간 데이터 개수
    last_7d: number;     // 지난 7일 데이터 개수
    last_30d: number;    // 지난 30일 데이터 개수
  };
  distance_km?: number; // 특정 지점으로부터의 거리
}

// === 날씨 경고 및 알림 ===

// 날씨 경고 유형
export type WeatherAlertType = 
  | 'temperature_extreme'  // 극한 온도
  | 'heat_wave'           // 폭염
  | 'cold_wave'           // 한파
  | 'heavy_rain'          // 호우
  | 'drought'             // 가뭄
  | 'strong_wind'         // 강풍
  | 'frost'               // 서리
  | 'hail'                // 우박
  | 'thunderstorm'        // 뇌우
  | 'snow_storm'          // 눈폭풍
  | 'typhoon'             // 태풍
  | 'air_quality'         // 대기질
  | 'uv_extreme'          // 자외선
  | 'agricultural';       // 농업특보

// 날씨 경고 생성 입력
export interface WeatherAlertCreateInput {
  alert_type: WeatherAlertType;
  title: string;
  message: string;
  severity: AlertSeverity;
  valid_from: string;
  valid_until?: string;
  farm_id?: string;
  user_id?: string;
}

// === 농업 기상 특화 타입 ===

// 농업 기상 지수
export interface AgriculturalIndex {
  date: string;
  growing_degree_days: number;      // 생장도일
  chill_hours?: number;             // 저온시간
  evapotranspiration: number;       // 증발산량
  soil_moisture_index: number;      // 토양수분지수
  pest_development_index?: number;  // 병해충발달지수
  disease_risk_index?: number;      // 병해위험지수
}

// 작물별 기상 요구사항
export interface CropWeatherRequirement {
  crop_name: string;
  optimal_temperature: {
    min: number;
    max: number;
    unit: Units['temperature'];
  };
  optimal_humidity: {
    min: number;
    max: number;
  };
  water_requirement: {
    daily_mm: number;
    growth_stage_multiplier: Record<string, number>;
  };
  frost_tolerance: 'high' | 'medium' | 'low' | 'none';
  heat_tolerance: 'high' | 'medium' | 'low';
  wind_tolerance: 'high' | 'medium' | 'low';
  critical_periods: Array<{
    stage: string;
    sensitivity: 'high' | 'medium' | 'low';
    weather_factors: WeatherFactor[];
  }>;
}

export type WeatherFactor = 
  | 'temperature'
  | 'humidity'
  | 'precipitation'
  | 'wind'
  | 'solar_radiation'
  | 'frost';

// 농업 기상 예보
export interface AgriculturalForecast {
  location: LocationInfo;
  crop_specific_advice: Array<{
    crop_name: string;
    growth_stage: string;
    recommendations: string[];
    warnings: string[];
    optimal_activities: string[];
  }>;
  field_work_conditions: {
    today: 'excellent' | 'good' | 'poor' | 'unsuitable';
    next_3_days: Array<{
      date: string;
      condition: 'excellent' | 'good' | 'poor' | 'unsuitable';
      activities: string[];
    }>;
  };
  irrigation_advice: {
    needed: boolean;
    amount_mm?: number;
    timing?: 'morning' | 'evening' | 'night';
    reasoning: string;
  };
}

// === 기상 데이터 분석 ===

// 기상 통계
export interface WeatherStats {
  period: {
    start: Date | string;
    end: Date | string;
  };
  temperature: {
    avg: number;
    min: number;
    max: number;
    extreme_days: number;
  };
  precipitation: {
    total: number;
    days_with_rain: number;
    max_daily: number;
    drought_days: number;
  };
  humidity: {
    avg: number;
    min: number;
    max: number;
  };
  wind: {
    avg_speed: number;
    max_speed: number;
    prevalent_direction: number;
  };
  growing_degree_days: number;
  frost_days: number;
}

// 기상 트렌드
export interface WeatherTrend {
  parameter: 'temperature' | 'precipitation' | 'humidity' | 'wind_speed';
  period: 'daily' | 'weekly' | 'monthly' | 'yearly';
  trend: 'increasing' | 'decreasing' | 'stable' | 'variable';
  change_rate: number; // per period
  confidence: number;  // 0-1
  significance: 'high' | 'medium' | 'low';
}

// === 필터링 및 쿼리 옵션 ===

// 날씨 데이터 필터
export interface WeatherDataFilter extends BaseFilter {
  station_id?: string | string[];
  location?: {
    radius_km: number;
    center: GeoLocation;
  };
  recorded_after?: Date | string;
  recorded_before?: Date | string;
  temperature_min?: number;
  temperature_max?: number;
  precipitation_min?: number;
  precipitation_max?: number;
  has_precipitation?: boolean;
}

// 날씨 경고 필터
export interface WeatherAlertFilter extends BaseFilter {
  alert_type?: WeatherAlertType | WeatherAlertType[];
  severity?: AlertSeverity | AlertSeverity[];
  is_active?: boolean;
  farm_id?: string;
  user_id?: string;
}

// 정렬 옵션
export type WeatherDataSortField = 'recorded_at' | 'temperature' | 'precipitation' | 'humidity' | 'wind_speed';
export type WeatherAlertSortField = 'created_at' | 'valid_from' | 'severity' | 'alert_type';

export type WeatherDataSortOption = SortOption<WeatherDataSortField>;
export type WeatherAlertSortOption = SortOption<WeatherAlertSortField>;

// === 외부 API 연동 타입 ===

// 날씨 API 제공자
export type WeatherProvider = 
  | 'kma'           // 기상청
  | 'openweather'   // OpenWeatherMap
  | 'weatherapi'    // WeatherAPI
  | 'accuweather'   // AccuWeather
  | 'custom';       // 커스텀

// API 응답 타입
export interface WeatherApiResponse<T = any> {
  provider: WeatherProvider;
  data: T;
  timestamp: Date | string;
  cache_expiry?: Date | string;
  api_calls_remaining?: number;
}

// 날씨 API 설정
export interface WeatherApiConfig {
  provider: WeatherProvider;
  api_key: string;
  base_url: string;
  rate_limit: {
    requests_per_hour: number;
    requests_per_day: number;
  };
  cache_duration_minutes: number;
  enabled: boolean;
}
</file>

<file path="src/features/weather/index.ts">
// Weather Feature Exports
export * from './components';
export * from './hooks';
export * from './services';
export * from './types';
</file>

<file path="src/features/index.ts">
// Features Index - Central export for all features
export * as Authentication from './authentication';
export * as Chat from './chat';
export * as Crops from './crops';
export * as Dashboard from './dashboard';
export * as Knowledge from './knowledge';
export * as Notebook from './notebook';
export * as Weather from './weather';
</file>

<file path="src/features/README.md">
# Features Architecture

이 디렉토리는 피처 기반 아키텍처를 구현합니다. 각 피처는 독립적이고 응집력 있는 모듈로 구성되어 있습니다.

## 구조

```
src/features/
├── authentication/          # 인증 관련 기능
│   ├── components/         # 인증 컴포넌트들
│   ├── hooks/             # 인증 관련 훅들
│   ├── services/          # 인증 API 서비스
│   └── types/             # 인증 타입 정의
├── chat/                   # 채팅 기능
│   ├── components/        # 채팅 컴포넌트들
│   ├── hooks/            # 채팅 관련 훅들
│   ├── services/         # 채팅 API 서비스
│   └── types/            # 채팅 타입 정의
├── crops/                  # 작물 관리 기능
│   ├── components/        # 작물 관리 컴포넌트들
│   ├── hooks/            # 작물 관련 훅들
│   ├── services/         # 작물 API 서비스
│   └── types/            # 작물 타입 정의
├── dashboard/             # 대시보드 기능
│   ├── components/       # 대시보드 컴포넌트들
│   ├── hooks/           # 대시보드 관련 훅들
│   ├── services/        # 대시보드 API 서비스
│   └── types/           # 대시보드 타입 정의
├── knowledge/            # 지식 베이스 기능
│   ├── components/      # 지식 베이스 컴포넌트들
│   ├── hooks/          # 지식 베이스 관련 훅들
│   ├── services/       # 지식 베이스 API 서비스
│   └── types/          # 지식 베이스 타입 정의
├── notebook/            # 노트북 기능
│   ├── components/     # 노트북 컴포넌트들
│   ├── hooks/         # 노트북 관련 훅들
│   ├── services/      # 노트북 API 서비스
│   └── types/         # 노트북 타입 정의
└── weather/            # 날씨 기능
    ├── components/    # 날씨 컴포넌트들
    ├── hooks/        # 날씨 관련 훅들
    ├── services/     # 날씨 API 서비스
    └── types/        # 날씨 타입 정의
```

## 설계 원칙

### 1. 도메인 기반 분리
각 피처는 특정 비즈니스 도메인에 해당하며, 관련된 모든 코드를 포함합니다.

### 2. 자체 완결성
각 피처는 독립적으로 동작할 수 있도록 설계되었습니다.

### 3. 명확한 인터페이스
각 피처는 index.ts 파일을 통해 공개 API를 명확하게 정의합니다.

### 4. 계층별 구조
각 피처 내부는 다음과 같은 계층으로 구성됩니다:
- **components/**: 해당 피처의 React 컴포넌트들
- **hooks/**: 해당 피처의 커스텀 훅들
- **services/**: 해당 피처의 API 호출 및 비즈니스 로직
- **types/**: 해당 피처의 TypeScript 타입 정의

## Import 가이드라인

### 피처 간 Import
```typescript
// 다른 피처에서 import할 때는 피처의 index를 통해서만
import { AuthProvider, useAuth } from '@/features/authentication';
import { WeatherCenter } from '@/features/weather';
```

### 피처 내부 Import
```typescript
// 같은 피처 내에서는 상대 경로 사용
import { CropCard } from '../components';
import { useCropData } from '../hooks';
import { Crop } from '../types';
```

### Shared 모듈 Import
```typescript
// 공통 컴포넌트, 훅, 유틸리티 등
import { Button, Card } from '@/shared/components/ui';
import { useToast } from '@/shared/hooks';
import { cn } from '@/shared/utils';
```

## 피처 확장 가이드

새로운 피처를 추가할 때는 다음 단계를 따르세요:

1. **디렉토리 생성**: `src/features/[feature-name]/`
2. **하위 디렉토리 생성**: `components/`, `hooks/`, `services/`, `types/`
3. **index.ts 파일 생성**: 각 디렉토리와 루트에
4. **피처 등록**: `src/features/index.ts`에 추가

## 마이그레이션 완료 상태

- ✅ Authentication 피처 (인증)
- ✅ Chat 피처 (채팅)
- ✅ Crops 피처 (작물 관리)
- ✅ Dashboard 피처 (대시보드)
- ✅ Knowledge 피처 (지식 베이스)
- ✅ Notebook 피처 (노트북)
- ✅ Weather 피처 (날씨)
- ✅ Shared 모듈 (공통 요소)

## 이점

1. **유지보수성**: 관련 코드가 한 곳에 모여있어 유지보수가 쉽습니다.
2. **확장성**: 새로운 피처를 독립적으로 추가할 수 있습니다.
3. **재사용성**: 피처별로 명확한 인터페이스를 제공합니다.
4. **테스트 용이성**: 피처별로 독립적인 테스트가 가능합니다.
5. **팀 협업**: 피처별로 개발자가 분담하여 작업할 수 있습니다.
</file>

<file path="src/hooks/useFileUpload.tsx.backup">
import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

export const useFileUpload = () => {
  const [isUploading, setIsUploading] = useState(false);
  const { toast } = useToast();

  const uploadFile = async (file: File, notebookId: string, sourceId: string): Promise<string | null> => {
    try {
      setIsUploading(true);
      
      // Get file extension
      const fileExtension = file.name.split('.').pop() || 'bin';
      
      // Create file path: sources/{notebook_id}/{source_id}.{extension}
      const filePath = `${notebookId}/${sourceId}.${fileExtension}`;
      
      console.log('Uploading file to:', filePath);
      
      // Upload file to Supabase storage
      const { data, error } = await supabase.storage
        .from('sources')
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: false
        });

      if (error) {
        console.error('Upload error:', error);
        throw error;
      }

      console.log('File uploaded successfully:', data);
      return filePath;
    } catch (error) {
      console.error('File upload failed:', error);
      toast({
        title: "Upload Error",
        description: `Failed to upload ${file.name}. Please try again.`,
        variant: "destructive",
      });
      return null;
    } finally {
      setIsUploading(false);
    }
  };

  const getFileUrl = (filePath: string): string => {
    const { data } = supabase.storage
      .from('sources')
      .getPublicUrl(filePath);
    
    return data.publicUrl;
  };

  return {
    uploadFile,
    getFileUrl,
    isUploading,
  };
};
</file>

<file path="src/hooks/useNotebookDelete.tsx.backup">
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';

export const useNotebookDelete = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const deleteNotebook = useMutation({
    mutationFn: async (notebookId: string) => {
      console.log('Starting notebook deletion process for:', notebookId);
      
      try {
        // First, get the notebook details for better error reporting
        const { data: notebook, error: fetchError } = await supabase
          .from('notebooks')
          .select('id, title')
          .eq('id', notebookId)
          .single();

        if (fetchError) {
          console.error('Error fetching notebook:', fetchError);
          throw new Error('Failed to find notebook');
        }

        console.log('Found notebook to delete:', notebook.title);

        // Get all sources for this notebook to delete their files
        const { data: sources, error: sourcesError } = await supabase
          .from('sources')
          .select('id, title, file_path, type')
          .eq('notebook_id', notebookId);

        if (sourcesError) {
          console.error('Error fetching sources for notebook:', sourcesError);
          throw new Error('Failed to fetch sources for cleanup');
        }

        console.log(`Found ${sources?.length || 0} sources to clean up`);

        // Delete all files from storage for sources that have file_path
        const filesToDelete = sources?.filter(source => source.file_path).map(source => source.file_path) || [];
        
        if (filesToDelete.length > 0) {
          console.log('Deleting files from storage:', filesToDelete);
          
          const { error: storageError } = await supabase.storage
            .from('sources')
            .remove(filesToDelete);

          if (storageError) {
            console.error('Error deleting files from storage:', storageError);
            // Don't throw here - we still want to delete the notebook
            // even if some files can't be deleted (they might already be gone)
          } else {
            console.log('All files deleted successfully from storage');
          }
        } else {
          console.log('No files to delete from storage (URL-based sources or no file_paths)');
        }

        // Delete the notebook - this will cascade delete all sources
        const { error: deleteError } = await supabase
          .from('notebooks')
          .delete()
          .eq('id', notebookId);

        if (deleteError) {
          console.error('Error deleting notebook:', deleteError);
          throw deleteError;
        }
        
        console.log('Notebook deleted successfully with cascade deletion');
        return notebook;
      } catch (error) {
        console.error('Error in deletion process:', error);
        throw error;
      }
    },
    onSuccess: (deletedNotebook, notebookId) => {
      console.log('Delete mutation success, invalidating queries');
      
      // Invalidate all related queries
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
      queryClient.invalidateQueries({ queryKey: ['sources', notebookId] });
      queryClient.invalidateQueries({ queryKey: ['notebook', notebookId] });
      
      toast({
        title: "Notebook deleted",
        description: `"${deletedNotebook?.title || 'Notebook'}" and all its sources have been successfully deleted.`,
      });
    },
    onError: (error: any) => {
      console.error('Delete mutation error:', error);
      
      let errorMessage = "Failed to delete the notebook. Please try again.";
      
      // Provide more specific error messages based on the error type
      if (error?.code === 'PGRST116') {
        errorMessage = "Notebook not found or you don't have permission to delete it.";
      } else if (error?.message?.includes('foreign key')) {
        errorMessage = "Cannot delete notebook due to data dependencies. Please contact support.";
      } else if (error?.message?.includes('network')) {
        errorMessage = "Network error. Please check your connection and try again.";
      }
      
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });

  return {
    deleteNotebook: deleteNotebook.mutate,
    isDeleting: deleteNotebook.isPending,
  };
};
</file>

<file path="src/hooks/useNotebookGeneration.tsx.backup">
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

export const useNotebookGeneration = () => {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  const generateNotebookContent = useMutation({
    mutationFn: async ({ notebookId, filePath, sourceType }: { 
      notebookId: string; 
      filePath?: string;
      sourceType: string;
    }) => {
      console.log('Starting notebook content generation for:', notebookId, 'with source type:', sourceType);
      
      const { data, error } = await supabase.functions.invoke('generate-notebook-content', {
        body: {
          notebookId,
          filePath,
          sourceType
        }
      });

      if (error) {
        console.error('Edge function error:', error);
        throw error;
      }

      return data;
    },
    onSuccess: (data) => {
      console.log('Notebook generation successful:', data);
      
      // Invalidate relevant queries to refresh the UI
      queryClient.invalidateQueries({ queryKey: ['notebooks'] });
      queryClient.invalidateQueries({ queryKey: ['notebook'] });
      
      toast({
        title: "Content Generated",
        description: "Notebook title and description have been generated successfully.",
      });
    },
    onError: (error) => {
      console.error('Notebook generation failed:', error);
      
      toast({
        title: "Generation Failed",
        description: "Failed to generate notebook content. Please try again.",
        variant: "destructive",
      });
    },
  });

  return {
    generateNotebookContent: generateNotebookContent.mutate,
    generateNotebookContentAsync: generateNotebookContent.mutateAsync,
    isGenerating: generateNotebookContent.isPending,
  };
};
</file>

<file path="src/hooks/useNotebooks.tsx.backup">
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';

export const useNotebooks = () => {
  const { user, isAuthenticated, loading: authLoading } = useAuth();
  const queryClient = useQueryClient();

  const {
    data: notebooks = [],
    isLoading,
    error,
    isError,
  } = useQuery({
    queryKey: ['notebooks', user?.id],
    queryFn: async () => {
      if (!user) {
        console.log('No user found, returning empty notebooks array');
        return [];
      }
      
      console.log('Fetching notebooks for user:', user.id);
      
      // First get the notebooks
      const { data: notebooksData, error: notebooksError } = await supabase
        .from('notebooks')
        .select('*')
        .eq('user_id', user.id)
        .order('updated_at', { ascending: false });

      if (notebooksError) {
        console.error('Error fetching notebooks:', notebooksError);
        throw notebooksError;
      }

      // Then get source counts separately for each notebook
      const notebooksWithCounts = await Promise.all(
        (notebooksData || []).map(async (notebook) => {
          const { count, error: countError } = await supabase
            .from('sources')
            .select('*', { count: 'exact', head: true })
            .eq('notebook_id', notebook.id);

          if (countError) {
            console.error('Error fetching source count for notebook:', notebook.id, countError);
            return { ...notebook, sources: [{ count: 0 }] };
          }

          return { ...notebook, sources: [{ count: count || 0 }] };
        })
      );

      console.log('Fetched notebooks:', notebooksWithCounts?.length || 0);
      return notebooksWithCounts || [];
    },
    enabled: isAuthenticated && !authLoading,
    retry: (failureCount, error) => {
      // Don't retry on auth errors
      if (error?.message?.includes('JWT') || error?.message?.includes('auth')) {
        return false;
      }
      return failureCount < 3;
    },
  });

  // Set up real-time subscription for notebooks updates
  useEffect(() => {
    if (!user?.id || !isAuthenticated) return;

    console.log('Setting up real-time subscription for notebooks');

    const channel = supabase
      .channel('notebooks-changes')
      .on(
        'postgres_changes',
        {
          event: '*',
          schema: 'public',
          table: 'notebooks',
          filter: `user_id=eq.${user.id}`
        },
        (payload) => {
          console.log('Real-time notebook update received:', payload);
          
          // Invalidate and refetch notebooks when any change occurs
          queryClient.invalidateQueries({ queryKey: ['notebooks', user.id] });
        }
      )
      .subscribe();

    return () => {
      console.log('Cleaning up real-time subscription');
      supabase.removeChannel(channel);
    };
  }, [user?.id, isAuthenticated, queryClient]);

  const createNotebook = useMutation({
    mutationFn: async (notebookData: { title: string; description?: string }) => {
      console.log('Creating notebook with data:', notebookData);
      console.log('Current user:', user?.id);
      
      if (!user) {
        console.error('User not authenticated');
        throw new Error('User not authenticated');
      }

      const { data, error } = await supabase
        .from('notebooks')
        .insert({
          title: notebookData.title,
          description: notebookData.description,
          user_id: user.id,
          generation_status: 'pending',
        })
        .select()
        .single();

      if (error) {
        console.error('Error creating notebook:', error);
        throw error;
      }
      
      console.log('Notebook created successfully:', data);
      return data;
    },
    onSuccess: (data) => {
      console.log('Mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
    },
    onError: (error) => {
      console.error('Mutation error:', error);
    },
  });

  return {
    notebooks,
    isLoading: authLoading || isLoading,
    error: error?.message || null,
    isError,
    createNotebook: createNotebook.mutate,
    isCreating: createNotebook.isPending,
  };
};

// Export the create notebook hook separately for convenience
export const useCreateNotebook = () => {
  const { user } = useAuth();
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (notebookData: { title: string; description?: string }) => {
      console.log('Creating notebook with data:', notebookData);
      console.log('Current user:', user?.id);
      
      if (!user) {
        console.error('User not authenticated');
        throw new Error('User not authenticated');
      }

      const { data, error } = await supabase
        .from('notebooks')
        .insert({
          title: notebookData.title,
          description: notebookData.description,
          user_id: user.id,
          generation_status: 'pending',
        })
        .select()
        .single();

      if (error) {
        console.error('Error creating notebook:', error);
        throw error;
      }
      
      console.log('Notebook created successfully:', data);
      return data;
    },
    onSuccess: (data) => {
      console.log('Mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
    },
    onError: (error) => {
      console.error('Mutation error:', error);
    },
  });
};

// Get individual notebook
export const useNotebook = (notebookId: string) => {
  const { user, isAuthenticated } = useAuth();

  return useQuery({
    queryKey: ['notebook', notebookId],
    queryFn: async () => {
      if (!user || !notebookId) {
        throw new Error('User not authenticated or notebook ID missing');
      }

      console.log('🔍 Fetching notebook:', notebookId, 'for user:', user.id);

      const { data, error } = await supabase
        .from('notebooks')
        .select('*')
        .eq('id', notebookId)
        .eq('user_id', user.id)
        .single();

      if (error) {
        console.error('❌ Error fetching notebook:', error);
        throw error;
      }

      console.log('✅ Notebook fetched successfully:', data);
      return data;
    },
    enabled: isAuthenticated && !!notebookId,
  });
};
</file>

<file path="src/hooks/useNotebookUpdate.tsx.backup">
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';

export const useNotebookUpdate = () => {
  const queryClient = useQueryClient();

  const updateNotebook = useMutation({
    mutationFn: async ({ id, updates }: { id: string; updates: { title?: string; description?: string } }) => {
      console.log('Updating notebook:', id, updates);
      
      const { data, error } = await supabase
        .from('notebooks')
        .update(updates)
        .eq('id', id)
        .select()
        .single();

      if (error) {
        console.error('Error updating notebook:', error);
        throw error;
      }
      
      console.log('Notebook updated successfully:', data);
      return data;
    },
    onSuccess: (data) => {
      console.log('Mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['notebook', data.id] });
      queryClient.invalidateQueries({ queryKey: ['notebooks'] });
    },
    onError: (error) => {
      console.error('Mutation error:', error);
    },
  });

  return {
    updateNotebook: updateNotebook.mutate,
    isUpdating: updateNotebook.isPending,
  };
};
</file>

<file path="src/hooks/useSourceDelete.tsx.backup">
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';

export const useSourceDelete = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const deleteSource = useMutation({
    mutationFn: async (sourceId: string) => {
      console.log('Starting source deletion process for:', sourceId);
      
      try {
        // First, get the source details including file information
        const { data: source, error: fetchError } = await supabase
          .from('sources')
          .select('id, title, file_path, type')
          .eq('id', sourceId)
          .single();

        if (fetchError) {
          console.error('Error fetching source:', fetchError);
          throw new Error('Failed to find source');
        }

        console.log('Found source to delete:', source.title, 'with file_path:', source.file_path);

        // Delete the file from storage if it exists
        if (source.file_path) {
          console.log('Deleting file from storage:', source.file_path);
          
          const { error: storageError } = await supabase.storage
            .from('sources')
            .remove([source.file_path]);

          if (storageError) {
            console.error('Error deleting file from storage:', storageError);
            // Don't throw here - we still want to delete the database record
            // even if the file deletion fails (file might already be gone)
          } else {
            console.log('File deleted successfully from storage');
          }
        } else {
          console.log('No file to delete from storage (URL-based source or no file_path)');
        }

        // Delete the source record from the database
        const { error: deleteError } = await supabase
          .from('sources')
          .delete()
          .eq('id', sourceId);

        if (deleteError) {
          console.error('Error deleting source from database:', deleteError);
          throw deleteError;
        }
        
        console.log('Source deleted successfully from database');
        return source;
      } catch (error) {
        console.error('Error in source deletion process:', error);
        throw error;
      }
    },
    onSuccess: (deletedSource) => {
      console.log('Delete mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['sources'] });
      toast({
        title: "Source deleted",
        description: `"${deletedSource?.title || 'Source'}" has been successfully deleted.`,
      });
    },
    onError: (error: any) => {
      console.error('Delete mutation error:', error);
      
      let errorMessage = "Failed to delete the source. Please try again.";
      
      // Provide more specific error messages based on the error type
      if (error?.code === 'PGRST116') {
        errorMessage = "Source not found or you don't have permission to delete it.";
      } else if (error?.message?.includes('foreign key')) {
        errorMessage = "Cannot delete source due to data dependencies. Please contact support.";
      } else if (error?.message?.includes('network')) {
        errorMessage = "Network error. Please check your connection and try again.";
      }
      
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });

  return {
    deleteSource: deleteSource.mutate,
    isDeleting: deleteSource.isPending,
  };
};
</file>

<file path="src/hooks/useSources.tsx.backup">
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { useNotebookGeneration } from './useNotebookGeneration';
import { useEffect } from 'react';

export const useSources = (notebookId?: string) => {
  const { user } = useAuth();
  const queryClient = useQueryClient();
  const { generateNotebookContentAsync } = useNotebookGeneration();

  // Debug logging removed to reduce console noise

  const {
    data: sources = [],
    isLoading,
    error,
  } = useQuery({
    queryKey: ['sources', notebookId],
    queryFn: async () => {
      if (!notebookId) return [];
      
      console.log('🔍 Fetching sources for notebook:', notebookId);
      
      const { data, error } = await supabase
        .from('sources')
        .select('*')
        .eq('notebook_id', notebookId)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('❌ Error fetching sources:', error);
        throw error;
      }
      
      console.log('✅ Sources fetched successfully:', data?.length || 0, 'sources');
      console.log('📋 Sources data:', data);
      return data;
    },
    enabled: !!notebookId,
  });

  // Set up Realtime subscription for sources table
  useEffect(() => {
    if (!notebookId || !user) return;

    console.log('Setting up Realtime subscription for sources table, notebook:', notebookId);

    const channel = supabase
      .channel('sources-changes')
      .on(
        'postgres_changes',
        {
          event: '*', // Listen to all events (INSERT, UPDATE, DELETE)
          schema: 'public',
          table: 'sources',
          filter: `notebook_id=eq.${notebookId}`
        },
        (payload: any) => {
          console.log('Realtime: Sources change received:', payload);
          
          // Update the query cache based on the event type
          queryClient.setQueryData(['sources', notebookId], (oldSources: any[] = []) => {
            switch (payload.eventType) {
              case 'INSERT':
                // Add new source if it doesn't already exist
                const newSource = payload.new as any;
                const existsInsert = oldSources.some(source => source.id === newSource?.id);
                if (existsInsert) {
                  console.log('Source already exists, skipping INSERT:', newSource?.id);
                  return oldSources;
                }
                console.log('Adding new source to cache:', newSource);
                return [newSource, ...oldSources];
                
              case 'UPDATE':
                // Update existing source
                const updatedSource = payload.new as any;
                console.log('Updating source in cache:', updatedSource?.id);
                return oldSources.map(source => 
                  source.id === updatedSource?.id ? updatedSource : source
                );
                
              case 'DELETE':
                // Remove deleted source
                const deletedSource = payload.old as any;
                console.log('Removing source from cache:', deletedSource?.id);
                return oldSources.filter(source => source.id !== deletedSource?.id);
                
              default:
                console.log('Unknown event type:', payload.eventType);
                return oldSources;
            }
          });
        }
      )
      .subscribe((status) => {
        console.log('Realtime subscription status for sources:', status);
      });

    return () => {
      console.log('Cleaning up Realtime subscription for sources');
      supabase.removeChannel(channel);
    };
  }, [notebookId, user, queryClient]);

  const addSource = useMutation({
    mutationFn: async (sourceData: {
      notebookId: string;
      title: string;
      type: 'pdf' | 'text' | 'website' | 'youtube' | 'audio';
      content?: string;
      url?: string;
      file_path?: string;
      file_size?: number;
      processing_status?: string;
      metadata?: any;
    }) => {
      if (!user) throw new Error('User not authenticated');

      const { data, error } = await supabase
        .from('sources')
        .insert({
          notebook_id: sourceData.notebookId,
          title: sourceData.title,
          type: sourceData.type,
          content: sourceData.content,
          url: sourceData.url,
          file_path: sourceData.file_path,
          file_size: sourceData.file_size,
          processing_status: sourceData.processing_status,
          metadata: sourceData.metadata || {},
        })
        .select()
        .single();

      if (error) throw error;
      return data;
    },
    onSuccess: async (newSource) => {
      console.log('🎉 Source added successfully:', newSource);
      console.log('📝 Source details:', {
        id: newSource.id,
        title: newSource.title,
        type: newSource.type,
        processing_status: newSource.processing_status,
        file_path: newSource.file_path,
        url: newSource.url,
        notebook_id: newSource.notebook_id
      });
      
      // The Realtime subscription will handle updating the cache
      // But we still check for first source to trigger generation
      const currentSources = queryClient.getQueryData(['sources', notebookId]) as any[] || [];
      const isFirstSource = currentSources.length === 0;
      
      if (isFirstSource && notebookId) {
        console.log('This is the first source, checking notebook generation status...');
        
        // Check notebook generation status
        const { data: notebook } = await supabase
          .from('notebooks')
          .select('generation_status')
          .eq('id', notebookId)
          .single();
        
        if (notebook?.generation_status === 'pending') {
          console.log('Triggering notebook content generation...');
          
          // Determine if we can trigger generation based on source type and available data
          const canGenerate = 
            (newSource.type === 'pdf' && newSource.file_path) ||
            (newSource.type === 'text' && newSource.content) ||
            (newSource.type === 'website' && newSource.url) ||
            (newSource.type === 'youtube' && newSource.url) ||
            (newSource.type === 'audio' && newSource.file_path);
          
          if (canGenerate) {
            try {
              await generateNotebookContentAsync({
                notebookId,
                filePath: newSource.file_path || newSource.url,
                sourceType: newSource.type
              });
            } catch (error) {
              console.error('Failed to generate notebook content:', error);
            }
          } else {
            console.log('Source not ready for generation yet - missing required data');
          }
        }
      }
    },
  });

  const updateSource = useMutation({
    mutationFn: async ({ sourceId, updates }: { 
      sourceId: string; 
      updates: { 
        title?: string;
        file_path?: string;
        processing_status?: string;
      }
    }) => {
      const { data, error } = await supabase
        .from('sources')
        .update(updates)
        .eq('id', sourceId)
        .select()
        .single();

      if (error) throw error;
      return data;
    },
    onSuccess: async (updatedSource) => {
      // The Realtime subscription will handle updating the cache
      
      // If file_path was added and this is the first source, trigger generation
      if (updatedSource.file_path && notebookId) {
        const currentSources = queryClient.getQueryData(['sources', notebookId]) as any[] || [];
        const isFirstSource = currentSources.length === 1;
        
        if (isFirstSource) {
          const { data: notebook } = await supabase
            .from('notebooks')
            .select('generation_status')
            .eq('id', notebookId)
            .single();
          
          if (notebook?.generation_status === 'pending') {
            console.log('File path updated, triggering notebook content generation...');
            
            try {
              await generateNotebookContentAsync({
                notebookId,
                filePath: updatedSource.file_path,
                sourceType: updatedSource.type
              });
            } catch (error) {
              console.error('Failed to generate notebook content:', error);
            }
          }
        }
      }
    },
  });

  const markSourceCompleted = useMutation({
    mutationFn: async (sourceId: string) => {
      const { data, error } = await supabase
        .from('sources')
        .update({ processing_status: 'completed' })
        .eq('id', sourceId)
        .select()
        .single();

      if (error) throw error;
      return data;
    },
    onSuccess: (data) => {
      console.log('✅ Manually marked source as completed:', data.id);
    },
  });

  return {
    sources,
    isLoading,
    error,
    addSource: addSource.mutate,
    addSourceAsync: addSource.mutateAsync,
    isAdding: addSource.isPending,
    updateSource: updateSource.mutate,
    isUpdating: updateSource.isPending,
    markSourceCompleted: markSourceCompleted.mutate,
    markSourceCompletedAsync: markSourceCompleted.mutateAsync,
  };
};
</file>

<file path="src/hooks/useSourceUpdate.tsx.backup">
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';

export const useSourceUpdate = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const updateSource = useMutation({
    mutationFn: async ({ sourceId, title }: { sourceId: string; title: string }) => {
      console.log('Updating source:', sourceId, 'with title:', title);
      
      const { data, error } = await supabase
        .from('sources')
        .update({ title })
        .eq('id', sourceId)
        .select()
        .single();

      if (error) {
        console.error('Error updating source:', error);
        throw error;
      }
      
      console.log('Source updated successfully');
      return data;
    },
    onSuccess: () => {
      console.log('Update mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['sources'] });
      toast({
        title: "Source renamed",
        description: "The source has been successfully renamed.",
      });
    },
    onError: (error) => {
      console.error('Update mutation error:', error);
      toast({
        title: "Error",
        description: "Failed to rename the source. Please try again.",
        variant: "destructive",
      });
    },
  });

  return {
    updateSource: updateSource.mutate,
    isUpdating: updateSource.isPending,
  };
};
</file>

<file path="src/i18n/agents/coordinator.ts">
import * as fs from 'fs';
import * as path from 'path';
import { ScannerAgent } from './scanner';
import { TranslatorAgent } from './translator';
import { ImplementerAgent } from './implementer';
import { ValidatorAgent } from './validator';
import { I18nProgress } from './types';

export class I18nCoordinator {
  private projectPath: string;
  private scanner: ScannerAgent;
  private translator: TranslatorAgent;
  private implementer: ImplementerAgent;
  private validator: ValidatorAgent;
  private progressPath: string;

  constructor(projectPath: string) {
    this.projectPath = projectPath;
    this.scanner = new ScannerAgent(projectPath);
    this.translator = new TranslatorAgent(projectPath);
    this.implementer = new ImplementerAgent(projectPath);
    this.validator = new ValidatorAgent(projectPath);
    this.progressPath = path.join(projectPath, 'src', 'i18n', 'agents', 'progress.json');
  }

  async runFullI18nImplementation(): Promise<void> {
    console.log('🚀 Starting comprehensive i18n implementation...\n');

    try {
      // Phase 1: Scanning
      await this.updateProgress('scanning');
      const scanReport = await this.scanner.scanForHardcodedStrings();
      await this.scanner.generateReport(scanReport);
      
      console.log(`\n📊 Scan Results:`);
      console.log(`   - Total files scanned: ${scanReport.totalFiles}`);
      console.log(`   - Files with hardcoded strings: ${scanReport.filesWithHardcodedStrings}`);
      console.log(`   - Total hardcoded strings found: ${scanReport.totalHardcodedStrings}`);
      console.log(`   - Components needing i18n: ${scanReport.componentsNeedingI18n.length}\n`);

      if (scanReport.totalHardcodedStrings === 0) {
        console.log('✨ No hardcoded strings found! The project is fully internationalized.');
        return;
      }

      // Phase 2: Translation
      await this.updateProgress('translating', {
        totalStrings: scanReport.totalHardcodedStrings,
        totalComponents: scanReport.componentsNeedingI18n.length
      });
      
      const translationKeys = await this.translator.createTranslationKeys(scanReport.hardcodedStrings);
      await this.translator.updateTranslationFiles(translationKeys);
      
      console.log(`\n🔑 Translation Results:`);
      console.log(`   - Translation keys generated: ${translationKeys.length}`);
      console.log(`   - Languages updated: 6 (en, ko, sw, fr, ne, uz)\n`);

      // Phase 3: Implementation
      await this.updateProgress('implementing', {
        processedComponents: 0,
        totalComponents: scanReport.componentsNeedingI18n.length
      });
      
      const componentUpdates = await this.implementer.implementI18n(
        scanReport.hardcodedStrings,
        translationKeys
      );
      
      // Update i18n configuration
      await this.implementer.updateI18nConfig(['en', 'ko', 'sw', 'fr', 'ne', 'uz']);
      
      // Create manual update guide for complex cases
      await this.implementer.createManualUpdateGuide(componentUpdates);
      
      console.log(`\n🔧 Implementation Results:`);
      console.log(`   - Components automatically updated: ${componentUpdates.length}`);
      console.log(`   - Manual updates required: Check manual-updates.md\n`);

      // Phase 4: Validation
      await this.updateProgress('validating');
      
      await this.validator.validateI18nImplementation();
      await this.validator.checkTranslationCompleteness();
      
      console.log(`\n✅ Validation Results:`);
      console.log(`   - Components validated: ${validationResults.length}`);
      console.log(`   - Translation completeness:`);
      completeness.forEach((percentage, lang) => {
        console.log(`     - ${lang}: ${percentage}%`);
      });

      // Phase 5: Complete
      await this.updateProgress('completed', {
        processedComponents: scanReport.componentsNeedingI18n.length,
        translatedStrings: translationKeys.length
      });

      // Generate final report
      await this.generateFinalReport({
        scanReport,
        translationKeys: translationKeys.length,
        componentUpdates: componentUpdates.length,
        validationResults,
        completeness
      });

      console.log('\n🎉 i18n implementation completed successfully!');
      console.log('📄 Check the following files for detailed information:');
      console.log('   - scan-report.json: Detailed scan results');
      console.log('   - manual-updates.md: Components requiring manual updates');
      console.log('   - validation-report.md: Validation results and recommendations');
      console.log('   - final-report.md: Comprehensive implementation summary\n');

    } catch (error) {
      console.error('❌ Error during i18n implementation:', error);
      await this.updateProgress('scanning', { errors: [(error as Error).message] });
      throw error;
    }
  }

  async runIncrementalUpdate(): Promise<void> {
    console.log('🔄 Running incremental i18n update...\n');

    // Scan only for new hardcoded strings
    const scanReport = await this.scanner.scanForHardcodedStrings();
    
    if (scanReport.totalHardcodedStrings === 0) {
      console.log('✨ No new hardcoded strings found!');
      return;
    }

    // Process only new strings
    const translationKeys = await this.translator.createTranslationKeys(scanReport.hardcodedStrings);
    await this.translator.updateTranslationFiles(translationKeys);
    
    console.log(`✅ Incremental update complete:`);
    console.log(`   - New strings found: ${scanReport.totalHardcodedStrings}`);
    console.log(`   - Translation keys added: ${translationKeys.length}`);
  }

  async validateOnly(): Promise<void> {
    console.log('🔍 Running i18n validation...\n');
    
    const validationResults = await this.validator.validateI18nImplementation();
    const completeness = await this.validator.checkTranslationCompleteness();
    
    console.log('Validation complete. Check validation-report.md for details.');
  }

  private async updateProgress(
    phase: I18nProgress['phase'],
    additionalData?: Partial<I18nProgress>
  ): Promise<void> {
    const progress: I18nProgress = {
      timestamp: new Date().toISOString(),
      phase,
      totalComponents: 0,
      processedComponents: 0,
      totalStrings: 0,
      translatedStrings: 0,
      languages: {
        en: { complete: true, coverage: 100, missingKeys: 0 },
        ko: { complete: false, coverage: 0, missingKeys: 0 },
        sw: { complete: false, coverage: 0, missingKeys: 0 },
        fr: { complete: false, coverage: 0, missingKeys: 0 },
        ne: { complete: false, coverage: 0, missingKeys: 0 },
        uz: { complete: false, coverage: 0, missingKeys: 0 }
      },
      errors: [],
      nextSteps: this.getNextSteps(phase),
      ...additionalData
    };

    await fs.promises.writeFile(this.progressPath, JSON.stringify(progress, null, 2));
  }

  private getNextSteps(phase: I18nProgress['phase']): string[] {
    switch (phase) {
      case 'scanning':
        return ['Review scan results', 'Prepare for translation key generation'];
      case 'translating':
        return ['Verify translation keys', 'Review auto-generated translations'];
      case 'implementing':
        return ['Test component updates', 'Handle manual updates'];
      case 'validating':
        return ['Fix validation errors', 'Add missing translations'];
      case 'completed':
        return ['Test all languages', 'Deploy changes', 'Monitor for issues'];
      default:
        return [];
    }
  }

  private async generateFinalReport(data: any): Promise<void> {
    const reportPath = path.join(this.projectPath, 'src', 'i18n', 'agents', 'final-report.md');
    
    let content = '# i18n Implementation Final Report\n\n';
    content += `Generated: ${new Date().toISOString()}\n\n`;
    
    content += '## Executive Summary\n\n';
    content += `This report summarizes the comprehensive i18n implementation for the AI4AgriWeather project.\n\n`;
    
    content += '### Key Achievements\n\n';
    content += `- ✅ Scanned ${data.scanReport.totalFiles} files\n`;
    content += `- ✅ Identified ${data.scanReport.totalHardcodedStrings} hardcoded strings\n`;
    content += `- ✅ Generated ${data.translationKeys} translation keys\n`;
    content += `- ✅ Updated ${data.componentUpdates} components automatically\n`;
    content += `- ✅ Supported 6 languages (EN, KO, SW, FR, NE, UZ)\n\n`;
    
    content += '### Language Coverage\n\n';
    data.completeness.forEach((percentage: number, lang: string) => {
      content += `- ${lang.toUpperCase()}: ${percentage}% complete\n`;
    });
    content += '\n';
    
    content += '## Components Updated\n\n';
    content += `The following ${data.scanReport.componentsNeedingI18n.length} components were processed:\n\n`;
    data.scanReport.componentsNeedingI18n.forEach((component: string) => {
      content += `- ${component}\n`;
    });
    content += '\n';
    
    content += '## Next Steps\n\n';
    content += '1. **Review Manual Updates**: Check `manual-updates.md` for components requiring manual intervention\n';
    content += '2. **Complete Translations**: Professional translation needed for FR, NE, UZ languages\n';
    content += '3. **Testing**: Test all components with different languages\n';
    content += '4. **Deployment**: Deploy the internationalized application\n';
    content += '5. **Monitoring**: Monitor for any missed strings or issues\n\n';
    
    content += '## Technical Details\n\n';
    content += '- **Framework**: React with react-i18next\n';
    content += '- **Translation Structure**: Nested JSON with categories\n';
    content += '- **Key Naming**: Category-based (e.g., `dashboard.welcome_message`)\n';
    content += '- **Language Detection**: Automatic browser detection\n\n';
    
    content += '## Maintenance Guidelines\n\n';
    content += '1. Always use `useTranslation` hook for new components\n';
    content += '2. Add translation keys before implementing features\n';
    content += '3. Run validation regularly to catch missing translations\n';
    content += '4. Use the incremental update feature for ongoing development\n';

    await fs.promises.writeFile(reportPath, content);
  }
}

// CLI Interface
if (require.main === module) {
  const coordinator = new I18nCoordinator(process.cwd());
  
  const command = process.argv[2];
  
  switch (command) {
    case 'full':
      coordinator.runFullI18nImplementation().catch(console.error);
      break;
    case 'incremental':
      coordinator.runIncrementalUpdate().catch(console.error);
      break;
    case 'validate':
      coordinator.validateOnly().catch(console.error);
      break;
    default:
      console.log('Usage: ts-node coordinator.ts [full|incremental|validate]');
      process.exit(1);
  }
}
</file>

<file path="src/i18n/agents/implementation-summary.md">
# AI4AgriWeather i18n Implementation Summary

## 🎯 Objective
Implement a comprehensive internationalization (i18n) system for AI4AgriWeather supporting 6 languages:
- 🇺🇸 English (en)
- 🇰🇷 Korean (ko) 
- 🇹🇿 Swahili (sw)
- 🇫🇷 French (fr)
- 🇳🇵 Nepali (ne)
- 🇺🇿 Uzbek (uz)

## ✅ Completed Tasks

### 1. **i18n Agent System Created**
- **Scanner Agent**: Scans codebase for hardcoded strings
- **Translator Agent**: Manages translation keys and files
- **Implementer Agent**: Updates components with i18n
- **Validator Agent**: Validates implementation completeness
- **Coordinator Agent**: Orchestrates the entire process

### 2. **New Languages Added**
- Created translation files for French, Nepali, and Uzbek
- Updated i18n configuration to support all 6 languages
- Added `supportedLngs` configuration

### 3. **Authentication Components Internationalized**
- **AuthForm**: 
  - Added 22 translation keys
  - Replaced all hardcoded strings
  - Includes toast messages, labels, and benefits
  
- **AgriOnboarding**:
  - Added 130+ translation keys
  - Complete multi-step form internationalization
  - All labels, placeholders, options, and messages translated

## 📊 Current Status

### Components Completed:
- ✅ AuthForm
- ✅ AgriOnboarding
- ✅ Language configuration

### Components Remaining:
- ⏳ Dashboard components (DashboardHeader, AlertsSection, QuickActionsGrid)
- ⏳ Crop Management components
- ⏳ Chat components
- ⏳ Weather components
- ⏳ Profile/Settings components
- ⏳ Error messages and notifications

### Translation Coverage:
- English: 100% (reference language)
- Korean: Auth and onboarding sections complete
- Swahili: Auth and onboarding sections complete
- French: Auth and onboarding sections complete
- Nepali: Auth and onboarding sections complete
- Uzbek: Auth and onboarding sections complete

## 🛠️ Tools & Scripts

### Run i18n Implementation:
```bash
# Full implementation
npx ts-node src/i18n/agents/run-i18n.ts full

# Scan only
npx ts-node src/i18n/agents/run-i18n.ts scan

# Validate only
npx ts-node src/i18n/agents/run-i18n.ts validate

# Incremental update
npx ts-node src/i18n/agents/run-i18n.ts incremental
```

## 🚀 Next Steps

1. **Run Full Scan**: Execute scanner to identify all remaining hardcoded strings
2. **Dashboard Components**: Implement i18n for dashboard components
3. **Core Features**: Update weather, crops, and chat components
4. **Validation**: Run validator to ensure completeness
5. **Testing**: Test all languages in the application

## 📝 Implementation Guidelines

### For Developers:
1. Always use `useTranslation` hook in components
2. Use translation keys instead of hardcoded strings
3. Follow the established key naming convention: `section.subsection.key`
4. Run incremental updates after adding new features

### Key Naming Convention:
- `common.*`: Shared UI elements
- `auth.*`: Authentication related
- `onboarding.*`: Onboarding flow
- `dashboard.*`: Dashboard components
- `weather.*`: Weather features
- `crops.*`: Crop management
- `chat.*`: AI chat interface
- `knowledge.*`: Knowledge base
- `errors.*`: Error messages
- `success.*`: Success messages

## 📈 Benefits Achieved

1. **Multi-language Support**: Application now supports 6 languages
2. **Scalable Architecture**: Agent system makes adding new translations easy
3. **Automated Process**: Reduces manual work for i18n implementation
4. **Consistency**: Ensures consistent translations across components
5. **Maintainability**: Clear structure for managing translations

## 🔍 Known Issues & Considerations

1. **Dynamic Content**: Content from APIs/database needs server-side translation
2. **Date/Time Formats**: Need locale-specific formatting
3. **RTL Support**: May need additional work for Arabic/Hebrew in future
4. **Translation Quality**: Professional translation review recommended

---

*Last Updated: [Current Date]*
*Total Components Processed: 2/74*
*Total Hardcoded Strings Found: 947*
*Strings Translated: 152+*
</file>

<file path="src/i18n/agents/implementer.ts">
import * as fs from 'fs';
import * as path from 'path';
import { parse } from '@babel/parser';
import traverse from '@babel/traverse';
import generate from '@babel/generator';
import * as t from '@babel/types';
import { ComponentUpdate, HardcodedString, TranslationKey } from './types';

export class ImplementerAgent {
  private srcPath: string;
  private translationKeyMap: Map<string, string> = new Map();

  constructor(projectPath: string) {
    this.srcPath = path.join(projectPath, 'src');
  }

  async implementI18n(
    hardcodedStrings: HardcodedString[],
    translationKeys: TranslationKey[]
  ): Promise<ComponentUpdate[]> {
    console.log('🔧 Implementer Agent: Starting i18n implementation...');

    // Build translation key map
    this.buildTranslationKeyMap(hardcodedStrings, translationKeys);

    // Group hardcoded strings by file
    const fileGroups = this.groupByFile(hardcodedStrings);
    const updates: ComponentUpdate[] = [];

    for (const [filePath, strings] of fileGroups.entries()) {
      const update = await this.updateComponent(filePath, strings);
      if (update) {
        updates.push(update);
      }
    }

    console.log(`✅ Implementer Agent: Updated ${updates.length} components!`);
    return updates;
  }

  private buildTranslationKeyMap(
    hardcodedStrings: HardcodedString[],
    translationKeys: TranslationKey[]
  ): void {
    translationKeys.forEach(tk => {
      const matchingString = hardcodedStrings.find(hs => hs.text === tk.value);
      if (matchingString) {
        this.translationKeyMap.set(matchingString.text, tk.key);
      }
    });
  }

  private groupByFile(hardcodedStrings: HardcodedString[]): Map<string, HardcodedString[]> {
    const groups = new Map<string, HardcodedString[]>();
    
    hardcodedStrings.forEach(item => {
      if (!groups.has(item.file)) {
        groups.set(item.file, []);
      }
      groups.get(item.file)!.push(item);
    });

    return groups;
  }

  async updateComponent(filePath: string, hardcodedStrings: HardcodedString[]): Promise<ComponentUpdate | null> {
    try {
      const content = await fs.promises.readFile(filePath, 'utf-8');
      const componentName = path.basename(filePath, path.extname(filePath));

      // Parse the file
      const ast = parse(content, {
        sourceType: 'module',
        plugins: ['typescript', 'jsx'],
      });

      let hasChanges = false;
      let needsImport = !content.includes('useTranslation');
      let needsReactImport = false;

      // Track updates for reporting
      const updates: ComponentUpdate['updates'] = [];

      // Traverse and update the AST
      traverse(ast, {
        // Update JSX text
        JSXText(path) {
          const text = path.node.value.trim();
          if (text && this.translationKeyMap.has(text)) {
            const key = this.translationKeyMap.get(text)!;
            
            // Replace with {t('key')}
            path.replaceWith(
              t.jsxExpressionContainer(
                t.callExpression(t.identifier('t'), [t.stringLiteral(key)])
              )
            );
            hasChanges = true;
          }
        },

        // Update string literals in specific props
        JSXAttribute(path) {
          const name = path.node.name.name;
          const targetProps = ['title', 'label', 'placeholder', 'alt', 'content'];
          
          if (targetProps.includes(name as string) && t.isStringLiteral(path.node.value)) {
            const text = path.node.value.value;
            if (this.translationKeyMap.has(text)) {
              const key = this.translationKeyMap.get(text)!;
              
              // Replace with {t('key')}
              path.node.value = t.jsxExpressionContainer(
                t.callExpression(t.identifier('t'), [t.stringLiteral(key)])
              );
              hasChanges = true;
            }
          }
        },

        // Add useTranslation hook if needed
        Program: {
          exit(path) {
            if (hasChanges && needsImport) {
              // Add import for useTranslation
              const importDeclaration = t.importDeclaration(
                [t.importSpecifier(t.identifier('useTranslation'), t.identifier('useTranslation'))],
                t.stringLiteral('react-i18next')
              );
              path.node.body.unshift(importDeclaration);
            }
          }
        },

        // Add useTranslation hook to function components
        FunctionDeclaration(path) {
          if (hasChanges && needsImport) {
            this.addUseTranslationHook(path);
          }
        },

        ArrowFunctionExpression(path) {
          if (hasChanges && needsImport) {
            // Check if this is a React component
            const parent = path.parent;
            if (t.isVariableDeclarator(parent) && /^[A-Z]/.test((parent.id as any).name)) {
              this.addUseTranslationHook(path);
            }
          }
        }
      });

      if (hasChanges) {
        // Generate the updated code
        const output = generate(ast, {}, content);
        await fs.promises.writeFile(filePath, output.code);

        return {
          filePath,
          componentName,
          updates
        };
      }

      return null;
    } catch (error) {
      console.error(`❌ Error updating ${filePath}:`, error);
      return null;
    }
  }

  private addUseTranslationHook(path: any): void {
    const body = path.node.body.body || path.node.body;
    
    if (Array.isArray(body)) {
      // Add const { t } = useTranslation(); at the beginning
      const useTranslationCall = t.variableDeclaration('const', [
        t.variableDeclarator(
          t.objectPattern([t.objectProperty(t.identifier('t'), t.identifier('t'), false, true)]),
          t.callExpression(t.identifier('useTranslation'), [])
        )
      ]);

      body.unshift(useTranslationCall);
    }
  }

  async createManualUpdateGuide(updates: ComponentUpdate[]): Promise<void> {
    const guidePath = path.join(this.srcPath, 'i18n', 'agents', 'manual-updates.md');
    
    let content = '# Manual i18n Updates Required\n\n';
    content += 'The following components need manual review and updates:\n\n';

    for (const update of updates) {
      content += `## ${update.componentName}\n`;
      content += `File: ${update.filePath}\n\n`;
      content += '### Changes:\n';
      
      for (const change of update.updates) {
        content += `- Line ${change.line}: Replace \`"${change.oldText}"\` with \`{t('${change.newKey}')}\`\n`;
      }
      content += '\n';
    }

    content += '## Implementation Steps:\n\n';
    content += '1. Add import: `import { useTranslation } from \'react-i18next\';`\n';
    content += '2. Add hook in component: `const { t } = useTranslation();`\n';
    content += '3. Replace hardcoded strings with `t(\'key\')`\n';
    content += '4. Test the component with different languages\n';

    await fs.promises.writeFile(guidePath, content);
    console.log(`📋 Manual update guide created at: ${guidePath}`);
  }

  async updateI18nConfig(languages: string[]): Promise<void> {
    const configPath = path.join(this.srcPath, 'i18n', 'index.ts');
    
    try {
      let content = await fs.promises.readFile(configPath, 'utf-8');
      
      // Update supportedLngs
      const supportedLngsRegex = /supportedLngs:\s*\[[^\]]*\]/;
      const newSupportedLngs = `supportedLngs: [${languages.map(lang => `'${lang}'`).join(', ')}]`;
      content = content.replace(supportedLngsRegex, newSupportedLngs);

      // Ensure all language imports are present
      for (const lang of languages) {
        if (!content.includes(`${lang} from './locales/${lang}.json'`)) {
          // Add import
          const importStatement = `import ${lang} from './locales/${lang}.json';`;
          content = content.replace(/^(import.*from.*;\n)+/m, `$&${importStatement}\n`);
          
          // Add to resources
          const resourcesRegex = /resources:\s*{([^}]*)}/;
          content = content.replace(resourcesRegex, (match, p1) => {
            if (!p1.includes(`${lang}:`)) {
              return `resources: {${p1}\n    ${lang}: { translation: ${lang} },\n  }`;
            }
            return match;
          });
        }
      }

      await fs.promises.writeFile(configPath, content);
      console.log('✅ i18n configuration updated!');
    } catch (error) {
      console.error('❌ Error updating i18n config:', error);
    }
  }
}
</file>

<file path="src/i18n/agents/priority-components-report.md">
# i18n Priority Components Analysis Report

Generated: 2025-07-23

## Executive Summary

This report provides a detailed analysis of hardcoded strings found in priority components: **AuthForm** and **AgriOnboarding**. These components contain a combined total of **152 hardcoded strings** that need to be internationalized.

## Priority Components Overview

### 1. AuthForm Component
- **Total Hardcoded Strings**: 22
- **File Path**: `/src/components/auth/AuthForm.tsx`
- **Status**: Already imports i18n but still has hardcoded strings
- **Priority**: HIGH - This is the entry point for all users

### 2. AgriOnboarding Component  
- **Total Hardcoded Strings**: 130
- **File Path**: `/src/components/auth/AgriOnboarding.tsx`
- **Status**: Already imports i18n but still has hardcoded strings
- **Priority**: HIGH - Critical for new user onboarding

## Detailed String Analysis

### AuthForm Component Strings

#### Toast Messages (4 strings)
```typescript
// Lines 47-48
title: "Account created!"
description: "Please check your email to confirm your account."

// Lines 68-69
title: "Welcome to AI4AgriWeather!"
description: "You have successfully signed in."
```

#### UI Labels (7 strings)
```typescript
// Line 95
<CardTitle>AI4AgriWeather</CardTitle>

// Line 112
<Label>Email</Label>

// Line 125  
<Label>Password</Label>

// Line 141
<p>Get access to:</p>

// Lines 145, 149, 153
<span>Real-time weather forecasts</span>
<span>AI-powered crop management</span>
<span>Personalized farming advice</span>
```

### AgriOnboarding Component Strings

#### Error Messages (6 strings)
```typescript
// Lines 99-100
title: "Error"
description: "User not authenticated"

// Lines 120-121
title: "Welcome to AI4AgriWeather!"
description: "Your profile has been set up successfully."

// Lines 128-129
title: "Error"
description: "Failed to save profile information. Please try again."
```

#### Section Headers (5 strings)
```typescript
// Line 148
<CardTitle>Personal Information</CardTitle>

// Line 231
<CardTitle>Farm Location & Size</CardTitle>

// Line 333
<CardTitle>Primary Crops</CardTitle>

// Line 388
<CardTitle>Almost Done!</CardTitle>

// Line 458
<h1>Welcome to AI4AgriWeather</h1>
```

#### Form Labels (25 strings)
```typescript
// Personal Information Section
"Full Name *"
"Phone Number"
"Your Role"
"Preferred Language"
"Years of Farming Experience"

// Farm Location Section
"Farm Name"
"Farm Location/Village"
"Region"
"Farm Size"
"Unit"
"Type of Farming"

// Completion Section
"Full Name:"
"Role:"
"Farm:"
"Location:"
"Farm Size:"
"Experience:"
"Primary Crops:"
"Selected Crops:"
"What's Next?"
```

#### Placeholder Text (5 strings)
```typescript
"John Doe"
"Green Valley Farm"
"Village/Ward name"
"Select your role"
"Select language"
"Select region"
"Select farming type"
```

#### Select Options (23 strings)
```typescript
// User Roles
"Farmer"
"Extension Officer"
"Researcher"
"Cooperative Member"
"Agribusiness"

// Languages
"English"
"Kiswahili"
"Both"

// Farm Size Units
"Hectares"
"Acres"
"Square Meters"

// Farming Types
"Subsistence Farming"
"Commercial Farming"
"Mixed Farming"
"Organic Farming"
"Livestock"
"Aquaculture"
"Horticulture"
"Agroforestry"
```

#### Navigation & Actions (5 strings)
```typescript
"Previous"
"Next"
"Setting up..."
"Complete Setup"
```

#### Onboarding Completion List (4 strings)
```typescript
"• Access personalized agricultural knowledge entries"
"• Get weather forecasts for your region"
"• Receive crop-specific farming advice"
"• Connect with other farmers in your area"
```

## Recommended Translation Keys Structure

### AuthForm Keys
```json
{
  "auth": {
    "form": {
      "title": "AI4AgriWeather",
      "labels": {
        "email": "Email",
        "password": "Password"
      },
      "benefits": {
        "title": "Get access to:",
        "weather": "Real-time weather forecasts",
        "management": "AI-powered crop management",
        "advice": "Personalized farming advice"
      },
      "messages": {
        "accountCreated": {
          "title": "Account created!",
          "description": "Please check your email to confirm your account."
        },
        "welcome": {
          "title": "Welcome to AI4AgriWeather!",
          "description": "You have successfully signed in."
        }
      }
    }
  }
}
```

### AgriOnboarding Keys
```json
{
  "onboarding": {
    "title": "Welcome to AI4AgriWeather",
    "sections": {
      "personal": {
        "title": "Personal Information",
        "fields": {
          "fullName": "Full Name *",
          "phone": "Phone Number",
          "role": "Your Role",
          "language": "Preferred Language",
          "experience": "Years of Farming Experience"
        }
      },
      "farm": {
        "title": "Farm Location & Size",
        "fields": {
          "name": "Farm Name",
          "location": "Farm Location/Village",
          "region": "Region",
          "size": "Farm Size",
          "unit": "Unit",
          "type": "Type of Farming"
        }
      },
      "crops": {
        "title": "Primary Crops",
        "selected": "Selected Crops:"
      },
      "summary": {
        "title": "Almost Done!",
        "whatsNext": "What's Next?",
        "benefits": [
          "Access personalized agricultural knowledge entries",
          "Get weather forecasts for your region",
          "Receive crop-specific farming advice",
          "Connect with other farmers in your area"
        ]
      }
    },
    "navigation": {
      "previous": "Previous",
      "next": "Next",
      "complete": "Complete Setup",
      "setting": "Setting up..."
    },
    "messages": {
      "success": {
        "title": "Welcome to AI4AgriWeather!",
        "description": "Your profile has been set up successfully."
      },
      "error": {
        "notAuthenticated": "User not authenticated",
        "saveFailed": "Failed to save profile information. Please try again."
      }
    }
  }
}
```

## Implementation Priority

1. **Phase 1 - Critical User Journey (Week 1)**
   - AuthForm: All authentication-related strings
   - AgriOnboarding: Error messages and navigation

2. **Phase 2 - Core Forms (Week 2)**
   - AgriOnboarding: All form labels and placeholders
   - AgriOnboarding: Select options for roles, languages, regions

3. **Phase 3 - Completion (Week 3)**
   - AgriOnboarding: Summary section
   - AgriOnboarding: Benefits and next steps
   - Testing and validation

## Next Steps

1. **Immediate Actions**
   - Create translation keys for both components
   - Update components to use `useTranslation` hook
   - Add translations for all 6 supported languages

2. **Translation Requirements**
   - English (en) - Base language
   - Korean (ko) - Need professional translation
   - Swahili (sw) - Priority for African users
   - French (fr) - For West African users
   - Nepali (ne) - For South Asian users
   - Uzbek (uz) - For Central Asian users

3. **Testing Requirements**
   - Test authentication flow in all languages
   - Verify onboarding process with different locales
   - Ensure all form validations work with translated text

## Technical Recommendations

1. **Use nested translation keys** for better organization
2. **Implement fallback values** for missing translations
3. **Add language detection** based on user's browser settings
4. **Create reusable translation components** for common patterns
5. **Set up translation validation** in the CI/CD pipeline

## Conclusion

The AuthForm and AgriOnboarding components are critical entry points for the AI4AgriWeather application. With 152 hardcoded strings between them, proper internationalization is essential for supporting the diverse user base across different regions and languages. The structured approach outlined in this report will ensure a smooth and comprehensive i18n implementation.
</file>

<file path="src/i18n/agents/README.md">
# i18n Agent System for AI4AgriWeather

## Overview
This directory contains the collaborative agent system for comprehensive internationalization (i18n) implementation across the AI4AgriWeather project.

## Supported Languages
- 🇺🇸 English (en)
- 🇰🇷 Korean (ko)
- 🇹🇿 Swahili (sw)
- 🇫🇷 French (fr)
- 🇳🇵 Nepali (ne)
- 🇺🇿 Uzbek (uz)

## Agent Roles

### 1. Scanner Agent (`scanner.ts`)
- **Role**: Scans codebase for hardcoded strings
- **Tasks**:
  - Identify components with untranslated text
  - Extract hardcoded strings
  - Generate reports of missing translations

### 2. Translator Agent (`translator.ts`)
- **Role**: Manages translation keys and content
- **Tasks**:
  - Create consistent translation keys
  - Coordinate with translation services
  - Maintain translation quality

### 3. Implementer Agent (`implementer.ts`)
- **Role**: Updates components with i18n
- **Tasks**:
  - Add useTranslation hooks
  - Replace hardcoded strings with translation keys
  - Ensure proper key usage

### 4. Validator Agent (`validator.ts`)
- **Role**: Validates i18n implementation
- **Tasks**:
  - Check for missing translations
  - Validate key consistency
  - Test language switching

### 5. Coordinator Agent (`coordinator.ts`)
- **Role**: Orchestrates all agents
- **Tasks**:
  - Manage workflow between agents
  - Track progress
  - Generate reports

## Workflow

1. **Scan Phase**: Scanner Agent identifies all components needing i18n
2. **Translation Phase**: Translator Agent creates/updates translation files
3. **Implementation Phase**: Implementer Agent updates components
4. **Validation Phase**: Validator Agent ensures completeness
5. **Coordination**: Coordinator Agent manages the entire process

## Usage

```typescript
import { I18nCoordinator } from './coordinator';

const coordinator = new I18nCoordinator();
await coordinator.runFullI18nImplementation();
```

## Progress Tracking

Progress is tracked in `progress.json` with the following structure:
- Components scanned
- Components updated
- Translation coverage per language
- Validation results
</file>

<file path="src/i18n/agents/run-i18n.ts">
#!/usr/bin/env ts-node

/**
 * Script to run the comprehensive i18n implementation using the agent system
 * 
 * Usage:
 * npx ts-node src/i18n/agents/run-i18n.ts [command]
 * 
 * Commands:
 * - full: Run full i18n implementation (scan, translate, implement, validate)
 * - scan: Only scan for hardcoded strings
 * - validate: Only validate existing i18n implementation
 * - incremental: Update only new hardcoded strings
 */

import * as path from 'path';
import { I18nCoordinator } from './coordinator';

// Get the project root (3 levels up from this script)
const projectPath = path.resolve(__dirname, '../../..');

async function main() {
  const command = process.argv[2] || 'full';
  const coordinator = new I18nCoordinator(projectPath);

  console.log(`🌍 AI4AgriWeather i18n Tool`);
  console.log(`📂 Project Path: ${projectPath}`);
  console.log(`🔧 Command: ${command}\n`);

  try {
    switch (command) {
      case 'full':
        console.log('🚀 Running comprehensive i18n implementation...\n');
        await coordinator.runFullI18nImplementation();
        break;

      case 'scan':
        console.log('🔍 Running scan only...\n');
        const { ScannerAgent } = await import('./scanner');
        const scanner = new ScannerAgent(projectPath);
        const scanReport = await scanner.scanForHardcodedStrings();
        await scanner.generateReport(scanReport);
        
        console.log('\n📊 Scan Summary:');
        console.log(`   - Total files: ${scanReport.totalFiles}`);
        console.log(`   - Files with hardcoded strings: ${scanReport.filesWithHardcodedStrings}`);
        console.log(`   - Total hardcoded strings: ${scanReport.totalHardcodedStrings}`);
        console.log(`   - Components needing i18n: ${scanReport.componentsNeedingI18n.length}`);
        break;

      case 'validate':
        console.log('✅ Running validation only...\n');
        await coordinator.validateOnly();
        break;

      case 'incremental':
        console.log('🔄 Running incremental update...\n');
        await coordinator.runIncrementalUpdate();
        break;

      default:
        console.error(`❌ Unknown command: ${command}`);
        console.log('\n📖 Available commands:');
        console.log('   - full: Run full i18n implementation');
        console.log('   - scan: Only scan for hardcoded strings');
        console.log('   - validate: Only validate existing i18n');
        console.log('   - incremental: Update only new strings');
        process.exit(1);
    }

    console.log('\n✨ Done!');
  } catch (error) {
    console.error('\n❌ Error:', error);
    process.exit(1);
  }
}

// Run the script
if (require.main === module) {
  main().catch(console.error);
}
</file>

<file path="src/i18n/agents/run-scanner.ts">
#!/usr/bin/env node

import { ScannerAgent } from './scanner';
import * as path from 'path';

async function runScanner() {
  console.log('🚀 Starting Scanner Agent for i18n analysis...\n');
  
  // Get project root (3 levels up from current script)
  const projectPath = path.resolve(__dirname, '../../..');
  
  const scanner = new ScannerAgent(projectPath);
  
  try {
    // Run the scan
    const scanReport = await scanner.scanForHardcodedStrings();
    
    // Generate and save the report
    await scanner.generateReport(scanReport);
    
    // Print detailed results
    console.log('\n📊 Detailed Scan Results:\n');
    console.log(`Total files scanned: ${scanReport.totalFiles}`);
    console.log(`Files with hardcoded strings: ${scanReport.filesWithHardcodedStrings}`);
    console.log(`Total hardcoded strings found: ${scanReport.totalHardcodedStrings}`);
    console.log(`\nComponents needing i18n (${scanReport.componentsNeedingI18n.length} total):`);
    
    // Sort components by priority (AuthForm and AgriOnboarding first)
    const priorityComponents = ['AuthForm', 'AgriOnboarding'];
    const sortedComponents = [
      ...scanReport.componentsNeedingI18n.filter(c => priorityComponents.includes(c)),
      ...scanReport.componentsNeedingI18n.filter(c => !priorityComponents.includes(c))
    ];
    
    sortedComponents.forEach(component => {
      const priority = priorityComponents.includes(component) ? '⭐ ' : '   ';
      console.log(`${priority}${component}`);
    });
    
    // Show hardcoded strings for priority components
    console.log('\n📝 Hardcoded Strings in Priority Components:\n');
    
    priorityComponents.forEach(componentName => {
      const componentStrings = scanReport.hardcodedStrings.filter(
        str => str.componentName === componentName
      );
      
      if (componentStrings.length > 0) {
        console.log(`\n${componentName} (${componentStrings.length} strings):`);
        console.log('─'.repeat(60));
        
        componentStrings.forEach(str => {
          console.log(`  Line ${str.line}: "${str.text}"`);
          console.log(`  Context: ${str.context}`);
          console.log('');
        });
      }
    });
    
    // Summary of all hardcoded strings by component
    console.log('\n📊 Summary of All Components:\n');
    
    const componentSummary = new Map<string, number>();
    scanReport.hardcodedStrings.forEach(str => {
      const count = componentSummary.get(str.componentName) || 0;
      componentSummary.set(str.componentName, count + 1);
    });
    
    // Sort by string count (descending)
    const sortedSummary = Array.from(componentSummary.entries())
      .sort((a, b) => b[1] - a[1]);
    
    sortedSummary.forEach(([component, count]) => {
      const priority = priorityComponents.includes(component) ? '⭐' : ' ';
      console.log(`${priority} ${component}: ${count} strings`);
    });
    
    // Check which components already use i18n
    console.log('\n✅ Components Already Using i18n:\n');
    const componentsWithI18n = await scanner.getComponentsUsingI18n();
    componentsWithI18n.forEach(component => {
      console.log(`   ${component}`);
    });
    
    console.log(`\n📄 Full report saved to: ${path.join(projectPath, 'src/i18n/agents/scan-report.json')}`);
    
  } catch (error) {
    console.error('❌ Error during scanning:', error);
    process.exit(1);
  }
}

// Run the scanner
runScanner();
</file>

<file path="src/i18n/agents/scan-report.json">
{
  "totalFiles": 336,
  "filesWithHardcodedStrings": 130,
  "totalHardcodedStrings": 799,
  "hardcodedStrings": [
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/debug.tsx",
      "line": 6,
      "text": "Debug Page",
      "context": "<h1>Debug Page</h1>",
      "componentName": "debug"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/debug.tsx",
      "line": 7,
      "text": "If you see this, React is working!",
      "context": "<p>If you see this, React is working!</p>",
      "componentName": "debug"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/App.tsx",
      "line": 30,
      "text": "Loading...",
      "context": "<React.Suspense fallback={<div className=\"flex items-center justify-center min-h-screen\">Loading...</div>}>",
      "componentName": "App"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/services/authService.ts",
      "line": 16,
      "text": "Signed out",
      "context": "title: \"Signed out\",",
      "componentName": "authService"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/services/authService.ts",
      "line": 17,
      "text": "You have been successfully signed out.",
      "context": "description: \"You have been successfully signed out.\"",
      "componentName": "authService"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/services/authService.ts",
      "line": 28,
      "text": "Signed out",
      "context": "title: \"Signed out\",",
      "componentName": "authService"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/services/authService.ts",
      "line": 29,
      "text": "You have been signed out locally.",
      "context": "description: \"You have been signed out locally.\",",
      "componentName": "authService"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/pages/NotFound.tsx",
      "line": 18,
      "text": "Oops! Page not found",
      "context": "<p className=\"text-xl text-gray-600 mb-4\">Oops! Page not found</p>",
      "componentName": "NotFound"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/pages/Index.tsx",
      "line": 16,
      "text": "Loading...",
      "context": "<p className=\"text-gray-600\">Loading...</p>",
      "componentName": "Index"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/pages/Auth.tsx",
      "line": 11,
      "text": "AI4AgriWeather",
      "context": "<h1 className=\"text-3xl font-bold text-gray-900 mb-2\">AI4AgriWeather</h1>",
      "componentName": "Auth"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/pages/Auth.tsx",
      "line": 12,
      "text": "Your AI-powered agricultural knowledge companion",
      "context": "<p className=\"text-gray-600\">Your AI-powered agricultural knowledge companion</p>",
      "componentName": "Auth"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useSourceUpdate.tsx",
      "line": 35,
      "text": "Source renamed",
      "context": "title: \"Source renamed\",",
      "componentName": "useSourceUpdate"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useSourceUpdate.tsx",
      "line": 36,
      "text": "The source has been successfully renamed.",
      "context": "description: \"The source has been successfully renamed.\",",
      "componentName": "useSourceUpdate"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useSourceUpdate.tsx",
      "line": 42,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "useSourceUpdate"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useSourceUpdate.tsx",
      "line": 43,
      "text": "Failed to rename the source. Please try again.",
      "context": "description: \"Failed to rename the source. Please try again.\",",
      "componentName": "useSourceUpdate"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useSourceDelete.tsx",
      "line": 72,
      "text": "Source deleted",
      "context": "title: \"Source deleted\",",
      "componentName": "useSourceDelete"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useSourceDelete.tsx",
      "line": 91,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "useSourceDelete"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useNotebookUpdate.tsx",
      "line": 45,
      "text": "Notebook updated",
      "context": "title: \"Notebook updated\",",
      "componentName": "useNotebookUpdate"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useNotebookUpdate.tsx",
      "line": 46,
      "text": "The notebook has been updated successfully.",
      "context": "description: \"The notebook has been updated successfully.\",",
      "componentName": "useNotebookUpdate"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useNotebookUpdate.tsx",
      "line": 69,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "useNotebookUpdate"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useNotebookGeneration.tsx",
      "line": 53,
      "text": "Content Generated",
      "context": "title: \"Content Generated\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useNotebookGeneration.tsx",
      "line": 54,
      "text": "Notebook title and description have been generated successfully.",
      "context": "description: \"Notebook title and description have been generated successfully.\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useNotebookGeneration.tsx",
      "line": 76,
      "text": "Generation Failed",
      "context": "title: \"Generation Failed\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useNotebookGeneration.tsx",
      "line": 120,
      "text": "Audio Generated",
      "context": "title: \"Audio Generated\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useNotebookGeneration.tsx",
      "line": 121,
      "text": "Audio overview has been generated successfully.",
      "context": "description: \"Audio overview has been generated successfully.\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useNotebookGeneration.tsx",
      "line": 138,
      "text": "Audio Generation Failed",
      "context": "title: \"Audio Generation Failed\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useNotebookGeneration.tsx",
      "line": 184,
      "text": "Audio URL Refreshed",
      "context": "title: \"Audio URL Refreshed\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useNotebookGeneration.tsx",
      "line": 185,
      "text": "Audio URL has been refreshed successfully.",
      "context": "description: \"Audio URL has been refreshed successfully.\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useNotebookGeneration.tsx",
      "line": 194,
      "text": "Refresh Failed",
      "context": "title: \"Refresh Failed\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useNotebookGeneration.tsx",
      "line": 195,
      "text": "Failed to refresh audio URL. Please try again.",
      "context": "description: \"Failed to refresh audio URL. Please try again.\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useNotebookDelete.tsx",
      "line": 40,
      "text": "Notebook deleted",
      "context": "title: \"Notebook deleted\",",
      "componentName": "useNotebookDelete"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useNotebookDelete.tsx",
      "line": 64,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "useNotebookDelete"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useFileUpload.tsx",
      "line": 40,
      "text": "Upload Error",
      "context": "title: \"Upload Error\",",
      "componentName": "useFileUpload"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useDocumentProcessing.tsx",
      "line": 42,
      "text": "Processing Error",
      "context": "title: \"Processing Error\",",
      "componentName": "useDocumentProcessing"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useDocumentProcessing.tsx",
      "line": 43,
      "text": "Failed to start document processing. Please try again.",
      "context": "description: \"Failed to start document processing. Please try again.\",",
      "componentName": "useDocumentProcessing"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useChatMessages.tsx",
      "line": 310,
      "text": "Chat history cleared",
      "context": "title: \"Chat history cleared\",",
      "componentName": "useChatMessages"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useChatMessages.tsx",
      "line": 311,
      "text": "All messages have been deleted successfully.",
      "context": "description: \"All messages have been deleted successfully.\",",
      "componentName": "useChatMessages"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useChatMessages.tsx",
      "line": 323,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "useChatMessages"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useChatMessages.tsx",
      "line": 324,
      "text": "Failed to clear chat history. Please try again.",
      "context": "description: \"Failed to clear chat history. Please try again.\",",
      "componentName": "useChatMessages"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useAudioOverview.tsx",
      "line": 38,
      "text": "Audio Overview Ready!",
      "context": "title: \"Audio Overview Ready!\",",
      "componentName": "useAudioOverview"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useAudioOverview.tsx",
      "line": 39,
      "text": "Your deep dive conversation is ready to play!",
      "context": "description: \"Your deep dive conversation is ready to play!\",",
      "componentName": "useAudioOverview"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useAudioOverview.tsx",
      "line": 47,
      "text": "Generation Failed",
      "context": "title: \"Generation Failed\",",
      "componentName": "useAudioOverview"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useAudioOverview.tsx",
      "line": 48,
      "text": "Failed to generate audio overview. Please try again.",
      "context": "description: \"Failed to generate audio overview. Please try again.\",",
      "componentName": "useAudioOverview"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useAudioOverview.tsx",
      "line": 87,
      "text": "Failed to Start Generation",
      "context": "title: \"Failed to Start Generation\",",
      "componentName": "useAudioOverview"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useAudioOverview.tsx",
      "line": 125,
      "text": "Failed to Refresh URL",
      "context": "title: \"Failed to Refresh URL\",",
      "componentName": "useAudioOverview"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/hooks/useAudioOverview.tsx",
      "line": 126,
      "text": "Unable to refresh the audio URL. Please try again.",
      "context": "description: \"Unable to refresh the audio URL. Please try again.\",",
      "componentName": "useAudioOverview"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/contexts/AuthContext.tsx",
      "line": 17,
      "text": "Promise",
      "context": "signOut: () => Promise<void>;",
      "componentName": "AuthContext"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/contexts/AuthContext.tsx",
      "line": 18,
      "text": "Promise",
      "context": "refreshProfile: () => Promise<void>;",
      "componentName": "AuthContext"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/contexts/AuthContext.tsx",
      "line": 113,
      "text": "Profile fetch error",
      "context": "setError(err instanceof Error ? err.message : 'Profile fetch error');",
      "componentName": "AuthContext"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/contexts/AuthContext.tsx",
      "line": 233,
      "text": "Authentication error",
      "context": "setError(err instanceof Error ? err.message : 'Authentication error');",
      "componentName": "AuthContext"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/utils/permissions.ts",
      "line": 152,
      "text": "Private",
      "context": "{ value: 'private', label: 'Private', description: 'Only you can see this entry' }",
      "componentName": "permissions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/utils/permissions.ts",
      "line": 152,
      "text": "Only you can see this entry",
      "context": "{ value: 'private', label: 'Private', description: 'Only you can see this entry' }",
      "componentName": "permissions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/utils/permissions.ts",
      "line": 160,
      "text": "Public",
      "context": "label: 'Public',",
      "componentName": "permissions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/utils/permissions.ts",
      "line": 161,
      "text": "Share with other farmers and extension officers",
      "context": "description: 'Share with other farmers and extension officers'",
      "componentName": "permissions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/utils/permissions.ts",
      "line": 168,
      "text": "Cooperative",
      "context": "label: 'Cooperative',",
      "componentName": "permissions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/utils/permissions.ts",
      "line": 169,
      "text": "Share with your cooperative members",
      "context": "description: 'Share with your cooperative members'",
      "componentName": "permissions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/utils/permissions.ts",
      "line": 176,
      "text": "Business",
      "context": "label: 'Business',",
      "componentName": "permissions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/utils/permissions.ts",
      "line": 177,
      "text": "Share with business partners and suppliers",
      "context": "description: 'Share with business partners and suppliers'",
      "componentName": "permissions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/utils/permissions.ts",
      "line": 184,
      "text": "Research",
      "context": "label: 'Research',",
      "componentName": "permissions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/utils/permissions.ts",
      "line": 185,
      "text": "Share for agricultural research purposes",
      "context": "description: 'Share for agricultural research purposes'",
      "componentName": "permissions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/utils/permissions.ts",
      "line": 224,
      "text": "Individual farmer managing their own agricultural knowledge",
      "context": "description: 'Individual farmer managing their own agricultural knowledge',",
      "componentName": "permissions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/utils/permissions.ts",
      "line": 230,
      "text": "Agricultural extension officer providing guidance to farmers",
      "context": "description: 'Agricultural extension officer providing guidance to farmers',",
      "componentName": "permissions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/utils/permissions.ts",
      "line": 236,
      "text": "Agricultural researcher studying farming practices and innovations",
      "context": "description: 'Agricultural researcher studying farming practices and innovations',",
      "componentName": "permissions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/utils/permissions.ts",
      "line": 242,
      "text": "System administrator with full access to all features",
      "context": "description: 'System administrator with full access to all features',",
      "componentName": "permissions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/utils/permissions.ts",
      "line": 248,
      "text": "Member of an agricultural cooperative sharing knowledge with peers",
      "context": "description: 'Member of an agricultural cooperative sharing knowledge with peers',",
      "componentName": "permissions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/utils/permissions.ts",
      "line": 254,
      "text": "Business entity involved in agricultural value chain",
      "context": "description: 'Business entity involved in agricultural value chain',",
      "componentName": "permissions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/types/domain.ts",
      "line": 57,
      "text": "extends ApiResponse",
      "context": "export interface PaginatedApiResponse<T = any> extends ApiResponse<T[]> {",
      "componentName": "domain"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/services/sources/documentProcessing.ts",
      "line": 176,
      "text": "Unknown error",
      "context": "processingError: error instanceof Error ? error.message : 'Unknown error',",
      "componentName": "documentProcessing"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/services/sources/documentProcessing.ts",
      "line": 239,
      "text": "Processing failed",
      "context": "processingError: error instanceof Error ? error.message : 'Processing failed',",
      "componentName": "documentProcessing"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/services/sources/documentProcessing.ts",
      "line": 249,
      "text": "Failed to start processing",
      "context": "processingError: error instanceof Error ? error.message : 'Failed to start processing',",
      "componentName": "documentProcessing"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/services/core/apiClient.ts",
      "line": 45,
      "text": "= ApiResponse",
      "context": "export type ApiResult<T> = ApiResponse<T> | ApiErrorResponse;",
      "componentName": "apiClient"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/services/core/apiClient.ts",
      "line": 51,
      "text": "Promise",
      "context": "apiCall: () => Promise<{ data: T; error: any }>",
      "componentName": "apiClient"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 93,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 94,
      "text": "User not authenticated",
      "context": "description: \"User not authenticated\",",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 113,
      "text": "Profile Updated",
      "context": "title: \"Profile Updated\",",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 114,
      "text": "Your profile information has been saved successfully.",
      "context": "description: \"Your profile information has been saved successfully.\",",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 122,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 123,
      "text": "Failed to update profile. Please try again.",
      "context": "description: \"Failed to update profile. Please try again.\",",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 168,
      "text": "User Profile",
      "context": "<DialogTitle className=\"text-xl\">User Profile</DialogTitle>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 187,
      "text": "Personal Info",
      "context": "<TabsTrigger value=\"personal\">Personal Info</TabsTrigger>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 188,
      "text": "Farm Details",
      "context": "<TabsTrigger value=\"farm\">Farm Details</TabsTrigger>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 189,
      "text": "Preferences",
      "context": "<TabsTrigger value=\"preferences\">Preferences</TabsTrigger>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 197,
      "text": "Personal Information",
      "context": "<span>Personal Information</span>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 203,
      "text": "Full Name",
      "context": "<Label htmlFor=\"full_name\">Full Name</Label>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 209,
      "text": "Enter your full name",
      "context": "placeholder=\"Enter your full name\"",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 219,
      "text": "Email Address",
      "context": "<Label htmlFor=\"email\">Email Address</Label>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 227,
      "text": "Phone Number",
      "context": "<Label htmlFor=\"phone_number\">Phone Number</Label>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 244,
      "text": "Role",
      "context": "<Label htmlFor=\"user_role\">Role</Label>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 251,
      "text": "Farmer",
      "context": "<SelectItem value=\"farmer\">Farmer</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 252,
      "text": "Extension Officer",
      "context": "<SelectItem value=\"extension_officer\">Extension Officer</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 253,
      "text": "Researcher",
      "context": "<SelectItem value=\"researcher\">Researcher</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 254,
      "text": "Cooperative Member",
      "context": "<SelectItem value=\"cooperative_member\">Cooperative Member</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 255,
      "text": "Agribusiness",
      "context": "<SelectItem value=\"agribusiness\">Agribusiness</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 266,
      "text": "Years of Experience",
      "context": "<Label htmlFor=\"farming_experience\">Years of Experience</Label>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 292,
      "text": "Farm Information",
      "context": "<span>Farm Information</span>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 298,
      "text": "Farm Name",
      "context": "<Label htmlFor=\"farm_name\">Farm Name</Label>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 304,
      "text": "Enter farm name",
      "context": "placeholder=\"Enter farm name\"",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 314,
      "text": "Farm Location",
      "context": "<Label htmlFor=\"farm_location\">Farm Location</Label>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 320,
      "text": "Village/Ward name",
      "context": "placeholder=\"Village/Ward name\"",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 331,
      "text": "Region",
      "context": "<Label htmlFor=\"region\">Region</Label>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 335,
      "text": "Select region",
      "context": "<SelectValue placeholder=\"Select region\" />",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 353,
      "text": "Farming Type",
      "context": "<Label htmlFor=\"farming_type\">Farming Type</Label>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 360,
      "text": "Subsistence Farming",
      "context": "<SelectItem value=\"subsistence\">Subsistence Farming</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 361,
      "text": "Commercial Farming",
      "context": "<SelectItem value=\"commercial\">Commercial Farming</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 362,
      "text": "Mixed Farming",
      "context": "<SelectItem value=\"mixed\">Mixed Farming</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 363,
      "text": "Organic Farming",
      "context": "<SelectItem value=\"organic\">Organic Farming</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 364,
      "text": "Livestock",
      "context": "<SelectItem value=\"livestock\">Livestock</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 365,
      "text": "Aquaculture",
      "context": "<SelectItem value=\"aquaculture\">Aquaculture</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 366,
      "text": "Horticulture",
      "context": "<SelectItem value=\"horticulture\">Horticulture</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 367,
      "text": "Agroforestry",
      "context": "<SelectItem value=\"agroforestry\">Agroforestry</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 380,
      "text": "Farm Size",
      "context": "<Label htmlFor=\"farm_size\">Farm Size</Label>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 397,
      "text": "Unit",
      "context": "<Label htmlFor=\"farm_size_unit\">Unit</Label>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 404,
      "text": "Hectares",
      "context": "<SelectItem value=\"hectares\">Hectares</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 405,
      "text": "Acres",
      "context": "<SelectItem value=\"acres\">Acres</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 406,
      "text": "Square Meters",
      "context": "<SelectItem value=\"square_meters\">Square Meters</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 422,
      "text": "Primary Crops",
      "context": "<span>Primary Crops</span>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 458,
      "text": "No crops selected",
      "context": "<span className=\"text-gray-500 text-sm\">No crops selected</span>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 472,
      "text": "Preferences",
      "context": "<span>Preferences</span>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 477,
      "text": "Preferred Language",
      "context": "<Label htmlFor=\"preferred_language\">Preferred Language</Label>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 484,
      "text": "English",
      "context": "<SelectItem value=\"english\">English</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 485,
      "text": "Kiswahili",
      "context": "<SelectItem value=\"swahili\">Kiswahili</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 486,
      "text": "Both",
      "context": "<SelectItem value=\"both\">Both</SelectItem>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 500,
      "text": "Account Information",
      "context": "<Label>Account Information</Label>",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 503,
      "text": "Member since:",
      "context": "<span className=\"font-medium\">Member since:</span><br />",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/profile/UserProfileDialog.tsx",
      "line": 507,
      "text": "Last updated:",
      "context": "<span className=\"font-medium\">Last updated:</span><br />",
      "componentName": "UserProfileDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/sonner.tsx",
      "line": 17,
      "text": "group-[.toast]:text-muted-foreground",
      "context": "description: \"group-[.toast]:text-muted-foreground\",",
      "componentName": "sonner"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/sidebar.tsx",
      "line": 280,
      "text": "Toggle Sidebar",
      "context": "<span className=\"sr-only\">Toggle Sidebar</span>",
      "componentName": "sidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/sidebar.tsx",
      "line": 296,
      "text": "Toggle Sidebar",
      "context": "aria-label=\"Toggle Sidebar\"",
      "componentName": "sidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/sidebar.tsx",
      "line": 299,
      "text": "Toggle Sidebar",
      "context": "title=\"Toggle Sidebar\"",
      "componentName": "sidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/sheet.tsx",
      "line": 68,
      "text": "Close",
      "context": "<span className=\"sr-only\">Close</span>",
      "componentName": "sheet"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/pagination.tsx",
      "line": 67,
      "text": "Go to previous page",
      "context": "aria-label=\"Go to previous page\"",
      "componentName": "pagination"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/pagination.tsx",
      "line": 73,
      "text": "Previous",
      "context": "<span>Previous</span>",
      "componentName": "pagination"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/pagination.tsx",
      "line": 83,
      "text": "Go to next page",
      "context": "aria-label=\"Go to next page\"",
      "componentName": "pagination"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/pagination.tsx",
      "line": 88,
      "text": "Next",
      "context": "<span>Next</span>",
      "componentName": "pagination"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/pagination.tsx",
      "line": 104,
      "text": "More pages",
      "context": "<span className=\"sr-only\">More pages</span>",
      "componentName": "pagination"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/form.tsx",
      "line": 20,
      "text": "= FieldPath",
      "context": "TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>",
      "componentName": "form"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/form.tsx",
      "line": 31,
      "text": "= FieldPath",
      "context": "TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>",
      "componentName": "form"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/dialog.tsx",
      "line": 47,
      "text": "Close",
      "context": "<span className=\"sr-only\">Close</span>",
      "componentName": "dialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/carousel.tsx",
      "line": 218,
      "text": "Previous slide",
      "context": "<span className=\"sr-only\">Previous slide</span>",
      "componentName": "carousel"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/carousel.tsx",
      "line": 247,
      "text": "Next slide",
      "context": "<span className=\"sr-only\">Next slide</span>",
      "componentName": "carousel"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/calendar.tsx",
      "line": 24,
      "text": "text-sm font-medium",
      "context": "caption_label: \"text-sm font-medium\",",
      "componentName": "calendar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/breadcrumb.tsx",
      "line": 102,
      "text": "More",
      "context": "<span className=\"sr-only\">More</span>",
      "componentName": "breadcrumb"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/ui/alert.tsx",
      "line": 24,
      "text": "& VariantProps",
      "context": "React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>",
      "componentName": "alert"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 87,
      "text": "Current Conditions",
      "context": "<h2 className=\"text-3xl font-bold mb-2\">Current Conditions</h2>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 91,
      "text": "28°C",
      "context": "<p className=\"text-5xl font-bold\">28°C</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 92,
      "text": "Mostly Sunny",
      "context": "<p className=\"text-lg\">Mostly Sunny</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 103,
      "text": "Humidity",
      "context": "<span className=\"text-sm\">Humidity</span>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 110,
      "text": "Wind Speed",
      "context": "<span className=\"text-sm\">Wind Speed</span>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 112,
      "text": "12 km/h",
      "context": "<p className=\"text-xl font-semibold\">12 km/h</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 117,
      "text": "Visibility",
      "context": "<span className=\"text-sm\">Visibility</span>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 119,
      "text": "10 km",
      "context": "<p className=\"text-xl font-semibold\">10 km</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 124,
      "text": "Pressure",
      "context": "<span className=\"text-sm\">Pressure</span>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 126,
      "text": "1013 mb",
      "context": "<p className=\"text-xl font-semibold\">1013 mb</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 136,
      "text": "Agricultural Indices",
      "context": "<CardTitle>Agricultural Indices</CardTitle>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 144,
      "text": "Evapotranspiration",
      "context": "<p className=\"text-sm text-gray-600 mb-1\">Evapotranspiration</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 148,
      "text": "Moderate water loss",
      "context": "<p className=\"text-xs text-gray-500 mt-1\">Moderate water loss</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 151,
      "text": "Soil Moisture",
      "context": "<p className=\"text-sm text-gray-600 mb-1\">Soil Moisture</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 155,
      "text": "Good for planting",
      "context": "<p className=\"text-xs text-gray-500 mt-1\">Good for planting</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 158,
      "text": "UV Index",
      "context": "<p className=\"text-sm text-gray-600 mb-1\">UV Index</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 162,
      "text": "Very High",
      "context": "<p className=\"text-xs text-gray-500 mt-1\">Very High</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 165,
      "text": "Growing Degree Days",
      "context": "<p className=\"text-sm text-gray-600 mb-1\">Growing Degree Days</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 169,
      "text": "Accumulated today",
      "context": "<p className=\"text-xs text-gray-500 mt-1\">Accumulated today</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 175,
      "text": "Irrigation Recommendation",
      "context": "<p className=\"font-semibold mb-1\">Irrigation Recommendation</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 176,
      "text": "Based on current evapotranspiration and soil moisture, irrigate 20-25mm in the next 2 days for optimal crop growth.",
      "context": "<p>Based on current evapotranspiration and soil moisture, irrigate 20-25mm in the next 2 days for optimal crop growth.</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 185,
      "text": "24-Hour",
      "context": "<TabsTrigger value=\"hourly\">24-Hour</TabsTrigger>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 186,
      "text": "7-Day",
      "context": "<TabsTrigger value=\"weekly\">7-Day</TabsTrigger>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 187,
      "text": "Seasonal",
      "context": "<TabsTrigger value=\"seasonal\">Seasonal</TabsTrigger>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 193,
      "text": "24-Hour Forecast",
      "context": "<CardTitle>24-Hour Forecast</CardTitle>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 213,
      "text": "Temperature (°C)",
      "context": "name=\"Temperature (°C)\"",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 219,
      "text": "Rainfall (mm)",
      "context": "name=\"Rainfall (mm)\"",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 231,
      "text": "7-Day Forecast",
      "context": "<CardTitle>7-Day Forecast</CardTitle>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 274,
      "text": "Seasonal Outlook",
      "context": "<CardTitle>Seasonal Outlook</CardTitle>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 293,
      "text": "Masika (Long Rains)",
      "context": "<p className=\"font-semibold\">Masika (Long Rains)</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 294,
      "text": "March - May",
      "context": "<p className=\"text-sm text-gray-600\">March - May</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 295,
      "text": "Expected: Normal",
      "context": "<p className=\"text-xs mt-1\">Expected: Normal</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 299,
      "text": "Vuli (Short Rains)",
      "context": "<p className=\"font-semibold\">Vuli (Short Rains)</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 300,
      "text": "October - December",
      "context": "<p className=\"text-sm text-gray-600\">October - December</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 301,
      "text": "Expected: Above Normal",
      "context": "<p className=\"text-xs mt-1\">Expected: Above Normal</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 305,
      "text": "Kiangazi (Dry)",
      "context": "<p className=\"font-semibold\">Kiangazi (Dry)</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 306,
      "text": "June - September",
      "context": "<p className=\"text-sm text-gray-600\">June - September</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 307,
      "text": "Expected: Drier than usual",
      "context": "<p className=\"text-xs mt-1\">Expected: Drier than usual</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 320,
      "text": "Active Weather Alerts",
      "context": "<CardTitle className=\"text-orange-800\">Active Weather Alerts</CardTitle>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 327,
      "text": "Heavy Rainfall Warning",
      "context": "<p className=\"font-semibold text-orange-800\">Heavy Rainfall Warning</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/WeatherCenter.tsx",
      "line": 331,
      "text": "Valid until: Tomorrow 6:00 PM",
      "context": "<p className=\"text-xs text-orange-600 mt-1\">Valid until: Tomorrow 6:00 PM</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 30,
      "text": "Weather forecasts, climate patterns, seasonal information",
      "context": "description: 'Weather forecasts, climate patterns, seasonal information'",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 37,
      "text": "Planting guides, harvest times, crop varieties, cultivation techniques",
      "context": "description: 'Planting guides, harvest times, crop varieties, cultivation techniques'",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 44,
      "text": "Pest identification, disease prevention, treatment methods",
      "context": "description: 'Pest identification, disease prevention, treatment methods'",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 51,
      "text": "Market prices, selling strategies, buyer information",
      "context": "description: 'Market prices, selling strategies, buyer information'",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 58,
      "text": "General agricultural knowledge, techniques, and resources",
      "context": "description: 'General agricultural knowledge, techniques, and resources'",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 126,
      "text": "Title Required",
      "context": "title: \"Title Required\",",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 127,
      "text": "Please enter a title for your knowledge entry.",
      "context": "description: \"Please enter a title for your knowledge entry.\",",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 142,
      "text": "Knowledge Entry Created",
      "context": "title: \"Knowledge Entry Created\",",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 143,
      "text": "Your new knowledge entry has been created successfully.",
      "context": "description: \"Your new knowledge entry has been created successfully.\",",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 151,
      "text": "Creation Failed",
      "context": "title: \"Creation Failed\",",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 152,
      "text": "Failed to create knowledge entry. Please try again.",
      "context": "description: \"Failed to create knowledge entry. Please try again.\",",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 164,
      "text": "New Knowledge Entry",
      "context": "title=\"New Knowledge Entry\"",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 165,
      "text": "Create agricultural knowledge documentation",
      "context": "subtitle=\"Create agricultural knowledge documentation\"",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 218,
      "text": "Suggested Topics",
      "context": "<CardTitle>Suggested Topics</CardTitle>",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 300,
      "text": "💡 Tips for creating effective knowledge entries",
      "context": "<h3 className=\"font-semibold text-blue-900 mb-2\">💡 Tips for creating effective knowledge entries</h3>",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 302,
      "text": "• Use descriptive titles that clearly indicate the topic",
      "context": "<li>• Use descriptive titles that clearly indicate the topic</li>",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 303,
      "text": "• Upload relevant documents, PDFs, or web links as sources",
      "context": "<li>• Upload relevant documents, PDFs, or web links as sources</li>",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 304,
      "text": "• Ask the AI assistant questions to explore the topic deeply",
      "context": "<li>• Ask the AI assistant questions to explore the topic deeply</li>",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 305,
      "text": "• Organize related information under appropriate categories",
      "context": "<li>• Organize related information under appropriate categories</li>",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/NewKnowledgeEntry.tsx",
      "line": 306,
      "text": "• Update entries as you learn new information",
      "context": "<li>• Update entries as you learn new information</li>",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/KnowledgeEntry.tsx",
      "line": 82,
      "text": "Loading knowledge entry...",
      "context": "<p className=\"text-gray-600\">Loading knowledge entry...</p>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/KnowledgeEntry.tsx",
      "line": 95,
      "text": "Knowledge entry not found",
      "context": "<p className=\"text-red-600 mb-4\">Knowledge entry not found</p>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/KnowledgeEntry.tsx",
      "line": 178,
      "text": "Description",
      "context": "<h3 className=\"text-lg font-semibold mb-2\">Description</h3>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/KnowledgeEntry.tsx",
      "line": 187,
      "text": "Entry Details",
      "context": "<h3 className=\"text-lg font-semibold mb-2\">Entry Details</h3>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/KnowledgeEntry.tsx",
      "line": 190,
      "text": "Created:",
      "context": "<dt className=\"text-sm text-gray-600\">Created:</dt>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/KnowledgeEntry.tsx",
      "line": 196,
      "text": "Last Updated:",
      "context": "<dt className=\"text-sm text-gray-600\">Last Updated:</dt>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/KnowledgeEntry.tsx",
      "line": 202,
      "text": "Sources:",
      "context": "<dt className=\"text-sm text-gray-600\">Sources:</dt>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/KnowledgeEntry.tsx",
      "line": 206,
      "text": "Conversations:",
      "context": "<dt className=\"text-sm text-gray-600\">Conversations:</dt>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/KnowledgeEntry.tsx",
      "line": 216,
      "text": "Suggested Questions",
      "context": "<h3 className=\"text-lg font-semibold mb-2\">Suggested Questions</h3>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/KnowledgeEntry.tsx",
      "line": 243,
      "text": "Notes",
      "context": "<CardTitle className=\"text-lg\">Notes</CardTitle>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/KnowledgeBase.tsx",
      "line": 93,
      "text": "Loading your knowledge base...",
      "context": "<p className=\"text-gray-600\">Loading your knowledge base...</p>",
      "componentName": "KnowledgeBase"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/CropManagement.tsx",
      "line": 37,
      "text": "Search crops...",
      "context": "placeholder=\"Search crops...\"",
      "componentName": "CropManagement"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/CropManagement.tsx",
      "line": 51,
      "text": "Overview",
      "context": "<TabsTrigger value=\"overview\">Overview</TabsTrigger>",
      "componentName": "CropManagement"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/CropManagement.tsx",
      "line": 52,
      "text": "Planting Calendar",
      "context": "<TabsTrigger value=\"calendar\">Planting Calendar</TabsTrigger>",
      "componentName": "CropManagement"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/CropManagement.tsx",
      "line": 53,
      "text": "Crop Guides",
      "context": "<TabsTrigger value=\"guides\">Crop Guides</TabsTrigger>",
      "componentName": "CropManagement"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/CropManagement.tsx",
      "line": 54,
      "text": "Pest & Disease",
      "context": "<TabsTrigger value=\"pests\">Pest & Disease</TabsTrigger>",
      "componentName": "CropManagement"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/AgricultureChatArea.tsx",
      "line": 177,
      "text": "Setting up your consultation session...",
      "context": "<p className=\"text-gray-600\">Setting up your consultation session...</p>",
      "componentName": "AgricultureChatArea"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/AgricultureChatArea.tsx",
      "line": 200,
      "text": "Quick questions to get started:",
      "context": "<p className=\"text-sm text-gray-600 mb-3\">Quick questions to get started:</p>",
      "componentName": "AgricultureChatArea"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/AgricultureChatArea.tsx",
      "line": 287,
      "text": "Thinking...",
      "context": "<span className=\"text-sm text-gray-600\">Thinking...</span>",
      "componentName": "AgricultureChatArea"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/AgriChat.tsx",
      "line": 26,
      "text": "Weather forecasts and climate advice",
      "context": "description: 'Weather forecasts and climate advice'",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/AgriChat.tsx",
      "line": 33,
      "text": "Crop growing and management tips",
      "context": "description: 'Crop growing and management tips'",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/AgriChat.tsx",
      "line": 40,
      "text": "Pest identification and control",
      "context": "description: 'Pest identification and control'",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/AgriChat.tsx",
      "line": 47,
      "text": "Market prices and selling advice",
      "context": "description: 'Market prices and selling advice'",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/AgriChat.tsx",
      "line": 79,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/AgriChat.tsx",
      "line": 80,
      "text": "Failed to create consultation session. Please try again.",
      "context": "description: \"Failed to create consultation session. Please try again.\",",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/AgriChat.tsx",
      "line": 145,
      "text": "Tips for better answers:",
      "context": "<p className=\"font-semibold text-gray-900 mb-1\">Tips for better answers:</p>",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/AgriChat.tsx",
      "line": 147,
      "text": "• Include your crop type and growth stage",
      "context": "<li>• Include your crop type and growth stage</li>",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/AgriChat.tsx",
      "line": 148,
      "text": "• Mention your location for weather-specific advice",
      "context": "<li>• Mention your location for weather-specific advice</li>",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/AgriChat.tsx",
      "line": 149,
      "text": "• Describe symptoms clearly for pest/disease diagnosis",
      "context": "<li>• Describe symptoms clearly for pest/disease diagnosis</li>",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/AgriChat.tsx",
      "line": 150,
      "text": "• Each tab provides specialized advice for that topic",
      "context": "<li>• Each tab provides specialized advice for that topic</li>",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/NotebookGrid.tsx",
      "line": 42,
      "text": "Untitled notebook",
      "context": "title: 'Untitled notebook',",
      "componentName": "NotebookGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/NotebookGrid.tsx",
      "line": 68,
      "text": "Loading notebooks...",
      "context": "<p className=\"text-gray-600\">Loading notebooks...</p>",
      "componentName": "NotebookGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/NotebookCard.tsx",
      "line": 90,
      "text": "Delete this knowledge entry?",
      "context": "<AlertDialogTitle>Delete this knowledge entry?</AlertDialogTitle>",
      "componentName": "NotebookCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/NotebookCard.tsx",
      "line": 96,
      "text": "Cancel",
      "context": "<AlertDialogCancel>Cancel</AlertDialogCancel>",
      "componentName": "NotebookCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 66,
      "text": "0 && selectedCount",
      "context": "const isPartiallySelected = selectedCount > 0 && selectedCount < totalCount;",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 90,
      "text": "Entries Archived",
      "context": "title: \"Entries Archived\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 99,
      "text": "Archive Failed",
      "context": "title: \"Archive Failed\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 100,
      "text": "Failed to archive entries. Please try again.",
      "context": "description: \"Failed to archive entries. Please try again.\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 129,
      "text": "Entries Deleted",
      "context": "title: \"Entries Deleted\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 138,
      "text": "Delete Failed",
      "context": "title: \"Delete Failed\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 139,
      "text": "Failed to delete entries. Please try again.",
      "context": "description: \"Failed to delete entries. Please try again.\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 207,
      "text": "Export Complete",
      "context": "title: \"Export Complete\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 215,
      "text": "Export Failed",
      "context": "title: \"Export Failed\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 216,
      "text": "Failed to export entries. Please try again.",
      "context": "description: \"Failed to export entries. Please try again.\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 253,
      "text": "Entries Duplicated",
      "context": "title: \"Entries Duplicated\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 262,
      "text": "Duplication Failed",
      "context": "title: \"Duplication Failed\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 263,
      "text": "Failed to duplicate entries. Please try again.",
      "context": "description: \"Failed to duplicate entries. Please try again.\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 320,
      "text": "Bulk Actions",
      "context": "<DropdownMenuLabel>Bulk Actions</DropdownMenuLabel>",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 360,
      "text": "Archive Knowledge Entries?",
      "context": "<AlertDialogTitle>Archive Knowledge Entries?</AlertDialogTitle>",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 367,
      "text": "Cancel",
      "context": "<AlertDialogCancel disabled={loading}>Cancel</AlertDialogCancel>",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 383,
      "text": "Delete Knowledge Entries?",
      "context": "<AlertDialogTitle>Delete Knowledge Entries?</AlertDialogTitle>",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/dashboard/BulkActions.tsx",
      "line": 390,
      "text": "Cancel",
      "context": "<AlertDialogCancel disabled={loading}>Cancel</AlertDialogCancel>",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/chat/SourceViewer.tsx",
      "line": 58,
      "text": "Source Excerpt",
      "context": "<h4 className=\"font-medium text-gray-900 mb-2\">Source Excerpt</h4>",
      "componentName": "SourceViewer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/chat/SourceContentViewer.tsx",
      "line": 118,
      "text": "Select a citation to view source content",
      "context": "<p className=\"text-sm\">Select a citation to view source content</p>",
      "componentName": "SourceContentViewer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/chat/SourceContentViewer.tsx",
      "line": 174,
      "text": "= startLine && lineNumber",
      "context": "const isHighlighted = startLine > 0 && lineNumber >= startLine && lineNumber <= endLine;",
      "componentName": "SourceContentViewer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/chat/SourceContentViewer.tsx",
      "line": 223,
      "text": "Source guide",
      "context": "<span>Source guide</span>",
      "componentName": "SourceContentViewer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/chat/SourceContentViewer.tsx",
      "line": 229,
      "text": "Summary",
      "context": "<h4 className=\"font-medium mb-2\">Summary</h4>",
      "componentName": "SourceContentViewer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/ProtectedRoute.tsx",
      "line": 18,
      "text": "Loading your farm...",
      "context": "<p className=\"text-gray-600\">Loading your farm...</p>",
      "componentName": "ProtectedRoute"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 99,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 100,
      "text": "User not authenticated",
      "context": "description: \"User not authenticated\",",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 120,
      "text": "Welcome to AI4AgriWeather!",
      "context": "title: \"Welcome to AI4AgriWeather!\",",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 121,
      "text": "Your profile has been set up successfully.",
      "context": "description: \"Your profile has been set up successfully.\",",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 128,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 129,
      "text": "Failed to save profile information. Please try again.",
      "context": "description: \"Failed to save profile information. Please try again.\",",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 148,
      "text": "Personal Information",
      "context": "<CardTitle>Personal Information</CardTitle>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 156,
      "text": "Full Name *",
      "context": "<Label htmlFor=\"full_name\">Full Name *</Label>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 161,
      "text": "John Doe",
      "context": "placeholder=\"John Doe\"",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 166,
      "text": "Phone Number",
      "context": "<Label htmlFor=\"phone_number\">Phone Number</Label>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 178,
      "text": "Your Role",
      "context": "<Label htmlFor=\"user_role\">Your Role</Label>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 181,
      "text": "Select your role",
      "context": "<SelectValue placeholder=\"Select your role\" />",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 184,
      "text": "Farmer",
      "context": "<SelectItem value=\"farmer\">Farmer</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 185,
      "text": "Extension Officer",
      "context": "<SelectItem value=\"extension_officer\">Extension Officer</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 186,
      "text": "Researcher",
      "context": "<SelectItem value=\"researcher\">Researcher</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 187,
      "text": "Cooperative Member",
      "context": "<SelectItem value=\"cooperative_member\">Cooperative Member</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 188,
      "text": "Agribusiness",
      "context": "<SelectItem value=\"agribusiness\">Agribusiness</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 193,
      "text": "Preferred Language",
      "context": "<Label htmlFor=\"preferred_language\">Preferred Language</Label>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 196,
      "text": "Select language",
      "context": "<SelectValue placeholder=\"Select language\" />",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 199,
      "text": "English",
      "context": "<SelectItem value=\"english\">English</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 200,
      "text": "Kiswahili",
      "context": "<SelectItem value=\"swahili\">Kiswahili</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 201,
      "text": "Both",
      "context": "<SelectItem value=\"both\">Both</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 208,
      "text": "Years of Farming Experience",
      "context": "<Label htmlFor=\"farming_experience\">Years of Farming Experience</Label>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 231,
      "text": "Farm Location & Size",
      "context": "<CardTitle>Farm Location & Size</CardTitle>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 238,
      "text": "Farm Name",
      "context": "<Label htmlFor=\"farm_name\">Farm Name</Label>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 243,
      "text": "Green Valley Farm",
      "context": "placeholder=\"Green Valley Farm\"",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 249,
      "text": "Farm Location/Village",
      "context": "<Label htmlFor=\"farm_location\">Farm Location/Village</Label>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 254,
      "text": "Village/Ward name",
      "context": "placeholder=\"Village/Ward name\"",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 258,
      "text": "Region",
      "context": "<Label htmlFor=\"region\">Region</Label>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 261,
      "text": "Select region",
      "context": "<SelectValue placeholder=\"Select region\" />",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 276,
      "text": "Farm Size",
      "context": "<Label htmlFor=\"farm_size\">Farm Size</Label>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 288,
      "text": "Unit",
      "context": "<Label htmlFor=\"farm_size_unit\">Unit</Label>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 294,
      "text": "Hectares",
      "context": "<SelectItem value=\"hectares\">Hectares</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 295,
      "text": "Acres",
      "context": "<SelectItem value=\"acres\">Acres</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 296,
      "text": "Square Meters",
      "context": "<SelectItem value=\"square_meters\">Square Meters</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 303,
      "text": "Type of Farming",
      "context": "<Label htmlFor=\"farming_type\">Type of Farming</Label>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 306,
      "text": "Select farming type",
      "context": "<SelectValue placeholder=\"Select farming type\" />",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 309,
      "text": "Subsistence Farming",
      "context": "<SelectItem value=\"subsistence\">Subsistence Farming</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 310,
      "text": "Commercial Farming",
      "context": "<SelectItem value=\"commercial\">Commercial Farming</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 311,
      "text": "Mixed Farming",
      "context": "<SelectItem value=\"mixed\">Mixed Farming</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 312,
      "text": "Organic Farming",
      "context": "<SelectItem value=\"organic\">Organic Farming</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 313,
      "text": "Livestock",
      "context": "<SelectItem value=\"livestock\">Livestock</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 314,
      "text": "Aquaculture",
      "context": "<SelectItem value=\"aquaculture\">Aquaculture</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 315,
      "text": "Horticulture",
      "context": "<SelectItem value=\"horticulture\">Horticulture</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 316,
      "text": "Agroforestry",
      "context": "<SelectItem value=\"agroforestry\">Agroforestry</SelectItem>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 333,
      "text": "Primary Crops",
      "context": "<CardTitle>Primary Crops</CardTitle>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 365,
      "text": "Selected Crops:",
      "context": "<Label>Selected Crops:</Label>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 388,
      "text": "Almost Done!",
      "context": "<CardTitle>Almost Done!</CardTitle>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 396,
      "text": "Full Name:",
      "context": "<span className=\"font-medium\">Full Name:</span>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 400,
      "text": "Role:",
      "context": "<span className=\"font-medium\">Role:</span>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 404,
      "text": "Farm:",
      "context": "<span className=\"font-medium\">Farm:</span>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 408,
      "text": "Location:",
      "context": "<span className=\"font-medium\">Location:</span>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 412,
      "text": "Farm Size:",
      "context": "<span className=\"font-medium\">Farm Size:</span>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 416,
      "text": "Experience:",
      "context": "<span className=\"font-medium\">Experience:</span>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 420,
      "text": "Primary Crops:",
      "context": "<span className=\"font-medium\">Primary Crops:</span>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 428,
      "text": "What's Next?",
      "context": "<span className=\"font-medium text-green-800\">What's Next?</span>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 431,
      "text": "• Access personalized agricultural knowledge entries",
      "context": "<li>• Access personalized agricultural knowledge entries</li>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 432,
      "text": "• Get weather forecasts for your region",
      "context": "<li>• Get weather forecasts for your region</li>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 433,
      "text": "• Receive crop-specific farming advice",
      "context": "<li>• Receive crop-specific farming advice</li>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 434,
      "text": "• Connect with other farmers in your area",
      "context": "<li>• Connect with other farmers in your area</li>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 458,
      "text": "Welcome to AI4AgriWeather",
      "context": "<h1 className=\"text-2xl font-bold text-gray-900\">Welcome to AI4AgriWeather</h1>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 478,
      "text": "Previous",
      "context": "<span>Previous</span>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 490,
      "text": "Next",
      "context": "<span>Next</span>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 502,
      "text": "Setting up...",
      "context": "<span>Setting up...</span>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/auth/AgriOnboarding.tsx",
      "line": 507,
      "text": "Complete Setup",
      "context": "<span>Complete Setup</span>",
      "componentName": "AgriOnboarding"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/YouTubeUrlInput.tsx",
      "line": 46,
      "text": "Add YouTube Video",
      "context": "<span>Add YouTube Video</span>",
      "componentName": "YouTubeUrlInput"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/YouTubeUrlInput.tsx",
      "line": 52,
      "text": "YouTube URL",
      "context": "<Label htmlFor=\"youtube-url\">YouTube URL</Label>",
      "componentName": "YouTubeUrlInput"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/WebsiteUrlInput.tsx",
      "line": 46,
      "text": "Add Website",
      "context": "<span>Add Website</span>",
      "componentName": "WebsiteUrlInput"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/WebsiteUrlInput.tsx",
      "line": 52,
      "text": "Website URL",
      "context": "<Label htmlFor=\"website-url\">Website URL</Label>",
      "componentName": "WebsiteUrlInput"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/StudioSidebar.tsx",
      "line": 173,
      "text": "Refreshing URL...",
      "context": "text: \"Refreshing URL...\",",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/StudioSidebar.tsx",
      "line": 174,
      "text": "Updating audio access",
      "context": "description: \"Updating audio access\"",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/StudioSidebar.tsx",
      "line": 181,
      "text": "Generating audio...",
      "context": "text: \"Generating audio...\",",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/StudioSidebar.tsx",
      "line": 182,
      "text": "This may take a few minutes",
      "context": "description: \"This may take a few minutes\"",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/StudioSidebar.tsx",
      "line": 187,
      "text": "Generation failed",
      "context": "text: \"Generation failed\",",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/StudioSidebar.tsx",
      "line": 188,
      "text": "Please try again",
      "context": "description: \"Please try again\"",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/StudioSidebar.tsx",
      "line": 193,
      "text": "Ready to play",
      "context": "text: \"Ready to play\",",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/StudioSidebar.tsx",
      "line": 194,
      "text": "Audio overview available",
      "context": "description: \"Audio overview available\"",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/StudioSidebar.tsx",
      "line": 230,
      "text": "Studio",
      "context": "<h2 className=\"text-lg font-medium text-gray-900 mb-4\">Studio</h2>",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/StudioSidebar.tsx",
      "line": 235,
      "text": "Audio Overview",
      "context": "<h3 className=\"font-medium text-gray-900\">Audio Overview</h3>",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/StudioSidebar.tsx",
      "line": 240,
      "text": "Deep Dive Conversation",
      "context": "title=\"Deep Dive Conversation\"",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/StudioSidebar.tsx",
      "line": 256,
      "text": "Deep Dive conversation",
      "context": "<h4 className=\"font-medium text-gray-900\">Deep Dive conversation</h4>",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/StudioSidebar.tsx",
      "line": 257,
      "text": "Two hosts",
      "context": "<p className=\"text-sm text-gray-600\">Two hosts</p>",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/StudioSidebar.tsx",
      "line": 274,
      "text": "Audio unavailable",
      "context": "<p className=\"text-sm text-red-600\">Audio unavailable</p>",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/StudioSidebar.tsx",
      "line": 296,
      "text": "Notes",
      "context": "<h3 className=\"font-medium text-gray-900\">Notes</h3>",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/StudioSidebar.tsx",
      "line": 311,
      "text": "Loading notes...",
      "context": "<p className=\"text-sm text-gray-600\">Loading notes...</p>",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/StudioSidebar.tsx",
      "line": 339,
      "text": "Saved notes will appear here",
      "context": "<h3 className=\"text-lg font-medium text-gray-900 mb-2\">Saved notes will appear here</h3>",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/SourcesSidebar.tsx",
      "line": 232,
      "text": "Sources",
      "context": "<h2 className=\"text-lg font-medium text-gray-900\">Sources</h2>",
      "componentName": "SourcesSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/SourcesSidebar.tsx",
      "line": 247,
      "text": "Loading sources...",
      "context": "<p className=\"text-sm text-gray-600\">Loading sources...</p>",
      "componentName": "SourcesSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/SourcesSidebar.tsx",
      "line": 288,
      "text": "Saved sources will appear here",
      "context": "<h3 className=\"text-lg font-medium text-gray-900 mb-2\">Saved sources will appear here</h3>",
      "componentName": "SourcesSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/SourcesSidebar.tsx",
      "line": 289,
      "text": "Click Add source above to add PDFs, text, or audio files.",
      "context": "<p className=\"text-sm text-gray-600 mb-4\">Click Add source above to add PDFs, text, or audio files.</p>",
      "componentName": "SourcesSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/SourcesSidebar.tsx",
      "line": 317,
      "text": "Cancel",
      "context": "<AlertDialogCancel>Cancel</AlertDialogCancel>",
      "componentName": "SourcesSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/RenameSourceDialog.tsx",
      "line": 61,
      "text": "Source Name *",
      "context": "<Label htmlFor=\"source-name\">Source Name *</Label>",
      "componentName": "RenameSourceDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/RenameSourceDialog.tsx",
      "line": 66,
      "text": "Enter source name",
      "context": "placeholder=\"Enter source name\"",
      "componentName": "RenameSourceDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/PasteTextDialog.tsx",
      "line": 58,
      "text": "Add Text Source",
      "context": "<span>Add Text Source</span>",
      "componentName": "PasteTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/PasteTextDialog.tsx",
      "line": 64,
      "text": "Title (optional)",
      "context": "<Label htmlFor=\"text-title\">Title (optional)</Label>",
      "componentName": "PasteTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/PasteTextDialog.tsx",
      "line": 67,
      "text": "Enter a title for this text...",
      "context": "placeholder=\"Enter a title for this text...\"",
      "componentName": "PasteTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/PasteTextDialog.tsx",
      "line": 75,
      "text": "Content",
      "context": "<Label htmlFor=\"text-content\">Content</Label>",
      "componentName": "PasteTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/PasteTextDialog.tsx",
      "line": 88,
      "text": "Paste or type your text here...",
      "context": "placeholder=\"Paste or type your text here...\"",
      "componentName": "PasteTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/NoteEditor.tsx",
      "line": 178,
      "text": "Note title",
      "context": "placeholder=\"Note title\"",
      "componentName": "NoteEditor"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/NoteEditor.tsx",
      "line": 200,
      "text": "Write your note here...",
      "context": "placeholder=\"Write your note here...\"",
      "componentName": "NoteEditor"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/MultipleWebsiteUrlsDialog.tsx",
      "line": 65,
      "text": "Add Multiple Website URLs",
      "context": "<span>Add Multiple Website URLs</span>",
      "componentName": "MultipleWebsiteUrlsDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/MultipleWebsiteUrlsDialog.tsx",
      "line": 71,
      "text": "Website URLs",
      "context": "<Label className=\"text-sm font-medium\">Website URLs</Label>",
      "componentName": "MultipleWebsiteUrlsDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/MobileNotebookTabs.tsx",
      "line": 44,
      "text": "Sources",
      "context": "<span className=\"hidden sm:inline\">Sources</span>",
      "componentName": "MobileNotebookTabs"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/MobileNotebookTabs.tsx",
      "line": 51,
      "text": "Chat",
      "context": "<span className=\"hidden sm:inline\">Chat</span>",
      "componentName": "MobileNotebookTabs"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/MobileNotebookTabs.tsx",
      "line": 58,
      "text": "Notes",
      "context": "<span className=\"hidden sm:inline\">Notes</span>",
      "componentName": "MobileNotebookTabs"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/CopiedTextDialog.tsx",
      "line": 91,
      "text": "Add Copied Text",
      "context": "<span>Add Copied Text</span>",
      "componentName": "CopiedTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/CopiedTextDialog.tsx",
      "line": 108,
      "text": "Enter a title for this content...",
      "context": "placeholder=\"Enter a title for this content...\"",
      "componentName": "CopiedTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/CopiedTextDialog.tsx",
      "line": 126,
      "text": "Paste from Clipboard",
      "context": "<span>Paste from Clipboard</span>",
      "componentName": "CopiedTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/CopiedTextDialog.tsx",
      "line": 131,
      "text": "Your copied content will appear here...",
      "context": "placeholder=\"Your copied content will appear here...\"",
      "componentName": "CopiedTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/CopiedTextDialog.tsx",
      "line": 139,
      "text": "Large content may take longer to process",
      "context": "<span className=\"text-amber-600\">Large content may take longer to process</span>",
      "componentName": "CopiedTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/ChatArea.tsx",
      "line": 215,
      "text": "AI Assistant",
      "context": "<h2 className=\"text-lg font-medium text-gray-900\">AI Assistant</h2>",
      "componentName": "ChatArea"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/ChatArea.tsx",
      "line": 243,
      "text": "AI is analyzing your source and generating a title and description...",
      "context": "<p>AI is analyzing your source and generating a title and description...</p>",
      "componentName": "ChatArea"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/ChatArea.tsx",
      "line": 254,
      "text": "Get started:",
      "context": "<strong>Get started:</strong> You can ask me anything about farming and agriculture!",
      "componentName": "ChatArea"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/ChatArea.tsx",
      "line": 265,
      "text": "0 || pendingUserMessage || showAiLoading) &&",
      "context": "{(messages.length > 0 || pendingUserMessage || showAiLoading) && <div className=\"mb-6 space-y-4\">",
      "componentName": "ChatArea"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/ChatArea.tsx",
      "line": 340,
      "text": "AI4AgriWeather can be inaccurate; please double-check its responses.",
      "context": "<p className=\"text-center text-sm text-gray-500\">AI4AgriWeather can be inaccurate; please double-check its responses.</p>",
      "componentName": "ChatArea"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AudioPlayer.tsx",
      "line": 214,
      "text": "Download Started",
      "context": "title: \"Download Started\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AudioPlayer.tsx",
      "line": 215,
      "text": "Your audio file is being downloaded.",
      "context": "description: \"Your audio file is being downloaded.\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AudioPlayer.tsx",
      "line": 220,
      "text": "Download Failed",
      "context": "title: \"Download Failed\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AudioPlayer.tsx",
      "line": 221,
      "text": "Failed to download the audio file. Please try again.",
      "context": "description: \"Failed to download the audio file. Please try again.\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AudioPlayer.tsx",
      "line": 232,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AudioPlayer.tsx",
      "line": 233,
      "text": "Cannot delete audio - notebook ID not found",
      "context": "description: \"Cannot delete audio - notebook ID not found\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AudioPlayer.tsx",
      "line": 291,
      "text": "Audio Deleted",
      "context": "title: \"Audio Deleted\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AudioPlayer.tsx",
      "line": 292,
      "text": "The audio overview and associated files have been successfully deleted.",
      "context": "description: \"The audio overview and associated files have been successfully deleted.\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AudioPlayer.tsx",
      "line": 301,
      "text": "Delete Failed",
      "context": "title: \"Delete Failed\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AudioPlayer.tsx",
      "line": 302,
      "text": "Failed to delete the audio overview. Please try again.",
      "context": "description: \"Failed to delete the audio overview. Please try again.\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AudioPlayer.tsx",
      "line": 354,
      "text": "Refreshing audio access...",
      "context": "<span className=\"text-sm text-blue-600\">Refreshing audio access...</span>",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 169,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 170,
      "text": "No notebook selected",
      "context": "description: \"No notebook selected\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 237,
      "text": "Files Added",
      "context": "title: \"Files Added\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 256,
      "text": "Processing Issues",
      "context": "title: \"Processing Issues\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 266,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 267,
      "text": "Failed to add files. Please try again.",
      "context": "description: \"Failed to add files. Please try again.\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 311,
      "text": "Success",
      "context": "title: \"Success\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 312,
      "text": "Text has been added and sent for processing",
      "context": "description: \"Text has been added and sent for processing\"",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 328,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 329,
      "text": "Failed to add text source",
      "context": "description: \"Failed to add text source\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 408,
      "text": "Success",
      "context": "title: \"Success\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 429,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 430,
      "text": "Failed to add websites",
      "context": "description: \"Failed to add websites\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 453,
      "text": "InsightsLM",
      "context": "<DialogTitle className=\"text-xl font-medium\">InsightsLM</DialogTitle>",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 460,
      "text": "Add sources",
      "context": "<h2 className=\"text-xl font-medium mb-2\">Add sources</h2>",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 461,
      "text": "Sources let InsightsLM base its responses on the information that matters most to you.",
      "context": "<p className=\"text-gray-600 text-sm mb-1\">Sources let InsightsLM base its responses on the information that matters most to you.</p>",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 527,
      "text": "Link - Website",
      "context": "<span className=\"font-medium\">Link - Website</span>",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 528,
      "text": "Multiple URLs at once",
      "context": "<span className=\"text-sm text-gray-500\">Multiple URLs at once</span>",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 538,
      "text": "Paste Text - Copied Text",
      "context": "<span className=\"font-medium\">Paste Text - Copied Text</span>",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/notebook/AddSourcesDialog.tsx",
      "line": 539,
      "text": "Add copied content",
      "context": "<span className=\"text-sm text-gray-500\">Add copied content</span>",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/services/core/apiClient.ts",
      "line": 45,
      "text": "= ApiResponse",
      "context": "export type ApiResult<T> = ApiResponse<T> | ApiErrorResponse;",
      "componentName": "apiClient"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/services/core/apiClient.ts",
      "line": 51,
      "text": "Promise",
      "context": "apiCall: () => Promise<{ data: T; error: any }>",
      "componentName": "apiClient"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/sonner.tsx",
      "line": 17,
      "text": "group-[.toast]:text-muted-foreground",
      "context": "description: \"group-[.toast]:text-muted-foreground\",",
      "componentName": "sonner"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/sidebar.tsx",
      "line": 280,
      "text": "Toggle Sidebar",
      "context": "<span className=\"sr-only\">Toggle Sidebar</span>",
      "componentName": "sidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/sidebar.tsx",
      "line": 296,
      "text": "Toggle Sidebar",
      "context": "aria-label=\"Toggle Sidebar\"",
      "componentName": "sidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/sidebar.tsx",
      "line": 299,
      "text": "Toggle Sidebar",
      "context": "title=\"Toggle Sidebar\"",
      "componentName": "sidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/sheet.tsx",
      "line": 68,
      "text": "Close",
      "context": "<span className=\"sr-only\">Close</span>",
      "componentName": "sheet"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/pagination.tsx",
      "line": 67,
      "text": "Go to previous page",
      "context": "aria-label=\"Go to previous page\"",
      "componentName": "pagination"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/pagination.tsx",
      "line": 73,
      "text": "Previous",
      "context": "<span>Previous</span>",
      "componentName": "pagination"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/pagination.tsx",
      "line": 83,
      "text": "Go to next page",
      "context": "aria-label=\"Go to next page\"",
      "componentName": "pagination"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/pagination.tsx",
      "line": 88,
      "text": "Next",
      "context": "<span>Next</span>",
      "componentName": "pagination"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/pagination.tsx",
      "line": 104,
      "text": "More pages",
      "context": "<span className=\"sr-only\">More pages</span>",
      "componentName": "pagination"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/form.tsx",
      "line": 20,
      "text": "= FieldPath",
      "context": "TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>",
      "componentName": "form"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/form.tsx",
      "line": 31,
      "text": "= FieldPath",
      "context": "TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>",
      "componentName": "form"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/dialog.tsx",
      "line": 47,
      "text": "Close",
      "context": "<span className=\"sr-only\">Close</span>",
      "componentName": "dialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/carousel.tsx",
      "line": 218,
      "text": "Previous slide",
      "context": "<span className=\"sr-only\">Previous slide</span>",
      "componentName": "carousel"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/carousel.tsx",
      "line": 247,
      "text": "Next slide",
      "context": "<span className=\"sr-only\">Next slide</span>",
      "componentName": "carousel"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/calendar.tsx",
      "line": 24,
      "text": "text-sm font-medium",
      "context": "caption_label: \"text-sm font-medium\",",
      "componentName": "calendar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/breadcrumb.tsx",
      "line": 102,
      "text": "More",
      "context": "<span className=\"sr-only\">More</span>",
      "componentName": "breadcrumb"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/shared/components/ui/alert.tsx",
      "line": 24,
      "text": "& VariantProps",
      "context": "React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>",
      "componentName": "alert"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 87,
      "text": "Current Conditions",
      "context": "<h2 className=\"text-3xl font-bold mb-2\">Current Conditions</h2>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 91,
      "text": "28°C",
      "context": "<p className=\"text-5xl font-bold\">28°C</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 92,
      "text": "Mostly Sunny",
      "context": "<p className=\"text-lg\">Mostly Sunny</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 103,
      "text": "Humidity",
      "context": "<span className=\"text-sm\">Humidity</span>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 110,
      "text": "Wind Speed",
      "context": "<span className=\"text-sm\">Wind Speed</span>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 112,
      "text": "12 km/h",
      "context": "<p className=\"text-xl font-semibold\">12 km/h</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 117,
      "text": "Visibility",
      "context": "<span className=\"text-sm\">Visibility</span>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 119,
      "text": "10 km",
      "context": "<p className=\"text-xl font-semibold\">10 km</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 124,
      "text": "Pressure",
      "context": "<span className=\"text-sm\">Pressure</span>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 126,
      "text": "1013 mb",
      "context": "<p className=\"text-xl font-semibold\">1013 mb</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 136,
      "text": "Agricultural Indices",
      "context": "<CardTitle>Agricultural Indices</CardTitle>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 144,
      "text": "Evapotranspiration",
      "context": "<p className=\"text-sm text-gray-600 mb-1\">Evapotranspiration</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 148,
      "text": "Moderate water loss",
      "context": "<p className=\"text-xs text-gray-500 mt-1\">Moderate water loss</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 151,
      "text": "Soil Moisture",
      "context": "<p className=\"text-sm text-gray-600 mb-1\">Soil Moisture</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 155,
      "text": "Good for planting",
      "context": "<p className=\"text-xs text-gray-500 mt-1\">Good for planting</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 158,
      "text": "UV Index",
      "context": "<p className=\"text-sm text-gray-600 mb-1\">UV Index</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 162,
      "text": "Very High",
      "context": "<p className=\"text-xs text-gray-500 mt-1\">Very High</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 165,
      "text": "Growing Degree Days",
      "context": "<p className=\"text-sm text-gray-600 mb-1\">Growing Degree Days</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 169,
      "text": "Accumulated today",
      "context": "<p className=\"text-xs text-gray-500 mt-1\">Accumulated today</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 175,
      "text": "Irrigation Recommendation",
      "context": "<p className=\"font-semibold mb-1\">Irrigation Recommendation</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 176,
      "text": "Based on current evapotranspiration and soil moisture, irrigate 20-25mm in the next 2 days for optimal crop growth.",
      "context": "<p>Based on current evapotranspiration and soil moisture, irrigate 20-25mm in the next 2 days for optimal crop growth.</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 185,
      "text": "24-Hour",
      "context": "<TabsTrigger value=\"hourly\">24-Hour</TabsTrigger>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 186,
      "text": "7-Day",
      "context": "<TabsTrigger value=\"weekly\">7-Day</TabsTrigger>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 187,
      "text": "Seasonal",
      "context": "<TabsTrigger value=\"seasonal\">Seasonal</TabsTrigger>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 193,
      "text": "24-Hour Forecast",
      "context": "<CardTitle>24-Hour Forecast</CardTitle>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 213,
      "text": "Temperature (°C)",
      "context": "name=\"Temperature (°C)\"",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 219,
      "text": "Rainfall (mm)",
      "context": "name=\"Rainfall (mm)\"",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 231,
      "text": "7-Day Forecast",
      "context": "<CardTitle>7-Day Forecast</CardTitle>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 274,
      "text": "Seasonal Outlook",
      "context": "<CardTitle>Seasonal Outlook</CardTitle>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 293,
      "text": "Masika (Long Rains)",
      "context": "<p className=\"font-semibold\">Masika (Long Rains)</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 294,
      "text": "March - May",
      "context": "<p className=\"text-sm text-gray-600\">March - May</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 295,
      "text": "Expected: Normal",
      "context": "<p className=\"text-xs mt-1\">Expected: Normal</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 299,
      "text": "Vuli (Short Rains)",
      "context": "<p className=\"font-semibold\">Vuli (Short Rains)</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 300,
      "text": "October - December",
      "context": "<p className=\"text-sm text-gray-600\">October - December</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 301,
      "text": "Expected: Above Normal",
      "context": "<p className=\"text-xs mt-1\">Expected: Above Normal</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 305,
      "text": "Kiangazi (Dry)",
      "context": "<p className=\"font-semibold\">Kiangazi (Dry)</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 306,
      "text": "June - September",
      "context": "<p className=\"text-sm text-gray-600\">June - September</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 307,
      "text": "Expected: Drier than usual",
      "context": "<p className=\"text-xs mt-1\">Expected: Drier than usual</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 320,
      "text": "Active Weather Alerts",
      "context": "<CardTitle className=\"text-orange-800\">Active Weather Alerts</CardTitle>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 327,
      "text": "Heavy Rainfall Warning",
      "context": "<p className=\"font-semibold text-orange-800\">Heavy Rainfall Warning</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/weather/components/WeatherCenter.tsx",
      "line": 331,
      "text": "Valid until: Tomorrow 6:00 PM",
      "context": "<p className=\"text-xs text-orange-600 mt-1\">Valid until: Tomorrow 6:00 PM</p>",
      "componentName": "WeatherCenter"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/services/documentProcessing.ts",
      "line": 176,
      "text": "Unknown error",
      "context": "processingError: error instanceof Error ? error.message : 'Unknown error',",
      "componentName": "documentProcessing"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/services/documentProcessing.ts",
      "line": 239,
      "text": "Processing failed",
      "context": "processingError: error instanceof Error ? error.message : 'Processing failed',",
      "componentName": "documentProcessing"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/services/documentProcessing.ts",
      "line": 249,
      "text": "Failed to start processing",
      "context": "processingError: error instanceof Error ? error.message : 'Failed to start processing',",
      "componentName": "documentProcessing"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useSourceUpdate.tsx",
      "line": 35,
      "text": "Source renamed",
      "context": "title: \"Source renamed\",",
      "componentName": "useSourceUpdate"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useSourceUpdate.tsx",
      "line": 36,
      "text": "The source has been successfully renamed.",
      "context": "description: \"The source has been successfully renamed.\",",
      "componentName": "useSourceUpdate"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useSourceUpdate.tsx",
      "line": 42,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "useSourceUpdate"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useSourceUpdate.tsx",
      "line": 43,
      "text": "Failed to rename the source. Please try again.",
      "context": "description: \"Failed to rename the source. Please try again.\",",
      "componentName": "useSourceUpdate"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useSourceDelete.tsx",
      "line": 72,
      "text": "Source deleted",
      "context": "title: \"Source deleted\",",
      "componentName": "useSourceDelete"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useSourceDelete.tsx",
      "line": 91,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "useSourceDelete"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useNotebookUpdate.tsx",
      "line": 45,
      "text": "Notebook updated",
      "context": "title: \"Notebook updated\",",
      "componentName": "useNotebookUpdate"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useNotebookUpdate.tsx",
      "line": 46,
      "text": "The notebook has been updated successfully.",
      "context": "description: \"The notebook has been updated successfully.\",",
      "componentName": "useNotebookUpdate"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useNotebookUpdate.tsx",
      "line": 69,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "useNotebookUpdate"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useNotebookGeneration.tsx",
      "line": 53,
      "text": "Content Generated",
      "context": "title: \"Content Generated\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useNotebookGeneration.tsx",
      "line": 54,
      "text": "Notebook title and description have been generated successfully.",
      "context": "description: \"Notebook title and description have been generated successfully.\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useNotebookGeneration.tsx",
      "line": 76,
      "text": "Generation Failed",
      "context": "title: \"Generation Failed\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useNotebookGeneration.tsx",
      "line": 120,
      "text": "Audio Generated",
      "context": "title: \"Audio Generated\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useNotebookGeneration.tsx",
      "line": 121,
      "text": "Audio overview has been generated successfully.",
      "context": "description: \"Audio overview has been generated successfully.\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useNotebookGeneration.tsx",
      "line": 138,
      "text": "Audio Generation Failed",
      "context": "title: \"Audio Generation Failed\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useNotebookGeneration.tsx",
      "line": 184,
      "text": "Audio URL Refreshed",
      "context": "title: \"Audio URL Refreshed\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useNotebookGeneration.tsx",
      "line": 185,
      "text": "Audio URL has been refreshed successfully.",
      "context": "description: \"Audio URL has been refreshed successfully.\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useNotebookGeneration.tsx",
      "line": 194,
      "text": "Refresh Failed",
      "context": "title: \"Refresh Failed\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useNotebookGeneration.tsx",
      "line": 195,
      "text": "Failed to refresh audio URL. Please try again.",
      "context": "description: \"Failed to refresh audio URL. Please try again.\",",
      "componentName": "useNotebookGeneration"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useNotebookDelete.tsx",
      "line": 40,
      "text": "Notebook deleted",
      "context": "title: \"Notebook deleted\",",
      "componentName": "useNotebookDelete"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useNotebookDelete.tsx",
      "line": 64,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "useNotebookDelete"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useFileUpload.tsx",
      "line": 40,
      "text": "Upload Error",
      "context": "title: \"Upload Error\",",
      "componentName": "useFileUpload"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useDocumentProcessing.tsx",
      "line": 42,
      "text": "Processing Error",
      "context": "title: \"Processing Error\",",
      "componentName": "useDocumentProcessing"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useDocumentProcessing.tsx",
      "line": 43,
      "text": "Failed to start document processing. Please try again.",
      "context": "description: \"Failed to start document processing. Please try again.\",",
      "componentName": "useDocumentProcessing"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useAudioOverview.tsx",
      "line": 38,
      "text": "Audio Overview Ready!",
      "context": "title: \"Audio Overview Ready!\",",
      "componentName": "useAudioOverview"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useAudioOverview.tsx",
      "line": 39,
      "text": "Your deep dive conversation is ready to play!",
      "context": "description: \"Your deep dive conversation is ready to play!\",",
      "componentName": "useAudioOverview"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useAudioOverview.tsx",
      "line": 47,
      "text": "Generation Failed",
      "context": "title: \"Generation Failed\",",
      "componentName": "useAudioOverview"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useAudioOverview.tsx",
      "line": 48,
      "text": "Failed to generate audio overview. Please try again.",
      "context": "description: \"Failed to generate audio overview. Please try again.\",",
      "componentName": "useAudioOverview"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useAudioOverview.tsx",
      "line": 87,
      "text": "Failed to Start Generation",
      "context": "title: \"Failed to Start Generation\",",
      "componentName": "useAudioOverview"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useAudioOverview.tsx",
      "line": 125,
      "text": "Failed to Refresh URL",
      "context": "title: \"Failed to Refresh URL\",",
      "componentName": "useAudioOverview"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/hooks/useAudioOverview.tsx",
      "line": 126,
      "text": "Unable to refresh the audio URL. Please try again.",
      "context": "description: \"Unable to refresh the audio URL. Please try again.\",",
      "componentName": "useAudioOverview"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/hooks/useDashboardData.ts",
      "line": 35,
      "text": "Heavy rainfall expected in 2 days. Prepare drainage.",
      "context": "message: 'Heavy rainfall expected in 2 days. Prepare drainage.',",
      "componentName": "useDashboardData"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/hooks/useDashboardData.ts",
      "line": 40,
      "text": "Optimal planting window for rice starts next week.",
      "context": "message: 'Optimal planting window for rice starts next week.',",
      "componentName": "useDashboardData"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/YouTubeUrlInput.tsx",
      "line": 46,
      "text": "Add YouTube Video",
      "context": "<span>Add YouTube Video</span>",
      "componentName": "YouTubeUrlInput"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/YouTubeUrlInput.tsx",
      "line": 52,
      "text": "YouTube URL",
      "context": "<Label htmlFor=\"youtube-url\">YouTube URL</Label>",
      "componentName": "YouTubeUrlInput"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/WebsiteUrlInput.tsx",
      "line": 46,
      "text": "Add Website",
      "context": "<span>Add Website</span>",
      "componentName": "WebsiteUrlInput"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/WebsiteUrlInput.tsx",
      "line": 52,
      "text": "Website URL",
      "context": "<Label htmlFor=\"website-url\">Website URL</Label>",
      "componentName": "WebsiteUrlInput"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/StudioSidebar.tsx",
      "line": 173,
      "text": "Refreshing URL...",
      "context": "text: \"Refreshing URL...\",",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/StudioSidebar.tsx",
      "line": 174,
      "text": "Updating audio access",
      "context": "description: \"Updating audio access\"",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/StudioSidebar.tsx",
      "line": 181,
      "text": "Generating audio...",
      "context": "text: \"Generating audio...\",",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/StudioSidebar.tsx",
      "line": 182,
      "text": "This may take a few minutes",
      "context": "description: \"This may take a few minutes\"",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/StudioSidebar.tsx",
      "line": 187,
      "text": "Generation failed",
      "context": "text: \"Generation failed\",",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/StudioSidebar.tsx",
      "line": 188,
      "text": "Please try again",
      "context": "description: \"Please try again\"",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/StudioSidebar.tsx",
      "line": 193,
      "text": "Ready to play",
      "context": "text: \"Ready to play\",",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/StudioSidebar.tsx",
      "line": 194,
      "text": "Audio overview available",
      "context": "description: \"Audio overview available\"",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/StudioSidebar.tsx",
      "line": 230,
      "text": "Studio",
      "context": "<h2 className=\"text-lg font-medium text-gray-900 mb-4\">Studio</h2>",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/StudioSidebar.tsx",
      "line": 235,
      "text": "Audio Overview",
      "context": "<h3 className=\"font-medium text-gray-900\">Audio Overview</h3>",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/StudioSidebar.tsx",
      "line": 240,
      "text": "Deep Dive Conversation",
      "context": "title=\"Deep Dive Conversation\"",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/StudioSidebar.tsx",
      "line": 256,
      "text": "Deep Dive conversation",
      "context": "<h4 className=\"font-medium text-gray-900\">Deep Dive conversation</h4>",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/StudioSidebar.tsx",
      "line": 257,
      "text": "Two hosts",
      "context": "<p className=\"text-sm text-gray-600\">Two hosts</p>",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/StudioSidebar.tsx",
      "line": 274,
      "text": "Audio unavailable",
      "context": "<p className=\"text-sm text-red-600\">Audio unavailable</p>",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/StudioSidebar.tsx",
      "line": 296,
      "text": "Notes",
      "context": "<h3 className=\"font-medium text-gray-900\">Notes</h3>",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/StudioSidebar.tsx",
      "line": 311,
      "text": "Loading notes...",
      "context": "<p className=\"text-sm text-gray-600\">Loading notes...</p>",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/StudioSidebar.tsx",
      "line": 339,
      "text": "Saved notes will appear here",
      "context": "<h3 className=\"text-lg font-medium text-gray-900 mb-2\">Saved notes will appear here</h3>",
      "componentName": "StudioSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/SourcesSidebar.tsx",
      "line": 232,
      "text": "Sources",
      "context": "<h2 className=\"text-lg font-medium text-gray-900\">Sources</h2>",
      "componentName": "SourcesSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/SourcesSidebar.tsx",
      "line": 247,
      "text": "Loading sources...",
      "context": "<p className=\"text-sm text-gray-600\">Loading sources...</p>",
      "componentName": "SourcesSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/SourcesSidebar.tsx",
      "line": 288,
      "text": "Saved sources will appear here",
      "context": "<h3 className=\"text-lg font-medium text-gray-900 mb-2\">Saved sources will appear here</h3>",
      "componentName": "SourcesSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/SourcesSidebar.tsx",
      "line": 289,
      "text": "Click Add source above to add PDFs, text, or audio files.",
      "context": "<p className=\"text-sm text-gray-600 mb-4\">Click Add source above to add PDFs, text, or audio files.</p>",
      "componentName": "SourcesSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/SourcesSidebar.tsx",
      "line": 317,
      "text": "Cancel",
      "context": "<AlertDialogCancel>Cancel</AlertDialogCancel>",
      "componentName": "SourcesSidebar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/RenameSourceDialog.tsx",
      "line": 61,
      "text": "Source Name *",
      "context": "<Label htmlFor=\"source-name\">Source Name *</Label>",
      "componentName": "RenameSourceDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/RenameSourceDialog.tsx",
      "line": 66,
      "text": "Enter source name",
      "context": "placeholder=\"Enter source name\"",
      "componentName": "RenameSourceDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/PasteTextDialog.tsx",
      "line": 58,
      "text": "Add Text Source",
      "context": "<span>Add Text Source</span>",
      "componentName": "PasteTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/PasteTextDialog.tsx",
      "line": 64,
      "text": "Title (optional)",
      "context": "<Label htmlFor=\"text-title\">Title (optional)</Label>",
      "componentName": "PasteTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/PasteTextDialog.tsx",
      "line": 67,
      "text": "Enter a title for this text...",
      "context": "placeholder=\"Enter a title for this text...\"",
      "componentName": "PasteTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/PasteTextDialog.tsx",
      "line": 75,
      "text": "Content",
      "context": "<Label htmlFor=\"text-content\">Content</Label>",
      "componentName": "PasteTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/PasteTextDialog.tsx",
      "line": 88,
      "text": "Paste or type your text here...",
      "context": "placeholder=\"Paste or type your text here...\"",
      "componentName": "PasteTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/NoteEditor.tsx",
      "line": 178,
      "text": "Note title",
      "context": "placeholder=\"Note title\"",
      "componentName": "NoteEditor"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/NoteEditor.tsx",
      "line": 200,
      "text": "Write your note here...",
      "context": "placeholder=\"Write your note here...\"",
      "componentName": "NoteEditor"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/MultipleWebsiteUrlsDialog.tsx",
      "line": 65,
      "text": "Add Multiple Website URLs",
      "context": "<span>Add Multiple Website URLs</span>",
      "componentName": "MultipleWebsiteUrlsDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/MultipleWebsiteUrlsDialog.tsx",
      "line": 71,
      "text": "Website URLs",
      "context": "<Label className=\"text-sm font-medium\">Website URLs</Label>",
      "componentName": "MultipleWebsiteUrlsDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/MobileNotebookTabs.tsx",
      "line": 44,
      "text": "Sources",
      "context": "<span className=\"hidden sm:inline\">Sources</span>",
      "componentName": "MobileNotebookTabs"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/MobileNotebookTabs.tsx",
      "line": 51,
      "text": "Chat",
      "context": "<span className=\"hidden sm:inline\">Chat</span>",
      "componentName": "MobileNotebookTabs"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/MobileNotebookTabs.tsx",
      "line": 58,
      "text": "Notes",
      "context": "<span className=\"hidden sm:inline\">Notes</span>",
      "componentName": "MobileNotebookTabs"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/CopiedTextDialog.tsx",
      "line": 91,
      "text": "Add Copied Text",
      "context": "<span>Add Copied Text</span>",
      "componentName": "CopiedTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/CopiedTextDialog.tsx",
      "line": 108,
      "text": "Enter a title for this content...",
      "context": "placeholder=\"Enter a title for this content...\"",
      "componentName": "CopiedTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/CopiedTextDialog.tsx",
      "line": 126,
      "text": "Paste from Clipboard",
      "context": "<span>Paste from Clipboard</span>",
      "componentName": "CopiedTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/CopiedTextDialog.tsx",
      "line": 131,
      "text": "Your copied content will appear here...",
      "context": "placeholder=\"Your copied content will appear here...\"",
      "componentName": "CopiedTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/CopiedTextDialog.tsx",
      "line": 139,
      "text": "Large content may take longer to process",
      "context": "<span className=\"text-amber-600\">Large content may take longer to process</span>",
      "componentName": "CopiedTextDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/ChatArea.tsx",
      "line": 215,
      "text": "AI Assistant",
      "context": "<h2 className=\"text-lg font-medium text-gray-900\">AI Assistant</h2>",
      "componentName": "ChatArea"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/ChatArea.tsx",
      "line": 243,
      "text": "AI is analyzing your source and generating a title and description...",
      "context": "<p>AI is analyzing your source and generating a title and description...</p>",
      "componentName": "ChatArea"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/ChatArea.tsx",
      "line": 254,
      "text": "Get started:",
      "context": "<strong>Get started:</strong> You can ask me anything about farming and agriculture!",
      "componentName": "ChatArea"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/ChatArea.tsx",
      "line": 265,
      "text": "0 || pendingUserMessage || showAiLoading) &&",
      "context": "{(messages.length > 0 || pendingUserMessage || showAiLoading) && <div className=\"mb-6 space-y-4\">",
      "componentName": "ChatArea"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/ChatArea.tsx",
      "line": 340,
      "text": "AI4AgriWeather can be inaccurate; please double-check its responses.",
      "context": "<p className=\"text-center text-sm text-gray-500\">AI4AgriWeather can be inaccurate; please double-check its responses.</p>",
      "componentName": "ChatArea"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AudioPlayer.tsx",
      "line": 214,
      "text": "Download Started",
      "context": "title: \"Download Started\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AudioPlayer.tsx",
      "line": 215,
      "text": "Your audio file is being downloaded.",
      "context": "description: \"Your audio file is being downloaded.\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AudioPlayer.tsx",
      "line": 220,
      "text": "Download Failed",
      "context": "title: \"Download Failed\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AudioPlayer.tsx",
      "line": 221,
      "text": "Failed to download the audio file. Please try again.",
      "context": "description: \"Failed to download the audio file. Please try again.\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AudioPlayer.tsx",
      "line": 232,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AudioPlayer.tsx",
      "line": 233,
      "text": "Cannot delete audio - notebook ID not found",
      "context": "description: \"Cannot delete audio - notebook ID not found\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AudioPlayer.tsx",
      "line": 291,
      "text": "Audio Deleted",
      "context": "title: \"Audio Deleted\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AudioPlayer.tsx",
      "line": 292,
      "text": "The audio overview and associated files have been successfully deleted.",
      "context": "description: \"The audio overview and associated files have been successfully deleted.\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AudioPlayer.tsx",
      "line": 301,
      "text": "Delete Failed",
      "context": "title: \"Delete Failed\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AudioPlayer.tsx",
      "line": 302,
      "text": "Failed to delete the audio overview. Please try again.",
      "context": "description: \"Failed to delete the audio overview. Please try again.\",",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AudioPlayer.tsx",
      "line": 354,
      "text": "Refreshing audio access...",
      "context": "<span className=\"text-sm text-blue-600\">Refreshing audio access...</span>",
      "componentName": "AudioPlayer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 169,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 170,
      "text": "No notebook selected",
      "context": "description: \"No notebook selected\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 237,
      "text": "Files Added",
      "context": "title: \"Files Added\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 256,
      "text": "Processing Issues",
      "context": "title: \"Processing Issues\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 266,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 267,
      "text": "Failed to add files. Please try again.",
      "context": "description: \"Failed to add files. Please try again.\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 311,
      "text": "Success",
      "context": "title: \"Success\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 312,
      "text": "Text has been added and sent for processing",
      "context": "description: \"Text has been added and sent for processing\"",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 328,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 329,
      "text": "Failed to add text source",
      "context": "description: \"Failed to add text source\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 408,
      "text": "Success",
      "context": "title: \"Success\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 429,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 430,
      "text": "Failed to add websites",
      "context": "description: \"Failed to add websites\",",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 453,
      "text": "InsightsLM",
      "context": "<DialogTitle className=\"text-xl font-medium\">InsightsLM</DialogTitle>",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 460,
      "text": "Add sources",
      "context": "<h2 className=\"text-xl font-medium mb-2\">Add sources</h2>",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 461,
      "text": "Sources let InsightsLM base its responses on the information that matters most to you.",
      "context": "<p className=\"text-gray-600 text-sm mb-1\">Sources let InsightsLM base its responses on the information that matters most to you.</p>",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 527,
      "text": "Link - Website",
      "context": "<span className=\"font-medium\">Link - Website</span>",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 528,
      "text": "Multiple URLs at once",
      "context": "<span className=\"text-sm text-gray-500\">Multiple URLs at once</span>",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 538,
      "text": "Paste Text - Copied Text",
      "context": "<span className=\"font-medium\">Paste Text - Copied Text</span>",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/notebook/components/AddSourcesDialog.tsx",
      "line": 539,
      "text": "Add copied content",
      "context": "<span className=\"text-sm text-gray-500\">Add copied content</span>",
      "componentName": "AddSourcesDialog"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/PestDiseaseManager.tsx",
      "line": 26,
      "text": "Common Pests & Diseases",
      "context": "<CardTitle>Common Pests & Diseases</CardTitle>",
      "componentName": "PestDiseaseManager"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropSummaryStats.tsx",
      "line": 21,
      "text": "Total Area",
      "context": "<p className=\"text-sm text-gray-600\">Total Area</p>",
      "componentName": "CropSummaryStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropSummaryStats.tsx",
      "line": 33,
      "text": "Active Crops",
      "context": "<p className=\"text-sm text-gray-600\">Active Crops</p>",
      "componentName": "CropSummaryStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropSummaryStats.tsx",
      "line": 45,
      "text": "Expected Yield",
      "context": "<p className=\"text-sm text-gray-600\">Expected Yield</p>",
      "componentName": "CropSummaryStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropSummaryStats.tsx",
      "line": 57,
      "text": "Health Status",
      "context": "<p className=\"text-sm text-gray-600\">Health Status</p>",
      "componentName": "CropSummaryStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropPlantingCalendar.tsx",
      "line": 10,
      "text": "Planting Calendar",
      "context": "<CardTitle>Planting Calendar</CardTitle>",
      "componentName": "CropPlantingCalendar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropPlantingCalendar.tsx",
      "line": 29,
      "text": "Maize",
      "context": "<span className=\"text-xs font-medium\">Maize</span>",
      "componentName": "CropPlantingCalendar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropPlantingCalendar.tsx",
      "line": 36,
      "text": "Rice",
      "context": "<span className=\"text-xs font-medium\">Rice</span>",
      "componentName": "CropPlantingCalendar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropPlantingCalendar.tsx",
      "line": 43,
      "text": "Coffee Harvest",
      "context": "<span className=\"text-xs font-medium\">Coffee Harvest</span>",
      "componentName": "CropPlantingCalendar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropPlantingCalendar.tsx",
      "line": 50,
      "text": "Tip:",
      "context": "<strong>Tip:</strong> The calendar shows general planting windows.",
      "componentName": "CropPlantingCalendar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropManagement.tsx",
      "line": 37,
      "text": "Search crops...",
      "context": "placeholder=\"Search crops...\"",
      "componentName": "CropManagement"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropManagement.tsx",
      "line": 51,
      "text": "Overview",
      "context": "<TabsTrigger value=\"overview\">Overview</TabsTrigger>",
      "componentName": "CropManagement"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropManagement.tsx",
      "line": 52,
      "text": "Planting Calendar",
      "context": "<TabsTrigger value=\"calendar\">Planting Calendar</TabsTrigger>",
      "componentName": "CropManagement"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropManagement.tsx",
      "line": 53,
      "text": "Crop Guides",
      "context": "<TabsTrigger value=\"guides\">Crop Guides</TabsTrigger>",
      "componentName": "CropManagement"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropManagement.tsx",
      "line": 54,
      "text": "Pest & Disease",
      "context": "<TabsTrigger value=\"pests\">Pest & Disease</TabsTrigger>",
      "componentName": "CropManagement"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropGuidesList.tsx",
      "line": 21,
      "text": "Season:",
      "context": "<dt className=\"text-sm text-gray-600\">Season:</dt>",
      "componentName": "CropGuidesList"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropGuidesList.tsx",
      "line": 25,
      "text": "Water Needs:",
      "context": "<dt className=\"text-sm text-gray-600\">Water Needs:</dt>",
      "componentName": "CropGuidesList"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropGuidesList.tsx",
      "line": 29,
      "text": "Soil Type:",
      "context": "<dt className=\"text-sm text-gray-600\">Soil Type:</dt>",
      "componentName": "CropGuidesList"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropGuidesList.tsx",
      "line": 33,
      "text": "Spacing:",
      "context": "<dt className=\"text-sm text-gray-600\">Spacing:</dt>",
      "componentName": "CropGuidesList"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropGuidesList.tsx",
      "line": 37,
      "text": "Fertilizer:",
      "context": "<dt className=\"text-sm text-gray-600 mb-1\">Fertilizer:</dt>",
      "componentName": "CropGuidesList"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropCard.tsx",
      "line": 68,
      "text": "Area",
      "context": "<span className=\"text-gray-600\">Area</span>",
      "componentName": "CropCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropCard.tsx",
      "line": 72,
      "text": "Stage",
      "context": "<span className=\"text-gray-600\">Stage</span>",
      "componentName": "CropCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropCard.tsx",
      "line": 80,
      "text": "Progress",
      "context": "<span className=\"text-gray-600\">Progress</span>",
      "componentName": "CropCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/components/CropCard.tsx",
      "line": 91,
      "text": "Next Action:",
      "context": "<p className=\"text-sm text-gray-600 mb-1\">Next Action:</p>",
      "componentName": "CropCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/hooks/useCropData.ts",
      "line": 79,
      "text": "Look for ragged holes in leaves and larvae in whorls. Apply recommended pesticides early morning or late evening.",
      "context": "description: 'Look for ragged holes in leaves and larvae in whorls. Apply recommended pesticides early morning or late evening.',",
      "componentName": "useCropData"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/crops/hooks/useCropData.ts",
      "line": 88,
      "text": "Dark sunken lesions on berries. Prevent with copper-based fungicides before and during flowering.",
      "context": "description: 'Dark sunken lesions on berries. Prevent with copper-based fungicides before and during flowering.',",
      "componentName": "useCropData"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/RecentKnowledgeSection.tsx",
      "line": 40,
      "text": "Recent Knowledge Entries",
      "context": "<span>Recent Knowledge Entries</span>",
      "componentName": "RecentKnowledgeSection"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/RecentKnowledgeSection.tsx",
      "line": 53,
      "text": "Loading...",
      "context": "<p className=\"text-sm text-gray-500\">Loading...</p>",
      "componentName": "RecentKnowledgeSection"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/RecentKnowledgeSection.tsx",
      "line": 96,
      "text": "No knowledge entries yet",
      "context": "<p className=\"text-sm text-gray-600 mb-3\">No knowledge entries yet</p>",
      "componentName": "RecentKnowledgeSection"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/RecentActivitiesCard.tsx",
      "line": 12,
      "text": "Recent Activities",
      "context": "<CardTitle>Recent Activities</CardTitle>",
      "componentName": "RecentActivitiesCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/RecentActivitiesCard.tsx",
      "line": 21,
      "text": "Yesterday",
      "context": "<span className=\"text-gray-600\">Yesterday</span>",
      "componentName": "RecentActivitiesCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/RecentActivitiesCard.tsx",
      "line": 22,
      "text": "Applied fertilizer to maize field",
      "context": "<span>Applied fertilizer to maize field</span>",
      "componentName": "RecentActivitiesCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/RecentActivitiesCard.tsx",
      "line": 26,
      "text": "3 days ago",
      "context": "<span className=\"text-gray-600\">3 days ago</span>",
      "componentName": "RecentActivitiesCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/RecentActivitiesCard.tsx",
      "line": 27,
      "text": "Received weather advisory for upcoming rain",
      "context": "<span>Received weather advisory for upcoming rain</span>",
      "componentName": "RecentActivitiesCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/RecentActivitiesCard.tsx",
      "line": 31,
      "text": "1 week ago",
      "context": "<span className=\"text-gray-600\">1 week ago</span>",
      "componentName": "RecentActivitiesCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/RecentActivitiesCard.tsx",
      "line": 32,
      "text": "Harvested 2 hectares of rice",
      "context": "<span>Harvested 2 hectares of rice</span>",
      "componentName": "RecentActivitiesCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/RecentActivitiesCard.tsx",
      "line": 37,
      "text": "Today",
      "context": "<span className=\"text-gray-600\">Today</span>",
      "componentName": "RecentActivitiesCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/QuickActionsGrid.tsx",
      "line": 16,
      "text": "Quick Actions",
      "context": "<CardTitle>Quick Actions</CardTitle>",
      "componentName": "QuickActionsGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/QuickActionsGrid.tsx",
      "line": 26,
      "text": "Ask About Weather",
      "context": "<span>Ask About Weather</span>",
      "componentName": "QuickActionsGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/QuickActionsGrid.tsx",
      "line": 32,
      "text": "Knowledge Base",
      "context": "<span>Knowledge Base</span>",
      "componentName": "QuickActionsGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/QuickActionsGrid.tsx",
      "line": 38,
      "text": "Planting Calendar",
      "context": "<span>Planting Calendar</span>",
      "componentName": "QuickActionsGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/QuickActionsGrid.tsx",
      "line": 44,
      "text": "Market Prices",
      "context": "<span>Market Prices</span>",
      "componentName": "QuickActionsGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/NotebookGrid.tsx",
      "line": 42,
      "text": "Untitled notebook",
      "context": "title: 'Untitled notebook',",
      "componentName": "NotebookGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/NotebookGrid.tsx",
      "line": 68,
      "text": "Loading notebooks...",
      "context": "<p className=\"text-gray-600\">Loading notebooks...</p>",
      "componentName": "NotebookGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/NotebookCard.tsx",
      "line": 90,
      "text": "Delete this knowledge entry?",
      "context": "<AlertDialogTitle>Delete this knowledge entry?</AlertDialogTitle>",
      "componentName": "NotebookCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/NotebookCard.tsx",
      "line": 96,
      "text": "Cancel",
      "context": "<AlertDialogCancel>Cancel</AlertDialogCancel>",
      "componentName": "NotebookCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/EmptyDashboard.tsx",
      "line": 55,
      "text": "New Knowledge Entry",
      "context": "title: 'New Knowledge Entry',",
      "componentName": "EmptyDashboard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/EmptyDashboard.tsx",
      "line": 73,
      "text": "Start Your Agricultural Knowledge Journey",
      "context": "<h2 className=\"text-3xl font-medium text-gray-900 mb-4\">Start Your Agricultural Knowledge Journey</h2>",
      "componentName": "EmptyDashboard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/EmptyDashboard.tsx",
      "line": 85,
      "text": "Weather & Climate",
      "context": "<h3 className=\"text-lg font-medium text-gray-900 mb-2\">Weather & Climate</h3>",
      "componentName": "EmptyDashboard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/EmptyDashboard.tsx",
      "line": 86,
      "text": "Track weather patterns and climate impacts on your crops",
      "context": "<p className=\"text-gray-600 text-sm\">Track weather patterns and climate impacts on your crops</p>",
      "componentName": "EmptyDashboard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/EmptyDashboard.tsx",
      "line": 93,
      "text": "Crop Management",
      "context": "<h3 className=\"text-lg font-medium text-gray-900 mb-2\">Crop Management</h3>",
      "componentName": "EmptyDashboard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/EmptyDashboard.tsx",
      "line": 94,
      "text": "Plan planting, fertilization, and harvest activities",
      "context": "<p className=\"text-gray-600 text-sm\">Plan planting, fertilization, and harvest activities</p>",
      "componentName": "EmptyDashboard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/EmptyDashboard.tsx",
      "line": 101,
      "text": "Pest & Disease",
      "context": "<h3 className=\"text-lg font-medium text-gray-900 mb-2\">Pest & Disease</h3>",
      "componentName": "EmptyDashboard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/EmptyDashboard.tsx",
      "line": 102,
      "text": "Identify and manage agricultural pests and diseases",
      "context": "<p className=\"text-gray-600 text-sm\">Identify and manage agricultural pests and diseases</p>",
      "componentName": "EmptyDashboard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/EmptyDashboard.tsx",
      "line": 109,
      "text": "Market Information",
      "context": "<h3 className=\"text-lg font-medium text-gray-900 mb-2\">Market Information</h3>",
      "componentName": "EmptyDashboard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/EmptyDashboard.tsx",
      "line": 110,
      "text": "Track prices and market trends for your products",
      "context": "<p className=\"text-gray-600 text-sm\">Track prices and market trends for your products</p>",
      "componentName": "EmptyDashboard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/EmptyDashboard.tsx",
      "line": 120,
      "text": "Agricultural Documents",
      "context": "<h3 className=\"text-lg font-medium text-gray-900 mb-2\">Agricultural Documents</h3>",
      "componentName": "EmptyDashboard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/EmptyDashboard.tsx",
      "line": 121,
      "text": "Research papers, farming guides, and technical reports",
      "context": "<p className=\"text-gray-600\">Research papers, farming guides, and technical reports</p>",
      "componentName": "EmptyDashboard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/EmptyDashboard.tsx",
      "line": 128,
      "text": "Online Resources",
      "context": "<h3 className=\"text-lg font-medium text-gray-900 mb-2\">Online Resources</h3>",
      "componentName": "EmptyDashboard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/EmptyDashboard.tsx",
      "line": 129,
      "text": "Agricultural websites, extension services, and market data",
      "context": "<p className=\"text-gray-600\">Agricultural websites, extension services, and market data</p>",
      "componentName": "EmptyDashboard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/EmptyDashboard.tsx",
      "line": 136,
      "text": "Multimedia Content",
      "context": "<h3 className=\"text-lg font-medium text-gray-900 mb-2\">Multimedia Content</h3>",
      "componentName": "EmptyDashboard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/EmptyDashboard.tsx",
      "line": 137,
      "text": "Training videos, audio guides, and visual references",
      "context": "<p className=\"text-gray-600\">Training videos, audio guides, and visual references</p>",
      "componentName": "EmptyDashboard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/EmptyDashboard.tsx",
      "line": 152,
      "text": "Choose an Agricultural Template",
      "context": "<DialogTitle>Choose an Agricultural Template</DialogTitle>",
      "componentName": "EmptyDashboard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/DashboardHeader.tsx",
      "line": 49,
      "text": "AI4AgriWeather",
      "context": "<h1 className=\"text-xl font-medium text-gray-900\">AI4AgriWeather</h1>",
      "componentName": "DashboardHeader"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/DashboardHeader.tsx",
      "line": 50,
      "text": "Smart Farm Assistant",
      "context": "<p className=\"text-sm text-gray-500\">Smart Farm Assistant</p>",
      "componentName": "DashboardHeader"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 66,
      "text": "0 && selectedCount",
      "context": "const isPartiallySelected = selectedCount > 0 && selectedCount < totalCount;",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 90,
      "text": "Entries Archived",
      "context": "title: \"Entries Archived\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 99,
      "text": "Archive Failed",
      "context": "title: \"Archive Failed\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 100,
      "text": "Failed to archive entries. Please try again.",
      "context": "description: \"Failed to archive entries. Please try again.\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 129,
      "text": "Entries Deleted",
      "context": "title: \"Entries Deleted\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 138,
      "text": "Delete Failed",
      "context": "title: \"Delete Failed\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 139,
      "text": "Failed to delete entries. Please try again.",
      "context": "description: \"Failed to delete entries. Please try again.\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 207,
      "text": "Export Complete",
      "context": "title: \"Export Complete\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 215,
      "text": "Export Failed",
      "context": "title: \"Export Failed\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 216,
      "text": "Failed to export entries. Please try again.",
      "context": "description: \"Failed to export entries. Please try again.\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 253,
      "text": "Entries Duplicated",
      "context": "title: \"Entries Duplicated\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 262,
      "text": "Duplication Failed",
      "context": "title: \"Duplication Failed\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 263,
      "text": "Failed to duplicate entries. Please try again.",
      "context": "description: \"Failed to duplicate entries. Please try again.\",",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 320,
      "text": "Bulk Actions",
      "context": "<DropdownMenuLabel>Bulk Actions</DropdownMenuLabel>",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 360,
      "text": "Archive Knowledge Entries?",
      "context": "<AlertDialogTitle>Archive Knowledge Entries?</AlertDialogTitle>",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 367,
      "text": "Cancel",
      "context": "<AlertDialogCancel disabled={loading}>Cancel</AlertDialogCancel>",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 383,
      "text": "Delete Knowledge Entries?",
      "context": "<AlertDialogTitle>Delete Knowledge Entries?</AlertDialogTitle>",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/BulkActions.tsx",
      "line": 390,
      "text": "Cancel",
      "context": "<AlertDialogCancel disabled={loading}>Cancel</AlertDialogCancel>",
      "componentName": "BulkActions"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriKnowledgeGrid.tsx",
      "line": 124,
      "text": "New Knowledge Entry",
      "context": "title: 'New Knowledge Entry',",
      "componentName": "AgriKnowledgeGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriKnowledgeGrid.tsx",
      "line": 186,
      "text": "Loading knowledge entries...",
      "context": "<p className=\"text-gray-600\">Loading knowledge entries...</p>",
      "componentName": "AgriKnowledgeGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriKnowledgeGrid.tsx",
      "line": 209,
      "text": "Search knowledge entries...",
      "context": "placeholder=\"Search knowledge entries...\"",
      "componentName": "AgriKnowledgeGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriKnowledgeGrid.tsx",
      "line": 219,
      "text": "Filter by category",
      "context": "<SelectValue placeholder=\"Filter by category\" />",
      "componentName": "AgriKnowledgeGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriKnowledgeGrid.tsx",
      "line": 274,
      "text": "Create Knowledge Entry",
      "context": "<DropdownMenuLabel>Create Knowledge Entry</DropdownMenuLabel>",
      "componentName": "AgriKnowledgeGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriKnowledgeGrid.tsx",
      "line": 282,
      "text": "Blank Entry",
      "context": "<p className=\"font-medium\">Blank Entry</p>",
      "componentName": "AgriKnowledgeGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriKnowledgeGrid.tsx",
      "line": 283,
      "text": "Start from scratch",
      "context": "<p className=\"text-sm text-gray-500\">Start from scratch</p>",
      "componentName": "AgriKnowledgeGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriKnowledgeGrid.tsx",
      "line": 293,
      "text": "From Template",
      "context": "<p className=\"font-medium\">From Template</p>",
      "componentName": "AgriKnowledgeGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriKnowledgeGrid.tsx",
      "line": 294,
      "text": "Use agricultural templates",
      "context": "<p className=\"text-sm text-gray-500\">Use agricultural templates</p>",
      "componentName": "AgriKnowledgeGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriKnowledgeGrid.tsx",
      "line": 366,
      "text": "No matching entries found",
      "context": "<h3 className=\"text-lg font-medium text-gray-900 mb-2\">No matching entries found</h3>",
      "componentName": "AgriKnowledgeGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriKnowledgeGrid.tsx",
      "line": 383,
      "text": "No knowledge entries yet",
      "context": "<h3 className=\"text-lg font-medium text-gray-900 mb-2\">No knowledge entries yet</h3>",
      "componentName": "AgriKnowledgeGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriKnowledgeGrid.tsx",
      "line": 400,
      "text": "Choose a Knowledge Entry Template",
      "context": "<DialogTitle>Choose a Knowledge Entry Template</DialogTitle>",
      "componentName": "AgriKnowledgeGrid"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 113,
      "text": "Primary crops:",
      "context": "<span className=\"text-sm font-medium text-green-700\">Primary crops:</span>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 134,
      "text": "Knowledge Entries",
      "context": "<CardTitle className=\"text-sm font-medium\">Knowledge Entries</CardTitle>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 147,
      "text": "Recent Activity",
      "context": "<CardTitle className=\"text-sm font-medium\">Recent Activity</CardTitle>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 160,
      "text": "Crop-Specific",
      "context": "<CardTitle className=\"text-sm font-medium\">Crop-Specific</CardTitle>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 173,
      "text": "Weather Insights",
      "context": "<CardTitle className=\"text-sm font-medium\">Weather Insights</CardTitle>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 191,
      "text": "Knowledge Categories",
      "context": "<span>Knowledge Categories</span>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 227,
      "text": "Quick Actions",
      "context": "<span>Quick Actions</span>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 239,
      "text": "Weather Forecast",
      "context": "<p className=\"font-medium text-blue-900\">Weather Forecast</p>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 240,
      "text": "Track weekly weather patterns",
      "context": "<p className=\"text-sm text-blue-600\">Track weekly weather patterns</p>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 243,
      "text": "Guide",
      "context": "<Badge variant=\"secondary\">Guide</Badge>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 250,
      "text": "Crop Planning",
      "context": "<p className=\"font-medium text-green-900\">Crop Planning</p>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 251,
      "text": "Plan planting schedules",
      "context": "<p className=\"text-sm text-green-600\">Plan planting schedules</p>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 254,
      "text": "Template",
      "context": "<Badge variant=\"secondary\">Template</Badge>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 261,
      "text": "Pest Control",
      "context": "<p className=\"font-medium text-red-900\">Pest Control</p>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 262,
      "text": "Identify and manage pests",
      "context": "<p className=\"text-sm text-red-600\">Identify and manage pests</p>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 265,
      "text": "Reference",
      "context": "<Badge variant=\"secondary\">Reference</Badge>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 272,
      "text": "Market Prices",
      "context": "<p className=\"font-medium text-purple-900\">Market Prices</p>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 273,
      "text": "Track crop market trends",
      "context": "<p className=\"text-sm text-purple-600\">Track crop market trends</p>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/dashboard/components/AgriDashboardStats.tsx",
      "line": 276,
      "text": "Analysis",
      "context": "<Badge variant=\"secondary\">Analysis</Badge>",
      "componentName": "AgriDashboardStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/services/authService.ts",
      "line": 16,
      "text": "Signed out",
      "context": "title: \"Signed out\",",
      "componentName": "authService"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/services/authService.ts",
      "line": 17,
      "text": "You have been successfully signed out.",
      "context": "description: \"You have been successfully signed out.\"",
      "componentName": "authService"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/services/authService.ts",
      "line": 28,
      "text": "Signed out",
      "context": "title: \"Signed out\",",
      "componentName": "authService"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/services/authService.ts",
      "line": 29,
      "text": "You have been signed out locally.",
      "context": "description: \"You have been signed out locally.\",",
      "componentName": "authService"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/components/ProtectedRoute.tsx",
      "line": 18,
      "text": "Loading your farm...",
      "context": "<p className=\"text-gray-600\">Loading your farm...</p>",
      "componentName": "ProtectedRoute"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/components/AuthForm.tsx",
      "line": 47,
      "text": "Account created!",
      "context": "title: \"Account created!\",",
      "componentName": "AuthForm"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/components/AuthForm.tsx",
      "line": 48,
      "text": "Please check your email to confirm your account.",
      "context": "description: \"Please check your email to confirm your account.\",",
      "componentName": "AuthForm"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/components/AuthForm.tsx",
      "line": 68,
      "text": "Welcome to AI4AgriWeather!",
      "context": "title: \"Welcome to AI4AgriWeather!\",",
      "componentName": "AuthForm"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/components/AuthForm.tsx",
      "line": 69,
      "text": "You have successfully signed in.",
      "context": "description: \"You have successfully signed in.\",",
      "componentName": "AuthForm"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/components/AuthForm.tsx",
      "line": 95,
      "text": "AI4AgriWeather",
      "context": "<CardTitle className=\"text-2xl text-center\">AI4AgriWeather</CardTitle>",
      "componentName": "AuthForm"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/components/AuthForm.tsx",
      "line": 112,
      "text": "Email",
      "context": "<Label htmlFor=\"email\">Email</Label>",
      "componentName": "AuthForm"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/components/AuthForm.tsx",
      "line": 125,
      "text": "Password",
      "context": "<Label htmlFor=\"password\">Password</Label>",
      "componentName": "AuthForm"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/components/AuthForm.tsx",
      "line": 141,
      "text": "Get access to:",
      "context": "<p className=\"text-sm text-gray-600 font-medium\">Get access to:</p>",
      "componentName": "AuthForm"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/components/AuthForm.tsx",
      "line": 145,
      "text": "Real-time weather forecasts",
      "context": "<span>Real-time weather forecasts</span>",
      "componentName": "AuthForm"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/components/AuthForm.tsx",
      "line": 149,
      "text": "AI-powered crop management",
      "context": "<span>AI-powered crop management</span>",
      "componentName": "AuthForm"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/components/AuthForm.tsx",
      "line": 153,
      "text": "Personalized farming advice",
      "context": "<span>Personalized farming advice</span>",
      "componentName": "AuthForm"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/hooks/AuthContext.tsx",
      "line": 17,
      "text": "Promise",
      "context": "signOut: () => Promise<void>;",
      "componentName": "AuthContext"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/hooks/AuthContext.tsx",
      "line": 18,
      "text": "Promise",
      "context": "refreshProfile: () => Promise<void>;",
      "componentName": "AuthContext"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/hooks/AuthContext.tsx",
      "line": 113,
      "text": "Profile fetch error",
      "context": "setError(err instanceof Error ? err.message : 'Profile fetch error');",
      "componentName": "AuthContext"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/authentication/hooks/AuthContext.tsx",
      "line": 233,
      "text": "Authentication error",
      "context": "setError(err instanceof Error ? err.message : 'Authentication error');",
      "componentName": "AuthContext"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 30,
      "text": "Weather forecasts, climate patterns, seasonal information",
      "context": "description: 'Weather forecasts, climate patterns, seasonal information'",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 37,
      "text": "Planting guides, harvest times, crop varieties, cultivation techniques",
      "context": "description: 'Planting guides, harvest times, crop varieties, cultivation techniques'",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 44,
      "text": "Pest identification, disease prevention, treatment methods",
      "context": "description: 'Pest identification, disease prevention, treatment methods'",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 51,
      "text": "Market prices, selling strategies, buyer information",
      "context": "description: 'Market prices, selling strategies, buyer information'",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 58,
      "text": "General agricultural knowledge, techniques, and resources",
      "context": "description: 'General agricultural knowledge, techniques, and resources'",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 126,
      "text": "Title Required",
      "context": "title: \"Title Required\",",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 127,
      "text": "Please enter a title for your knowledge entry.",
      "context": "description: \"Please enter a title for your knowledge entry.\",",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 142,
      "text": "Knowledge Entry Created",
      "context": "title: \"Knowledge Entry Created\",",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 143,
      "text": "Your new knowledge entry has been created successfully.",
      "context": "description: \"Your new knowledge entry has been created successfully.\",",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 151,
      "text": "Creation Failed",
      "context": "title: \"Creation Failed\",",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 152,
      "text": "Failed to create knowledge entry. Please try again.",
      "context": "description: \"Failed to create knowledge entry. Please try again.\",",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 163,
      "text": "New Knowledge Entry",
      "context": "title=\"New Knowledge Entry\"",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 164,
      "text": "Create agricultural knowledge documentation",
      "context": "subtitle=\"Create agricultural knowledge documentation\"",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 217,
      "text": "Suggested Topics",
      "context": "<CardTitle>Suggested Topics</CardTitle>",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 299,
      "text": "💡 Tips for creating effective knowledge entries",
      "context": "<h3 className=\"font-semibold text-blue-900 mb-2\">💡 Tips for creating effective knowledge entries</h3>",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 301,
      "text": "• Use descriptive titles that clearly indicate the topic",
      "context": "<li>• Use descriptive titles that clearly indicate the topic</li>",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 302,
      "text": "• Upload relevant documents, PDFs, or web links as sources",
      "context": "<li>• Upload relevant documents, PDFs, or web links as sources</li>",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 303,
      "text": "• Ask the AI assistant questions to explore the topic deeply",
      "context": "<li>• Ask the AI assistant questions to explore the topic deeply</li>",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 304,
      "text": "• Organize related information under appropriate categories",
      "context": "<li>• Organize related information under appropriate categories</li>",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/NewKnowledgeEntry.tsx",
      "line": 305,
      "text": "• Update entries as you learn new information",
      "context": "<li>• Update entries as you learn new information</li>",
      "componentName": "NewKnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/KnowledgeEntry.tsx",
      "line": 82,
      "text": "Loading knowledge entry...",
      "context": "<p className=\"text-gray-600\">Loading knowledge entry...</p>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/KnowledgeEntry.tsx",
      "line": 95,
      "text": "Knowledge entry not found",
      "context": "<p className=\"text-red-600 mb-4\">Knowledge entry not found</p>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/KnowledgeEntry.tsx",
      "line": 177,
      "text": "Description",
      "context": "<h3 className=\"text-lg font-semibold mb-2\">Description</h3>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/KnowledgeEntry.tsx",
      "line": 186,
      "text": "Entry Details",
      "context": "<h3 className=\"text-lg font-semibold mb-2\">Entry Details</h3>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/KnowledgeEntry.tsx",
      "line": 189,
      "text": "Created:",
      "context": "<dt className=\"text-sm text-gray-600\">Created:</dt>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/KnowledgeEntry.tsx",
      "line": 195,
      "text": "Last Updated:",
      "context": "<dt className=\"text-sm text-gray-600\">Last Updated:</dt>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/KnowledgeEntry.tsx",
      "line": 201,
      "text": "Sources:",
      "context": "<dt className=\"text-sm text-gray-600\">Sources:</dt>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/KnowledgeEntry.tsx",
      "line": 205,
      "text": "Conversations:",
      "context": "<dt className=\"text-sm text-gray-600\">Conversations:</dt>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/KnowledgeEntry.tsx",
      "line": 215,
      "text": "Suggested Questions",
      "context": "<h3 className=\"text-lg font-semibold mb-2\">Suggested Questions</h3>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/KnowledgeEntry.tsx",
      "line": 242,
      "text": "Notes",
      "context": "<CardTitle className=\"text-lg\">Notes</CardTitle>",
      "componentName": "KnowledgeEntry"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/knowledge/components/KnowledgeBase.tsx",
      "line": 93,
      "text": "Loading your knowledge base...",
      "context": "<p className=\"text-gray-600\">Loading your knowledge base...</p>",
      "componentName": "KnowledgeBase"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/hooks/useChatMessages.tsx",
      "line": 310,
      "text": "Chat history cleared",
      "context": "title: \"Chat history cleared\",",
      "componentName": "useChatMessages"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/hooks/useChatMessages.tsx",
      "line": 311,
      "text": "All messages have been deleted successfully.",
      "context": "description: \"All messages have been deleted successfully.\",",
      "componentName": "useChatMessages"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/hooks/useChatMessages.tsx",
      "line": 323,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "useChatMessages"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/hooks/useChatMessages.tsx",
      "line": 324,
      "text": "Failed to clear chat history. Please try again.",
      "context": "description: \"Failed to clear chat history. Please try again.\",",
      "componentName": "useChatMessages"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/SourceViewer.tsx",
      "line": 58,
      "text": "Source Excerpt",
      "context": "<h4 className=\"font-medium text-gray-900 mb-2\">Source Excerpt</h4>",
      "componentName": "SourceViewer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/SourceContentViewer.tsx",
      "line": 118,
      "text": "Select a citation to view source content",
      "context": "<p className=\"text-sm\">Select a citation to view source content</p>",
      "componentName": "SourceContentViewer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/SourceContentViewer.tsx",
      "line": 174,
      "text": "= startLine && lineNumber",
      "context": "const isHighlighted = startLine > 0 && lineNumber >= startLine && lineNumber <= endLine;",
      "componentName": "SourceContentViewer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/SourceContentViewer.tsx",
      "line": 223,
      "text": "Source guide",
      "context": "<span>Source guide</span>",
      "componentName": "SourceContentViewer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/SourceContentViewer.tsx",
      "line": 229,
      "text": "Summary",
      "context": "<h4 className=\"font-medium mb-2\">Summary</h4>",
      "componentName": "SourceContentViewer"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/AgricultureChatArea.tsx",
      "line": 177,
      "text": "Setting up your consultation session...",
      "context": "<p className=\"text-gray-600\">Setting up your consultation session...</p>",
      "componentName": "AgricultureChatArea"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/AgricultureChatArea.tsx",
      "line": 200,
      "text": "Quick questions to get started:",
      "context": "<p className=\"text-sm text-gray-600 mb-3\">Quick questions to get started:</p>",
      "componentName": "AgricultureChatArea"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/AgricultureChatArea.tsx",
      "line": 287,
      "text": "Thinking...",
      "context": "<span className=\"text-sm text-gray-600\">Thinking...</span>",
      "componentName": "AgricultureChatArea"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/AgriChat.tsx",
      "line": 26,
      "text": "Weather forecasts and climate advice",
      "context": "description: 'Weather forecasts and climate advice'",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/AgriChat.tsx",
      "line": 33,
      "text": "Crop growing and management tips",
      "context": "description: 'Crop growing and management tips'",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/AgriChat.tsx",
      "line": 40,
      "text": "Pest identification and control",
      "context": "description: 'Pest identification and control'",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/AgriChat.tsx",
      "line": 47,
      "text": "Market prices and selling advice",
      "context": "description: 'Market prices and selling advice'",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/AgriChat.tsx",
      "line": 79,
      "text": "Error",
      "context": "title: \"Error\",",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/AgriChat.tsx",
      "line": 80,
      "text": "Failed to create consultation session. Please try again.",
      "context": "description: \"Failed to create consultation session. Please try again.\",",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/AgriChat.tsx",
      "line": 145,
      "text": "Tips for better answers:",
      "context": "<p className=\"font-semibold text-gray-900 mb-1\">Tips for better answers:</p>",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/AgriChat.tsx",
      "line": 147,
      "text": "• Include your crop type and growth stage",
      "context": "<li>• Include your crop type and growth stage</li>",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/AgriChat.tsx",
      "line": 148,
      "text": "• Mention your location for weather-specific advice",
      "context": "<li>• Mention your location for weather-specific advice</li>",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/AgriChat.tsx",
      "line": 149,
      "text": "• Describe symptoms clearly for pest/disease diagnosis",
      "context": "<li>• Describe symptoms clearly for pest/disease diagnosis</li>",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/features/chat/components/AgriChat.tsx",
      "line": 150,
      "text": "• Each tab provides specialized advice for that topic",
      "context": "<li>• Each tab provides specialized advice for that topic</li>",
      "componentName": "AgriChat"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/dashboard/useDashboardData.ts",
      "line": 35,
      "text": "Heavy rainfall expected in 2 days. Prepare drainage.",
      "context": "message: 'Heavy rainfall expected in 2 days. Prepare drainage.',",
      "componentName": "useDashboardData"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/dashboard/useDashboardData.ts",
      "line": 40,
      "text": "Optimal planting window for rice starts next week.",
      "context": "message: 'Optimal planting window for rice starts next week.',",
      "componentName": "useDashboardData"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/useCropData.ts",
      "line": 79,
      "text": "Look for ragged holes in leaves and larvae in whorls. Apply recommended pesticides early morning or late evening.",
      "context": "description: 'Look for ragged holes in leaves and larvae in whorls. Apply recommended pesticides early morning or late evening.',",
      "componentName": "useCropData"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/useCropData.ts",
      "line": 88,
      "text": "Dark sunken lesions on berries. Prevent with copper-based fungicides before and during flowering.",
      "context": "description: 'Dark sunken lesions on berries. Prevent with copper-based fungicides before and during flowering.',",
      "componentName": "useCropData"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/PestDiseaseManager.tsx",
      "line": 26,
      "text": "Common Pests & Diseases",
      "context": "<CardTitle>Common Pests & Diseases</CardTitle>",
      "componentName": "PestDiseaseManager"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropSummaryStats.tsx",
      "line": 21,
      "text": "Total Area",
      "context": "<p className=\"text-sm text-gray-600\">Total Area</p>",
      "componentName": "CropSummaryStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropSummaryStats.tsx",
      "line": 33,
      "text": "Active Crops",
      "context": "<p className=\"text-sm text-gray-600\">Active Crops</p>",
      "componentName": "CropSummaryStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropSummaryStats.tsx",
      "line": 45,
      "text": "Expected Yield",
      "context": "<p className=\"text-sm text-gray-600\">Expected Yield</p>",
      "componentName": "CropSummaryStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropSummaryStats.tsx",
      "line": 57,
      "text": "Health Status",
      "context": "<p className=\"text-sm text-gray-600\">Health Status</p>",
      "componentName": "CropSummaryStats"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropPlantingCalendar.tsx",
      "line": 10,
      "text": "Planting Calendar",
      "context": "<CardTitle>Planting Calendar</CardTitle>",
      "componentName": "CropPlantingCalendar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropPlantingCalendar.tsx",
      "line": 29,
      "text": "Maize",
      "context": "<span className=\"text-xs font-medium\">Maize</span>",
      "componentName": "CropPlantingCalendar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropPlantingCalendar.tsx",
      "line": 36,
      "text": "Rice",
      "context": "<span className=\"text-xs font-medium\">Rice</span>",
      "componentName": "CropPlantingCalendar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropPlantingCalendar.tsx",
      "line": 43,
      "text": "Coffee Harvest",
      "context": "<span className=\"text-xs font-medium\">Coffee Harvest</span>",
      "componentName": "CropPlantingCalendar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropPlantingCalendar.tsx",
      "line": 50,
      "text": "Tip:",
      "context": "<strong>Tip:</strong> The calendar shows general planting windows.",
      "componentName": "CropPlantingCalendar"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropGuidesList.tsx",
      "line": 21,
      "text": "Season:",
      "context": "<dt className=\"text-sm text-gray-600\">Season:</dt>",
      "componentName": "CropGuidesList"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropGuidesList.tsx",
      "line": 25,
      "text": "Water Needs:",
      "context": "<dt className=\"text-sm text-gray-600\">Water Needs:</dt>",
      "componentName": "CropGuidesList"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropGuidesList.tsx",
      "line": 29,
      "text": "Soil Type:",
      "context": "<dt className=\"text-sm text-gray-600\">Soil Type:</dt>",
      "componentName": "CropGuidesList"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropGuidesList.tsx",
      "line": 33,
      "text": "Spacing:",
      "context": "<dt className=\"text-sm text-gray-600\">Spacing:</dt>",
      "componentName": "CropGuidesList"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropGuidesList.tsx",
      "line": 37,
      "text": "Fertilizer:",
      "context": "<dt className=\"text-sm text-gray-600 mb-1\">Fertilizer:</dt>",
      "componentName": "CropGuidesList"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropCard.tsx",
      "line": 68,
      "text": "Area",
      "context": "<span className=\"text-gray-600\">Area</span>",
      "componentName": "CropCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropCard.tsx",
      "line": 72,
      "text": "Stage",
      "context": "<span className=\"text-gray-600\">Stage</span>",
      "componentName": "CropCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropCard.tsx",
      "line": 80,
      "text": "Progress",
      "context": "<span className=\"text-gray-600\">Progress</span>",
      "componentName": "CropCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/farm/crops/CropCard.tsx",
      "line": 91,
      "text": "Next Action:",
      "context": "<p className=\"text-sm text-gray-600 mb-1\">Next Action:</p>",
      "componentName": "CropCard"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/chat/__tests__/MarkdownRenderer.xss.test.tsx",
      "line": 113,
      "text": "Safe link",
      "context": "const content = '<a href=\"https://example.com\">Safe link</a>';",
      "componentName": "MarkdownRenderer.xss.test"
    },
    {
      "file": "/Users/baegjaehyeon/Desktop/AI4AgriWeather/insights-lm-public/src/components/chat/__tests__/MarkdownRenderer.xss.test.tsx",
      "line": 113,
      "text": "Safe link",
      "context": "const content = '<a href=\"https://example.com\">Safe link</a>';",
      "componentName": "MarkdownRenderer.xss.test"
    }
  ],
  "componentsNeedingI18n": [
    "debug",
    "App",
    "authService",
    "NotFound",
    "Index",
    "Auth",
    "useSourceUpdate",
    "useSourceDelete",
    "useNotebookUpdate",
    "useNotebookGeneration",
    "useNotebookDelete",
    "useFileUpload",
    "useDocumentProcessing",
    "useChatMessages",
    "useAudioOverview",
    "AuthContext",
    "permissions",
    "domain",
    "documentProcessing",
    "apiClient",
    "UserProfileDialog",
    "sonner",
    "sidebar",
    "sheet",
    "pagination",
    "form",
    "dialog",
    "carousel",
    "calendar",
    "breadcrumb",
    "alert",
    "WeatherCenter",
    "NewKnowledgeEntry",
    "KnowledgeEntry",
    "KnowledgeBase",
    "CropManagement",
    "AgricultureChatArea",
    "AgriChat",
    "NotebookGrid",
    "NotebookCard",
    "BulkActions",
    "SourceViewer",
    "SourceContentViewer",
    "ProtectedRoute",
    "AgriOnboarding",
    "YouTubeUrlInput",
    "WebsiteUrlInput",
    "StudioSidebar",
    "SourcesSidebar",
    "RenameSourceDialog",
    "PasteTextDialog",
    "NoteEditor",
    "MultipleWebsiteUrlsDialog",
    "MobileNotebookTabs",
    "CopiedTextDialog",
    "ChatArea",
    "AudioPlayer",
    "AddSourcesDialog",
    "useDashboardData",
    "PestDiseaseManager",
    "CropSummaryStats",
    "CropPlantingCalendar",
    "CropGuidesList",
    "CropCard",
    "useCropData",
    "RecentKnowledgeSection",
    "RecentActivitiesCard",
    "QuickActionsGrid",
    "EmptyDashboard",
    "DashboardHeader",
    "AgriKnowledgeGrid",
    "AgriDashboardStats",
    "AuthForm",
    "MarkdownRenderer.xss.test"
  ]
}
</file>

<file path="src/i18n/agents/scanner.ts">
import * as fs from 'fs';
import * as path from 'path';
import { glob } from 'glob';

interface HardcodedString {
  file: string;
  line: number;
  text: string;
  context: string;
  componentName: string;
}

interface ScanReport {
  totalFiles: number;
  filesWithHardcodedStrings: number;
  totalHardcodedStrings: number;
  hardcodedStrings: HardcodedString[];
  componentsNeedingI18n: string[];
}

export class ScannerAgent {
  private srcPath: string;
  private ignoredPatterns: string[] = [
    '*.test.tsx',
    '*.test.ts',
    '*.spec.tsx',
    '*.spec.ts',
    'i18n/**',
    'agents/**',
    'types/**',
    'utils/**',
    'constants/**'
  ];

  constructor(projectPath: string) {
    this.srcPath = path.join(projectPath, 'src');
  }

  async scanForHardcodedStrings(): Promise<ScanReport> {
    console.log('🔍 Scanner Agent: Starting scan for hardcoded strings...');
    
    const report: ScanReport = {
      totalFiles: 0,
      filesWithHardcodedStrings: 0,
      totalHardcodedStrings: 0,
      hardcodedStrings: [],
      componentsNeedingI18n: []
    };

    const files = await this.getReactFiles();
    report.totalFiles = files.length;

    for (const file of files) {
      const hardcodedStrings = await this.scanFile(file);
      if (hardcodedStrings.length > 0) {
        report.filesWithHardcodedStrings++;
        report.totalHardcodedStrings += hardcodedStrings.length;
        report.hardcodedStrings.push(...hardcodedStrings);
        
        const componentName = path.basename(file, path.extname(file));
        if (!report.componentsNeedingI18n.includes(componentName)) {
          report.componentsNeedingI18n.push(componentName);
        }
      }
    }

    console.log(`✅ Scanner Agent: Scan complete. Found ${report.totalHardcodedStrings} hardcoded strings in ${report.filesWithHardcodedStrings} files.`);
    return report;
  }

  private async getReactFiles(): Promise<string[]> {
    const pattern = '**/*.{tsx,ts}';
    const files = await glob(pattern, {
      cwd: this.srcPath,
      ignore: this.ignoredPatterns,
      absolute: true
    });
    return files;
  }

  private async scanFile(filePath: string): Promise<HardcodedString[]> {
    const content = await fs.promises.readFile(filePath, 'utf-8');
    const lines = content.split('\n');
    const hardcodedStrings: HardcodedString[] = [];
    const componentName = path.basename(filePath, path.extname(filePath));

    // Check if file already uses i18n (for future use)
    // const usesI18n = content.includes('useTranslation') || content.includes('t(');

    // Patterns for detecting hardcoded strings
    const patterns = [
      // JSX text content
      />([^<>{}\n]+)</g,
      // String literals in props
      /(?:title|label|placeholder|text|message|error|success|description|alt|content|name)=["']([^"']+)["']/g,
      // Button/Link text
      /<(?:Button|Link|a)[^>]*>([^<]+)</g,
      // Alert/Toast messages
      /(?:alert|toast|notification|message)\s*\(\s*["']([^"']+)["']/g,
      // Validation messages
      /(?:error|warning|info|success)\s*:\s*["']([^"']+)["']/g,
      // Object property strings
      /(?:title|label|description|message|text)\s*:\s*["']([^"']+)["']/g
    ];

    lines.forEach((line, index) => {
      // Skip import statements, comments, and already translated strings
      if (
        line.trim().startsWith('import') ||
        line.trim().startsWith('//') ||
        line.trim().startsWith('*') ||
        line.includes('t(') ||
        line.includes('i18n') ||
        line.trim().length === 0
      ) {
        return;
      }

      patterns.forEach(pattern => {
        let match;
        while ((match = pattern.exec(line)) !== null) {
          const text = match[1]?.trim();
          if (this.isValidHardcodedString(text)) {
            hardcodedStrings.push({
              file: filePath,
              line: index + 1,
              text,
              context: line.trim(),
              componentName
            });
          }
        }
      });
    });

    return hardcodedStrings;
  }

  private isValidHardcodedString(text: string | undefined): boolean {
    if (!text) return false;

    // Exclude certain patterns
    const excludePatterns = [
      /^[0-9\s\-\+\*\/\=\.\,]+$/, // Numbers and math
      /^[a-z0-9_\-]+$/, // Variable names
      /^[A-Z0-9_]+$/, // Constants
      /^\{.*\}$/, // Template literals
      /^(true|false|null|undefined)$/, // Keywords
      /^(px|rem|em|%|vh|vw)$/, // CSS units
      /^#[0-9a-fA-F]{3,6}$/, // Hex colors
      /^rgb|rgba|hsl|hsla/, // Color functions
      /^https?:\/\//, // URLs
      /^[\.\/\\]/, // Paths
      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/, // Emails
    ];

    // Must have at least one letter and be meaningful
    if (text.length < 2 || !/[a-zA-Z]/.test(text)) {
      return false;
    }

    // Check exclusion patterns
    for (const pattern of excludePatterns) {
      if (pattern.test(text)) {
        return false;
      }
    }

    return true;
  }

  async generateReport(report: ScanReport): Promise<void> {
    const reportPath = path.join(this.srcPath, 'i18n', 'agents', 'scan-report.json');
    await fs.promises.writeFile(reportPath, JSON.stringify(report, null, 2));
    console.log(`📄 Scanner Agent: Report saved to ${reportPath}`);
  }

  async getComponentsUsingI18n(): Promise<string[]> {
    const files = await this.getReactFiles();
    const componentsWithI18n: string[] = [];

    for (const file of files) {
      const content = await fs.promises.readFile(file, 'utf-8');
      if (content.includes('useTranslation') || content.includes('t(')) {
        const componentName = path.basename(file, path.extname(file));
        componentsWithI18n.push(componentName);
      }
    }

    return componentsWithI18n;
  }
}
</file>

<file path="src/i18n/agents/translator.ts">
import * as fs from 'fs';
import * as path from 'path';
import { HardcodedString } from './types';

interface TranslationKey {
  key: string;
  value: string;
  context?: string;
  component?: string;
}

interface TranslationMap {
  [key: string]: string | TranslationMap;
}

export class TranslatorAgent {
  private localesPath: string;
  private supportedLanguages = ['en', 'ko', 'sw', 'fr', 'ne', 'uz'];
  private translationCache: Map<string, TranslationMap> = new Map();

  constructor(projectPath: string) {
    this.localesPath = path.join(projectPath, 'src', 'i18n', 'locales');
  }

  async loadExistingTranslations(): Promise<void> {
    console.log('📚 Translator Agent: Loading existing translations...');
    
    for (const lang of this.supportedLanguages) {
      const filePath = path.join(this.localesPath, `${lang}.json`);
      if (fs.existsSync(filePath)) {
        const content = await fs.promises.readFile(filePath, 'utf-8');
        this.translationCache.set(lang, JSON.parse(content));
      } else {
        this.translationCache.set(lang, this.getEmptyTranslationStructure());
      }
    }
  }

  generateTranslationKey(text: string, context: string, component: string): string {
    // Clean the text for key generation
    const cleanText = text
      .toLowerCase()
      .replace(/[^a-z0-9\s]/g, '')
      .replace(/\s+/g, '_')
      .substring(0, 30);

    // Determine the category based on component and context
    const category = this.determineCategory(component, context);
    
    // Generate a meaningful key
    return `${category}.${cleanText}`;
  }

  private determineCategory(component: string, context: string): string {
    // Map components to categories
    const componentMap: { [key: string]: string } = {
      'AuthForm': 'auth',
      'AgriOnboarding': 'onboarding',
      'DashboardHeader': 'dashboard',
      'Dashboard': 'dashboard',
      'WeatherCenter': 'weather',
      'WeatherSummary': 'weather',
      'CropManagement': 'crops',
      'CropCard': 'crops',
      'AgriChat': 'chat',
      'KnowledgeBase': 'knowledge',
      'Profile': 'profile',
      'Settings': 'settings'
    };

    // Check component mapping first
    for (const [key, value] of Object.entries(componentMap)) {
      if (component.includes(key)) {
        return value;
      }
    }

    // Check context for clues
    const contextLower = context.toLowerCase();
    if (contextLower.includes('error')) return 'errors';
    if (contextLower.includes('success')) return 'success';
    if (contextLower.includes('validation')) return 'validation';
    if (contextLower.includes('notification')) return 'notifications';
    if (contextLower.includes('button')) return 'common';
    if (contextLower.includes('title')) return 'common';

    return 'common';
  }

  async createTranslationKeys(hardcodedStrings: HardcodedString[]): Promise<TranslationKey[]> {
    console.log('🔑 Translator Agent: Generating translation keys...');
    
    const translationKeys: TranslationKey[] = [];
    const processedTexts = new Set<string>();

    for (const item of hardcodedStrings) {
      // Skip if we've already processed this text
      if (processedTexts.has(item.text)) {
        continue;
      }

      const key = this.generateTranslationKey(item.text, item.context, item.componentName);
      translationKeys.push({
        key,
        value: item.text,
        context: item.context,
        component: item.componentName
      });

      processedTexts.add(item.text);
    }

    return translationKeys;
  }

  async updateTranslationFiles(translationKeys: TranslationKey[]): Promise<void> {
    console.log('📝 Translator Agent: Updating translation files...');

    // Ensure locales directory exists
    if (!fs.existsSync(this.localesPath)) {
      await fs.promises.mkdir(this.localesPath, { recursive: true });
    }

    // Load existing translations
    await this.loadExistingTranslations();

    // Update each language file
    for (const lang of this.supportedLanguages) {
      const translations = this.translationCache.get(lang) || {};
      
      // Add new keys
      for (const item of translationKeys) {
        this.setNestedValue(translations, item.key, this.getTranslatedValue(item.value, lang));
      }

      // Save updated translations
      const filePath = path.join(this.localesPath, `${lang}.json`);
      await fs.promises.writeFile(
        filePath,
        JSON.stringify(translations, null, 2),
        'utf-8'
      );
    }

    console.log('✅ Translator Agent: Translation files updated successfully!');
  }

  private setNestedValue(obj: any, key: string, value: string): void {
    const keys = key.split('.');
    let current = obj;

    for (let i = 0; i < keys.length - 1; i++) {
      if (!current[keys[i]]) {
        current[keys[i]] = {};
      }
      current = current[keys[i]];
    }

    current[keys[keys.length - 1]] = value;
  }

  private getTranslatedValue(text: string, language: string): string {
    // For now, return placeholder translations
    // In production, this would integrate with translation services
    const translations: { [key: string]: { [lang: string]: string } } = {
      // Common translations
      'Save': { ko: '저장', sw: 'Hifadhi', fr: 'Enregistrer', ne: 'बचत गर्नुहोस्', uz: 'Saqlash' },
      'Cancel': { ko: '취소', sw: 'Ghairi', fr: 'Annuler', ne: 'रद्द गर्नुहोस्', uz: 'Bekor qilish' },
      'Submit': { ko: '제출', sw: 'Wasilisha', fr: 'Soumettre', ne: 'पेश गर्नुहोस्', uz: 'Yuborish' },
      'Loading': { ko: '로딩 중', sw: 'Inapakia', fr: 'Chargement', ne: 'लोड हुँदैछ', uz: 'Yuklanmoqda' },
      'Error': { ko: '오류', sw: 'Kosa', fr: 'Erreur', ne: 'त्रुटि', uz: 'Xato' },
      'Success': { ko: '성공', sw: 'Mafanikio', fr: 'Succès', ne: 'सफलता', uz: 'Muvaffaqiyat' },
      'Welcome': { ko: '환영합니다', sw: 'Karibu', fr: 'Bienvenue', ne: 'स्वागत छ', uz: 'Xush kelibsiz' },
      'Sign In': { ko: '로그인', sw: 'Ingia', fr: 'Se connecter', ne: 'साइन इन', uz: 'Kirish' },
      'Sign Out': { ko: '로그아웃', sw: 'Ondoka', fr: 'Se déconnecter', ne: 'साइन आउट', uz: 'Chiqish' },
      'Profile': { ko: '프로필', sw: 'Wasifu', fr: 'Profil', ne: 'प्रोफाइल', uz: 'Profil' },
      'Settings': { ko: '설정', sw: 'Mipangilio', fr: 'Paramètres', ne: 'सेटिङहरू', uz: 'Sozlamalar' },
      'Dashboard': { ko: '대시보드', sw: 'Dashibodi', fr: 'Tableau de bord', ne: 'ड्यासबोर्ड', uz: 'Boshqaruv paneli' },
      'Search': { ko: '검색', sw: 'Tafuta', fr: 'Rechercher', ne: 'खोज्नुहोस्', uz: 'Qidirish' },
      'Filter': { ko: '필터', sw: 'Chuja', fr: 'Filtrer', ne: 'फिल्टर', uz: 'Filtr' },
      'Add': { ko: '추가', sw: 'Ongeza', fr: 'Ajouter', ne: 'थप्नुहोस्', uz: 'Qo\'shish' },
      'Edit': { ko: '편집', sw: 'Hariri', fr: 'Modifier', ne: 'सम्पादन', uz: 'Tahrirlash' },
      'Delete': { ko: '삭제', sw: 'Futa', fr: 'Supprimer', ne: 'मेटाउनुहोस्', uz: 'O\'chirish' },
      'Confirm': { ko: '확인', sw: 'Thibitisha', fr: 'Confirmer', ne: 'पुष्टि गर्नुहोस्', uz: 'Tasdiqlash' },
    };

    // Check if we have a predefined translation
    if (translations[text] && translations[text][language]) {
      return translations[text][language];
    }

    // For demonstration, return original text for non-English
    // In production, use translation API
    return language === 'en' ? text : `[${language}] ${text}`;
  }

  private getEmptyTranslationStructure(): TranslationMap {
    return {
      common: {},
      auth: {},
      onboarding: {},
      navigation: {},
      dashboard: {},
      weather: {},
      crops: {},
      chat: {},
      knowledge: {},
      profile: {},
      settings: {},
      errors: {},
      success: {},
      validation: {},
      notifications: {}
    };
  }

  async validateTranslations(): Promise<{ missing: string[]; incomplete: string[] }> {
    const missing: string[] = [];
    const incomplete: string[] = [];

    // Check if all language files exist
    for (const lang of this.supportedLanguages) {
      const filePath = path.join(this.localesPath, `${lang}.json`);
      if (!fs.existsSync(filePath)) {
        missing.push(lang);
      }
    }

    // TODO: Check for incomplete translations (keys present in one language but not others)

    return { missing, incomplete };
  }
}
</file>

<file path="src/i18n/agents/types.ts">
export interface HardcodedString {
  file: string;
  line: number;
  text: string;
  context: string;
  componentName: string;
}

export interface TranslationKey {
  key: string;
  value: string;
  context?: string;
  component?: string;
}

export interface ComponentUpdate {
  filePath: string;
  componentName: string;
  updates: Array<{
    line: number;
    oldText: string;
    newKey: string;
    fullReplacement: string;
  }>;
}

export interface ValidationResult {
  component: string;
  isValid: boolean;
  errors: string[];
  warnings: string[];
  missingKeys: string[];
  unusedKeys: string[];
}

export interface I18nProgress {
  timestamp: string;
  phase: 'scanning' | 'translating' | 'implementing' | 'validating' | 'completed';
  totalComponents: number;
  processedComponents: number;
  totalStrings: number;
  translatedStrings: number;
  languages: {
    [lang: string]: {
      complete: boolean;
      coverage: number;
      missingKeys: number;
    };
  };
  errors: string[];
  nextSteps: string[];
}
</file>

<file path="src/i18n/agents/validator.ts">
import * as fs from 'fs';
import * as path from 'path';
import { ValidationResult } from './types';

export class ValidatorAgent {
  private srcPath: string;
  private localesPath: string;
  private supportedLanguages = ['en', 'ko', 'sw', 'fr', 'ne', 'uz'];

  constructor(projectPath: string) {
    this.srcPath = path.join(projectPath, 'src');
    this.localesPath = path.join(this.srcPath, 'i18n', 'locales');
  }

  async validateI18nImplementation(): Promise<ValidationResult[]> {
    console.log('🔍 Validator Agent: Starting validation...');
    
    const results: ValidationResult[] = [];
    
    // Validate translation files
    const translationValidation = await this.validateTranslationFiles();
    results.push(...translationValidation);

    // Validate component implementations
    const componentValidation = await this.validateComponents();
    results.push(...componentValidation);

    // Generate validation report
    await this.generateValidationReport(results);

    console.log(`✅ Validator Agent: Validation complete. ${results.length} components checked.`);
    return results;
  }

  private async validateTranslationFiles(): Promise<ValidationResult[]> {
    const results: ValidationResult[] = [];
    const allKeys = new Map<string, Set<string>>();

    // Load all translation files and collect keys
    for (const lang of this.supportedLanguages) {
      const filePath = path.join(this.localesPath, `${lang}.json`);
      
      if (!fs.existsSync(filePath)) {
        results.push({
          component: `${lang}.json`,
          isValid: false,
          errors: [`Translation file missing for language: ${lang}`],
          warnings: [],
          missingKeys: [],
          unusedKeys: []
        });
        continue;
      }

      try {
        const content = await fs.promises.readFile(filePath, 'utf-8');
        const translations = JSON.parse(content);
        const keys = this.extractKeys(translations);
        allKeys.set(lang, keys);
      } catch (error) {
        results.push({
          component: `${lang}.json`,
          isValid: false,
          errors: [`Invalid JSON in ${lang}.json: ${error}`],
          warnings: [],
          missingKeys: [],
          unusedKeys: []
        });
      }
    }

    // Check for missing keys across languages
    const referenceKeys = allKeys.get('en') || new Set<string>();
    
    for (const [lang, keys] of allKeys.entries()) {
      if (lang === 'en') continue;

      const missingKeys = Array.from(referenceKeys).filter(key => !keys.has(key));
      const extraKeys = Array.from(keys).filter(key => !referenceKeys.has(key));

      if (missingKeys.length > 0 || extraKeys.length > 0) {
        results.push({
          component: `${lang}.json`,
          isValid: missingKeys.length === 0,
          errors: missingKeys.length > 0 ? [`Missing ${missingKeys.length} translation keys`] : [],
          warnings: extraKeys.length > 0 ? [`${extraKeys.length} extra keys not in reference (en)`] : [],
          missingKeys,
          unusedKeys: extraKeys
        });
      }
    }

    return results;
  }

  private extractKeys(obj: any, prefix = ''): Set<string> {
    const keys = new Set<string>();

    for (const [key, value] of Object.entries(obj)) {
      const fullKey = prefix ? `${prefix}.${key}` : key;
      
      if (typeof value === 'object' && value !== null) {
        const nestedKeys = this.extractKeys(value, fullKey);
        nestedKeys.forEach(k => keys.add(k));
      } else {
        keys.add(fullKey);
      }
    }

    return keys;
  }

  private async validateComponents(): Promise<ValidationResult[]> {
    const results: ValidationResult[] = [];
    const componentFiles = await this.getComponentFiles();

    for (const file of componentFiles) {
      const validation = await this.validateComponent(file);
      if (validation) {
        results.push(validation);
      }
    }

    return results;
  }

  private async getComponentFiles(): Promise<string[]> {
    const { glob } = await import('glob');
    const pattern = '**/*.{tsx,ts}';
    const files = await glob(pattern, {
      cwd: this.srcPath,
      ignore: ['**/*.test.*', '**/*.spec.*', 'i18n/**', 'types/**', 'utils/**'],
      absolute: true
    });
    return files;
  }

  private async validateComponent(filePath: string): Promise<ValidationResult | null> {
    const content = await fs.promises.readFile(filePath, 'utf-8');
    const componentName = path.basename(filePath, path.extname(filePath));
    
    const errors: string[] = [];
    const warnings: string[] = [];
    const missingKeys: string[] = [];

    // Check for hardcoded strings
    const hardcodedPatterns = [
      />([A-Z][^<>{}]+)</g, // JSX text starting with capital
      /(?:title|label|placeholder|text|message)=["']([^"']+)["']/g,
      /alert\s*\(\s*["']([^"']+)["']/g,
      /console\.(log|error|warn)\s*\(\s*["']([^"']+)["']/g,
    ];

    const usesI18n = content.includes('useTranslation') || content.includes('t(');
    let hasHardcodedStrings = false;

    for (const pattern of hardcodedPatterns) {
      const matches = content.matchAll(pattern);
      for (const match of matches) {
        const text = match[1];
        // Filter out common false positives
        if (this.isLikelyHardcodedString(text) && !this.isIgnoredString(text)) {
          hasHardcodedStrings = true;
          warnings.push(`Possible hardcoded string: "${text}"`);
        }
      }
    }

    // Check if component uses i18n when it has hardcoded strings
    if (hasHardcodedStrings && !usesI18n) {
      errors.push('Component has hardcoded strings but does not use i18n');
    }

    // Check for proper t() function usage
    if (usesI18n) {
      // Check for dynamic keys (anti-pattern)
      const dynamicKeyPattern = /t\([^'"]+\)/g;
      const dynamicMatches = content.match(dynamicKeyPattern);
      if (dynamicMatches) {
        warnings.push('Using dynamic translation keys (anti-pattern)');
      }

      // Extract used translation keys
      const keyPattern = /t\(['"]([^'"]+)['"]\)/g;
      const usedKeys = new Set<string>();
      let match;
      while ((match = keyPattern.exec(content)) !== null) {
        usedKeys.add(match[1]);
      }

      // Validate that used keys exist in translation files
      const enTranslations = await this.loadTranslations('en');
      if (enTranslations) {
        const availableKeys = this.extractKeys(enTranslations);
        usedKeys.forEach(key => {
          if (!availableKeys.has(key)) {
            missingKeys.push(key);
          }
        });
      }
    }

    const isValid = errors.length === 0 && missingKeys.length === 0;

    return {
      component: componentName,
      isValid,
      errors,
      warnings,
      missingKeys,
      unusedKeys: []
    };
  }

  private isLikelyHardcodedString(text: string): boolean {
    // Must have at least one letter and be at least 2 characters
    return text.length >= 2 && /[a-zA-Z]/.test(text);
  }

  private isIgnoredString(text: string): boolean {
    const ignoredPatterns = [
      /^[A-Z0-9_]+$/, // Constants
      /^(true|false|null|undefined)$/, // Keywords
      /^\d+$/, // Numbers
      /^[a-z0-9-_]+$/, // IDs or classes
      /^https?:\/\//, // URLs
      /^[\.\/]/, // Paths
    ];

    return ignoredPatterns.some(pattern => pattern.test(text));
  }

  private async loadTranslations(language: string): Promise<any | null> {
    const filePath = path.join(this.localesPath, `${language}.json`);
    
    try {
      const content = await fs.promises.readFile(filePath, 'utf-8');
      return JSON.parse(content);
    } catch {
      return null;
    }
  }

  async generateValidationReport(results: ValidationResult[]): Promise<void> {
    const reportPath = path.join(this.srcPath, 'i18n', 'agents', 'validation-report.md');
    
    let content = '# i18n Validation Report\n\n';
    content += `Generated: ${new Date().toISOString()}\n\n`;
    
    // Summary
    const totalComponents = results.length;
    const validComponents = results.filter(r => r.isValid).length;
    const componentsWithErrors = results.filter(r => r.errors.length > 0).length;
    const componentsWithWarnings = results.filter(r => r.warnings.length > 0).length;
    
    content += '## Summary\n\n';
    content += `- Total components checked: ${totalComponents}\n`;
    content += `- Valid components: ${validComponents}\n`;
    content += `- Components with errors: ${componentsWithErrors}\n`;
    content += `- Components with warnings: ${componentsWithWarnings}\n\n`;

    // Language coverage
    content += '## Language Coverage\n\n';
    for (const lang of this.supportedLanguages) {
      const langResult = results.find(r => r.component === `${lang}.json`);
      if (langResult) {
        const status = langResult.isValid ? '✅' : '❌';
        content += `- ${lang}: ${status}`;
        if (langResult.missingKeys.length > 0) {
          content += ` (${langResult.missingKeys.length} missing keys)`;
        }
        content += '\n';
      }
    }
    content += '\n';

    // Components with issues
    content += '## Components Requiring Attention\n\n';
    
    const issueComponents = results.filter(r => !r.isValid || r.warnings.length > 0);
    for (const result of issueComponents) {
      content += `### ${result.component}\n\n`;
      
      if (result.errors.length > 0) {
        content += '**Errors:**\n';
        result.errors.forEach(error => content += `- ❌ ${error}\n`);
        content += '\n';
      }
      
      if (result.warnings.length > 0) {
        content += '**Warnings:**\n';
        result.warnings.forEach(warning => content += `- ⚠️ ${warning}\n`);
        content += '\n';
      }
      
      if (result.missingKeys.length > 0) {
        content += '**Missing Translation Keys:**\n';
        result.missingKeys.forEach(key => content += `- ${key}\n`);
        content += '\n';
      }
    }

    // Recommendations
    content += '## Recommendations\n\n';
    content += '1. Fix all components with errors first\n';
    content += '2. Add missing translation keys to all language files\n';
    content += '3. Review and address warnings\n';
    content += '4. Run validation again after fixes\n';

    await fs.promises.writeFile(reportPath, content);
    console.log(`📊 Validation report saved to: ${reportPath}`);
  }

  async checkTranslationCompleteness(): Promise<Map<string, number>> {
    const completeness = new Map<string, number>();
    
    // Get English keys as reference
    const enTranslations = await this.loadTranslations('en');
    if (!enTranslations) return completeness;
    
    const totalKeys = this.extractKeys(enTranslations).size;
    
    for (const lang of this.supportedLanguages) {
      const translations = await this.loadTranslations(lang);
      if (translations) {
        const langKeys = this.extractKeys(translations).size;
        const percentage = Math.round((langKeys / totalKeys) * 100);
        completeness.set(lang, percentage);
      } else {
        completeness.set(lang, 0);
      }
    }
    
    return completeness;
  }
}
</file>

<file path="src/i18n/locales/fr.json">
{
  "common": {
    "welcome": "Bienvenue",
    "login": "Connexion",
    "logout": "Déconnexion",
    "loading": "Chargement...",
    "error": "Erreur",
    "save": "Enregistrer",
    "cancel": "Annuler",
    "search": "Rechercher",
    "filter": "Filtrer",
    "back": "Retour",
    "next": "Suivant",
    "create": "Créer",
    "edit": "Modifier",
    "delete": "Supprimer",
    "view": "Voir",
    "today": "Aujourd'hui",
    "yesterday": "Hier",
    "tomorrow": "Demain",
    "yes": "Oui",
    "no": "Non",
    "profileSettings": "Paramètres du profil",
    "smartFarmAssistant": "Assistant Agricole Intelligent"
  },
  "navigation": {
    "dashboard": "Tableau de bord",
    "weather": "Centre météo",
    "crops": "Gestion des cultures",
    "chat": "Chat IA",
    "knowledge": "Base de connaissances"
  },
  "dashboard": {
    "title": "Tableau de bord agricole",
    "subtitle": "Surveillez les conditions de votre ferme et la météo en un coup d'œil",
    "quickWeather": "Météo d'aujourd'hui",
    "temperature": "Température",
    "humidity": "Humidité",
    "rainfall": "Précipitations",
    "windSpeed": "Vitesse du vent",
    "cropStatus": "État des cultures",
    "activeCrops": "Cultures actives",
    "healthyPlants": "Plantes saines",
    "needsAttention": "Nécessite une attention",
    "recentActivities": "Activités récentes",
    "weatherAlerts": "Alertes météo",
    "upcomingTasks": "Tâches à venir",
    "quickActions": "Actions rapides",
    "commonTasks": "Tâches courantes et informations",
    "recentKnowledgeEntries": "Entrées de connaissances récentes",
    "viewAll": "Voir tout →",
    "yourLatestInsights": "Vos dernières informations agricoles",
    "yourFarmingJourney": "Votre parcours agricole",
    "askAboutWeather": "Demander sur la météo",
    "knowledgeBase": "Base de connaissances",
    "plantingCalendar": "Calendrier de plantation",
    "marketPrices": "Prix du marché",
    "addNewKnowledge": "Ajouter de nouvelles connaissances",
    "noKnowledgeEntries": "Aucune entrée de connaissances pour le moment",
    "createFirstEntry": "Créer la première entrée",
    "startKnowledgeJourney": "Commencez votre parcours de connaissances agricoles",
    "buildKnowledgeBase": "Construisez une base de connaissances complète pour votre ferme avec des informations agricoles basées sur l'IA et des modèles",
    "knowledgeEntries": "Entrées de connaissances",
    "totalEntries": "Total des entrées de connaissances agricoles",
    "recentActivity": "Activité récente",
    "newEntriesThisWeek": "Nouvelles entrées cette semaine",
    "cropSpecific": "Spécifique à la culture",
    "entriesWithCropInfo": "Entrées avec informations sur les cultures",
    "weatherInsights": "Aperçus météorologiques",
    "weatherClimateEntries": "Entrées météo et climat",
    "knowledgeCategories": "Catégories de connaissances",
    "distributionDescription": "Distribution de vos entrées de connaissances agricoles",
    "welcomeBack": "Bienvenue, {name}!",
    "yearsExp": "ans d'exp.",
    "primaryCrops": "Cultures principales:",
    "moreCount": "+{count} de plus"
  },
  "activities": {
    "appliedFertilizer": "Application d'engrais au champ de maïs",
    "receivedWeatherAdvisory": "Avis météorologique reçu pour les pluies à venir",
    "harvestedRice": "Récolte de 2 hectares de riz",
    "addedKnowledgeEntries": "Ajout de {notebooksCount} entrées de connaissances",
    "threeDaysAgo": "Il y a 3 jours",
    "oneWeekAgo": "Il y a 1 semaine"
  },
  "weather": {
    "title": "Centre météo",
    "subtitle": "Informations météorologiques agricoles précises et prévisions",
    "current": "Météo actuelle",
    "forecast": "Prévisions",
    "hourly": "Horaire",
    "daily": "Quotidien",
    "weekly": "Hebdomadaire",
    "alerts": "Alertes météo",
    "recommendations": "Recommandations agricoles"
  },
  "crops": {
    "title": "Gestion des cultures",
    "subtitle": "Surveillez et gérez l'état de vos cultures",
    "overview": "Vue d'ensemble",
    "calendar": "Calendrier de plantation",
    "guides": "Guides de culture",
    "pests": "Ravageurs et maladies",
    "totalArea": "Surface totale",
    "activeCrops": "Cultures actives",
    "expectedYield": "Rendement attendu",
    "healthStatus": "État de santé",
    "stage": "Stade",
    "progress": "Progression",
    "nextAction": "Prochaine action",
    "plantingCalendar": "Calendrier de plantation",
    "commonPests": "Ravageurs et maladies courants",
    "daysToHarvest": "{days} jours avant la récolte",
    "maize": "Maïs",
    "maizeLocal": "Mahindi",
    "coffee": "Café",
    "coffeeLocal": "Kahawa",
    "applyFertilizerDays": "Appliquer l'engrais dans {days} jours",
    "monitorPests": "Surveiller les ravageurs",
    "excellent": "Excellent",
    "good": "Bon"
  },
  "alerts": {
    "heavyRainfallWarning": "Fortes pluies prévues dans {days} jours. Préparez le drainage.",
    "plantingWindowInfo": "La fenêtre de plantation optimale pour le riz commence la semaine prochaine."
  },
  "chat": {
    "title": "Consultation agricole IA",
    "subtitle": "Obtenez des conseils agricoles experts de l'IA",
    "weatherContext": "Météo et climat",
    "cropsContext": "Gestion des cultures",
    "pestsContext": "Ravageurs et maladies",
    "marketContext": "Informations sur le marché",
    "askQuestion": "Posez votre question...",
    "send": "Envoyer",
    "tips": "Conseils pour de meilleures réponses",
    "includeCropType": "Incluez votre type de culture et son stade de croissance",
    "mentionLocation": "Mentionnez votre localisation pour des conseils météo spécifiques",
    "describeSymptoms": "Décrivez clairement les symptômes pour le diagnostic des ravageurs/maladies",
    "useSpecializedTabs": "Chaque onglet fournit des conseils spécialisés pour ce sujet"
  },
  "knowledge": {
    "title": "Base de connaissances",
    "subtitle": "Gérez systématiquement vos connaissances et informations agricoles",
    "searchPlaceholder": "Rechercher dans votre base de connaissances...",
    "allCategories": "Toutes les catégories",
    "weatherClimate": "Météo et climat",
    "cropManagement": "Gestion des cultures",
    "pestDisease": "Ravageurs et maladies",
    "marketInfo": "Informations sur le marché",
    "generalFarming": "Agriculture générale",
    "createFirst": "Créer la première entrée",
    "startBuilding": "Commencez à construire votre base de connaissances",
    "storeImportant": "Créez votre première entrée de connaissances pour stocker des informations agricoles importantes, des résultats de recherche et des idées agricoles",
    "noResults": "Aucun résultat trouvé",
    "noMatch": "Aucune entrée de connaissances ne correspond à votre recherche",
    "clearSearch": "Effacer la recherche",
    "totalEntries": "Entrées totales",
    "weatherEntries": "Entrées météo",
    "cropEntries": "Entrées cultures",
    "pestEntries": "Entrées ravageurs",
    "newEntry": "Nouvelle entrée de connaissances",
    "createEntry": "Créer une documentation de connaissances agricoles",
    "chooseCategory": "Choisir une catégorie",
    "selectType": "Sélectionnez le type de connaissances agricoles que vous souhaitez documenter",
    "suggestedTopics": "Sujets suggérés",
    "entryDetails": "Détails de l'entrée",
    "provideBasic": "Fournissez des informations de base sur votre entrée de connaissances",
    "titleRequired": "Titre *",
    "titlePlaceholder": "ex., Meilleures pratiques pour la culture du maïs dans le nord de la Tanzanie",
    "descriptionOptional": "Description (Optionnel)",
    "descriptionPlaceholder": "Brève description de ce que cette entrée de connaissances couvrira...",
    "addSourcesAfter": "Vous pouvez ajouter des sources et commencer des conversations après avoir créé l'entrée",
    "createKnowledgeEntry": "Créer une entrée de connaissances",
    "creating": "Création...",
    "tipsTitle": "Conseils pour créer des entrées de connaissances efficaces",
    "tip1": "Utilisez des titres descriptifs qui indiquent clairement le sujet",
    "tip2": "Téléchargez des documents pertinents, des PDF ou des liens web comme sources",
    "tip3": "Posez des questions à l'assistant IA pour explorer le sujet en profondeur",
    "tip4": "Organisez les informations connexes dans des catégories appropriées",
    "tip5": "Mettez à jour les entrées au fur et à mesure que vous apprenez de nouvelles informations",
    "agriculturalDocuments": "Documents agricoles",
    "researchPapers": "Articles de recherche, guides agricoles et rapports techniques",
    "onlineResources": "Ressources en ligne",
    "agriculturalWebsites": "Sites Web agricoles, services de vulgarisation et données de marché",
    "multimediaContent": "Contenu multimédia",
    "trainingVideos": "Vidéos de formation, guides audio et références visuelles"
  },
  "templates": {
    "startWithTemplate": "Commencer avec un modèle",
    "chooseTemplate": "Choisir un modèle agricole",
    "templateDescription": "Sélectionnez parmi nos modèles préconçus pour démarrer rapidement avec des structures de connaissances agricoles éprouvées",
    "startFromScratch": "Commencer à partir de zéro",
    "weatherForecast": "Prévisions météorologiques",
    "trackWeatherPatterns": "Suivre les tendances météorologiques hebdomadaires",
    "cropPlanning": "Planification des cultures",
    "planPlantingSchedules": "Planifier les calendriers de plantation",
    "pestControl": "Lutte antiparasitaire",
    "identifyManagePests": "Identifier et gérer les ravageurs",
    "trackMarketTrends": "Suivre les tendances du marché des cultures",
    "guide": "Guide",
    "template": "Modèle",
    "reference": "Référence",
    "analysis": "Analyse"
  },
  "knowledgeEntry": {
    "sources": "Sources",
    "documentsReferences": "Documents et références pour cette entrée de connaissances",
    "aiAssistant": "Assistant IA",
    "overview": "Vue d'ensemble",
    "loadingEntry": "Chargement de l'entrée de connaissances...",
    "entryNotFound": "Entrée de connaissances non trouvée",
    "backToKnowledge": "Retour à la base de connaissances",
    "description": "Description",
    "noDescription": "Aucune description disponible pour cette entrée de connaissances",
    "entryDetails": "Détails de l'entrée",
    "created": "Créé",
    "lastUpdated": "Dernière mise à jour",
    "files": "fichiers",
    "conversations": "messages",
    "suggestedQuestions": "Questions suggérées",
    "notes": "Notes",
    "personalNotes": "Vos notes personnelles et idées",
    "notesComingSoon": "Fonction de notes à venir bientôt...",
    "unknown": "Inconnu"
  },
  "auth": {
    "title": "AI4AgriWeather",
    "signUpSubtitle": "Créez un compte pour accéder à l'intelligence météorologique agricole intelligente",
    "signInSubtitle": "Connectez-vous à votre tableau de bord AI4AgriWeather",
    "email": "Email",
    "emailPlaceholder": "agriculteur@exemple.com",
    "password": "Mot de passe",
    "createAccount": "Créer un compte",
    "signIn": "Se connecter",
    "creatingAccount": "Création du compte...",
    "signingIn": "Connexion en cours...",
    "alreadyHaveAccount": "Vous avez déjà un compte ?",
    "newToAI4AgriWeather": "Nouveau sur AI4AgriWeather ?",
    "getAccessTo": "Accédez à :",
    "realTimeWeather": "Prévisions météorologiques en temps réel",
    "aiPoweredCrop": "Gestion des cultures basée sur l'IA",
    "personalizedFarming": "Conseils agricoles personnalisés",
    "accountCreated": "Compte créé !",
    "checkEmailConfirm": "Veuillez vérifier votre email pour confirmer votre compte.",
    "welcomeMessage": "Bienvenue sur AI4AgriWeather !",
    "signInSuccess": "Vous vous êtes connecté avec succès.",
    "invalidCredentials": "Email ou mot de passe invalide.",
    "confirmEmailFirst": "Veuillez confirmer votre email avant de vous connecter."
  },
  "language": {
    "korean": "Coréen",
    "english": "Anglais",
    "swahili": "Swahili",
    "french": "Français",
    "nepali": "Népalais",
    "uzbek": "Ouzbek",
    "selectLanguage": "Sélectionner la langue"
  },
  "onboarding": {
    "personalInfo": "Informations personnelles",
    "personalInfoDesc": "Commençons par quelques informations de base sur vous",
    "farmLocation": "Emplacement et taille de la ferme",
    "farmLocationDesc": "Parlez-nous de l'emplacement et de la taille de votre ferme",
    "cropSelection": "Sélection des cultures",
    "cropSelectionDesc": "Quelles cultures cultivez-vous dans votre ferme ?",
    "farmingPractices": "Pratiques agricoles",
    "farmingPracticesDesc": "Parlez-nous de vos méthodes agricoles et de vos objectifs",
    "fullName": "Nom complet",
    "phoneNumber": "Numéro de téléphone",
    "yourRole": "Votre rôle",
    "preferredLanguage": "Langue préférée",
    "yearsExperience": "Années d'expérience agricole",
    "farmName": "Nom de la ferme",
    "farmLocationLabel": "Emplacement de la ferme/Village",
    "region": "Région",
    "farmSize": "Taille de la ferme",
    "unit": "Unité",
    "primaryCrops": "Cultures principales",
    "selectCrops": "Sélectionnez les cultures que vous cultivez (vous pouvez en sélectionner plusieurs)",
    "farmingType": "Type d'agriculture",
    "additionalNotes": "Notes supplémentaires",
    "fullNamePlaceholder": "Jean Dupont",
    "phoneNumberPlaceholder": "+33 6 12 34 56 78",
    "farmNamePlaceholder": "Ferme de la Vallée Verte",
    "villageWardPlaceholder": "Nom du village/quartier",
    "additionalNotesPlaceholder": "Toute information supplémentaire sur vos besoins agricoles...",
    "selectRole": "Sélectionnez votre rôle",
    "selectLanguage": "Sélectionnez la langue",
    "selectRegion": "Sélectionnez la région",
    "farmer": "Agriculteur",
    "extensionOfficer": "Agent de vulgarisation",
    "researcher": "Chercheur",
    "cooperativeMember": "Membre de coopérative",
    "agribusiness": "Agroentreprise",
    "english": "Anglais",
    "swahili": "Swahili",
    "both": "Les deux",
    "hectares": "Hectares",
    "acres": "Acres",
    "squareMeters": "Mètres carrés",
    "subsistence": "Agriculture de subsistance",
    "commercial": "Agriculture commerciale",
    "mixed": "Mixte (Subsistance et commerciale)",
    "organic": "Agriculture biologique",
    "previous": "Précédent",
    "next": "Suivant",
    "completeProfile": "Compléter le profil",
    "completingProfile": "Finalisation du profil...",
    "skipForNow": "Passer pour le moment",
    "welcomeMessage": "Bienvenue sur AI4AgriWeather !",
    "profileSetupSuccess": "Votre profil a été configuré avec succès.",
    "error": "Erreur",
    "userNotAuthenticated": "Utilisateur non authentifié",
    "profileSaveError": "Échec de l'enregistrement des informations du profil. Veuillez réessayer.",
    "selectAtLeastOneCrop": "Veuillez sélectionner au moins une culture"
  }
}
</file>

<file path="src/i18n/locales/ne.json">
{
  "common": {
    "welcome": "स्वागत छ",
    "login": "लगइन",
    "logout": "लगआउट",
    "loading": "लोड हुँदैछ...",
    "error": "त्रुटि",
    "save": "बचत गर्नुहोस्",
    "cancel": "रद्द गर्नुहोस्",
    "search": "खोज्नुहोस्",
    "filter": "फिल्टर",
    "back": "पछाडि",
    "next": "अर्को",
    "create": "सिर्जना गर्नुहोस्",
    "edit": "सम्पादन गर्नुहोस्",
    "delete": "मेटाउनुहोस्",
    "view": "हेर्नुहोस्",
    "today": "आज",
    "yesterday": "हिजो",
    "tomorrow": "भोलि",
    "yes": "हो",
    "no": "होइन",
    "profileSettings": "प्रोफाइल सेटिङहरू",
    "smartFarmAssistant": "स्मार्ट फार्म सहायक"
  },
  "navigation": {
    "dashboard": "ड्यासबोर्ड",
    "weather": "मौसम केन्द्र",
    "crops": "बाली व्यवस्थापन",
    "chat": "एआई च्याट",
    "knowledge": "ज्ञान आधार"
  },
  "dashboard": {
    "title": "कृषि ड्यासबोर्ड",
    "subtitle": "तपाईंको खेतको अवस्था र मौसम एकै नजरमा हेर्नुहोस्",
    "quickWeather": "आजको मौसम",
    "temperature": "तापमान",
    "humidity": "आर्द्रता",
    "rainfall": "वर्षा",
    "windSpeed": "हावाको गति",
    "cropStatus": "बालीको अवस्था",
    "activeCrops": "सक्रिय बालीहरू",
    "healthyPlants": "स्वस्थ बिरुवाहरू",
    "needsAttention": "ध्यान आवश्यक",
    "recentActivities": "हालका गतिविधिहरू",
    "weatherAlerts": "मौसम चेतावनीहरू",
    "upcomingTasks": "आगामी कार्यहरू",
    "quickActions": "छिटो कार्यहरू",
    "commonTasks": "सामान्य कार्यहरू र जानकारी",
    "recentKnowledgeEntries": "हालैका ज्ञान प्रविष्टिहरू",
    "viewAll": "सबै हेर्नुहोस् →",
    "yourLatestInsights": "तपाईंका नवीनतम कृषि अन्तर्दृष्टिहरू",
    "yourFarmingJourney": "तपाईंको कृषि यात्रा",
    "askAboutWeather": "मौसमबारे सोध्नुहोस्",
    "knowledgeBase": "ज्ञान आधार",
    "plantingCalendar": "रोपण पात्रो",
    "marketPrices": "बजार मूल्यहरू",
    "addNewKnowledge": "नयाँ ज्ञान थप्नुहोस्",
    "noKnowledgeEntries": "अहिलेसम्म कुनै ज्ञान प्रविष्टिहरू छैनन्",
    "createFirstEntry": "पहिलो प्रविष्टि सिर्जना गर्नुहोस्",
    "startKnowledgeJourney": "आफ्नो कृषि ज्ञान यात्रा सुरु गर्नुहोस्",
    "buildKnowledgeBase": "एआइ-संचालित कृषि अन्तर्दृष्टि र टेम्प्लेटहरूको साथ तपाईंको खेतको लागि व्यापक ज्ञान आधार निर्माण गर्नुहोस्",
    "knowledgeEntries": "ज्ञान प्रविष्टिहरू",
    "totalEntries": "कुल कृषि ज्ञान प्रविष्टिहरू",
    "recentActivity": "हालैको गतिविधि",
    "newEntriesThisWeek": "यो हप्ता नयाँ प्रविष्टिहरू",
    "cropSpecific": "बाली-विशिष्ट",
    "entriesWithCropInfo": "बाली जानकारी सहितका प्रविष्टिहरू",
    "weatherInsights": "मौसम अन्तर्दृष्टि",
    "weatherClimateEntries": "मौसम र जलवायु प्रविष्टिहरू",
    "knowledgeCategories": "ज्ञान श्रेणीहरू",
    "distributionDescription": "तपाईंका कृषि ज्ञान प्रविष्टिहरूको वितरण",
    "welcomeBack": "{name} जी, फेरि स्वागतम!",
    "yearsExp": "वर्ष अनुभव",
    "primaryCrops": "मुख्य बालीहरू:",
    "moreCount": "+{count} थप"
  },
  "activities": {
    "appliedFertilizer": "मकै बारीमा मल प्रयोग गरियो",
    "receivedWeatherAdvisory": "आउने वर्षाको लागि मौसम चेतावनी प्राप्त गरियो",
    "harvestedRice": "२ हेक्टर धान काटियो",
    "addedKnowledgeEntries": "{notebooksCount} ज्ञान प्रविष्टिहरू थपियो",
    "threeDaysAgo": "३ दिन अगाडि",
    "oneWeekAgo": "१ हप्ता अगाडि"
  },
  "weather": {
    "title": "मौसम केन्द्र",
    "subtitle": "सटीक कृषि मौसम जानकारी र पूर्वानुमान",
    "current": "हालको मौसम",
    "forecast": "पूर्वानुमान",
    "hourly": "घण्टा अनुसार",
    "daily": "दैनिक",
    "weekly": "साप्ताहिक",
    "alerts": "मौसम चेतावनीहरू",
    "recommendations": "कृषि सिफारिसहरू"
  },
  "crops": {
    "title": "बाली व्यवस्थापन",
    "subtitle": "तपाईंको बालीको अवस्था निगरानी र व्यवस्थापन गर्नुहोस्",
    "overview": "अवलोकन",
    "calendar": "रोपण क्यालेन्डर",
    "guides": "बाली गाइडहरू",
    "pests": "कीट र रोग",
    "totalArea": "कुल क्षेत्रफल",
    "activeCrops": "सक्रिय बालीहरू",
    "expectedYield": "अपेक्षित उत्पादन",
    "healthStatus": "स्वास्थ्य स्थिति",
    "stage": "चरण",
    "progress": "प्रगति",
    "nextAction": "अर्को कार्य",
    "plantingCalendar": "रोपण क्यालेन्डर",
    "commonPests": "सामान्य कीट र रोगहरू",
    "daysToHarvest": "{days} दिनमा फसल",
    "maize": "मकै",
    "maizeLocal": "महिन्दी",
    "coffee": "कफी",
    "coffeeLocal": "काहवा",
    "applyFertilizerDays": "{days} दिनमा मल प्रयोग गर्नुहोस्",
    "monitorPests": "कीट निगरानी गर्नुहोस्",
    "excellent": "उत्कृष्ट",
    "good": "राम्रो"
  },
  "alerts": {
    "heavyRainfallWarning": "{days} दिनमा भारी वर्षा अपेक्षित। निकास तयारी गर्नुहोस्।",
    "plantingWindowInfo": "धान रोप्ने उत्तम समय अर्को हप्ता सुरु हुन्छ।"
  },
  "chat": {
    "title": "एआई कृषि परामर्श",
    "subtitle": "एआईबाट विज्ञ कृषि सल्लाह प्राप्त गर्नुहोस्",
    "weatherContext": "मौसम र जलवायु",
    "cropsContext": "बाली व्यवस्थापन",
    "pestsContext": "कीट र रोग",
    "marketContext": "बजार जानकारी",
    "askQuestion": "तपाईंको प्रश्न सोध्नुहोस्...",
    "send": "पठाउनुहोस्",
    "tips": "राम्रो उत्तरहरूका लागि सुझावहरू",
    "includeCropType": "तपाईंको बालीको प्रकार र वृद्धि चरण समावेश गर्नुहोस्",
    "mentionLocation": "मौसम-विशिष्ट सल्लाहका लागि तपाईंको स्थान उल्लेख गर्नुहोस्",
    "describeSymptoms": "कीट/रोग निदानका लागि लक्षणहरू स्पष्ट रूपमा वर्णन गर्नुहोस्",
    "useSpecializedTabs": "प्रत्येक ट्याबले त्यो विषयका लागि विशेष सल्लाह प्रदान गर्दछ"
  },
  "knowledge": {
    "title": "ज्ञान आधार",
    "subtitle": "तपाईंको कृषि ज्ञान र जानकारी व्यवस्थित रूपमा व्यवस्थापन गर्नुहोस्",
    "searchPlaceholder": "तपाईंको ज्ञान आधार खोज्नुहोस्...",
    "allCategories": "सबै श्रेणीहरू",
    "weatherClimate": "मौसम र जलवायु",
    "cropManagement": "बाली व्यवस्थापन",
    "pestDisease": "कीट र रोग",
    "marketInfo": "बजार जानकारी",
    "generalFarming": "सामान्य खेती",
    "createFirst": "पहिलो प्रविष्टि सिर्जना गर्नुहोस्",
    "startBuilding": "तपाईंको ज्ञान आधार निर्माण सुरु गर्नुहोस्",
    "storeImportant": "महत्त्वपूर्ण खेती जानकारी, अनुसन्धान निष्कर्षहरू, र कृषि अन्तर्दृष्टि भण्डारण गर्न तपाईंको पहिलो ज्ञान प्रविष्टि सिर्जना गर्नुहोस्",
    "noResults": "कुनै परिणाम फेला परेन",
    "noMatch": "कुनै ज्ञान प्रविष्टिहरू तपाईंको खोजसँग मेल खाँदैनन्",
    "clearSearch": "खोज हटाउनुहोस्",
    "totalEntries": "कुल प्रविष्टिहरू",
    "weatherEntries": "मौसम प्रविष्टिहरू",
    "cropEntries": "बाली प्रविष्टिहरू",
    "pestEntries": "कीट प्रविष्टिहरू",
    "newEntry": "नयाँ ज्ञान प्रविष्टि",
    "createEntry": "कृषि ज्ञान कागजात सिर्जना गर्नुहोस्",
    "chooseCategory": "श्रेणी छान्नुहोस्",
    "selectType": "तपाईंले कागजात गर्न चाहनुभएको कृषि ज्ञानको प्रकार चयन गर्नुहोस्",
    "suggestedTopics": "सुझाव गरिएका विषयहरू",
    "entryDetails": "प्रविष्टि विवरणहरू",
    "provideBasic": "तपाईंको ज्ञान प्रविष्टिको बारेमा आधारभूत जानकारी प्रदान गर्नुहोस्",
    "titleRequired": "शीर्षक *",
    "titlePlaceholder": "जस्तै, उत्तरी तान्जानियामा मकै खेतीका लागि उत्तम अभ्यासहरू",
    "descriptionOptional": "विवरण (वैकल्पिक)",
    "descriptionPlaceholder": "यो ज्ञान प्रविष्टिले के कभर गर्नेछ भन्ने संक्षिप्त विवरण...",
    "addSourcesAfter": "तपाईंले प्रविष्टि सिर्जना गरेपछि स्रोतहरू थप्न र कुराकानी सुरु गर्न सक्नुहुन्छ",
    "createKnowledgeEntry": "ज्ञान प्रविष्टि सिर्जना गर्नुहोस्",
    "creating": "सिर्जना गर्दै...",
    "tipsTitle": "प्रभावकारी ज्ञान प्रविष्टिहरू सिर्जना गर्नका लागि सुझावहरू",
    "tip1": "विषयलाई स्पष्ट रूपमा संकेत गर्ने वर्णनात्मक शीर्षकहरू प्रयोग गर्नुहोस्",
    "tip2": "स्रोतहरूको रूपमा सान्दर्भिक कागजातहरू, PDF वा वेब लिङ्कहरू अपलोड गर्नुहोस्",
    "tip3": "विषयलाई गहिराइमा अन्वेषण गर्न एआई सहायकलाई प्रश्नहरू सोध्नुहोस्",
    "tip4": "उपयुक्त श्रेणीहरू अन्तर्गत सम्बन्धित जानकारी व्यवस्थित गर्नुहोस्",
    "tip5": "तपाईंले नयाँ जानकारी सिक्दा प्रविष्टिहरू अद्यावधिक गर्नुहोस्",
    "agriculturalDocuments": "कृषि कागजातहरू",
    "researchPapers": "अनुसन्धान पत्रहरू, कृषि गाइडहरू, र प्राविधिक प्रतिवेदनहरू",
    "onlineResources": "अनलाइन स्रोतहरू",
    "agriculturalWebsites": "कृषि वेबसाइटहरू, विस्तार सेवाहरू, र बजार डेटा",
    "multimediaContent": "मल्टिमिडिया सामग्री",
    "trainingVideos": "प्रशिक्षण भिडियोहरू, अडियो गाइडहरू, र दृश्य सन्दर्भहरू"
  },
  "templates": {
    "startWithTemplate": "टेम्प्लेटबाट सुरु गर्नुहोस्",
    "chooseTemplate": "कृषि टेम्प्लेट छनोट गर्नुहोस्",
    "templateDescription": "प्रमाणित कृषि ज्ञान संरचनाहरूसँग छिटो सुरु गर्न हाम्रा पूर्व-निर्मित टेम्प्लेटहरूबाट चयन गर्नुहोस्",
    "startFromScratch": "शुरूबाट सुरु गर्नुहोस्",
    "weatherForecast": "मौसम पूर्वानुमान",
    "trackWeatherPatterns": "साप्ताहिक मौसम ढाँचाहरू ट्र्याक गर्नुहोस्",
    "cropPlanning": "बाली योजना",
    "planPlantingSchedules": "रोपण तालिका योजना बनाउनुहोस्",
    "pestControl": "कीट नियन्त्रण",
    "identifyManagePests": "कीटहरू पहिचान र व्यवस्थापन गर्नुहोस्",
    "trackMarketTrends": "बाली बजार प्रवृत्तिहरू ट्र्याक गर्नुहोस्",
    "guide": "गाइड",
    "template": "टेम्प्लेट",
    "reference": "सन्दर्भ",
    "analysis": "विश्लेषण"
  },
  "knowledgeEntry": {
    "sources": "स्रोतहरू",
    "documentsReferences": "यस ज्ञान प्रविष्टिका लागि कागजातहरू र सन्दर्भहरू",
    "aiAssistant": "एआई सहायक",
    "overview": "अवलोकन",
    "loadingEntry": "ज्ञान प्रविष्टि लोड गर्दै...",
    "entryNotFound": "ज्ञान प्रविष्टि फेला परेन",
    "backToKnowledge": "ज्ञान आधारमा फर्कनुहोस्",
    "description": "विवरण",
    "noDescription": "यस ज्ञान प्रविष्टिका लागि कुनै विवरण उपलब्ध छैन",
    "entryDetails": "प्रविष्टि विवरणहरू",
    "created": "सिर्जना गरिएको",
    "lastUpdated": "अन्तिम अद्यावधिक",
    "files": "फाइलहरू",
    "conversations": "सन्देशहरू",
    "suggestedQuestions": "सुझाव गरिएका प्रश्नहरू",
    "notes": "नोटहरू",
    "personalNotes": "तपाईंका व्यक्तिगत नोटहरू र अन्तर्दृष्टिहरू",
    "notesComingSoon": "नोट सुविधा चाँडै आउँदैछ...",
    "unknown": "अज्ञात"
  },
  "auth": {
    "title": "AI4AgriWeather",
    "signUpSubtitle": "स्मार्ट कृषि मौसम बुद्धिमत्ता पहुँच गर्न खाता बनाउनुहोस्",
    "signInSubtitle": "तपाईंको AI4AgriWeather ड्यासबोर्डमा साइन इन गर्नुहोस्",
    "email": "इमेल",
    "emailPlaceholder": "किसान@उदाहरण.com",
    "password": "पासवर्ड",
    "createAccount": "खाता बनाउनुहोस्",
    "signIn": "साइन इन गर्नुहोस्",
    "creatingAccount": "खाता बनाउँदै...",
    "signingIn": "साइन इन गर्दै...",
    "alreadyHaveAccount": "पहिले नै खाता छ?",
    "newToAI4AgriWeather": "AI4AgriWeather मा नयाँ हुनुहुन्छ?",
    "getAccessTo": "पहुँच प्राप्त गर्नुहोस्:",
    "realTimeWeather": "वास्तविक समयको मौसम पूर्वानुमान",
    "aiPoweredCrop": "AI-संचालित बाली व्यवस्थापन",
    "personalizedFarming": "व्यक्तिगत कृषि सल्लाह",
    "accountCreated": "खाता बनाइयो!",
    "checkEmailConfirm": "कृपया तपाईंको खाता पुष्टि गर्न आफ्नो इमेल जाँच गर्नुहोस्।",
    "welcomeMessage": "AI4AgriWeather मा स्वागत छ!",
    "signInSuccess": "तपाईं सफलतापूर्वक साइन इन हुनुभयो।",
    "invalidCredentials": "अवैध इमेल वा पासवर्ड।",
    "confirmEmailFirst": "कृपया साइन इन गर्नु अघि आफ्नो इमेल पुष्टि गर्नुहोस्।"
  },
  "language": {
    "korean": "कोरियन",
    "english": "अंग्रेजी",
    "swahili": "स्वाहिली",
    "french": "फ्रेन्च",
    "nepali": "नेपाली",
    "uzbek": "उज्बेक",
    "selectLanguage": "भाषा छान्नुहोस्"
  },
  "onboarding": {
    "personalInfo": "व्यक्तिगत जानकारी",
    "personalInfoDesc": "तपाईंको बारेमा केही आधारभूत जानकारीबाट सुरु गरौं",
    "farmLocation": "खेतको स्थान र आकार",
    "farmLocationDesc": "हामीलाई तपाईंको खेतको स्थान र आकारको बारेमा बताउनुहोस्",
    "cropSelection": "बाली छनोट",
    "cropSelectionDesc": "तपाईं आफ्नो खेतमा कुन बालीहरू उब्जाउनुहुन्छ?",
    "farmingPractices": "खेती अभ्यासहरू",
    "farmingPracticesDesc": "हामीलाई तपाईंको खेती विधि र लक्ष्यहरूको बारेमा बताउनुहोस्",
    "fullName": "पूरा नाम",
    "phoneNumber": "फोन नम्बर",
    "yourRole": "तपाईंको भूमिका",
    "preferredLanguage": "मनपर्ने भाषा",
    "yearsExperience": "खेतीको अनुभव वर्ष",
    "farmName": "खेतको नाम",
    "farmLocationLabel": "खेतको स्थान/गाउँ",
    "region": "क्षेत्र",
    "farmSize": "खेतको आकार",
    "unit": "एकाइ",
    "primaryCrops": "मुख्य बालीहरू",
    "selectCrops": "तपाईंले उब्जाउने बालीहरू छान्नुहोस् (तपाईं धेरै छान्न सक्नुहुन्छ)",
    "farmingType": "खेतीको प्रकार",
    "additionalNotes": "थप टिप्पणीहरू",
    "fullNamePlaceholder": "राम बहादुर",
    "phoneNumberPlaceholder": "+977 98 1234 5678",
    "farmNamePlaceholder": "हरियो बगैंचा खेत",
    "villageWardPlaceholder": "गाउँ/वडाको नाम",
    "additionalNotesPlaceholder": "तपाईंको खेती आवश्यकताहरूको बारेमा कुनै थप जानकारी...",
    "selectRole": "तपाईंको भूमिका छान्नुहोस्",
    "selectLanguage": "भाषा छान्नुहोस्",
    "selectRegion": "क्षेत्र छान्नुहोस्",
    "farmer": "किसान",
    "extensionOfficer": "कृषि प्रसार अधिकारी",
    "researcher": "अनुसन्धानकर्ता",
    "cooperativeMember": "सहकारी सदस्य",
    "agribusiness": "कृषि व्यवसाय",
    "english": "अंग्रेजी",
    "swahili": "स्वाहिली",
    "both": "दुवै",
    "hectares": "हेक्टर",
    "acres": "एकड",
    "squareMeters": "वर्ग मिटर",
    "subsistence": "निर्वाह खेती",
    "commercial": "व्यावसायिक खेती",
    "mixed": "मिश्रित (निर्वाह र व्यावसायिक)",
    "organic": "जैविक खेती",
    "previous": "अघिल्लो",
    "next": "अर्को",
    "completeProfile": "प्रोफाइल पूरा गर्नुहोस्",
    "completingProfile": "प्रोफाइल पूरा गर्दै...",
    "skipForNow": "अहिलेको लागि छोड्नुहोस्",
    "welcomeMessage": "AI4AgriWeather मा स्वागत छ!",
    "profileSetupSuccess": "तपाईंको प्रोफाइल सफलतापूर्वक सेटअप गरिएको छ।",
    "error": "त्रुटि",
    "userNotAuthenticated": "प्रयोगकर्ता प्रमाणीकरण गरिएको छैन",
    "profileSaveError": "प्रोफाइल जानकारी बचत गर्न असफल। कृपया फेरि प्रयास गर्नुहोस्।",
    "selectAtLeastOneCrop": "कृपया कम्तिमा एउटा बाली छान्नुहोस्"
  }
}
</file>

<file path="src/i18n/locales/uz.json">
{
  "common": {
    "welcome": "Xush kelibsiz",
    "login": "Kirish",
    "logout": "Chiqish",
    "loading": "Yuklanmoqda...",
    "error": "Xato",
    "save": "Saqlash",
    "cancel": "Bekor qilish",
    "search": "Qidirish",
    "filter": "Filtr",
    "back": "Orqaga",
    "next": "Keyingi",
    "create": "Yaratish",
    "edit": "Tahrirlash",
    "delete": "O'chirish",
    "view": "Ko'rish",
    "today": "Bugun",
    "yesterday": "Kecha",
    "tomorrow": "Ertaga",
    "yes": "Ha",
    "no": "Yo'q",
    "profileSettings": "Profil sozlamalari",
    "smartFarmAssistant": "Aqlli ferma yordamchisi"
  },
  "navigation": {
    "dashboard": "Boshqaruv paneli",
    "weather": "Ob-havo markazi",
    "crops": "Ekinlarni boshqarish",
    "chat": "AI Chat",
    "knowledge": "Bilimlar bazasi"
  },
  "dashboard": {
    "title": "Ferma boshqaruv paneli",
    "subtitle": "Ferma sharoitlari va ob-havoni bir qarashda kuzating",
    "quickWeather": "Bugungi ob-havo",
    "temperature": "Harorat",
    "humidity": "Namlik",
    "rainfall": "Yog'ingarchilik",
    "windSpeed": "Shamol tezligi",
    "cropStatus": "Ekin holati",
    "activeCrops": "Faol ekinlar",
    "healthyPlants": "Sog'lom o'simliklar",
    "needsAttention": "E'tibor talab qiladi",
    "recentActivities": "So'nggi faoliyatlar",
    "weatherAlerts": "Ob-havo ogohlantirishlari",
    "upcomingTasks": "Yaqinlashayotgan vazifalar",
    "quickActions": "Tezkor harakatlar",
    "commonTasks": "Umumiy vazifalar va ma'lumotlar",
    "recentKnowledgeEntries": "So'nggi bilim yozuvlari",
    "viewAll": "Hammasini ko'rish →",
    "yourLatestInsights": "Sizning so'nggi qishloq xo'jaligi ma'lumotlaringiz",
    "yourFarmingJourney": "Sizning dehqonchilik sayohatingiz",
    "askAboutWeather": "Ob-havo haqida so'rash",
    "knowledgeBase": "Bilimlar bazasi",
    "plantingCalendar": "Ekin ekish taqvimi",
    "marketPrices": "Bozor narxlari",
    "addNewKnowledge": "Yangi bilim qo'shish",
    "noKnowledgeEntries": "Hali bilim yozuvlari yo'q",
    "createFirstEntry": "Birinchi yozuvni yaratish",
    "startKnowledgeJourney": "Qishloq xo'jaligi bilimlar sayohatingizni boshlang",
    "buildKnowledgeBase": "Sun'iy intellekt asosidagi qishloq xo'jaligi ma'lumotlari va shablonlar bilan fermangiz uchun keng qamrovli bilimlar bazasini yarating",
    "knowledgeEntries": "Bilim yozuvlari",
    "totalEntries": "Jami qishloq xo'jaligi bilim yozuvlari",
    "recentActivity": "So'nggi faoliyat",
    "newEntriesThisWeek": "Bu hafta yangi yozuvlar",
    "cropSpecific": "Ekinga oid",
    "entriesWithCropInfo": "Ekin ma'lumotlari bilan yozuvlar",
    "weatherInsights": "Ob-havo ma'lumotlari",
    "weatherClimateEntries": "Ob-havo va iqlim yozuvlari",
    "knowledgeCategories": "Bilim toifalari",
    "distributionDescription": "Qishloq xo'jaligi bilim yozuvlaringizning taqsimlanishi",
    "welcomeBack": "Xush kelibsiz, {name}!",
    "yearsExp": "yillik tajriba",
    "primaryCrops": "Asosiy ekinlar:",
    "moreCount": "+{count} ko'proq"
  },
  "activities": {
    "appliedFertilizer": "Makkajo'xori dalasiga o'g'it solindi",
    "receivedWeatherAdvisory": "Yaqinlashayotgan yomg'ir uchun ob-havo ogohlantirishi olindi",
    "harvestedRice": "2 gektar sholi yig'ishtirildi",
    "addedKnowledgeEntries": "{notebooksCount} ta bilim yozuvlari qo'shildi",
    "threeDaysAgo": "3 kun oldin",
    "oneWeekAgo": "1 hafta oldin"
  },
  "weather": {
    "title": "Ob-havo markazi",
    "subtitle": "Aniq qishloq xo'jaligi ob-havo ma'lumotlari va prognozlar",
    "current": "Joriy ob-havo",
    "forecast": "Prognoz",
    "hourly": "Soatlik",
    "daily": "Kunlik",
    "weekly": "Haftalik",
    "alerts": "Ob-havo ogohlantirishlari",
    "recommendations": "Qishloq xo'jaligi tavsiyalari"
  },
  "crops": {
    "title": "Ekinlarni boshqarish",
    "subtitle": "Ekin sharoitlarini kuzating va boshqaring",
    "overview": "Umumiy ko'rinish",
    "calendar": "Ekish taqvimi",
    "guides": "Ekin yo'riqnomalari",
    "pests": "Zararkunandalar va kasalliklar",
    "totalArea": "Umumiy maydon",
    "activeCrops": "Faol ekinlar",
    "expectedYield": "Kutilayotgan hosil",
    "healthStatus": "Sog'liqlik holati",
    "stage": "Bosqich",
    "progress": "Taraqqiyot",
    "nextAction": "Keyingi harakat",
    "plantingCalendar": "Ekish taqvimi",
    "commonPests": "Umumiy zararkunandalar va kasalliklar",
    "daysToHarvest": "{days} kungacha hosil",
    "maize": "Makkajo'xori",
    "maizeLocal": "Mahindi",
    "coffee": "Kofe",
    "coffeeLocal": "Kahawa",
    "applyFertilizerDays": "{days} kundan keyin o'g'it soling",
    "monitorPests": "Zararkunandalarni kuzating",
    "excellent": "A'lo",
    "good": "Yaxshi"
  },
  "alerts": {
    "heavyRainfallWarning": "{days} kundan keyin kuchli yomg'ir kutilmoqda. Drenaj tayyorlang.",
    "plantingWindowInfo": "Sholi ekish uchun optimal vaqt keyingi hafta boshlanadi."
  },
  "chat": {
    "title": "AI qishloq xo'jaligi maslahati",
    "subtitle": "AIdan ekspert qishloq xo'jaligi maslahatlari oling",
    "weatherContext": "Ob-havo va iqlim",
    "cropsContext": "Ekinlarni boshqarish",
    "pestsContext": "Zararkunandalar va kasalliklar",
    "marketContext": "Bozor ma'lumotlari",
    "askQuestion": "Savolingizni bering...",
    "send": "Yuborish",
    "tips": "Yaxshi javoblar uchun maslahatlar",
    "includeCropType": "Ekin turi va o'sish bosqichini kiriting",
    "mentionLocation": "Ob-havoga oid maslahatlar uchun joylashuvingizni ayting",
    "describeSymptoms": "Zararkunanda/kasallik tashxisi uchun alomatlarni aniq tasvirlang",
    "useSpecializedTabs": "Har bir yorliq shu mavzu bo'yicha maxsus maslahat beradi"
  },
  "knowledge": {
    "title": "Bilimlar bazasi",
    "subtitle": "Qishloq xo'jaligi bilimlaringiz va ma'lumotlaringizni tizimli boshqaring",
    "searchPlaceholder": "Bilimlar bazasidan qidiring...",
    "allCategories": "Barcha toifalar",
    "weatherClimate": "Ob-havo va iqlim",
    "cropManagement": "Ekinlarni boshqarish",
    "pestDisease": "Zararkunandalar va kasalliklar",
    "marketInfo": "Bozor ma'lumotlari",
    "generalFarming": "Umumiy dehqonchilik",
    "createFirst": "Birinchi yozuvni yarating",
    "startBuilding": "Bilimlar bazasini qurishni boshlang",
    "storeImportant": "Muhim dehqonchilik ma'lumotlari, tadqiqot natijalari va qishloq xo'jaligi tushunchalarini saqlash uchun birinchi bilim yozuvingizni yarating",
    "noResults": "Hech narsa topilmadi",
    "noMatch": "Hech qanday bilim yozuvi qidiruvingizga mos kelmadi",
    "clearSearch": "Qidiruvni tozalash",
    "totalEntries": "Jami yozuvlar",
    "weatherEntries": "Ob-havo yozuvlari",
    "cropEntries": "Ekin yozuvlari",
    "pestEntries": "Zararkunanda yozuvlari",
    "newEntry": "Yangi bilim yozuvi",
    "createEntry": "Qishloq xo'jaligi bilim hujjatini yarating",
    "chooseCategory": "Toifani tanlang",
    "selectType": "Hujjatlashtirmoqchi bo'lgan qishloq xo'jaligi bilimi turini tanlang",
    "suggestedTopics": "Tavsiya etilgan mavzular",
    "entryDetails": "Yozuv tafsilotlari",
    "provideBasic": "Bilim yozuvingiz haqida asosiy ma'lumotlarni taqdim eting",
    "titleRequired": "Sarlavha *",
    "titlePlaceholder": "masalan, Shimoliy Tanzaniyada makkajo'xori yetishtirishning eng yaxshi amaliyotlari",
    "descriptionOptional": "Tavsif (Ixtiyoriy)",
    "descriptionPlaceholder": "Ushbu bilim yozuvi nimani qamrab olishi haqida qisqacha tavsif...",
    "addSourcesAfter": "Yozuvni yaratgandan so'ng manbalar qo'shish va suhbatlarni boshlashingiz mumkin",
    "createKnowledgeEntry": "Bilim yozuvini yaratish",
    "creating": "Yaratilmoqda...",
    "tipsTitle": "Samarali bilim yozuvlarini yaratish uchun maslahatlar",
    "tip1": "Mavzuni aniq ko'rsatadigan tavsiflovchi sarlavhalardan foydalaning",
    "tip2": "Tegishli hujjatlar, PDF yoki veb havolalarni manba sifatida yuklang",
    "tip3": "Mavzuni chuqur o'rganish uchun AI yordamchisiga savollar bering",
    "tip4": "Tegishli ma'lumotlarni mos toifalar ostida tartibga soling",
    "tip5": "Yangi ma'lumotlarni o'rganganingizda yozuvlarni yangilang",
    "agriculturalDocuments": "Qishloq xo'jaligi hujjatlari",
    "researchPapers": "Tadqiqot ishlari, qishloq xo'jaligi qo'llanmalari va texnik hisobotlar",
    "onlineResources": "Onlayn resurslar",
    "agriculturalWebsites": "Qishloq xo'jaligi veb-saytlari, kengaytma xizmatlari va bozor ma'lumotlari",
    "multimediaContent": "Multimedia kontent",
    "trainingVideos": "O'quv videolari, audio qo'llanmalar va vizual ma'lumotnomalar"
  },
  "templates": {
    "startWithTemplate": "Shablon bilan boshlash",
    "chooseTemplate": "Qishloq xo'jaligi shablonini tanlang",
    "templateDescription": "Isbotlangan qishloq xo'jaligi bilim tuzilmalari bilan tez boshlash uchun bizning oldindan tayyorlangan shablonlarimizdan tanlang",
    "startFromScratch": "Noldan boshlash",
    "weatherForecast": "Ob-havo prognozi",
    "trackWeatherPatterns": "Haftalik ob-havo namunalarini kuzatish",
    "cropPlanning": "Ekin rejalashtirish",
    "planPlantingSchedules": "Ekish jadvallarini rejalashtirish",
    "pestControl": "Zararkunandalarni nazorat qilish",
    "identifyManagePests": "Zararkunandalarni aniqlash va boshqarish",
    "trackMarketTrends": "Ekin bozori tendentsiyalarini kuzatish",
    "guide": "Qo'llanma",
    "template": "Shablon",
    "reference": "Ma'lumotnoma",
    "analysis": "Tahlil"
  },
  "knowledgeEntry": {
    "sources": "Manbalar",
    "documentsReferences": "Ushbu bilim yozuvi uchun hujjatlar va havolalar",
    "aiAssistant": "AI yordamchi",
    "overview": "Umumiy ko'rinish",
    "loadingEntry": "Bilim yozuvi yuklanmoqda...",
    "entryNotFound": "Bilim yozuvi topilmadi",
    "backToKnowledge": "Bilimlar bazasiga qaytish",
    "description": "Tavsif",
    "noDescription": "Ushbu bilim yozuvi uchun tavsif mavjud emas",
    "entryDetails": "Yozuv tafsilotlari",
    "created": "Yaratilgan",
    "lastUpdated": "Oxirgi yangilanish",
    "files": "fayllar",
    "conversations": "xabarlar",
    "suggestedQuestions": "Tavsiya etilgan savollar",
    "notes": "Eslatmalar",
    "personalNotes": "Shaxsiy eslatmalar va tushunchalaringiz",
    "notesComingSoon": "Eslatmalar funksiyasi tez orada...",
    "unknown": "Noma'lum"
  },
  "auth": {
    "title": "AI4AgriWeather",
    "signUpSubtitle": "Aqlli qishloq xo'jaligi ob-havo ma'lumotlariga kirish uchun hisob yarating",
    "signInSubtitle": "AI4AgriWeather boshqaruv panelingizga kiring",
    "email": "Elektron pochta",
    "emailPlaceholder": "fermer@misol.com",
    "password": "Parol",
    "createAccount": "Hisob yaratish",
    "signIn": "Kirish",
    "creatingAccount": "Hisob yaratilmoqda...",
    "signingIn": "Kirilmoqda...",
    "alreadyHaveAccount": "Hisobingiz bormi?",
    "newToAI4AgriWeather": "AI4AgriWeather da yangimisiz?",
    "getAccessTo": "Quyidagilarga kirish imkoniyatini oling:",
    "realTimeWeather": "Haqiqiy vaqtda ob-havo prognozlari",
    "aiPoweredCrop": "AI asosida ekin boshqaruvi",
    "personalizedFarming": "Shaxsiylashtirilgan dehqonchilik maslahatlari",
    "accountCreated": "Hisob yaratildi!",
    "checkEmailConfirm": "Hisobingizni tasdiqlash uchun elektron pochtangizni tekshiring.",
    "welcomeMessage": "AI4AgriWeather ga xush kelibsiz!",
    "signInSuccess": "Muvaffaqiyatli kirdingiz.",
    "invalidCredentials": "Noto'g'ri elektron pochta yoki parol.",
    "confirmEmailFirst": "Kirishdan oldin elektron pochtangizni tasdiqlang."
  },
  "language": {
    "korean": "Koreyscha",
    "english": "Inglizcha",
    "swahili": "Suaxili",
    "french": "Fransuzcha",
    "nepali": "Nepalcha",
    "uzbek": "O'zbekcha",
    "selectLanguage": "Tilni tanlang"
  },
  "onboarding": {
    "personalInfo": "Shaxsiy ma'lumotlar",
    "personalInfoDesc": "Keling, o'zingiz haqingizda asosiy ma'lumotlardan boshlaylik",
    "farmLocation": "Ferma joylashuvi va hajmi",
    "farmLocationDesc": "Fermangizning joylashuvi va hajmi haqida bizga ayting",
    "cropSelection": "Ekin tanlash",
    "cropSelectionDesc": "Fermangizda qanday ekinlar yetishtirasiz?",
    "farmingPractices": "Dehqonchilik usullari",
    "farmingPracticesDesc": "Dehqonchilik usullari va maqsadlaringiz haqida bizga ayting",
    "fullName": "To'liq ism",
    "phoneNumber": "Telefon raqami",
    "yourRole": "Sizning rolingiz",
    "preferredLanguage": "Afzal ko'rilgan til",
    "yearsExperience": "Dehqonchilik tajribasi yillari",
    "farmName": "Ferma nomi",
    "farmLocationLabel": "Ferma joylashuvi/Qishloq",
    "region": "Hudud",
    "farmSize": "Ferma hajmi",
    "unit": "Birlik",
    "primaryCrops": "Asosiy ekinlar",
    "selectCrops": "Yetishtiradigan ekinlaringizni tanlang (bir nechtasini tanlashingiz mumkin)",
    "farmingType": "Dehqonchilik turi",
    "additionalNotes": "Qo'shimcha eslatmalar",
    "fullNamePlaceholder": "Alisher Karimov",
    "phoneNumberPlaceholder": "+998 90 123 45 67",
    "farmNamePlaceholder": "Yashil vodiy fermasi",
    "villageWardPlaceholder": "Qishloq/mahalla nomi",
    "additionalNotesPlaceholder": "Dehqonchilik ehtiyojlaringiz haqida qo'shimcha ma'lumotlar...",
    "selectRole": "Rolingizni tanlang",
    "selectLanguage": "Tilni tanlang",
    "selectRegion": "Hududni tanlang",
    "farmer": "Fermer",
    "extensionOfficer": "Qishloq xo'jaligi maslahatchisi",
    "researcher": "Tadqiqotchi",
    "cooperativeMember": "Kooperativ a'zosi",
    "agribusiness": "Agrobiznes",
    "english": "Inglizcha",
    "swahili": "Suaxili",
    "both": "Ikkalasi",
    "hectares": "Gektar",
    "acres": "Akr",
    "squareMeters": "Kvadrat metr",
    "subsistence": "O'z ehtiyoji uchun dehqonchilik",
    "commercial": "Tijorat dehqonchiligi",
    "mixed": "Aralash (O'z ehtiyoji va tijorat)",
    "organic": "Organik dehqonchilik",
    "previous": "Oldingi",
    "next": "Keyingi",
    "completeProfile": "Profilni to'ldirish",
    "completingProfile": "Profil to'ldirilmoqda...",
    "skipForNow": "Hozircha o'tkazib yuborish",
    "welcomeMessage": "AI4AgriWeather ga xush kelibsiz!",
    "profileSetupSuccess": "Profilingiz muvaffaqiyatli sozlandi.",
    "error": "Xato",
    "userNotAuthenticated": "Foydalanuvchi tasdiqlanmagan",
    "profileSaveError": "Profil ma'lumotlarini saqlashda xatolik. Iltimos, qayta urinib ko'ring.",
    "selectAtLeastOneCrop": "Iltimos, kamida bitta ekin tanlang"
  }
}
</file>

<file path="src/services/api/cropApi.ts">
/**
 * Crop API 서비스
 * 작물 관리 관련 CRUD 작업을 위한 API 서비스
 */

import { safeApiCall, handleApiError, supabase } from '@/services/core/apiClient';
import type { Database } from '@/integrations/supabase/types';

type Crop = Database['public']['Tables']['crops']['Row'];
type CropInsert = Database['public']['Tables']['crops']['Insert'];
type CropUpdate = Database['public']['Tables']['crops']['Update'];

type FarmActivity = Database['public']['Tables']['farm_activities']['Row'];
type FarmActivityInsert = Database['public']['Tables']['farm_activities']['Insert'];

/**
 * 농장의 작물 목록 조회
 */
export const getCrops = async (farmId: string): Promise<Crop[]> => {
  try {
    const crops = await safeApiCall(async () =>
      supabase
        .from('crops')
        .select('*')
        .eq('farm_id', farmId)
        .order('created_at', { ascending: false })
    );

    return crops || [];
  } catch (error) {
    console.error('Error fetching crops:', error);
    handleApiError(error);
  }
};

/**
 * 특정 작물 조회
 */
export const getCrop = async (id: string): Promise<Crop> => {
  try {
    const crop = await safeApiCall(async () =>
      supabase
        .from('crops')
        .select('*')
        .eq('id', id)
        .single()
    );

    return crop;
  } catch (error) {
    console.error('Error fetching crop:', error);
    handleApiError(error);
  }
};

/**
 * 작물 생성
 */
export const createCrop = async (data: CropInsert): Promise<Crop> => {
  try {
    const crop = await safeApiCall(async () =>
      supabase
        .from('crops')
        .insert(data)
        .select()
        .single()
    );

    return crop;
  } catch (error) {
    console.error('Error creating crop:', error);
    handleApiError(error);
  }
};

/**
 * 작물 업데이트
 */
export const updateCrop = async (
  id: string,
  updates: CropUpdate
): Promise<Crop> => {
  try {
    const crop = await safeApiCall(async () =>
      supabase
        .from('crops')
        .update({
          ...updates,
          updated_at: new Date().toISOString(),
        })
        .eq('id', id)
        .select()
        .single()
    );

    return crop;
  } catch (error) {
    console.error('Error updating crop:', error);
    handleApiError(error);
  }
};

/**
 * 작물 삭제
 */
export const deleteCrop = async (id: string): Promise<void> => {
  try {
    await safeApiCall(async () =>
      supabase
        .from('crops')
        .delete()
        .eq('id', id)
    );
  } catch (error) {
    console.error('Error deleting crop:', error);
    handleApiError(error);
  }
};

/**
 * 작물 성장 단계 업데이트
 */
export const updateCropGrowthStage = async (
  id: string,
  growthStage: string
): Promise<Crop> => {
  try {
    return await updateCrop(id, { growth_stage: growthStage });
  } catch (error) {
    console.error('Error updating crop growth stage:', error);
    handleApiError(error);
  }
};

/**
 * 작물 건강 상태 업데이트
 */
export const updateCropHealthStatus = async (
  id: string,
  healthStatus: string
): Promise<Crop> => {
  try {
    return await updateCrop(id, { health_status: healthStatus });
  } catch (error) {
    console.error('Error updating crop health status:', error);
    handleApiError(error);
  }
};

/**
 * 작물 활동 기록 조회
 */
export const getCropActivities = async (cropId: string): Promise<FarmActivity[]> => {
  try {
    const activities = await safeApiCall(async () =>
      supabase
        .from('farm_activities')
        .select('*')
        .eq('crop_id', cropId)
        .order('date', { ascending: false })
    );

    return activities || [];
  } catch (error) {
    console.error('Error fetching crop activities:', error);
    handleApiError(error);
  }
};

/**
 * 작물 활동 기록 추가
 */
export const addCropActivity = async (
  data: FarmActivityInsert
): Promise<FarmActivity> => {
  try {
    const activity = await safeApiCall(async () =>
      supabase
        .from('farm_activities')
        .insert(data)
        .select()
        .single()
    );

    return activity;
  } catch (error) {
    console.error('Error adding crop activity:', error);
    handleApiError(error);
  }
};

/**
 * 농장의 모든 작물 통계 조회
 */
export const getCropStatistics = async (farmId: string) => {
  try {
    const crops = await getCrops(farmId);
    
    const statistics = {
      totalCrops: crops.length,
      totalArea: crops.reduce((sum, crop) => sum + (crop.area_hectares || 0), 0),
      byHealthStatus: {} as Record<string, number>,
      byGrowthStage: {} as Record<string, number>,
      byCropType: {} as Record<string, number>,
    };

    crops.forEach(crop => {
      // 건강 상태별 집계
      if (crop.health_status) {
        statistics.byHealthStatus[crop.health_status] = 
          (statistics.byHealthStatus[crop.health_status] || 0) + 1;
      }

      // 성장 단계별 집계
      if (crop.growth_stage) {
        statistics.byGrowthStage[crop.growth_stage] = 
          (statistics.byGrowthStage[crop.growth_stage] || 0) + 1;
      }

      // 작물 종류별 집계
      statistics.byCropType[crop.name] = 
        (statistics.byCropType[crop.name] || 0) + 1;
    });

    return statistics;
  } catch (error) {
    console.error('Error fetching crop statistics:', error);
    handleApiError(error);
  }
};
</file>

<file path="src/services/api/index.ts">
/**
 * API 서비스 모듈 통합 export
 */

// Notebook API
export * from './notebookApi';

// Source API
export * from './sourceApi';

// Profile API
export * from './profileApi';

// Crop API
export * from './cropApi';

// Weather API
export * from './weatherApi';
</file>

<file path="src/services/api/notebookApi.ts">
/**
 * Notebook API 서비스
 * 노트북 관련 CRUD 작업을 위한 API 서비스
 */

import { safeApiCall, handleApiError, supabase } from '@/services/core/apiClient';
import type { Database } from '@/integrations/supabase/types';

type Notebook = Database['public']['Tables']['notebooks']['Row'];
type NotebookInsert = Database['public']['Tables']['notebooks']['Insert'];
type NotebookUpdate = Database['public']['Tables']['notebooks']['Update'];

/**
 * 사용자의 노트북 목록 조회
 */
export const getNotebooks = async (userId: string): Promise<Notebook[]> => {
  try {
    const notebooks = await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .select('*')
        .eq('user_id', userId)
        .order('updated_at', { ascending: false })
    );

    return notebooks || [];
  } catch (error) {
    console.error('Error fetching notebooks:', error);
    handleApiError(error);
  }
};

/**
 * 특정 노트북 조회
 */
export const getNotebook = async (id: string, userId: string): Promise<Notebook> => {
  try {
    const notebook = await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .select('*')
        .eq('id', id)
        .eq('user_id', userId)
        .single()
    );

    return notebook;
  } catch (error) {
    console.error('Error fetching notebook:', error);
    handleApiError(error);
  }
};

/**
 * 노트북 생성
 */
export const createNotebook = async (
  userId: string,
  data: Omit<NotebookInsert, 'user_id'>
): Promise<Notebook> => {
  try {
    const notebook = await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .insert({
          ...data,
          user_id: userId,
        })
        .select()
        .single()
    );

    return notebook;
  } catch (error) {
    console.error('Error creating notebook:', error);
    handleApiError(error);
  }
};

/**
 * 노트북 업데이트
 */
export const updateNotebook = async (
  id: string,
  userId: string,
  updates: NotebookUpdate
): Promise<Notebook> => {
  try {
    const notebook = await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .update(updates)
        .eq('id', id)
        .eq('user_id', userId)
        .select()
        .single()
    );

    return notebook;
  } catch (error) {
    console.error('Error updating notebook:', error);
    handleApiError(error);
  }
};

/**
 * 노트북 삭제
 */
export const deleteNotebook = async (id: string, userId: string): Promise<void> => {
  try {
    await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .delete()
        .eq('id', id)
        .eq('user_id', userId)
    );
  } catch (error) {
    console.error('Error deleting notebook:', error);
    handleApiError(error);
  }
};
</file>

<file path="src/services/api/profileApi.ts">
/**
 * Profile API 서비스
 * 사용자 프로필 관련 CRUD 작업을 위한 API 서비스
 */

import { safeApiCall, handleApiError, supabase } from '@/services/core/apiClient';
import type { Database } from '@/integrations/supabase/types';

type Profile = Database['public']['Tables']['profiles']['Row'];
type ProfileInsert = Database['public']['Tables']['profiles']['Insert'];
type ProfileUpdate = Database['public']['Tables']['profiles']['Update'];

/**
 * 사용자 프로필 조회
 */
export const getProfile = async (userId: string): Promise<Profile | null> => {
  try {
    const profile = await safeApiCall(async () =>
      supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .single()
    );

    return profile;
  } catch (error) {
    console.error('Error fetching profile:', error);
    // 프로필이 없을 수도 있으므로 null 반환
    return null;
  }
};

/**
 * 프로필 생성
 */
export const createProfile = async (data: ProfileInsert): Promise<Profile> => {
  try {
    const profile = await safeApiCall(async () =>
      supabase
        .from('profiles')
        .insert(data)
        .select()
        .single()
    );

    return profile;
  } catch (error) {
    console.error('Error creating profile:', error);
    handleApiError(error);
  }
};

/**
 * 프로필 업데이트
 */
export const updateProfile = async (
  userId: string,
  updates: ProfileUpdate
): Promise<Profile> => {
  try {
    const profile = await safeApiCall(async () =>
      supabase
        .from('profiles')
        .update(updates)
        .eq('id', userId)
        .select()
        .single()
    );

    return profile;
  } catch (error) {
    console.error('Error updating profile:', error);
    handleApiError(error);
  }
};

/**
 * 프로필 생성 또는 업데이트 (upsert)
 */
export const upsertProfile = async (data: ProfileInsert): Promise<Profile> => {
  try {
    const profile = await safeApiCall(async () =>
      supabase
        .from('profiles')
        .upsert(data)
        .select()
        .single()
    );

    return profile;
  } catch (error) {
    console.error('Error upserting profile:', error);
    handleApiError(error);
  }
};

/**
 * 프로필 삭제
 */
export const deleteProfile = async (userId: string): Promise<void> => {
  try {
    await safeApiCall(async () =>
      supabase
        .from('profiles')
        .delete()
        .eq('id', userId)
    );
  } catch (error) {
    console.error('Error deleting profile:', error);
    handleApiError(error);
  }
};

/**
 * 프로필 사진 업로드
 */
export const uploadProfilePhoto = async (
  userId: string,
  file: File
): Promise<string> => {
  try {
    const fileExt = file.name.split('.').pop();
    const fileName = `${userId}/avatar.${fileExt}`;

    // 스토리지에 파일 업로드
    const { error: uploadError } = await supabase.storage
      .from('avatars')
      .upload(fileName, file, {
        upsert: true,
      });

    if (uploadError) {
      throw uploadError;
    }

    // 공개 URL 가져오기
    const { data: { publicUrl } } = supabase.storage
      .from('avatars')
      .getPublicUrl(fileName);

    // 프로필 업데이트
    await updateProfile(userId, { avatar_url: publicUrl });

    return publicUrl;
  } catch (error) {
    console.error('Error uploading profile photo:', error);
    handleApiError(error);
  }
};

/**
 * 프로필 사진 삭제
 */
export const deleteProfilePhoto = async (userId: string): Promise<void> => {
  try {
    const profile = await getProfile(userId);
    
    if (profile?.avatar_url) {
      // URL에서 파일 경로 추출
      const urlParts = profile.avatar_url.split('/');
      const fileName = urlParts.slice(-2).join('/');

      // 스토리지에서 파일 삭제
      await safeApiCall(async () =>
        supabase.storage
          .from('avatars')
          .remove([fileName])
      );

      // 프로필 업데이트
      await updateProfile(userId, { avatar_url: null });
    }
  } catch (error) {
    console.error('Error deleting profile photo:', error);
    handleApiError(error);
  }
};
</file>

<file path="src/services/api/sourceApi.ts">
/**
 * Source API 서비스
 * 소스(출처) 관련 CRUD 작업을 위한 API 서비스
 */

import { safeApiCall, handleApiError, supabase } from '@/services/core/apiClient';
import type { Database } from '@/integrations/supabase/types';

type Source = Database['public']['Tables']['sources']['Row'];
type SourceInsert = Database['public']['Tables']['sources']['Insert'];
type SourceUpdate = Database['public']['Tables']['sources']['Update'];

/**
 * 노트북의 소스 목록 조회
 */
export const getSources = async (notebookId: string): Promise<Source[]> => {
  try {
    const sources = await safeApiCall(async () =>
      supabase
        .from('sources')
        .select('*')
        .eq('notebook_id', notebookId)
        .order('created_at', { ascending: false })
    );

    return sources || [];
  } catch (error) {
    console.error('Error fetching sources:', error);
    handleApiError(error);
  }
};

/**
 * 특정 소스 조회
 */
export const getSource = async (id: string): Promise<Source> => {
  try {
    const source = await safeApiCall(async () =>
      supabase
        .from('sources')
        .select('*')
        .eq('id', id)
        .single()
    );

    return source;
  } catch (error) {
    console.error('Error fetching source:', error);
    handleApiError(error);
  }
};

/**
 * 소스 생성
 */
export const createSource = async (data: SourceInsert): Promise<Source> => {
  try {
    const source = await safeApiCall(async () =>
      supabase
        .from('sources')
        .insert(data)
        .select()
        .single()
    );

    return source;
  } catch (error) {
    console.error('Error creating source:', error);
    handleApiError(error);
  }
};

/**
 * 소스 업데이트
 */
export const updateSource = async (
  id: string,
  updates: SourceUpdate
): Promise<Source> => {
  try {
    const source = await safeApiCall(async () =>
      supabase
        .from('sources')
        .update(updates)
        .eq('id', id)
        .select()
        .single()
    );

    return source;
  } catch (error) {
    console.error('Error updating source:', error);
    handleApiError(error);
  }
};

/**
 * 소스 삭제
 */
export const deleteSource = async (id: string): Promise<void> => {
  try {
    // 파일 경로가 있다면 스토리지에서도 삭제
    const source = await getSource(id);
    
    if (source.file_path) {
      try {
        await safeApiCall(async () =>
          supabase.storage
            .from('sources')
            .remove([source.file_path!])
        );
      } catch (storageError) {
        console.error('Error deleting file from storage:', storageError);
        // 스토리지 삭제 실패해도 계속 진행
      }
    }

    await safeApiCall(async () =>
      supabase
        .from('sources')
        .delete()
        .eq('id', id)
    );
  } catch (error) {
    console.error('Error deleting source:', error);
    handleApiError(error);
  }
};

/**
 * 여러 소스 일괄 삭제
 */
export const deleteSources = async (ids: string[]): Promise<void> => {
  try {
    // 파일 경로들 조회
    const sources = await safeApiCall(async () =>
      supabase
        .from('sources')
        .select('file_path')
        .in('id', ids)
    );

    // 파일 경로가 있는 소스들의 파일을 스토리지에서 삭제
    const filePaths = sources?.filter(s => s.file_path).map(s => s.file_path!) || [];
    
    if (filePaths.length > 0) {
      try {
        await safeApiCall(async () =>
          supabase.storage
            .from('sources')
            .remove(filePaths)
        );
      } catch (storageError) {
        console.error('Error deleting files from storage:', storageError);
        // 스토리지 삭제 실패해도 계속 진행
      }
    }

    await safeApiCall(async () =>
      supabase
        .from('sources')
        .delete()
        .in('id', ids)
    );
  } catch (error) {
    console.error('Error deleting sources:', error);
    handleApiError(error);
  }
};
</file>

<file path="src/services/api/weatherApi.ts">
/**
 * Weather API 서비스
 * 날씨 데이터 관련 CRUD 작업을 위한 API 서비스
 */

import { safeApiCall, handleApiError, supabase } from '@/services/core/apiClient';
import type { Database } from '@/integrations/supabase/types';

type WeatherData = Database['public']['Tables']['weather_data']['Row'];
type WeatherDataInsert = Database['public']['Tables']['weather_data']['Insert'];
type WeatherAlert = Database['public']['Tables']['weather_alerts']['Row'];
type WeatherAlertInsert = Database['public']['Tables']['weather_alerts']['Insert'];

/**
 * 농장의 날씨 데이터 조회 (기간별)
 */
export const getWeatherData = async (
  farmId: string,
  startDate?: string,
  endDate?: string
): Promise<WeatherData[]> => {
  try {
    let query = supabase
      .from('weather_data')
      .select('*')
      .eq('farm_id', farmId)
      .order('recorded_at', { ascending: false });

    if (startDate) {
      query = query.gte('recorded_at', startDate);
    }
    if (endDate) {
      query = query.lte('recorded_at', endDate);
    }

    const weatherData = await safeApiCall(async () => query);

    return weatherData || [];
  } catch (error) {
    console.error('Error fetching weather data:', error);
    handleApiError(error);
  }
};

/**
 * 최신 날씨 데이터 조회
 */
export const getLatestWeatherData = async (farmId: string): Promise<WeatherData | null> => {
  try {
    const data = await safeApiCall(async () =>
      supabase
        .from('weather_data')
        .select('*')
        .eq('farm_id', farmId)
        .order('recorded_at', { ascending: false })
        .limit(1)
        .single()
    );

    return data;
  } catch (error) {
    console.error('Error fetching latest weather data:', error);
    return null;
  }
};

/**
 * 날씨 데이터 기록
 */
export const recordWeatherData = async (data: WeatherDataInsert): Promise<WeatherData> => {
  try {
    const weatherData = await safeApiCall(async () =>
      supabase
        .from('weather_data')
        .insert(data)
        .select()
        .single()
    );

    return weatherData;
  } catch (error) {
    console.error('Error recording weather data:', error);
    handleApiError(error);
  }
};

/**
 * 날씨 데이터 일괄 기록
 */
export const recordWeatherDataBatch = async (
  dataArray: WeatherDataInsert[]
): Promise<WeatherData[]> => {
  try {
    const weatherData = await safeApiCall(async () =>
      supabase
        .from('weather_data')
        .insert(dataArray)
        .select()
    );

    return weatherData || [];
  } catch (error) {
    console.error('Error recording weather data batch:', error);
    handleApiError(error);
  }
};

/**
 * 날씨 알림 조회
 */
export const getWeatherAlerts = async (
  farmId: string,
  active?: boolean
): Promise<WeatherAlert[]> => {
  try {
    let query = supabase
      .from('weather_alerts')
      .select('*')
      .eq('farm_id', farmId)
      .order('created_at', { ascending: false });

    if (active !== undefined) {
      query = query.eq('is_active', active);
    }

    const alerts = await safeApiCall(async () => query);

    return alerts || [];
  } catch (error) {
    console.error('Error fetching weather alerts:', error);
    handleApiError(error);
  }
};

/**
 * 날씨 알림 생성
 */
export const createWeatherAlert = async (data: WeatherAlertInsert): Promise<WeatherAlert> => {
  try {
    const alert = await safeApiCall(async () =>
      supabase
        .from('weather_alerts')
        .insert(data)
        .select()
        .single()
    );

    return alert;
  } catch (error) {
    console.error('Error creating weather alert:', error);
    handleApiError(error);
  }
};

/**
 * 날씨 알림 비활성화
 */
export const deactivateWeatherAlert = async (id: string): Promise<void> => {
  try {
    await safeApiCall(async () =>
      supabase
        .from('weather_alerts')
        .update({ is_active: false })
        .eq('id', id)
    );
  } catch (error) {
    console.error('Error deactivating weather alert:', error);
    handleApiError(error);
  }
};

/**
 * 날씨 통계 조회
 */
export const getWeatherStatistics = async (
  farmId: string,
  days: number = 7
): Promise<{
  avgTemperature: number;
  totalRainfall: number;
  avgHumidity: number;
  avgWindSpeed: number;
  maxTemperature: number;
  minTemperature: number;
}> => {
  try {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - days);

    const weatherData = await getWeatherData(
      farmId,
      startDate.toISOString(),
      new Date().toISOString()
    );

    if (weatherData.length === 0) {
      return {
        avgTemperature: 0,
        totalRainfall: 0,
        avgHumidity: 0,
        avgWindSpeed: 0,
        maxTemperature: 0,
        minTemperature: 0,
      };
    }

    const statistics = weatherData.reduce(
      (acc, data) => {
        acc.sumTemperature += data.temperature || 0;
        acc.totalRainfall += data.rainfall || 0;
        acc.sumHumidity += data.humidity || 0;
        acc.sumWindSpeed += data.wind_speed || 0;
        acc.maxTemperature = Math.max(acc.maxTemperature, data.temperature || 0);
        acc.minTemperature = Math.min(acc.minTemperature, data.temperature || Infinity);
        return acc;
      },
      {
        sumTemperature: 0,
        totalRainfall: 0,
        sumHumidity: 0,
        sumWindSpeed: 0,
        maxTemperature: -Infinity,
        minTemperature: Infinity,
      }
    );

    const count = weatherData.length;

    return {
      avgTemperature: Math.round(statistics.sumTemperature / count * 10) / 10,
      totalRainfall: Math.round(statistics.totalRainfall * 10) / 10,
      avgHumidity: Math.round(statistics.sumHumidity / count * 10) / 10,
      avgWindSpeed: Math.round(statistics.sumWindSpeed / count * 10) / 10,
      maxTemperature: statistics.maxTemperature === -Infinity ? 0 : statistics.maxTemperature,
      minTemperature: statistics.minTemperature === Infinity ? 0 : statistics.minTemperature,
    };
  } catch (error) {
    console.error('Error fetching weather statistics:', error);
    handleApiError(error);
  }
};

/**
 * 외부 날씨 API에서 데이터 가져오기 (예시)
 */
export const fetchExternalWeatherData = async (
  latitude: number,
  longitude: number
): Promise<{
  temperature: number;
  humidity: number;
  rainfall: number;
  windSpeed: number;
  description: string;
}> => {
  try {
    // 여기에 실제 외부 날씨 API 호출 로직을 구현
    // 예: OpenWeatherMap, Weather API 등
    
    // 임시 데이터 반환
    return {
      temperature: 20 + Math.random() * 15,
      humidity: 40 + Math.random() * 40,
      rainfall: Math.random() * 10,
      windSpeed: Math.random() * 20,
      description: '맑음',
    };
  } catch (error) {
    console.error('Error fetching external weather data:', error);
    handleApiError(error);
  }
};
</file>

<file path="src/services/core/apiClient.ts">
/**
 * 공통 API 클라이언트 설정
 * 모든 Supabase API 호출의 중앙 집중화
 */

import { supabase } from '@/integrations/supabase/client';

export class ApiError extends Error {
  constructor(
    message: string,
    public code?: string,
    public details?: any
  ) {
    super(message);
    this.name = 'ApiError';
  }
}

/**
 * 공통 에러 처리 함수
 */
export const handleApiError = (error: any): never => {
  console.error('API Error:', error);
  
  if (error.code) {
    throw new ApiError(error.message || 'API request failed', error.code, error.details);
  }
  
  throw new ApiError(error.message || 'Unknown API error');
};

/**
 * 공통 API 응답 타입
 */
export interface ApiResponse<T> {
  data: T;
  error?: never;
}

export interface ApiErrorResponse {
  data?: never;
  error: ApiError;
}

export type ApiResult<T> = ApiResponse<T> | ApiErrorResponse;

/**
 * 안전한 API 호출 래퍼
 */
export const safeApiCall = async <T>(
  apiCall: () => Promise<{ data: T; error: any }>
): Promise<T> => {
  try {
    const { data, error } = await apiCall();
    
    if (error) {
      handleApiError(error);
    }
    
    return data;
  } catch (error) {
    handleApiError(error);
  }
};

/**
 * Supabase 클라이언트 인스턴스 export
 */
export { supabase };

/**
 * 공통 쿼리 옵션
 */
export const defaultQueryOptions = {
  staleTime: 5 * 60 * 1000, // 5분
  gcTime: 10 * 60 * 1000,   // 10분 (이전 cacheTime)
  retry: 1,
  refetchOnWindowFocus: false,
} as const;
</file>

<file path="src/services/core/realtime.ts">
/**
 * 실시간 구독 관리 서비스
 * Supabase Realtime 기능을 중앙화
 */

import { supabase } from './apiClient';
import type { RealtimeChannel } from '@supabase/supabase-js';

export type ChangeEventType = 'INSERT' | 'UPDATE' | 'DELETE';

export interface RealtimeSubscriptionOptions<T = any> {
  table: string;
  filter?: string;
  onInsert?: (payload: T) => void;
  onUpdate?: (payload: T) => void;
  onDelete?: (payload: { old_record: T }) => void;
  onChange?: (payload: { eventType: ChangeEventType; new: T; old: T }) => void;
}

export interface RealtimeManager {
  channel: RealtimeChannel;
  unsubscribe: () => void;
}

/**
 * 테이블 변경사항 구독
 */
export const subscribeToTable = <T>(
  channelName: string,
  options: RealtimeSubscriptionOptions<T>
): RealtimeManager => {
  const { table, filter, onInsert, onUpdate, onDelete, onChange } = options;

  const channel = supabase
    .channel(channelName)
    .on(
      'postgres_changes',
      {
        event: '*',
        schema: 'public',
        table,
        filter,
      },
      (payload: any) => {
        const { eventType, new: newRecord, old: oldRecord } = payload;

        // 공통 onChange 콜백 호출
        if (onChange) {
          onChange({ eventType, new: newRecord, old: oldRecord });
        }

        // 이벤트별 개별 콜백 호출
        switch (eventType) {
          case 'INSERT':
            if (onInsert) onInsert(newRecord);
            break;
          case 'UPDATE':
            if (onUpdate) onUpdate(newRecord);
            break;
          case 'DELETE':
            if (onDelete) onDelete({ old_record: oldRecord });
            break;
        }
      }
    )
    .subscribe();

  const unsubscribe = () => {
    supabase.removeChannel(channel);
  };

  return { channel, unsubscribe };
};

/**
 * 사용자별 노트북 변경사항 구독
 */
export const subscribeToUserNotebooks = (
  userId: string,
  callbacks: {
    onInsert?: (notebook: any) => void;
    onUpdate?: (notebook: any) => void;
    onDelete?: (payload: { old_record: any }) => void;
  }
): RealtimeManager => {
  return subscribeToTable(`notebooks-${userId}`, {
    table: 'notebooks',
    filter: `user_id=eq.${userId}`,
    ...callbacks,
  });
};

/**
 * 노트북별 소스 변경사항 구독
 */
export const subscribeToNotebookSources = (
  notebookId: string,
  callbacks: {
    onInsert?: (source: any) => void;
    onUpdate?: (source: any) => void;
    onDelete?: (payload: { old_record: any }) => void;
  }
): RealtimeManager => {
  return subscribeToTable(`sources-${notebookId}`, {
    table: 'sources',
    filter: `notebook_id=eq.${notebookId}`,
    ...callbacks,
  });
};

/**
 * 노트북별 노트 변경사항 구독
 */
export const subscribeToNotebookNotes = (
  notebookId: string,
  callbacks: {
    onInsert?: (note: any) => void;
    onUpdate?: (note: any) => void;
    onDelete?: (payload: { old_record: any }) => void;
  }
): RealtimeManager => {
  return subscribeToTable(`notes-${notebookId}`, {
    table: 'notes',
    filter: `notebook_id=eq.${notebookId}`,
    ...callbacks,
  });
};

/**
 * 채팅 메시지 변경사항 구독
 */
export const subscribeToChatMessages = (
  sessionId: string,
  callbacks: {
    onInsert?: (message: any) => void;
    onUpdate?: (message: any) => void;
    onDelete?: (payload: { old_record: any }) => void;
  }
): RealtimeManager => {
  return subscribeToTable(`chat-${sessionId}`, {
    table: 'n8n_chat_histories',
    filter: `session_id=eq.${sessionId}`,
    ...callbacks,
  });
};

/**
 * 여러 구독을 한번에 관리하는 매니저
 */
export class RealtimeSubscriptionManager {
  private subscriptions: Map<string, RealtimeManager> = new Map();

  /**
   * 구독 추가
   */
  add(key: string, manager: RealtimeManager): void {
    // 기존 구독이 있다면 해제
    if (this.subscriptions.has(key)) {
      this.subscriptions.get(key)?.unsubscribe();
    }
    
    this.subscriptions.set(key, manager);
  }

  /**
   * 특정 구독 해제
   */
  remove(key: string): void {
    const manager = this.subscriptions.get(key);
    if (manager) {
      manager.unsubscribe();
      this.subscriptions.delete(key);
    }
  }

  /**
   * 모든 구독 해제
   */
  removeAll(): void {
    this.subscriptions.forEach((manager) => {
      manager.unsubscribe();
    });
    this.subscriptions.clear();
  }

  /**
   * 구독 상태 확인
   */
  has(key: string): boolean {
    return this.subscriptions.has(key);
  }

  /**
   * 활성 구독 개수
   */
  get size(): number {
    return this.subscriptions.size;
  }
}
</file>

<file path="src/services/core/storage.ts">
/**
 * 파일 스토리지 서비스
 * Supabase Storage 작업을 중앙화
 */

import { supabase, safeApiCall, ApiError } from './apiClient';

export interface FileUploadOptions {
  bucket: string;
  path: string;
  file: File;
  upsert?: boolean;
  contentType?: string;
}

export interface FileUploadResult {
  path: string;
  fullPath: string;
  id: string;
}

export interface FileDownloadOptions {
  bucket: string;
  path: string;
  download?: boolean;
}

/**
 * 파일 업로드
 */
export const uploadFile = async (options: FileUploadOptions): Promise<FileUploadResult> => {
  const { bucket, path, file, upsert = false, contentType } = options;

  const uploadOptions: any = {
    upsert,
  };

  if (contentType) {
    uploadOptions.contentType = contentType;
  }

  const result = await safeApiCall(async () => {
    return await supabase.storage
      .from(bucket)
      .upload(path, file, uploadOptions);
  });

  return {
    path: result.path,
    fullPath: result.fullPath || `${bucket}/${path}`,
    id: result.id,
  };
};

/**
 * 파일 다운로드 URL 생성
 */
export const getFileUrl = async (options: FileDownloadOptions): Promise<string> => {
  const { bucket, path, download = false } = options;

  const result = await safeApiCall(async () => {
    if (download) {
      return await supabase.storage.from(bucket).download(path);
    } else {
      return await supabase.storage.from(bucket).createSignedUrl(path, 3600); // 1시간 유효
    }
  });

  if (download) {
    return URL.createObjectURL(result);
  }

  return result.signedUrl;
};

/**
 * 파일 삭제
 */
export const deleteFile = async (bucket: string, path: string): Promise<void> => {
  await safeApiCall(async () => {
    return await supabase.storage.from(bucket).remove([path]);
  });
};

/**
 * 파일 목록 조회
 */
export const listFiles = async (
  bucket: string, 
  path?: string,
  options?: { limit?: number; offset?: number }
): Promise<any[]> => {
  return await safeApiCall(async () => {
    return await supabase.storage
      .from(bucket)
      .list(path, {
        limit: options?.limit,
        offset: options?.offset,
      });
  });
};

/**
 * 파일 정보 조회
 */
export const getFileInfo = async (bucket: string, path: string) => {
  return await safeApiCall(async () => {
    return await supabase.storage.from(bucket).list(path);
  });
};

/**
 * 파일 크기 및 타입 검증
 */
export const validateFile = (
  file: File, 
  options: {
    maxSize?: number;
    allowedTypes?: string[];
  } = {}
): void => {
  const { maxSize = 50 * 1024 * 1024, allowedTypes } = options; // 기본 50MB

  if (file.size > maxSize) {
    throw new ApiError(
      `File size exceeds limit. Maximum size: ${maxSize / (1024 * 1024)}MB`,
      'FILE_TOO_LARGE'
    );
  }

  if (allowedTypes && !allowedTypes.includes(file.type)) {
    throw new ApiError(
      `File type not allowed. Allowed types: ${allowedTypes.join(', ')}`,
      'FILE_TYPE_NOT_ALLOWED'
    );
  }
};

/**
 * 파일명 안전화 (한글 및 특수문자 처리)
 */
export const sanitizeFileName = (fileName: string, keepExtension = true): string => {
  const extension = keepExtension ? fileName.substring(fileName.lastIndexOf('.')) : '';
  const name = keepExtension ? fileName.substring(0, fileName.lastIndexOf('.')) : fileName;
  
  // 한글, 영문, 숫자, 하이픈, 언더스코어만 허용
  const sanitized = name
    .replace(/[^\w가-힣\-]/g, '_')
    .replace(/_{2,}/g, '_')
    .replace(/^_|_$/g, '');

  return sanitized + extension;
};

/**
 * 고유한 파일 경로 생성
 */
export const generateUniqueFilePath = (
  notebookId: string, 
  originalFileName: string
): string => {
  const sanitizedName = sanitizeFileName(originalFileName);
  const timestamp = Date.now();
  const randomSuffix = Math.random().toString(36).substring(2, 8);
  
  return `${notebookId}/${timestamp}_${randomSuffix}_${sanitizedName}`;
};
</file>

<file path="src/services/notebooks/index.ts">
/**
 * Notebooks 서비스 모듈 인덱스
 * notebooks 도메인의 모든 API 서비스를 중앙에서 export
 */

// API 서비스 함수들
export {
  getNotebooks,
  getNotebook,
  createNotebook,
  updateNotebook,
  deleteNotebook,
  updateNotebookStatus
} from './notebooksApi';

// 생성 관련 서비스 함수들
export {
  generateNotebookContent,
  generateAudioOverview,
  refreshAudioUrl,
  checkAudioExpiry,
  autoRefreshIfExpired,
  generationUtils
} from './notebooksGeneration';

// 타입 정의들
export type {
  Notebook,
  NotebookInsert,
  NotebookUpdate,
  NotebookCreateInput,
  NotebookUpdateInput,
  NotebookWithSources,
  NotebookGenerationStatus,
  AudioGenerationStatus,
  NotebookContentGenerationRequest,
  AudioOverviewGenerationRequest,
  AudioUrlRefreshRequest,
  NotebookApiResponse,
  GetNotebooksOptions
} from './types';
</file>

<file path="src/services/notebooks/notebooksApi.ts">
/**
 * Notebooks API 서비스
 * 노트북 CRUD 작업을 위한 공통 API 서비스
 */

import { safeApiCall, handleApiError, supabase } from '@/services/core/apiClient';
import {
  Notebook,
  NotebookWithSources,
  NotebookCreateInput,
  NotebookUpdateInput,
  NotebookGenerationStatus,
  GetNotebooksOptions
} from './types';

/**
 * 사용자별 노트북 목록 조회
 */
export const getNotebooks = async (
  userId: string, 
  options: GetNotebooksOptions = {}
): Promise<NotebookWithSources[]> => {
  const {
    includeSourceCount = true,
    orderBy = 'updated_at',
    ascending = false
  } = options;

  try {
    console.log('Fetching notebooks for user:', userId);
    
    // 노트북 목록 조회
    const notebooksData = await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .select('*')
        .eq('user_id', userId)
        .order(orderBy, { ascending })
    );

    if (!includeSourceCount) {
      return notebooksData.map(notebook => ({
        ...notebook,
        sources: [{ count: 0 }]
      }));
    }

    // 각 노트북의 소스 개수를 조회
    const notebooksWithCounts = await Promise.all(
      (notebooksData || []).map(async (notebook) => {
        try {
          const result = await safeApiCall(async () =>
            supabase
              .from('sources')
              .select('*', { count: 'exact', head: true })
              .eq('notebook_id', notebook.id)
          );

          const count = result?.count || 0;
          return { ...notebook, sources: [{ count }] };
        } catch (error) {
          console.error('Error fetching source count for notebook:', notebook.id, error);
          return { ...notebook, sources: [{ count: 0 }] };
        }
      })
    );

    console.log('Fetched notebooks:', notebooksWithCounts?.length || 0);
    return notebooksWithCounts || [];
  } catch (error) {
    console.error('Error fetching notebooks:', error);
    handleApiError(error);
  }
};

/**
 * 개별 노트북 조회
 */
export const getNotebook = async (id: string, userId: string): Promise<Notebook> => {
  try {
    console.log('Fetching notebook:', id, 'for user:', userId);
    
    const notebook = await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .select('*')
        .eq('id', id)
        .eq('user_id', userId)
        .single()
    );

    console.log('Notebook fetched successfully:', notebook);
    return notebook;
  } catch (error) {
    console.error('Error fetching notebook:', error);
    handleApiError(error);
  }
};

/**
 * 노트북 생성
 */
export const createNotebook = async (
  userId: string, 
  data: NotebookCreateInput
): Promise<Notebook> => {
  try {
    console.log('Creating notebook with data:', data);
    console.log('Current user:', userId);

    const notebook = await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .insert({
          title: data.title,
          description: data.description,
          color: data.color,
          icon: data.icon,
          user_id: userId,
          generation_status: 'pending' as NotebookGenerationStatus,
        })
        .select()
        .single()
    );

    console.log('Notebook created successfully:', notebook);
    return notebook;
  } catch (error) {
    console.error('Error creating notebook:', error);
    handleApiError(error);
  }
};

/**
 * 노트북 업데이트
 */
export const updateNotebook = async (
  id: string, 
  updates: NotebookUpdateInput
): Promise<Notebook> => {
  try {
    console.log('Updating notebook:', id, updates);
    
    const notebook = await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .update(updates)
        .eq('id', id)
        .select()
        .single()
    );

    console.log('Notebook updated successfully:', notebook);
    return notebook;
  } catch (error) {
    console.error('Error updating notebook:', error);
    handleApiError(error);
  }
};

/**
 * 노트북 삭제 (파일 정리 포함)
 */
export const deleteNotebook = async (id: string): Promise<Notebook> => {
  try {
    console.log('Starting notebook deletion process for:', id);
    
    // 노트북 정보 조회
    const notebook = await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .select('id, title')
        .eq('id', id)
        .single()
    );

    console.log('Found notebook to delete:', notebook.title);

    // 노트북과 연결된 소스들 조회
    const sources = await safeApiCall(async () =>
      supabase
        .from('sources')
        .select('id, title, file_path, type')
        .eq('notebook_id', id)
    );

    console.log(`Found ${sources?.length || 0} sources to clean up`);

    // 파일 경로가 있는 소스들의 파일을 스토리지에서 삭제
    const filesToDelete = sources?.filter(source => source.file_path)
      .map(source => source.file_path) || [];
    
    if (filesToDelete.length > 0) {
      console.log('Deleting files from storage:', filesToDelete);
      
      try {
        await safeApiCall(async () =>
          supabase.storage
            .from('sources')
            .remove(filesToDelete)
        );
        console.log('All files deleted successfully from storage');
      } catch (storageError) {
        console.error('Error deleting files from storage:', storageError);
        // 스토리지 삭제 실패해도 노트북 삭제는 계속 진행
      }
    } else {
      console.log('No files to delete from storage');
    }

    // 노트북 삭제 (cascade로 소스들도 함께 삭제됨)
    await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .delete()
        .eq('id', id)
    );
    
    console.log('Notebook deleted successfully with cascade deletion');
    return notebook;
  } catch (error) {
    console.error('Error in deletion process:', error);
    handleApiError(error);
  }
};

/**
 * 노트북 생성 상태 업데이트
 */
export const updateNotebookStatus = async (
  id: string, 
  status: NotebookGenerationStatus
): Promise<Notebook> => {
  try {
    console.log('Updating notebook status:', id, 'to:', status);
    
    const notebook = await safeApiCall(async () =>
      supabase
        .from('notebooks')
        .update({ generation_status: status })
        .eq('id', id)
        .select()
        .single()
    );

    console.log('Notebook status updated successfully:', notebook);
    return notebook;
  } catch (error) {
    console.error('Error updating notebook status:', error);
    handleApiError(error);
  }
};
</file>

<file path="src/services/notebooks/notebooksGeneration.ts">
/**
 * Notebooks 생성 관련 API 서비스
 * 노트북 콘텐츠 생성 및 오디오 관련 Edge Functions 호출
 */

import { safeApiCall, handleApiError, supabase } from '@/services/core/apiClient';
import {
  NotebookContentGenerationRequest,
  AudioOverviewGenerationRequest,
  AudioUrlRefreshRequest,
  NotebookApiResponse
} from './types';

/**
 * 노트북 콘텐츠 생성 (Edge Function 호출)
 */
export const generateNotebookContent = async (
  request: NotebookContentGenerationRequest
): Promise<NotebookApiResponse> => {
  try {
    console.log('Starting notebook content generation for:', request.notebookId, 
                'with source type:', request.sourceType);
    
    const response = await safeApiCall(async () =>
      supabase.functions.invoke('generate-notebook-content', {
        body: {
          notebookId: request.notebookId,
          filePath: request.filePath,
          sourceType: request.sourceType
        }
      })
    );

    console.log('Notebook content generation response:', response);
    return response;
  } catch (error) {
    console.error('Error generating notebook content:', error);
    handleApiError(error);
  }
};

/**
 * 오디오 개요 생성 (Edge Function 호출)
 */
export const generateAudioOverview = async (
  request: AudioOverviewGenerationRequest
): Promise<NotebookApiResponse> => {
  try {
    console.log('Starting audio overview generation for notebook:', request.notebookId);
    
    const response = await safeApiCall(async () =>
      supabase.functions.invoke('generate-audio-overview', {
        body: { notebookId: request.notebookId }
      })
    );

    console.log('Audio overview generation response:', response);
    return response;
  } catch (error) {
    console.error('Error generating audio overview:', error);
    handleApiError(error);
  }
};

/**
 * 오디오 URL 갱신 (Edge Function 호출)
 */
export const refreshAudioUrl = async (
  request: AudioUrlRefreshRequest
): Promise<NotebookApiResponse> => {
  try {
    console.log('Refreshing audio URL for notebook:', request.notebookId, 
                'silent:', request.silent);
    
    const response = await safeApiCall(async () =>
      supabase.functions.invoke('refresh-audio-url', {
        body: { notebookId: request.notebookId }
      })
    );

    console.log('Audio URL refresh response:', response);
    return response;
  } catch (error) {
    console.error('Error refreshing audio URL:', error);
    handleApiError(error);
  }
};

/**
 * 오디오 URL 만료 확인
 */
export const checkAudioExpiry = (expiresAt: string | null): boolean => {
  if (!expiresAt) return true;
  return new Date(expiresAt) <= new Date();
};

/**
 * 만료된 오디오 URL 자동 갱신
 */
export const autoRefreshIfExpired = async (
  notebookId: string, 
  expiresAt: string | null
): Promise<NotebookApiResponse | null> => {
  try {
    if (checkAudioExpiry(expiresAt)) {
      console.log('Audio URL expired, auto-refreshing for notebook:', notebookId);
      
      const response = await refreshAudioUrl({ 
        notebookId, 
        silent: true 
      });
      
      console.log('Auto-refresh completed successfully');
      return response;
    }
    
    return null;
  } catch (error) {
    console.error('Auto-refresh failed for notebook:', notebookId, error);
    // 자동 갱신 실패는 에러를 throw하지 않음 (사용자 경험을 위해)
    return null;
  }
};

/**
 * 생성 관련 유틸리티 함수들
 */
export const generationUtils = {
  /**
   * 생성 상태가 완료되었는지 확인
   */
  isGenerationComplete: (status: string | null): boolean => {
    return status === 'completed';
  },

  /**
   * 생성 상태가 실패했는지 확인
   */
  isGenerationFailed: (status: string | null): boolean => {
    return status === 'failed';
  },

  /**
   * 생성이 진행 중인지 확인
   */
  isGenerationInProgress: (status: string | null): boolean => {
    return status === 'generating' || status === 'processing' || status === 'pending';
  },

  /**
   * 오디오가 재생 가능한 상태인지 확인
   */
  isAudioPlayable: (audioUrl: string | null, expiresAt: string | null): boolean => {
    return audioUrl !== null && !checkAudioExpiry(expiresAt);
  }
};
</file>

<file path="src/services/notebooks/types.ts">
/**
 * Notebook 도메인 타입 정의
 */

import { Database } from '@/integrations/supabase/types';

// Supabase 타입에서 Notebook 타입 추출
export type Notebook = Database['public']['Tables']['notebooks']['Row'];
export type NotebookInsert = Database['public']['Tables']['notebooks']['Insert'];
export type NotebookUpdate = Database['public']['Tables']['notebooks']['Update'];

/**
 * 노트북 생성 입력 타입
 */
export interface NotebookCreateInput {
  title: string;
  description?: string;
  color?: string;
  icon?: string;
}

/**
 * 노트북 업데이트 입력 타입
 */
export interface NotebookUpdateInput {
  title?: string;
  description?: string;
  color?: string;
  icon?: string;
  generation_status?: NotebookGenerationStatus;
  audio_overview_generation_status?: AudioGenerationStatus;
  audio_overview_url?: string;
  audio_url_expires_at?: string;
  example_questions?: string[];
}

/**
 * 소스 개수를 포함한 노트북 타입
 */
export interface NotebookWithSources extends Notebook {
  sources: Array<{ count: number }>;
}

/**
 * 노트북 생성 상태
 */
export type NotebookGenerationStatus = 
  | 'pending'
  | 'processing' 
  | 'completed'
  | 'failed';

/**
 * 오디오 생성 상태
 */
export type AudioGenerationStatus = 
  | 'pending'
  | 'generating'
  | 'completed'
  | 'failed';

/**
 * 노트북 콘텐츠 생성 요청 타입
 */
export interface NotebookContentGenerationRequest {
  notebookId: string;
  filePath?: string;
  sourceType: string;
}

/**
 * 오디오 개요 생성 요청 타입
 */
export interface AudioOverviewGenerationRequest {
  notebookId: string;
}

/**
 * 오디오 URL 갱신 요청 타입
 */
export interface AudioUrlRefreshRequest {
  notebookId: string;
  silent?: boolean;
}

/**
 * API 응답 타입
 */
export interface NotebookApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
}

/**
 * 노트북 목록 조회 옵션
 */
export interface GetNotebooksOptions {
  includeSourceCount?: boolean;
  orderBy?: 'updated_at' | 'created_at' | 'title';
  ascending?: boolean;
}
</file>

<file path="src/services/sources/documentProcessing.ts">
/**
 * 문서 처리 서비스
 * 문서 처리 트리거, 상태 확인, 재시도 등을 담당
 */

import { supabase } from '../core/apiClient';
import { getSource, updateSourceStatus } from './sourcesApi';
import {
  Source,
  DocumentProcessingStatus,
  ProcessingStatus,
  SourceType,
} from './types';

// 처리 상태 체크 간격 (밀리초)
const POLLING_INTERVALS = {
  default: 2000,  // 2초
  fast: 1000,     // 1초
  slow: 5000,     // 5초
} as const;

// 최대 대기 시간 (밀리초)
const MAX_PROCESSING_TIME = {
  pdf: 5 * 60 * 1000,     // 5분
  text: 30 * 1000,        // 30초
  website: 2 * 60 * 1000, // 2분
  youtube: 3 * 60 * 1000, // 3분
  audio: 10 * 60 * 1000,  // 10분
} as const;

// 활성 처리 모니터링을 위한 맵
const activeProcessing = new Map<string, NodeJS.Timeout>();

/**
 * 문서 처리 트리거
 */
export const triggerDocumentProcessing = async (sourceId: string): Promise<void> => {
  const source = await getSource(sourceId);
  
  if (!source) {
    throw new Error(`Source not found: ${sourceId}`);
  }

  // 이미 처리 중이거나 완료된 경우
  if (source.processing_status === 'processing' || source.processing_status === 'completed') {
    console.log(`Source ${sourceId} is already ${source.processing_status}`);
    return;
  }

  // 처리 시작
  await updateSourceStatus(sourceId, 'processing', {
    processingStartTime: new Date().toISOString(),
  });

  // 처리 모니터링 시작
  startProcessingMonitoring(sourceId, source.type);

  // Edge Function 호출 (실제 문서 처리)
  await callDocumentProcessingFunction(source);
};

/**
 * 처리 상태 확인
 */
export const checkProcessingStatus = async (sourceId: string): Promise<DocumentProcessingStatus> => {
  const source = await getSource(sourceId);
  
  if (!source) {
    throw new Error(`Source not found: ${sourceId}`);
  }

  const metadata = source.metadata as Record<string, any> || {};
  const startTime = metadata.processingStartTime ? new Date(metadata.processingStartTime) : new Date();
  const now = new Date();
  const elapsed = now.getTime() - startTime.getTime();

  // 진행률 추정 (타입별로 다르게 계산)
  const estimatedDuration = MAX_PROCESSING_TIME[source.type] || MAX_PROCESSING_TIME.text;
  const estimatedProgress = Math.min(Math.round((elapsed / estimatedDuration) * 100), 95);

  // 남은 시간 추정
  const estimatedTimeRemaining = source.processing_status === 'processing' 
    ? Math.max(0, Math.round((estimatedDuration - elapsed) / 1000))
    : 0;

  return {
    sourceId,
    status: source.processing_status as ProcessingStatus || 'pending',
    progress: source.processing_status === 'completed' ? 100 : estimatedProgress,
    message: getProcessingMessage(source.processing_status as ProcessingStatus, source.type),
    error: metadata.processingError || undefined,
    estimatedTimeRemaining,
    lastUpdated: new Date(source.updated_at),
  };
};

/**
 * 처리 재시도
 */
export const retryProcessing = async (sourceId: string): Promise<void> => {
  const source = await getSource(sourceId);
  
  if (!source) {
    throw new Error(`Source not found: ${sourceId}`);
  }

  // 재시도 카운트 증가
  const metadata = source.metadata as Record<string, any> || {};
  const retryCount = (metadata.retryCount || 0) + 1;

  if (retryCount > 3) {
    throw new Error('최대 재시도 횟수를 초과했습니다.');
  }

  // 상태 초기화 및 재시도 정보 업데이트
  await updateSourceStatus(sourceId, 'pending', {
    ...metadata,
    retryCount,
    lastRetryTime: new Date().toISOString(),
    processingError: null,
  });

  // 잠시 대기 후 처리 트리거
  setTimeout(() => {
    triggerDocumentProcessing(sourceId).catch(console.error);
  }, 1000);
};

/**
 * 처리 취소
 */
export const cancelProcessing = async (sourceId: string): Promise<void> => {
  // 활성 모니터링 중지
  const timeout = activeProcessing.get(sourceId);
  if (timeout) {
    clearTimeout(timeout);
    activeProcessing.delete(sourceId);
  }

  // 상태 업데이트
  await updateSourceStatus(sourceId, 'cancelled', {
    cancelledAt: new Date().toISOString(),
  });
};

/**
 * 대기 중인 모든 소스 처리 시작
 */
export const processPendingSources = async (notebookId?: string): Promise<void> => {
  let query = supabase
    .from('sources')
    .select('*')
    .eq('processing_status', 'pending')
    .order('created_at', { ascending: true });

  if (notebookId) {
    query = query.eq('notebook_id', notebookId);
  }

  const { data: pendingSources, error } = await query;
  
  if (error) throw error;

  // 순차적으로 처리 (동시 처리로 인한 부하 방지)
  for (const source of pendingSources || []) {
    try {
      await triggerDocumentProcessing(source.id);
      
      // 다음 처리 전 짧은 대기
      await new Promise(resolve => setTimeout(resolve, 500));
    } catch (error) {
      console.error(`Failed to process source ${source.id}:`, error);
      
      // 에러 발생해도 다른 소스는 계속 처리
      await updateSourceStatus(source.id, 'failed', {
        processingError: error instanceof Error ? error.message : 'Unknown error',
      });
    }
  }
};

/**
 * 처리 통계 조회
 */
export const getProcessingStats = async (notebookId?: string) => {
  let query = supabase
    .from('sources')
    .select('processing_status');

  if (notebookId) {
    query = query.eq('notebook_id', notebookId);
  }

  const { data, error } = await query;
  if (error) throw error;

  const stats = {
    total: 0,
    pending: 0,
    processing: 0,
    completed: 0,
    failed: 0,
    cancelled: 0,
  };

  data?.forEach((source) => {
    stats.total++;
    const status = source.processing_status as ProcessingStatus || 'pending';
    stats[status]++;
  });

  return stats;
};

// 내부 헬퍼 함수들

/**
 * 문서 처리 Edge Function 호출
 */
const callDocumentProcessingFunction = async (source: Source): Promise<void> => {
  try {
    // 실제 구현에서는 Edge Function을 호출
    // 현재는 시뮬레이션을 위한 타임아웃 사용
    const processingTime = getProcessingTime(source.type);
    
    setTimeout(async () => {
      try {
        // 처리 완료 시뮬레이션
        await updateSourceStatus(source.id, 'completed', {
          processingCompletedAt: new Date().toISOString(),
          processingDuration: processingTime,
        });
        
        // 활성 처리에서 제거
        activeProcessing.delete(source.id);
      } catch (error) {
        console.error(`Failed to complete processing for source ${source.id}:`, error);
        await updateSourceStatus(source.id, 'failed', {
          processingError: error instanceof Error ? error.message : 'Processing failed',
        });
        
        activeProcessing.delete(source.id);
      }
    }, processingTime);

  } catch (error) {
    console.error('Failed to trigger document processing:', error);
    await updateSourceStatus(source.id, 'failed', {
      processingError: error instanceof Error ? error.message : 'Failed to start processing',
    });
  }
};

/**
 * 처리 모니터링 시작
 */
const startProcessingMonitoring = (sourceId: string, sourceType: SourceType): void => {
  // 기존 모니터링이 있으면 중지
  const existingTimeout = activeProcessing.get(sourceId);
  if (existingTimeout) {
    clearTimeout(existingTimeout);
  }

  const maxTime = MAX_PROCESSING_TIME[sourceType];
  const interval = POLLING_INTERVALS.default;

  // 최대 대기 시간 후 타임아웃 처리
  const timeoutId = setTimeout(async () => {
    try {
      const source = await getSource(sourceId);
      
      // 아직 처리 중이면 타임아웃으로 처리
      if (source.processing_status === 'processing') {
        await updateSourceStatus(sourceId, 'failed', {
          processingError: 'Processing timeout',
          processingTimeout: true,
        });
      }
    } catch (error) {
      console.error(`Failed to handle timeout for source ${sourceId}:`, error);
    } finally {
      activeProcessing.delete(sourceId);
    }
  }, maxTime);

  activeProcessing.set(sourceId, timeoutId);
};

/**
 * 소스 타입별 처리 시간 반환 (시뮬레이션용)
 */
const getProcessingTime = (sourceType: SourceType): number => {
  const baseTimes = {
    pdf: 15000,     // 15초
    text: 3000,     // 3초
    website: 8000,  // 8초
    youtube: 12000, // 12초
    audio: 25000,   // 25초
  };

  const baseTime = baseTimes[sourceType] || baseTimes.text;
  
  // 약간의 랜덤성 추가 (±20%)
  const variation = baseTime * 0.2;
  return baseTime + (Math.random() - 0.5) * variation;
};

/**
 * 처리 상태별 메시지 반환
 */
const getProcessingMessage = (status: ProcessingStatus, sourceType: SourceType): string => {
  const typeNames = {
    pdf: 'PDF 문서',
    text: '텍스트',
    website: '웹페이지',
    youtube: 'YouTube 동영상',
    audio: '오디오 파일',
  };

  const typeName = typeNames[sourceType] || '문서';

  switch (status) {
    case 'pending':
      return `${typeName} 처리 대기 중입니다.`;
    case 'processing':
      return `${typeName}를 분석하고 있습니다.`;
    case 'completed':
      return `${typeName} 처리가 완료되었습니다.`;
    case 'failed':
      return `${typeName} 처리 중 오류가 발생했습니다.`;
    case 'cancelled':
      return `${typeName} 처리가 취소되었습니다.`;
    default:
      return '처리 상태를 확인할 수 없습니다.';
  }
};

/**
 * 모든 활성 처리 중지
 */
export const stopAllProcessing = (): void => {
  activeProcessing.forEach((timeout) => {
    clearTimeout(timeout);
  });
  activeProcessing.clear();
};

/**
 * 활성 처리 목록 조회
 */
export const getActiveProcessing = (): string[] => {
  return Array.from(activeProcessing.keys());
};

/**
 * 처리 상태 실시간 구독
 */
export const subscribeToProcessingUpdates = (
  notebookId: string,
  callback: (sourceId: string, status: DocumentProcessingStatus) => void
) => {
  const channel = supabase
    .channel('processing-updates')
    .on(
      'postgres_changes',
      {
        event: 'UPDATE',
        schema: 'public',
        table: 'sources',
        filter: `notebook_id=eq.${notebookId}`,
      },
      async (payload: any) => {
        const updatedSource = payload.new as Source;
        if (updatedSource.processing_status) {
          const status = await checkProcessingStatus(updatedSource.id);
          callback(updatedSource.id, status);
        }
      }
    )
    .subscribe();

  return () => {
    supabase.removeChannel(channel);
  };
};
</file>

<file path="src/services/sources/fileUpload.ts">
/**
 * 파일 업로드 서비스
 * 소스 파일 업로드와 다중 파일 처리를 담당
 */

import { 
  uploadFile, 
  validateFile, 
  generateUniqueFilePath, 
  sanitizeFileName,
  FileUploadOptions as CoreFileUploadOptions 
} from '../core/storage';
import { createSource, updateSource } from './sourcesApi';
import {
  Source,
  SourceType,
  FileUploadOptions,
  FileUploadProgress,
  MultipleFileUploadResult,
  FileValidationResult,
  UploadCancellation,
  ProcessingStatus,
} from './types';

// 파일 타입별 설정
const FILE_TYPE_CONFIGS = {
  pdf: {
    maxSize: 50 * 1024 * 1024, // 50MB
    allowedTypes: ['application/pdf'],
    extensions: ['.pdf'],
  },
  audio: {
    maxSize: 100 * 1024 * 1024, // 100MB
    allowedTypes: [
      'audio/mpeg',
      'audio/mp3', 
      'audio/wav',
      'audio/x-wav',
      'audio/mp4',
      'audio/m4a',
      'audio/ogg',
      'audio/webm'
    ],
    extensions: ['.mp3', '.wav', '.m4a', '.mp4', '.ogg', '.webm'],
  },
} as const;

// 활성 업로드 추적을 위한 맵
const activeUploads = new Map<string, AbortController>();

/**
 * 파일 검증
 */
export const validateSourceFile = (
  file: File, 
  sourceType: SourceType
): FileValidationResult => {
  const errors: string[] = [];
  const warnings: string[] = [];

  const fileInfo = {
    name: file.name,
    size: file.size,
    type: file.type,
    extension: file.name.substring(file.name.lastIndexOf('.')).toLowerCase(),
  };

  // 파일 크기가 0인지 확인
  if (file.size === 0) {
    errors.push('파일이 비어있습니다.');
  }

  // 파일명 길이 확인
  if (file.name.length > 255) {
    errors.push('파일명이 너무 깁니다. (최대 255자)');
  }

  // 타입별 검증
  if (sourceType === 'pdf' || sourceType === 'audio') {
    const config = FILE_TYPE_CONFIGS[sourceType];
    
    try {
      validateFile(file, {
        maxSize: config.maxSize,
        allowedTypes: config.allowedTypes,
      });
    } catch (error: any) {
      errors.push(error.message);
    }
    
    // 확장자 추가 검증
    if (!config.extensions.includes(fileInfo.extension)) {
      errors.push(`지원되지 않는 파일 형식입니다. 지원 형식: ${config.extensions.join(', ')}`);
    }
  }

  // 용량이 큰 파일에 대한 경고
  if (file.size > 20 * 1024 * 1024) { // 20MB 이상
    warnings.push('파일 크기가 큽니다. 업로드와 처리에 시간이 오래 걸릴 수 있습니다.');
  }

  return {
    isValid: errors.length === 0,
    errors,
    warnings,
    fileInfo,
  };
};

/**
 * 파일 업로드와 소스 생성
 */
export const uploadSourceFile = async (options: FileUploadOptions): Promise<Source> => {
  const {
    notebookId,
    file,
    title,
    metadata = {},
    onProgress,
    onStatusChange,
    signal,
  } = options;

  // 파일 타입 결정
  const sourceType: SourceType = getSourceTypeFromFile(file);
  
  // 파일 검증
  const validation = validateSourceFile(file, sourceType);
  if (!validation.isValid) {
    throw new Error(`파일 검증 실패: ${validation.errors.join(', ')}`);
  }

  // AbortController 설정
  const abortController = signal ? signal : new AbortController();
  const sourceId = generateTempSourceId();
  
  if (!signal) {
    activeUploads.set(sourceId, abortController);
  }

  try {
    // 1. 먼저 소스 생성 (파일 경로 없이)
    const source = await createSource({
      notebookId,
      title: title || file.name,
      type: sourceType,
      processingStatus: 'pending',
      metadata: {
        ...metadata,
        originalFileName: file.name,
        fileSize: file.size,
        fileType: file.type,
        uploadStartTime: new Date().toISOString(),
      },
    });

    const actualSourceId = source.id;

    // 활성 업로드 맵 업데이트
    if (!signal) {
      activeUploads.delete(sourceId);
      activeUploads.set(actualSourceId, abortController);
    }

    // 진행률 초기화
    const initialProgress: FileUploadProgress = {
      sourceId: actualSourceId,
      fileName: file.name,
      progress: 0,
      status: 'uploading',
      uploadStartTime: new Date(),
    };

    onProgress?.(initialProgress);
    onStatusChange?.('processing');

    // 2. 파일 업로드
    const filePath = generateUniqueFilePath(notebookId, file.name);
    
    // 업로드 진행률 시뮬레이션 (실제 구현에서는 XHR의 progress 이벤트 사용)
    let progress = 0;
    const progressInterval = setInterval(() => {
      if (abortController.signal.aborted) {
        clearInterval(progressInterval);
        return;
      }
      
      progress += Math.random() * 15;
      if (progress > 85) progress = 85; // 85%까지만 시뮬레이션
      
      onProgress?.({
        ...initialProgress,
        progress: Math.min(progress, 85),
      });
    }, 100);

    const uploadResult = await uploadFile({
      bucket: 'sources',
      path: filePath,
      file: file,
      upsert: false,
    });

    clearInterval(progressInterval);

    // 업로드 취소 확인
    if (abortController.signal.aborted) {
      throw new Error('업로드가 취소되었습니다.');
    }

    // 진행률 100% 업데이트
    onProgress?.({
      ...initialProgress,
      progress: 100,
      status: 'completed',
    });

    // 3. 소스에 파일 정보 업데이트
    const updatedSource = await updateSource(actualSourceId, {
      filePath: uploadResult.path,
      fileSize: file.size,
      processingStatus: 'completed',
    });

    onStatusChange?.('completed');

    // 활성 업로드에서 제거
    if (!signal) {
      activeUploads.delete(actualSourceId);
    }

    return updatedSource;

  } catch (error: any) {
    // 에러 시 진행률 업데이트
    onProgress?.({
      sourceId: sourceId,
      fileName: file.name,
      progress: 0,
      status: 'failed',
      error: error.message,
      uploadStartTime: new Date(),
    });

    onStatusChange?.('failed');

    // 활성 업로드에서 제거
    if (!signal) {
      activeUploads.delete(sourceId);
    }

    throw error;
  }
};

/**
 * 다중 파일 업로드
 */
export const handleMultipleFiles = async (
  notebookId: string,
  files: File[],
  options: {
    onProgress?: (sourceId: string, progress: FileUploadProgress) => void;
    onFileComplete?: (source: Source) => void;
    onFileError?: (fileName: string, error: string) => void;
  } = {}
): Promise<MultipleFileUploadResult> => {
  const { onProgress, onFileComplete, onFileError } = options;
  
  const result: MultipleFileUploadResult = {
    successful: [],
    failed: [],
    total: files.length,
  };

  // 병렬 처리 제한 (동시에 3개 파일만 업로드)
  const concurrency = 3;
  const chunks = [];
  
  for (let i = 0; i < files.length; i += concurrency) {
    chunks.push(files.slice(i, i + concurrency));
  }

  for (const chunk of chunks) {
    const promises = chunk.map(async (file) => {
      try {
        const source = await uploadSourceFile({
          notebookId,
          file,
          onProgress: (progress) => onProgress?.(progress.sourceId, progress),
          onStatusChange: () => {}, // 개별 파일 상태는 onProgress로 처리
        });
        
        result.successful.push(source);
        onFileComplete?.(source);
      } catch (error: any) {
        const errorMessage = error.message || '알 수 없는 오류가 발생했습니다.';
        result.failed.push({
          fileName: file.name,
          error: errorMessage,
        });
        onFileError?.(file.name, errorMessage);
      }
    });

    // 청크 내의 모든 파일 업로드 완료 대기
    await Promise.allSettled(promises);
  }

  return result;
};

/**
 * 업로드 진행률 추적
 */
export const getUploadProgress = (sourceId: string): FileUploadProgress | null => {
  // 실제 구현에서는 상태 관리나 캐시에서 조회
  // 현재는 단순한 예시
  return null;
};

/**
 * 업로드 취소
 */
export const cancelUpload = (sourceId: string): boolean => {
  const controller = activeUploads.get(sourceId);
  if (controller) {
    controller.abort();
    activeUploads.delete(sourceId);
    return true;
  }
  return false;
};

/**
 * 모든 활성 업로드 취소
 */
export const cancelAllUploads = (): void => {
  activeUploads.forEach((controller) => {
    controller.abort();
  });
  activeUploads.clear();
};

/**
 * 활성 업로드 목록 조회
 */
export const getActiveUploads = (): string[] => {
  return Array.from(activeUploads.keys());
};

/**
 * 업로드 취소 핸들러 생성
 */
export const createUploadCancellation = (sourceId: string): UploadCancellation => {
  let isCancelled = false;
  
  return {
    sourceId,
    cancel: () => {
      if (!isCancelled) {
        cancelUpload(sourceId);
        isCancelled = true;
      }
    },
    isCancelled: () => isCancelled,
  };
};

// 헬퍼 함수들

/**
 * 파일로부터 소스 타입 결정
 */
const getSourceTypeFromFile = (file: File): SourceType => {
  const extension = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();
  
  if (extension === '.pdf') {
    return 'pdf';
  }
  
  if (FILE_TYPE_CONFIGS.audio.extensions.includes(extension)) {
    return 'audio';
  }
  
  // 기본값은 텍스트로 처리
  return 'text';
};

/**
 * 임시 소스 ID 생성 (실제 소스 생성 전 추적용)
 */
const generateTempSourceId = (): string => {
  return `temp_${Date.now()}_${Math.random().toString(36).substring(2, 8)}`;
};

/**
 * 파일 크기를 읽기 쉬운 형식으로 변환
 */
export const formatFileSize = (bytes: number): string => {
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  if (bytes === 0) return '0 Bytes';
  
  const i = Math.floor(Math.log(bytes) / Math.log(1024));
  const size = (bytes / Math.pow(1024, i)).toFixed(1);
  
  return `${size} ${sizes[i]}`;
};

/**
 * 파일 타입별 아이콘 반환
 */
export const getFileTypeIcon = (sourceType: SourceType): string => {
  const icons: Record<SourceType, string> = {
    pdf: '📄',
    text: '📝',
    website: '🌐',
    youtube: '▶️',
    audio: '🎵',
  };
  
  return icons[sourceType] || '📄';
};

/**
 * 업로드 예상 시간 계산
 */
export const estimateUploadTime = (fileSize: number, uploadSpeed?: number): number => {
  // 기본 업로드 속도: 1MB/s (사용자 환경에 따라 조정)
  const avgUploadSpeed = uploadSpeed || 1024 * 1024; // bytes per second
  
  return Math.ceil(fileSize / avgUploadSpeed);
};
</file>

<file path="src/services/sources/index.ts">
/**
 * Sources 서비스 인덱스
 * 모든 sources 관련 서비스와 타입을 export
 */

// 타입 정의
export * from './types';

// API 서비스
export * from './sourcesApi';

// 파일 업로드 서비스
export * from './fileUpload';

// 문서 처리 서비스
export * from './documentProcessing';

// 편의를 위한 기본 export
export { 
  getSources, 
  getSource, 
  createSource, 
  updateSource, 
  deleteSource,
  updateSourceStatus,
  isFirstSource,
  subscribeToNotebookSources
} from './sourcesApi';

export {
  uploadSourceFile,
  handleMultipleFiles,
  validateSourceFile,
  cancelUpload,
  formatFileSize,
  getFileTypeIcon
} from './fileUpload';

export {
  triggerDocumentProcessing,
  checkProcessingStatus,
  retryProcessing,
  cancelProcessing,
  processPendingSources
} from './documentProcessing';
</file>

<file path="src/services/sources/sourcesApi.ts">
/**
 * Sources API 서비스
 * 소스 CRUD 작업을 담당
 */

import { supabase, safeApiCall } from '../core/apiClient';
import { deleteFile } from '../core/storage';
import {
  Source,
  SourceInsert,
  SourceUpdate,
  SourceCreateInput,
  SourceUpdateInput,
  SourceQueryOptions,
  SourcesApiResponse,
  SourceApiResponse,
  ProcessingStatus,
  SourceType,
} from './types';

/**
 * 노트북별 소스 목록 조회
 */
export const getSources = async (
  notebookId: string,
  options?: SourceQueryOptions
): Promise<Source[]> => {
  return await safeApiCall(async () => {
    let query = supabase
      .from('sources')
      .select('*')
      .eq('notebook_id', notebookId);

    // 필터 적용
    if (options?.filter) {
      const { filter } = options;
      
      if (filter.type) {
        const types = Array.isArray(filter.type) ? filter.type : [filter.type];
        query = query.in('type', types);
      }
      
      if (filter.processingStatus) {
        const statuses = Array.isArray(filter.processingStatus) 
          ? filter.processingStatus 
          : [filter.processingStatus];
        query = query.in('processing_status', statuses);
      }
      
      if (filter.hasContent !== undefined) {
        if (filter.hasContent) {
          query = query.not('content', 'is', null);
        } else {
          query = query.is('content', null);
        }
      }
      
      if (filter.hasFile !== undefined) {
        if (filter.hasFile) {
          query = query.not('file_path', 'is', null);
        } else {
          query = query.is('file_path', null);
        }
      }
      
      if (filter.createdAfter) {
        query = query.gte('created_at', filter.createdAfter.toISOString());
      }
      
      if (filter.createdBefore) {
        query = query.lte('created_at', filter.createdBefore.toISOString());
      }
      
      if (filter.searchQuery) {
        query = query.or(
          `title.ilike.%${filter.searchQuery}%,content.ilike.%${filter.searchQuery}%`
        );
      }
    }

    // 정렬 적용
    if (options?.sort) {
      const { field, ascending = false } = options.sort;
      query = query.order(field, { ascending });
    } else {
      // 기본 정렬: 최신순
      query = query.order('created_at', { ascending: false });
    }

    // 페이지네이션
    if (options?.limit) {
      query = query.limit(options.limit);
      if (options.offset) {
        query = query.range(options.offset, options.offset + options.limit - 1);
      }
    }

    const { data, error } = await query;
    
    if (error) throw error;
    return data || [];
  });
};

/**
 * 개별 소스 조회
 */
export const getSource = async (sourceId: string): Promise<Source> => {
  return await safeApiCall(async () => {
    const { data, error } = await supabase
      .from('sources')
      .select('*')
      .eq('id', sourceId)
      .single();
      
    if (error) throw error;
    return data;
  });
};

/**
 * 소스 생성
 */
export const createSource = async (input: SourceCreateInput): Promise<Source> => {
  return await safeApiCall(async () => {
    const insertData: SourceInsert = {
      notebook_id: input.notebookId,
      title: input.title,
      type: input.type,
      content: input.content || null,
      url: input.url || null,
      processing_status: input.processingStatus || 'pending',
      metadata: input.metadata || {},
      display_name: input.displayName || null,
    };

    const { data, error } = await supabase
      .from('sources')
      .insert(insertData)
      .select()
      .single();
      
    if (error) throw error;
    return data;
  });
};

/**
 * 소스 업데이트
 */
export const updateSource = async (
  sourceId: string, 
  updates: SourceUpdateInput
): Promise<Source> => {
  return await safeApiCall(async () => {
    const updateData: SourceUpdate = {};
    
    // 업데이트할 필드만 포함
    if (updates.title !== undefined) updateData.title = updates.title;
    if (updates.content !== undefined) updateData.content = updates.content;
    if (updates.url !== undefined) updateData.url = updates.url;
    if (updates.filePath !== undefined) updateData.file_path = updates.filePath;
    if (updates.fileSize !== undefined) updateData.file_size = updates.fileSize;
    if (updates.processingStatus !== undefined) updateData.processing_status = updates.processingStatus;
    if (updates.metadata !== undefined) updateData.metadata = updates.metadata;
    if (updates.displayName !== undefined) updateData.display_name = updates.displayName;
    if (updates.summary !== undefined) updateData.summary = updates.summary;

    const { data, error } = await supabase
      .from('sources')
      .update(updateData)
      .eq('id', sourceId)
      .select()
      .single();
      
    if (error) throw error;
    return data;
  });
};

/**
 * 소스 삭제 (스토리지 파일 포함)
 */
export const deleteSource = async (sourceId: string): Promise<void> => {
  return await safeApiCall(async () => {
    // 먼저 소스 정보 조회
    const source = await getSource(sourceId);
    
    // 스토리지 파일 삭제 (있는 경우)
    if (source.file_path) {
      try {
        await deleteFile('sources', source.file_path);
        console.log(`✅ File deleted from storage: ${source.file_path}`);
      } catch (error) {
        console.warn(`⚠️  Failed to delete file from storage: ${source.file_path}`, error);
        // 파일 삭제 실패해도 계속 진행 (파일이 이미 없을 수 있음)
      }
    }
    
    // 데이터베이스에서 소스 삭제
    const { error } = await supabase
      .from('sources')
      .delete()
      .eq('id', sourceId);
      
    if (error) throw error;
    
    console.log(`✅ Source deleted successfully: ${sourceId}`);
  });
};

/**
 * 소스 처리 상태 업데이트
 */
export const updateSourceStatus = async (
  sourceId: string, 
  status: ProcessingStatus,
  metadata?: Record<string, any>
): Promise<Source> => {
  return await safeApiCall(async () => {
    const updateData: SourceUpdate = {
      processing_status: status,
    };
    
    if (metadata) {
      updateData.metadata = metadata;
    }
    
    const { data, error } = await supabase
      .from('sources')
      .update(updateData)
      .eq('id', sourceId)
      .select()
      .single();
      
    if (error) throw error;
    return data;
  });
};

/**
 * 노트북의 첫 번째 소스인지 확인
 */
export const isFirstSource = async (notebookId: string): Promise<boolean> => {
  return await safeApiCall(async () => {
    const { count, error } = await supabase
      .from('sources')
      .select('*', { count: 'exact', head: true })
      .eq('notebook_id', notebookId);
      
    if (error) throw error;
    return (count || 0) === 0;
  });
};

/**
 * 처리 완료된 소스 개수 조회
 */
export const getCompletedSourcesCount = async (notebookId: string): Promise<number> => {
  return await safeApiCall(async () => {
    const { count, error } = await supabase
      .from('sources')
      .select('*', { count: 'exact', head: true })
      .eq('notebook_id', notebookId)
      .eq('processing_status', 'completed');
      
    if (error) throw error;
    return count || 0;
  });
};

/**
 * 처리 대기중인 소스들 조회
 */
export const getPendingSources = async (notebookId?: string): Promise<Source[]> => {
  return await safeApiCall(async () => {
    let query = supabase
      .from('sources')
      .select('*')
      .in('processing_status', ['pending', 'processing'])
      .order('created_at', { ascending: true });

    if (notebookId) {
      query = query.eq('notebook_id', notebookId);
    }

    const { data, error } = await query;
    if (error) throw error;
    return data || [];
  });
};

/**
 * 소스 타입별 개수 조회
 */
export const getSourcesCountByType = async (notebookId: string): Promise<Record<SourceType, number>> => {
  return await safeApiCall(async () => {
    const { data, error } = await supabase
      .from('sources')
      .select('type')
      .eq('notebook_id', notebookId);
      
    if (error) throw error;
    
    const counts: Record<SourceType, number> = {
      pdf: 0,
      text: 0,
      website: 0,
      youtube: 0,
      audio: 0,
    };
    
    data?.forEach((source) => {
      counts[source.type as SourceType]++;
    });
    
    return counts;
  });
};

/**
 * 파일 크기 기준 가장 큰 소스들 조회
 */
export const getLargestSources = async (
  notebookId: string, 
  limit = 5
): Promise<Source[]> => {
  return await safeApiCall(async () => {
    const { data, error } = await supabase
      .from('sources')
      .select('*')
      .eq('notebook_id', notebookId)
      .not('file_size', 'is', null)
      .order('file_size', { ascending: false })
      .limit(limit);
      
    if (error) throw error;
    return data || [];
  });
};

/**
 * 최근 생성된 소스들 조회
 */
export const getRecentSources = async (
  notebookId: string,
  days = 7,
  limit = 10
): Promise<Source[]> => {
  return await safeApiCall(async () => {
    const dateThreshold = new Date();
    dateThreshold.setDate(dateThreshold.getDate() - days);
    
    const { data, error } = await supabase
      .from('sources')
      .select('*')
      .eq('notebook_id', notebookId)
      .gte('created_at', dateThreshold.toISOString())
      .order('created_at', { ascending: false })
      .limit(limit);
      
    if (error) throw error;
    return data || [];
  });
};

/**
 * 소스 제목 중복 체크
 */
export const checkTitleExists = async (
  notebookId: string, 
  title: string,
  excludeId?: string
): Promise<boolean> => {
  return await safeApiCall(async () => {
    let query = supabase
      .from('sources')
      .select('id')
      .eq('notebook_id', notebookId)
      .eq('title', title);
      
    if (excludeId) {
      query = query.neq('id', excludeId);
    }
    
    const { data, error } = await query;
    if (error) throw error;
    
    return (data?.length || 0) > 0;
  });
};

/**
 * 벌크 소스 상태 업데이트
 */
export const bulkUpdateSourceStatus = async (
  sourceIds: string[], 
  status: ProcessingStatus
): Promise<Source[]> => {
  return await safeApiCall(async () => {
    const { data, error } = await supabase
      .from('sources')
      .update({ processing_status: status })
      .in('id', sourceIds)
      .select();
      
    if (error) throw error;
    return data || [];
  });
};

/**
 * 실시간 소스 변경 사항 구독
 */
export const subscribeToNotebookSources = (
  notebookId: string,
  callbacks: {
    onInsert?: (source: Source) => void;
    onUpdate?: (source: Source) => void;
    onDelete?: (payload: { old_record: Source }) => void;
  }
) => {
  console.log('🔄 Setting up realtime subscription for notebook sources:', notebookId);

  const subscription = supabase
    .channel(`sources_${notebookId}`)
    .on(
      'postgres_changes',
      {
        event: 'INSERT',
        schema: 'public',
        table: 'sources',
        filter: `notebook_id=eq.${notebookId}`
      },
      (payload) => {
        console.log('📥 Realtime INSERT received:', payload);
        if (callbacks.onInsert) {
          callbacks.onInsert(payload.new as Source);
        }
      }
    )
    .on(
      'postgres_changes',
      {
        event: 'UPDATE',
        schema: 'public',
        table: 'sources',
        filter: `notebook_id=eq.${notebookId}`
      },
      (payload) => {
        console.log('🔄 Realtime UPDATE received:', payload);
        if (callbacks.onUpdate) {
          callbacks.onUpdate(payload.new as Source);
        }
      }
    )
    .on(
      'postgres_changes',
      {
        event: 'DELETE',
        schema: 'public',
        table: 'sources',
        filter: `notebook_id=eq.${notebookId}`
      },
      (payload) => {
        console.log('🗑️ Realtime DELETE received:', payload);
        if (callbacks.onDelete) {
          callbacks.onDelete({ old_record: payload.old as Source });
        }
      }
    )
    .subscribe((status) => {
      console.log('📡 Subscription status for sources:', status);
    });

  return subscription;
};
</file>

<file path="src/services/sources/types.ts">
/**
 * Sources 도메인 타입 정의
 */

import { Database, Tables, TablesInsert, TablesUpdate } from '@/integrations/supabase/types';

// 데이터베이스 스키마 기반 타입
export type Source = Tables<'sources'>;
export type SourceInsert = TablesInsert<'sources'>;
export type SourceUpdate = TablesUpdate<'sources'>;

// Source Type Enum
export type SourceType = Database['public']['Enums']['source_type'];

// 처리 상태 타입
export type ProcessingStatus = 
  | 'pending'     // 대기중
  | 'processing'  // 처리중
  | 'completed'   // 완료
  | 'failed'      // 실패
  | 'cancelled';  // 취소됨

// 파일 업로드 진행률 타입
export interface FileUploadProgress {
  sourceId: string;
  fileName: string;
  progress: number;        // 0-100
  status: 'uploading' | 'processing' | 'completed' | 'failed' | 'cancelled';
  error?: string;
  uploadStartTime: Date;
  estimatedTimeRemaining?: number; // seconds
}

// 소스 생성 입력 타입
export interface SourceCreateInput {
  notebookId: string;
  title: string;
  type: SourceType;
  content?: string;
  url?: string;
  file?: File;
  processingStatus?: ProcessingStatus;
  metadata?: Record<string, any>;
  displayName?: string;
}

// 소스 업데이트 입력 타입
export interface SourceUpdateInput {
  title?: string;
  content?: string;
  url?: string;
  filePath?: string;
  fileSize?: number;
  processingStatus?: ProcessingStatus;
  metadata?: Record<string, any>;
  displayName?: string;
  summary?: string;
}

// 진행률과 함께 사용되는 소스 타입
export interface SourceWithProgress extends Source {
  uploadProgress?: FileUploadProgress;
  isUploading?: boolean;
  isProcessing?: boolean;
  canRetry?: boolean;
}

// 파일 업로드 옵션
export interface FileUploadOptions {
  notebookId: string;
  file: File;
  title?: string;
  metadata?: Record<string, any>;
  onProgress?: (progress: FileUploadProgress) => void;
  onStatusChange?: (status: ProcessingStatus) => void;
  signal?: AbortSignal; // 업로드 취소용
}

// 다중 파일 업로드 결과
export interface MultipleFileUploadResult {
  successful: Source[];
  failed: Array<{
    fileName: string;
    error: string;
  }>;
  total: number;
}

// 소스 필터링 옵션
export interface SourceFilterOptions {
  type?: SourceType | SourceType[];
  processingStatus?: ProcessingStatus | ProcessingStatus[];
  hasContent?: boolean;
  hasFile?: boolean;
  createdAfter?: Date;
  createdBefore?: Date;
  searchQuery?: string; // 제목이나 내용에서 검색
}

// 소스 정렬 옵션
export interface SourceSortOptions {
  field: 'created_at' | 'updated_at' | 'title' | 'file_size';
  ascending?: boolean;
}

// 소스 쿼리 옵션 (필터링 + 정렬)
export interface SourceQueryOptions {
  filter?: SourceFilterOptions;
  sort?: SourceSortOptions;
  limit?: number;
  offset?: number;
}

// 문서 처리 상태 체크 결과
export interface DocumentProcessingStatus {
  sourceId: string;
  status: ProcessingStatus;
  progress?: number;
  message?: string;
  error?: string;
  estimatedTimeRemaining?: number;
  lastUpdated: Date;
}

// 파일 검증 결과
export interface FileValidationResult {
  isValid: boolean;
  errors: string[];
  warnings?: string[];
  fileInfo: {
    name: string;
    size: number;
    type: string;
    extension: string;
  };
}

// API 응답 타입들
export interface SourcesApiResponse {
  data: Source[];
  total: number;
  page?: number;
  pageSize?: number;
}

export interface SourceApiResponse {
  data: Source;
}

// 에러 타입
export interface SourceError {
  code: string;
  message: string;
  details?: any;
  sourceId?: string;
}

// 업로드 취소 핸들러
export interface UploadCancellation {
  sourceId: string;
  cancel: () => void;
  isCancelled: boolean;
}

// 소스 통계 타입 (대시보드용)
export interface SourceStats {
  total: number;
  byType: Record<SourceType, number>;
  byStatus: Record<ProcessingStatus, number>;
  totalFileSize: number;
  averageFileSize: number;
  recentlyAdded: number; // 최근 7일
  processingQueue: number; // 처리 대기중인 파일 수
}

// 실시간 구독 이벤트 타입
export interface SourceRealtimeEvent {
  eventType: 'INSERT' | 'UPDATE' | 'DELETE';
  new?: Source;
  old?: Source;
  notebookId: string;
}
</file>

<file path="src/shared/components/ui/accordion.tsx">
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> & {
    chevronColor?: string;
  }
>(({ className, children, chevronColor, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown 
        className="h-4 w-4 shrink-0 transition-transform duration-200" 
        style={chevronColor ? { color: chevronColor } : {}}
      />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="src/shared/components/ui/alert-dialog.tsx">
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="src/shared/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/shared/components/ui/AppHeader.tsx">
import React, { useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { Button } from './button';
import { Badge } from './badge';
import { User, LogOut, Settings, Wheat, Shield, Home, Cloud, Sprout, MessageCircle, BookOpen, ArrowLeft, Menu, X, Globe } from 'lucide-react';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from './dropdown-menu';
import { useLogout } from '@/services/authService';
import { useAuth } from '@/features/authentication';
import Logo from './Logo';
import UserProfileDialog from '@/components/profile/UserProfileDialog';
import { getRoleInfo, type UserRole } from '@/utils/permissions';

interface AppHeaderProps {
  title?: string;
  subtitle?: string;
  showBackButton?: boolean;
  onBackClick?: () => void;
}

const AppHeader = ({ title, subtitle, showBackButton = false, onBackClick }: AppHeaderProps) => {
  const navigate = useNavigate();
  const location = useLocation();
  const { t, i18n } = useTranslation();
  const { logout } = useLogout();
  const { profile } = useAuth();
  const [showProfileDialog, setShowProfileDialog] = useState(false);
  const [showMobileMenu, setShowMobileMenu] = useState(false);

  const languages = [
    { code: 'ko', name: t('language.korean'), flag: '🇰🇷' },
    { code: 'en', name: t('language.english'), flag: '🇺🇸' },
    { code: 'sw', name: t('language.swahili'), flag: '🇹🇿' }
  ];

  const changeLanguage = (langCode: string) => {
    i18n.changeLanguage(langCode);
  };

  const getUserInitial = () => {
    if (profile?.full_name) {
      return profile.full_name.charAt(0).toUpperCase();
    }
    if (profile?.email) {
      return profile.email.charAt(0).toUpperCase();
    }
    return 'U';
  };

  const getRoleBadge = () => {
    if (!profile?.user_role) return null;
    const roleInfo = getRoleInfo(profile.user_role as UserRole);
    return (
      <Badge variant="secondary" className={`text-xs bg-${roleInfo.color}-100 text-${roleInfo.color}-800`}>
        {roleInfo.icon} {roleInfo.name}
      </Badge>
    );
  };

  const navigationItems = [
    { path: '/', icon: Home, label: t('navigation.dashboard'), color: 'text-blue-600' },
    { path: '/weather', icon: Cloud, label: t('navigation.weather'), color: 'text-sky-600' },
    { path: '/crops', icon: Sprout, label: t('navigation.crops'), color: 'text-green-600' },
    { path: '/chat', icon: MessageCircle, label: t('navigation.chat'), color: 'text-purple-600' },
    { path: '/knowledge', icon: BookOpen, label: t('navigation.knowledge'), color: 'text-orange-600' },
  ];

  const handleBackClick = () => {
    if (onBackClick) {
      onBackClick();
    } else {
      navigate(-1);
    }
  };

  const getCurrentPageTitle = () => {
    if (title) return title;
    
    const currentNav = navigationItems.find(item => item.path === location.pathname);
    return currentNav?.label || 'AI4AgriWeather';
  };

  const getCurrentPageSubtitle = () => {
    if (subtitle) return subtitle;
    
    const currentNav = navigationItems.find(item => item.path === location.pathname);
    if (currentNav) {
      switch (currentNav.path) {
        case '/': return t('dashboard.subtitle');
        case '/weather': return t('weather.subtitle');
        case '/crops': return t('crops.subtitle');
        case '/chat': return t('chat.subtitle');
        case '/knowledge': return t('knowledge.subtitle');
        default: return 'Smart Farm Assistant';
      }
    }
    return 'Smart Farm Assistant';
  };

  return (
    <>
      <header className="bg-white border-b px-4 sm:px-6 py-4 sticky top-0 z-50">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            {showBackButton && (
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={handleBackClick}
                className="p-2 hover:bg-gray-100"
              >
                <ArrowLeft className="h-4 w-4" />
              </Button>
            )}
            
            <Logo />
            <div>
              <h1 className="text-lg sm:text-xl font-medium text-gray-900">
                {getCurrentPageTitle()}
              </h1>
              <p className="text-xs sm:text-sm text-gray-500">
                {getCurrentPageSubtitle()}
              </p>
            </div>
          </div>
          
          <div className="flex items-center space-x-2 sm:space-x-4">
            {/* Desktop Navigation */}
            <nav className="hidden lg:flex items-center space-x-1">
              {navigationItems.map((item) => {
                const Icon = item.icon;
                const isActive = location.pathname === item.path;
                return (
                  <Button
                    key={item.path}
                    variant={isActive ? "secondary" : "ghost"}
                    size="sm"
                    onClick={() => navigate(item.path)}
                    className={`flex items-center space-x-2 ${isActive ? 'bg-gray-100' : 'hover:bg-gray-50'}`}
                  >
                    <Icon className={`h-4 w-4 ${isActive ? item.color : 'text-gray-600'}`} />
                    <span className={`text-sm ${isActive ? 'font-medium text-gray-900' : 'text-gray-600'}`}>
                      {item.label}
                    </span>
                  </Button>
                );
              })}
            </nav>

            {/* Language Selector */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="flex items-center space-x-1 px-2">
                  <Globe className="h-4 w-4" />
                  <span className="hidden sm:inline text-sm">
                    {languages.find(lang => lang.code === i18n.language)?.flag || '🌐'}
                  </span>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-48">
                <div className="px-2 py-1.5 text-sm font-medium text-gray-700">
                  {t('language.selectLanguage')}
                </div>
                <DropdownMenuSeparator />
                {languages.map((lang) => (
                  <DropdownMenuItem
                    key={lang.code}
                    onClick={() => changeLanguage(lang.code)}
                    className={`cursor-pointer ${
                      i18n.language === lang.code ? 'bg-gray-100 font-medium' : ''
                    }`}
                  >
                    <span className="mr-2">{lang.flag}</span>
                    {lang.name}
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>

            {/* Mobile Menu Button */}
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setShowMobileMenu(!showMobileMenu)}
              className="lg:hidden p-2"
            >
              {showMobileMenu ? <X className="h-4 w-4" /> : <Menu className="h-4 w-4" />}
            </Button>

            {/* User info display */}
            {profile && (
              <div className="hidden md:flex items-center space-x-3">
                <div className="text-right">
                  <div className="flex items-center space-x-2 justify-end">
                    <p className="text-sm font-medium text-gray-900">
                      {profile.full_name || 'User'}
                    </p>
                    {getRoleBadge()}
                  </div>
                  <p className="text-xs text-gray-500">
                    {profile.farm_name || profile.user_role?.replace('_', ' ') || 'Farmer'}
                  </p>
                </div>
                {profile.farm_location && (
                  <div className="flex items-center text-xs text-gray-500">
                    <Wheat className="h-3 w-3 mr-1" />
                    <span>{profile.farm_location}</span>
                  </div>
                )}
              </div>
            )}

            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="p-0">
                  <div className="w-8 h-8 sm:w-10 sm:h-10 bg-green-500 rounded-full flex items-center justify-center cursor-pointer hover:bg-green-600 transition-colors">
                    <span className="text-white font-medium text-sm">{getUserInitial()}</span>
                  </div>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56">
                <div className="px-2 py-1.5 text-sm">
                  <div className="font-medium">{profile?.full_name || 'User'}</div>
                  <div className="text-xs text-gray-500">{profile?.email}</div>
                </div>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={() => setShowProfileDialog(true)} className="cursor-pointer">
                  <Settings className="h-4 w-4 mr-2" />
                  Profile Settings
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={logout} className="cursor-pointer text-red-600 focus:text-red-600">
                  <LogOut className="h-4 w-4 mr-2" />
                  {t('common.logout')}
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>

        {/* Mobile Navigation Menu */}
        {showMobileMenu && (
          <div className="lg:hidden mt-4 pt-4 border-t">
            <nav className="grid grid-cols-2 gap-2">
              {navigationItems.map((item) => {
                const Icon = item.icon;
                const isActive = location.pathname === item.path;
                return (
                  <Button
                    key={item.path}
                    variant={isActive ? "secondary" : "ghost"}
                    size="sm"
                    onClick={() => {
                      navigate(item.path);
                      setShowMobileMenu(false);
                    }}
                    className={`flex items-center space-x-2 justify-start ${isActive ? 'bg-gray-100' : 'hover:bg-gray-50'}`}
                  >
                    <Icon className={`h-4 w-4 ${isActive ? item.color : 'text-gray-600'}`} />
                    <span className={`text-sm ${isActive ? 'font-medium text-gray-900' : 'text-gray-600'}`}>
                      {item.label}
                    </span>
                  </Button>
                );
              })}
            </nav>
          </div>
        )}
      </header>

      <UserProfileDialog 
        open={showProfileDialog} 
        onOpenChange={setShowProfileDialog} 
      />
    </>
  );
};

export default AppHeader;
</file>

<file path="src/shared/components/ui/aspect-ratio.tsx">
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>

<file path="src/shared/components/ui/avatar.tsx">
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/shared/components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/shared/components/ui/breadcrumb.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="src/shared/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/shared/components/ui/calendar.tsx">
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };
</file>

<file path="src/shared/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/shared/components/ui/carousel.tsx">
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="src/shared/components/ui/chart.tsx">
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="src/shared/components/ui/checkbox.tsx">
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="src/shared/components/ui/collapsible.tsx">
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="src/shared/components/ui/command.tsx">
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="src/shared/components/ui/context-menu.tsx">
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="src/shared/components/ui/dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/shared/components/ui/drawer.tsx">
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="src/shared/components/ui/dropdown-menu.tsx">
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="src/shared/components/ui/form.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="src/shared/components/ui/hover-card.tsx">
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="src/shared/components/ui/input-otp.tsx">
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="src/shared/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/shared/components/ui/label.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/shared/components/ui/Logo.tsx">
import React from 'react';

interface LogoProps {
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

const Logo = ({ size = 'md', className = '' }: LogoProps) => {
  const sizeClasses = {
    sm: 'w-6 h-6',
    md: 'w-8 h-8', 
    lg: 'w-12 h-12'
  };

  const iconSizes = {
    sm: '16px',
    md: '20px',
    lg: '28px'
  };

  return (
    <div className={`${sizeClasses[size]} bg-black rounded-full flex items-center justify-center ${className}`}>
      <svg 
        xmlns="http://www.w3.org/2000/svg" 
        height={iconSizes[size]} 
        viewBox="0 -960 960 960" 
        width={iconSizes[size]} 
        fill="#FFFFFF"
      >
        <path d="M480-80q-33 0-56.5-23.5T400-160h160q0 33-23.5 56.5T480-80ZM320-200v-80h320v80H320Zm10-120q-69-41-109.5-110T180-580q0-125 87.5-212.5T480-880q125 0 212.5 87.5T780-580q0 81-40.5 150T630-320H330Zm24-80h252q45-32 69.5-79T700-580q0-92-64-156t-156-64q-92 0-156 64t-64 156q0 54 24.5 101t69.5 79Zm126 0Z" />
      </svg>
    </div>
  );
};

export default Logo;
</file>

<file path="src/shared/components/ui/menubar.tsx">
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="src/shared/components/ui/navigation-menu.tsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>

<file path="src/shared/components/ui/pagination.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
</file>

<file path="src/shared/components/ui/popover.tsx">
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="src/shared/components/ui/progress.tsx">
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="src/shared/components/ui/radio-group.tsx">
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="src/shared/components/ui/resizable.tsx">
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="src/shared/components/ui/scroll-area.tsx">
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="src/shared/components/ui/select.tsx">
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="src/shared/components/ui/separator.tsx">
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/shared/components/ui/sheet.tsx">
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}
</file>

<file path="src/shared/components/ui/sidebar.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="src/shared/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="src/shared/components/ui/slider.tsx">
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="src/shared/components/ui/sonner.tsx">
import { useTheme } from "next-themes"
import { Toaster as Sonner, toast } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster, toast }
</file>

<file path="src/shared/components/ui/switch.tsx">
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="src/shared/components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="src/shared/components/ui/tabs.tsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/shared/components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="src/shared/components/ui/toast.tsx">
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="src/shared/components/ui/toaster.tsx">
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="src/shared/components/ui/toggle-group.tsx">
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="src/shared/components/ui/toggle.tsx">
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="src/shared/components/ui/tooltip.tsx">
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="src/shared/components/ui/use-toast.ts">
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };
</file>

<file path="src/shared/components/index.ts">
// Shared Components
export * from './ui';
</file>

<file path="src/shared/hooks/index.ts">
// Shared Hooks
export * from './use-mobile';
export * from './use-toast';
export { default as useIsDesktop } from './useIsDesktop';
</file>

<file path="src/shared/hooks/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="src/shared/hooks/use-toast.ts">
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="src/shared/hooks/useIsDesktop.tsx">
import * as React from "react"

const DESKTOP_BREAKPOINT = 1100

export function useIsDesktop() {
  const [isDesktop, setIsDesktop] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(min-width: ${DESKTOP_BREAKPOINT}px)`)
    const onChange = () => {
      setIsDesktop(window.innerWidth >= DESKTOP_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsDesktop(window.innerWidth >= DESKTOP_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isDesktop
}
</file>

<file path="src/shared/services/core/apiClient.ts">
/**
 * 공통 API 클라이언트 설정
 * 모든 Supabase API 호출의 중앙 집중화
 */

import { supabase } from '@/integrations/supabase/client';

export class ApiError extends Error {
  constructor(
    message: string,
    public code?: string,
    public details?: any
  ) {
    super(message);
    this.name = 'ApiError';
  }
}

/**
 * 공통 에러 처리 함수
 */
export const handleApiError = (error: any): never => {
  console.error('API Error:', error);
  
  if (error.code) {
    throw new ApiError(error.message || 'API request failed', error.code, error.details);
  }
  
  throw new ApiError(error.message || 'Unknown API error');
};

/**
 * 공통 API 응답 타입
 */
export interface ApiResponse<T> {
  data: T;
  error?: never;
}

export interface ApiErrorResponse {
  data?: never;
  error: ApiError;
}

export type ApiResult<T> = ApiResponse<T> | ApiErrorResponse;

/**
 * 안전한 API 호출 래퍼
 */
export const safeApiCall = async <T>(
  apiCall: () => Promise<{ data: T; error: any }>
): Promise<T> => {
  try {
    const { data, error } = await apiCall();
    
    if (error) {
      handleApiError(error);
    }
    
    return data;
  } catch (error) {
    handleApiError(error);
  }
};

/**
 * Supabase 클라이언트 인스턴스 export
 */
export { supabase };

/**
 * 공통 쿼리 옵션
 */
export const defaultQueryOptions = {
  staleTime: 5 * 60 * 1000, // 5분
  gcTime: 10 * 60 * 1000,   // 10분 (이전 cacheTime)
  retry: 1,
  refetchOnWindowFocus: false,
} as const;
</file>

<file path="src/shared/services/core/realtime.ts">
/**
 * 실시간 구독 관리 서비스
 * Supabase Realtime 기능을 중앙화
 */

import { supabase } from './apiClient';
import type { RealtimeChannel } from '@supabase/supabase-js';

export type ChangeEventType = 'INSERT' | 'UPDATE' | 'DELETE';

export interface RealtimeSubscriptionOptions<T = any> {
  table: string;
  filter?: string;
  onInsert?: (payload: T) => void;
  onUpdate?: (payload: T) => void;
  onDelete?: (payload: { old_record: T }) => void;
  onChange?: (payload: { eventType: ChangeEventType; new: T; old: T }) => void;
}

export interface RealtimeManager {
  channel: RealtimeChannel;
  unsubscribe: () => void;
}

/**
 * 테이블 변경사항 구독
 */
export const subscribeToTable = <T>(
  channelName: string,
  options: RealtimeSubscriptionOptions<T>
): RealtimeManager => {
  const { table, filter, onInsert, onUpdate, onDelete, onChange } = options;

  const channel = supabase
    .channel(channelName)
    .on(
      'postgres_changes',
      {
        event: '*',
        schema: 'public',
        table,
        filter,
      },
      (payload: any) => {
        const { eventType, new: newRecord, old: oldRecord } = payload;

        // 공통 onChange 콜백 호출
        if (onChange) {
          onChange({ eventType, new: newRecord, old: oldRecord });
        }

        // 이벤트별 개별 콜백 호출
        switch (eventType) {
          case 'INSERT':
            if (onInsert) onInsert(newRecord);
            break;
          case 'UPDATE':
            if (onUpdate) onUpdate(newRecord);
            break;
          case 'DELETE':
            if (onDelete) onDelete({ old_record: oldRecord });
            break;
        }
      }
    )
    .subscribe();

  const unsubscribe = () => {
    supabase.removeChannel(channel);
  };

  return { channel, unsubscribe };
};

/**
 * 사용자별 노트북 변경사항 구독
 */
export const subscribeToUserNotebooks = (
  userId: string,
  callbacks: {
    onInsert?: (notebook: any) => void;
    onUpdate?: (notebook: any) => void;
    onDelete?: (payload: { old_record: any }) => void;
  }
): RealtimeManager => {
  return subscribeToTable(`notebooks-${userId}`, {
    table: 'notebooks',
    filter: `user_id=eq.${userId}`,
    ...callbacks,
  });
};

/**
 * 노트북별 소스 변경사항 구독
 */
export const subscribeToNotebookSources = (
  notebookId: string,
  callbacks: {
    onInsert?: (source: any) => void;
    onUpdate?: (source: any) => void;
    onDelete?: (payload: { old_record: any }) => void;
  }
): RealtimeManager => {
  return subscribeToTable(`sources-${notebookId}`, {
    table: 'sources',
    filter: `notebook_id=eq.${notebookId}`,
    ...callbacks,
  });
};

/**
 * 노트북별 노트 변경사항 구독
 */
export const subscribeToNotebookNotes = (
  notebookId: string,
  callbacks: {
    onInsert?: (note: any) => void;
    onUpdate?: (note: any) => void;
    onDelete?: (payload: { old_record: any }) => void;
  }
): RealtimeManager => {
  return subscribeToTable(`notes-${notebookId}`, {
    table: 'notes',
    filter: `notebook_id=eq.${notebookId}`,
    ...callbacks,
  });
};

/**
 * 채팅 메시지 변경사항 구독
 */
export const subscribeToChatMessages = (
  sessionId: string,
  callbacks: {
    onInsert?: (message: any) => void;
    onUpdate?: (message: any) => void;
    onDelete?: (payload: { old_record: any }) => void;
  }
): RealtimeManager => {
  return subscribeToTable(`chat-${sessionId}`, {
    table: 'n8n_chat_histories',
    filter: `session_id=eq.${sessionId}`,
    ...callbacks,
  });
};

/**
 * 여러 구독을 한번에 관리하는 매니저
 */
export class RealtimeSubscriptionManager {
  private subscriptions: Map<string, RealtimeManager> = new Map();

  /**
   * 구독 추가
   */
  add(key: string, manager: RealtimeManager): void {
    // 기존 구독이 있다면 해제
    if (this.subscriptions.has(key)) {
      this.subscriptions.get(key)?.unsubscribe();
    }
    
    this.subscriptions.set(key, manager);
  }

  /**
   * 특정 구독 해제
   */
  remove(key: string): void {
    const manager = this.subscriptions.get(key);
    if (manager) {
      manager.unsubscribe();
      this.subscriptions.delete(key);
    }
  }

  /**
   * 모든 구독 해제
   */
  removeAll(): void {
    this.subscriptions.forEach((manager) => {
      manager.unsubscribe();
    });
    this.subscriptions.clear();
  }

  /**
   * 구독 상태 확인
   */
  has(key: string): boolean {
    return this.subscriptions.has(key);
  }

  /**
   * 활성 구독 개수
   */
  get size(): number {
    return this.subscriptions.size;
  }
}
</file>

<file path="src/shared/services/core/storage.ts">
/**
 * 파일 스토리지 서비스
 * Supabase Storage 작업을 중앙화
 */

import { supabase, safeApiCall, ApiError } from './apiClient';

export interface FileUploadOptions {
  bucket: string;
  path: string;
  file: File;
  upsert?: boolean;
  contentType?: string;
}

export interface FileUploadResult {
  path: string;
  fullPath: string;
  id: string;
}

export interface FileDownloadOptions {
  bucket: string;
  path: string;
  download?: boolean;
}

/**
 * 파일 업로드
 */
export const uploadFile = async (options: FileUploadOptions): Promise<FileUploadResult> => {
  const { bucket, path, file, upsert = false, contentType } = options;

  const uploadOptions: any = {
    upsert,
  };

  if (contentType) {
    uploadOptions.contentType = contentType;
  }

  const result = await safeApiCall(async () => {
    return await supabase.storage
      .from(bucket)
      .upload(path, file, uploadOptions);
  });

  return {
    path: result.path,
    fullPath: result.fullPath || `${bucket}/${path}`,
    id: result.id,
  };
};

/**
 * 파일 다운로드 URL 생성
 */
export const getFileUrl = async (options: FileDownloadOptions): Promise<string> => {
  const { bucket, path, download = false } = options;

  const result = await safeApiCall(async () => {
    if (download) {
      return await supabase.storage.from(bucket).download(path);
    } else {
      return await supabase.storage.from(bucket).createSignedUrl(path, 3600); // 1시간 유효
    }
  });

  if (download) {
    return URL.createObjectURL(result);
  }

  return result.signedUrl;
};

/**
 * 파일 삭제
 */
export const deleteFile = async (bucket: string, path: string): Promise<void> => {
  await safeApiCall(async () => {
    return await supabase.storage.from(bucket).remove([path]);
  });
};

/**
 * 파일 목록 조회
 */
export const listFiles = async (
  bucket: string, 
  path?: string,
  options?: { limit?: number; offset?: number }
): Promise<any[]> => {
  return await safeApiCall(async () => {
    return await supabase.storage
      .from(bucket)
      .list(path, {
        limit: options?.limit,
        offset: options?.offset,
      });
  });
};

/**
 * 파일 정보 조회
 */
export const getFileInfo = async (bucket: string, path: string) => {
  return await safeApiCall(async () => {
    return await supabase.storage.from(bucket).list(path);
  });
};

/**
 * 파일 크기 및 타입 검증
 */
export const validateFile = (
  file: File, 
  options: {
    maxSize?: number;
    allowedTypes?: string[];
  } = {}
): void => {
  const { maxSize = 50 * 1024 * 1024, allowedTypes } = options; // 기본 50MB

  if (file.size > maxSize) {
    throw new ApiError(
      `File size exceeds limit. Maximum size: ${maxSize / (1024 * 1024)}MB`,
      'FILE_TOO_LARGE'
    );
  }

  if (allowedTypes && !allowedTypes.includes(file.type)) {
    throw new ApiError(
      `File type not allowed. Allowed types: ${allowedTypes.join(', ')}`,
      'FILE_TYPE_NOT_ALLOWED'
    );
  }
};

/**
 * 파일명 안전화 (한글 및 특수문자 처리)
 */
export const sanitizeFileName = (fileName: string, keepExtension = true): string => {
  const extension = keepExtension ? fileName.substring(fileName.lastIndexOf('.')) : '';
  const name = keepExtension ? fileName.substring(0, fileName.lastIndexOf('.')) : fileName;
  
  // 한글, 영문, 숫자, 하이픈, 언더스코어만 허용
  const sanitized = name
    .replace(/[^\w가-힣\-]/g, '_')
    .replace(/_{2,}/g, '_')
    .replace(/^_|_$/g, '');

  return sanitized + extension;
};

/**
 * 고유한 파일 경로 생성
 */
export const generateUniqueFilePath = (
  notebookId: string, 
  originalFileName: string
): string => {
  const sanitizedName = sanitizeFileName(originalFileName);
  const timestamp = Date.now();
  const randomSuffix = Math.random().toString(36).substring(2, 8);
  
  return `${notebookId}/${timestamp}_${randomSuffix}_${sanitizedName}`;
};
</file>

<file path="src/shared/services/index.ts">
// Shared Services
export * from './core';
</file>

<file path="src/shared/types/domain.ts">
/**
 * 공통 도메인 타입 정의
 * 프로젝트 전체에서 사용되는 기본 타입들을 정의합니다.
 */

// 기본 엔티티 메타데이터
export interface BaseEntity {
  id: string;
  created_at: string;
  updated_at: string;
}

// 지리적 위치 정보
export interface GeoLocation {
  latitude: number;
  longitude: number;
  elevation?: number;
}

// 주소/위치 정보
export interface LocationInfo extends Partial<GeoLocation> {
  location_name: string;
  address?: string;
  postal_code?: string;
  city?: string;
  region?: string;
  country?: string;
}

// 시간 범위
export interface TimeRange {
  start: string | Date;
  end: string | Date;
}

// 페이지네이션
export interface Pagination {
  page: number;
  pageSize: number;
  total?: number;
}

// 정렬 옵션
export interface SortOption<T = string> {
  field: T;
  ascending?: boolean;
}

// API 응답 공통 타입
export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
}

export interface PaginatedApiResponse<T = any> extends ApiResponse<T[]> {
  pagination?: Pagination;
}

// 필터링 기본 타입
export interface BaseFilter {
  created_after?: Date | string;
  created_before?: Date | string;
  updated_after?: Date | string;
  updated_before?: Date | string;
  search_query?: string;
}

// 상태 타입들
export type ProcessingStatus = 
  | 'pending'     // 대기중
  | 'processing'  // 처리중
  | 'completed'   // 완료
  | 'failed'      // 실패
  | 'cancelled';  // 취소됨

export type HealthStatus = 
  | 'excellent'   // 매우 좋음
  | 'good'        // 좋음
  | 'fair'        // 보통
  | 'poor'        // 나쁨
  | 'critical'    // 심각함
  | 'unknown';    // 알 수 없음

export type AlertSeverity = 
  | 'low'         // 낮음
  | 'medium'      // 보통
  | 'high'        // 높음
  | 'critical';   // 심각함

// 단위 시스템
export type UnitSystem = 'metric' | 'imperial';

// 측정 단위들
export interface Units {
  temperature: 'celsius' | 'fahrenheit';
  length: 'cm' | 'inch' | 'meter' | 'feet';
  area: 'hectare' | 'acre' | 'sqm' | 'sqft';
  weight: 'kg' | 'pound' | 'gram' | 'ounce';
  volume: 'liter' | 'gallon' | 'ml' | 'cup';
  speed: 'kmh' | 'mph' | 'ms';
  pressure: 'hpa' | 'inchHg' | 'mmHg' | 'psi';
  precipitation: 'mm' | 'inch';
}

// 타임존
export type Timezone = string; // ISO timezone format (e.g., 'Asia/Seoul', 'UTC')

// 언어/로케일
export type Locale = 'ko-KR' | 'en-US' | 'ja-JP' | 'zh-CN';

// 파일 관련 타입
export interface FileMetadata {
  name: string;
  size: number;
  type: string;
  extension: string;
  last_modified?: Date;
  checksum?: string;
}

export interface FileUploadProgress {
  file_id: string;
  file_name: string;
  progress: number;        // 0-100
  status: 'uploading' | 'processing' | 'completed' | 'failed' | 'cancelled';
  error?: string;
  upload_start_time: Date;
  estimated_time_remaining?: number; // seconds
}

// 알림/경고 기본 타입
export interface BaseAlert {
  id: string;
  title: string;
  message: string;
  severity: AlertSeverity;
  alert_type: string;
  is_read: boolean;
  valid_from: string | Date;
  valid_until?: string | Date;
  created_at: string;
}

// 사용자 선호도
export interface UserPreferences {
  unit_system: UnitSystem;
  units: Partial<Units>;
  timezone: Timezone;
  locale: Locale;
  notifications_enabled: boolean;
  email_notifications: boolean;
  push_notifications: boolean;
  default_dashboard_view?: string;
}

// 검색 및 필터링 공통 타입
export interface SearchOptions {
  query?: string;
  filters?: Record<string, any>;
  sort?: SortOption[];
  pagination?: Partial<Pagination>;
}

// 통계 기본 타입
export interface BaseStats {
  total: number;
  active: number;
  inactive: number;
  recent_changes: number; // 최근 변경사항 수
  last_updated: Date | string;
}

// 데이터 검증 결과
export interface ValidationResult {
  is_valid: boolean;
  errors: string[];
  warnings?: string[];
}

// 실시간 이벤트 타입
export interface RealtimeEvent<T = any> {
  event_type: 'INSERT' | 'UPDATE' | 'DELETE';
  table: string;
  new_data?: T;
  old_data?: T;
  timestamp: Date | string;
}

// 에러 타입
export interface DomainError {
  code: string;
  message: string;
  details?: any;
  timestamp?: Date | string;
  context?: Record<string, any>;
}

// 설정 타입
export interface AppSettings {
  app_name: string;
  version: string;
  environment: 'development' | 'staging' | 'production';
  features: {
    weather_integration: boolean;
    ai_recommendations: boolean;
    mobile_app: boolean;
    api_access: boolean;
  };
  limits: {
    max_file_size_mb: number;
    max_farms_per_user: number;
    max_crops_per_farm: number;
    api_requests_per_hour: number;
  };
}
</file>

<file path="src/shared/types/index.ts">
// Shared Types
export * from './domain';
export * from './user';
export * from './message';
</file>

<file path="src/shared/types/message.ts">
export interface MessageSegment {
  text: string;
  citation_id?: number;
}

export interface Citation {
  citation_id: number;
  source_id: string;
  source_title: string;
  source_type: string;
  chunk_lines_from?: number;
  chunk_lines_to?: number;
  chunk_index?: number;
  excerpt?: string;
}

export interface EnhancedChatMessage {
  id: number;
  session_id: string;
  message: {
    type: 'human' | 'ai';
    content: string | {
      segments: MessageSegment[];
      citations: Citation[];
    };
    additional_kwargs?: any;
    response_metadata?: any;
    tool_calls?: any[];
    invalid_tool_calls?: any[];
  };
}
</file>

<file path="src/shared/types/user.ts">
/**
 * 사용자 및 프로필 관련 타입 정의
 * 사용자 계정, 프로필, 권한, 설정 등과 관련된 모든 타입들을 정의합니다.
 */

import { BaseEntity, UserPreferences, BaseFilter, SortOption } from './domain';
import { Tables, TablesInsert, TablesUpdate } from '../integrations/supabase/types';
import { Farm } from './agriculture';

// === 기본 사용자 엔티티 (Supabase 기반) ===

// 사용자 프로필 타입
export type Profile = Tables<'profiles'>;
export type ProfileInsert = TablesInsert<'profiles'>;
export type ProfileUpdate = TablesUpdate<'profiles'>;

// === 확장된 사용자 타입 ===

// 사용자 역할
export type UserRole = 
  | 'farmer'          // 농민
  | 'advisor'         // 농업지도사
  | 'researcher'      // 연구원
  | 'admin'          // 관리자
  | 'viewer';        // 조회자

// 구독 플랜
export type SubscriptionPlan = 
  | 'free'           // 무료
  | 'basic'          // 기본
  | 'premium'        // 프리미엄
  | 'enterprise';    // 기업

// 구독 상태
export type SubscriptionStatus = 
  | 'active'         // 활성
  | 'expired'        // 만료
  | 'cancelled'      // 취소
  | 'suspended';     // 정지

// 사용자 상태
export type UserStatus = 
  | 'active'         // 활성
  | 'inactive'       // 비활성
  | 'suspended'      // 정지
  | 'pending'        // 승인대기
  | 'verified';      // 인증완료

// === 확장된 프로필 타입 ===

// 프로필 생성 입력
export interface ProfileCreateInput {
  email: string;
  full_name?: string;
  avatar_url?: string;
}

// 프로필 업데이트 입력
export interface ProfileUpdateInput {
  full_name?: string;
  avatar_url?: string;
  phone_number?: string;
  date_of_birth?: string;
  address?: Address;
  bio?: string;
  role?: UserRole;
  preferences?: UserPreferences;
  emergency_contact?: EmergencyContact;
  professional_info?: ProfessionalInfo;
}

// 사용자 주소 정보
export interface Address {
  street?: string;
  city: string;
  state?: string;
  postal_code?: string;
  country: string;
  is_primary?: boolean;
}

// 비상 연락처
export interface EmergencyContact {
  name: string;
  relationship: string;
  phone_number: string;
  email?: string;
}

// 전문가 정보
export interface ProfessionalInfo {
  occupation?: string;
  organization?: string;
  license_number?: string;
  years_of_experience?: number;
  specialization?: string[];
  certifications?: Array<{
    name: string;
    issuer: string;
    issue_date: string;
    expiry_date?: string;
    certificate_id?: string;
  }>;
  education?: Array<{
    institution: string;
    degree: string;
    field_of_study: string;
    graduation_year: number;
  }>;
}

// 농장과 함께하는 확장된 프로필
export interface ProfileWithFarms extends Profile {
  farms: Farm[];
  farm_count: number;
  role: UserRole;
  status: UserStatus;
  last_login?: Date | string;
  subscription?: UserSubscription;
}

// === 구독 및 결제 ===

// 사용자 구독 정보
export interface UserSubscription {
  id: string;
  user_id: string;
  plan: SubscriptionPlan;
  status: SubscriptionStatus;
  started_at: Date | string;
  expires_at: Date | string;
  auto_renew: boolean;
  payment_method?: PaymentMethod;
  billing_cycle: 'monthly' | 'yearly';
  features: SubscriptionFeatures;
  usage: SubscriptionUsage;
}

// 결제 방법
export interface PaymentMethod {
  id: string;
  type: 'credit_card' | 'debit_card' | 'bank_transfer' | 'digital_wallet';
  last_four?: string;
  brand?: string;
  is_default: boolean;
  expires_at?: string;
}

// 구독 기능
export interface SubscriptionFeatures {
  max_farms: number;
  max_crops_per_farm: number;
  weather_alerts: boolean;
  ai_recommendations: boolean;
  historical_data_years: number;
  api_access: boolean;
  premium_support: boolean;
  custom_reports: boolean;
  data_export: boolean;
  mobile_app: boolean;
}

// 구독 사용량
export interface SubscriptionUsage {
  current_farms: number;
  current_crops: number;
  api_calls_this_month: number;
  storage_used_mb: number;
  reports_generated_this_month: number;
}

// === 권한 및 보안 ===

// 사용자 권한
export interface UserPermissions {
  farms: {
    create: boolean;
    read: boolean;
    update: boolean;
    delete: boolean;
  };
  crops: {
    create: boolean;
    read: boolean;
    update: boolean;
    delete: boolean;
  };
  weather: {
    read: boolean;
    manage_alerts: boolean;
  };
  reports: {
    create: boolean;
    export: boolean;
  };
  admin: {
    manage_users: boolean;
    system_settings: boolean;
    analytics: boolean;
  };
}

// 로그인 세션
export interface UserSession {
  user_id: string;
  session_id: string;
  device_info: {
    device_type: 'desktop' | 'mobile' | 'tablet';
    os: string;
    browser: string;
    ip_address: string;
    location?: {
      country?: string;
      region?: string;
      city?: string;
    };
  };
  created_at: Date | string;
  last_activity: Date | string;
  expires_at: Date | string;
  is_active: boolean;
}

// 사용자 활동 로그
export interface UserActivityLog {
  id: string;
  user_id: string;
  activity_type: UserActivityType;
  activity_description: string;
  resource_type?: string;
  resource_id?: string;
  ip_address?: string;
  user_agent?: string;
  created_at: Date | string;
  metadata?: Record<string, any>;
}

export type UserActivityType = 
  | 'login'
  | 'logout'
  | 'profile_update'
  | 'farm_create'
  | 'farm_update'
  | 'farm_delete'
  | 'crop_create'
  | 'crop_update'
  | 'crop_delete'
  | 'report_generate'
  | 'settings_change'
  | 'password_change'
  | 'subscription_change';

// === 알림 설정 ===

// 알림 타입
export type NotificationType = 
  | 'weather_alert'
  | 'crop_reminder'
  | 'harvest_ready'
  | 'activity_due'
  | 'system_update'
  | 'subscription_expiry'
  | 'security_alert';

// 알림 설정
export interface NotificationSettings {
  user_id: string;
  notification_types: Record<NotificationType, {
    enabled: boolean;
    email: boolean;
    push: boolean;
    sms?: boolean;
    frequency?: 'immediate' | 'daily' | 'weekly';
  }>;
  quiet_hours?: {
    enabled: boolean;
    start_time: string; // HH:MM
    end_time: string;   // HH:MM
    timezone: string;
  };
  language: string;
  updated_at: Date | string;
}

// 사용자 알림
export interface UserNotification {
  id: string;
  user_id: string;
  type: NotificationType;
  title: string;
  message: string;
  data?: Record<string, any>;
  is_read: boolean;
  is_sent: boolean;
  delivery_channels: Array<'email' | 'push' | 'sms' | 'in_app'>;
  created_at: Date | string;
  scheduled_for?: Date | string;
  sent_at?: Date | string;
  read_at?: Date | string;
  expires_at?: Date | string;
}

// === 팀 및 공유 ===

// 팀 (농장 공유)
export interface Team {
  id: string;
  name: string;
  description?: string;
  owner_id: string;
  created_at: Date | string;
  updated_at: Date | string;
}

// 팀 멤버
export interface TeamMember {
  id: string;
  team_id: string;
  user_id: string;
  role: TeamRole;
  permissions: TeamPermissions;
  invited_at: Date | string;
  joined_at?: Date | string;
  status: 'pending' | 'active' | 'suspended';
}

export type TeamRole = 
  | 'owner'
  | 'admin'
  | 'editor'
  | 'viewer';

// 팀 권한
export interface TeamPermissions {
  farm_access: string[]; // farm IDs
  can_invite: boolean;
  can_edit_crops: boolean;
  can_add_activities: boolean;
  can_view_reports: boolean;
  can_manage_settings: boolean;
}

// === 필터링 및 쿼리 옵션 ===

// 사용자 필터
export interface UserFilter extends BaseFilter {
  role?: UserRole | UserRole[];
  status?: UserStatus | UserStatus[];
  subscription_plan?: SubscriptionPlan | SubscriptionPlan[];
  subscription_status?: SubscriptionStatus | SubscriptionStatus[];
  has_farms?: boolean;
  last_login_after?: Date | string;
  last_login_before?: Date | string;
  location?: {
    country?: string;
    region?: string;
    city?: string;
  };
}

// 알림 필터
export interface NotificationFilter extends BaseFilter {
  user_id?: string;
  type?: NotificationType | NotificationType[];
  is_read?: boolean;
  is_sent?: boolean;
  scheduled_after?: Date | string;
  scheduled_before?: Date | string;
}

// 정렬 옵션
export type UserSortField = 'created_at' | 'updated_at' | 'full_name' | 'email' | 'last_login';
export type NotificationSortField = 'created_at' | 'scheduled_for' | 'sent_at' | 'read_at';

export type UserSortOption = SortOption<UserSortField>;
export type NotificationSortOption = SortOption<NotificationSortField>;

// === 사용자 통계 ===

// 사용자 대시보드 통계
export interface UserDashboardStats {
  farms_count: number;
  crops_count: number;
  active_crops: number;
  upcoming_harvests: number;
  unread_notifications: number;
  weather_alerts_today: number;
  recent_activities: number;
  subscription_days_remaining?: number;
}

// 사용자 사용 패턴
export interface UserUsageStats {
  login_frequency: {
    daily: number;
    weekly: number;
    monthly: number;
  };
  feature_usage: Record<string, number>;
  most_active_hours: number[]; // 0-23
  device_preferences: Record<string, number>;
  location_sessions: Record<string, number>;
}

// === 온보딩 및 헬프 ===

// 온보딩 상태
export interface OnboardingState {
  user_id: string;
  is_completed: boolean;
  current_step: number;
  total_steps: number;
  completed_steps: string[];
  skipped_steps: string[];
  started_at: Date | string;
  completed_at?: Date | string;
}

// 사용자 피드백
export interface UserFeedback {
  id: string;
  user_id: string;
  type: 'bug_report' | 'feature_request' | 'general' | 'compliment';
  title: string;
  description: string;
  rating?: number; // 1-5
  category?: string;
  page_url?: string;
  device_info?: Record<string, any>;
  attachments?: string[];
  status: 'open' | 'in_progress' | 'resolved' | 'closed';
  admin_response?: string;
  created_at: Date | string;
  updated_at: Date | string;
}
</file>

<file path="src/shared/utils/index.ts">
// Shared Utils
export * from './utils';
export * from './permissions';
</file>

<file path="src/shared/utils/permissions.ts">
// Role-based Access Control (RBAC) utilities for AI4AgriWeather

export type UserRole = 'farmer' | 'extension_officer' | 'researcher' | 'admin' | 'cooperative_member' | 'agribusiness';

export interface Permission {
  resource: string;
  action: string;
}

// Define role capabilities
export const ROLE_PERMISSIONS: Record<UserRole, Permission[]> = {
  farmer: [
    { resource: 'knowledge_entries', action: 'create' },
    { resource: 'knowledge_entries', action: 'read_own' },
    { resource: 'knowledge_entries', action: 'update_own' },
    { resource: 'knowledge_entries', action: 'delete_own' },
    { resource: 'profile', action: 'read_own' },
    { resource: 'profile', action: 'update_own' },
    { resource: 'templates', action: 'read' },
    { resource: 'knowledge_entries', action: 'export_own' },
  ],
  
  extension_officer: [
    { resource: 'knowledge_entries', action: 'create' },
    { resource: 'knowledge_entries', action: 'read_own' },
    { resource: 'knowledge_entries', action: 'read_shared' },
    { resource: 'knowledge_entries', action: 'update_own' },
    { resource: 'knowledge_entries', action: 'delete_own' },
    { resource: 'knowledge_entries', action: 'share' },
    { resource: 'knowledge_entries', action: 'export_own' },
    { resource: 'profile', action: 'read_own' },
    { resource: 'profile', action: 'update_own' },
    { resource: 'templates', action: 'read' },
    { resource: 'templates', action: 'create' },
    { resource: 'farmers', action: 'view_list' },
    { resource: 'analytics', action: 'view_basic' },
  ],
  
  researcher: [
    { resource: 'knowledge_entries', action: 'create' },
    { resource: 'knowledge_entries', action: 'read_own' },
    { resource: 'knowledge_entries', action: 'read_shared' },
    { resource: 'knowledge_entries', action: 'read_research' },
    { resource: 'knowledge_entries', action: 'update_own' },
    { resource: 'knowledge_entries', action: 'delete_own' },
    { resource: 'knowledge_entries', action: 'share' },
    { resource: 'knowledge_entries', action: 'export_own' },
    { resource: 'knowledge_entries', action: 'export_research' },
    { resource: 'profile', action: 'read_own' },
    { resource: 'profile', action: 'update_own' },
    { resource: 'templates', action: 'read' },
    { resource: 'templates', action: 'create' },
    { resource: 'templates', action: 'modify' },
    { resource: 'analytics', action: 'view_advanced' },
    { resource: 'data', action: 'export_aggregated' },
  ],
  
  admin: [
    { resource: '*', action: '*' }, // Admin has all permissions
  ],
  
  cooperative_member: [
    { resource: 'knowledge_entries', action: 'create' },
    { resource: 'knowledge_entries', action: 'read_own' },
    { resource: 'knowledge_entries', action: 'read_cooperative' },
    { resource: 'knowledge_entries', action: 'update_own' },
    { resource: 'knowledge_entries', action: 'delete_own' },
    { resource: 'knowledge_entries', action: 'share_cooperative' },
    { resource: 'knowledge_entries', action: 'export_own' },
    { resource: 'profile', action: 'read_own' },
    { resource: 'profile', action: 'update_own' },
    { resource: 'templates', action: 'read' },
    { resource: 'cooperative', action: 'view' },
    { resource: 'cooperative', action: 'participate' },
  ],
  
  agribusiness: [
    { resource: 'knowledge_entries', action: 'create' },
    { resource: 'knowledge_entries', action: 'read_own' },
    { resource: 'knowledge_entries', action: 'read_business' },
    { resource: 'knowledge_entries', action: 'update_own' },
    { resource: 'knowledge_entries', action: 'delete_own' },
    { resource: 'knowledge_entries', action: 'share_business' },
    { resource: 'knowledge_entries', action: 'export_own' },
    { resource: 'profile', action: 'read_own' },
    { resource: 'profile', action: 'update_own' },
    { resource: 'templates', action: 'read' },
    { resource: 'analytics', action: 'view_business' },
    { resource: 'market_data', action: 'access' },
  ],
};

// Permission checking utility
export const hasPermission = (
  userRole: UserRole | null | undefined,
  resource: string,
  action: string
): boolean => {
  if (!userRole) return false;
  
  const permissions = ROLE_PERMISSIONS[userRole];
  if (!permissions) return false;
  
  // Check for admin wildcard permissions
  if (permissions.some(p => p.resource === '*' && p.action === '*')) {
    return true;
  }
  
  // Check for specific permission
  return permissions.some(p => 
    (p.resource === resource || p.resource === '*') &&
    (p.action === action || p.action === '*')
  );
};

// Check if user can access knowledge entries of specific sharing level
export const canAccessKnowledgeEntry = (
  userRole: UserRole | null | undefined,
  entryOwnerId: string,
  currentUserId: string,
  sharingLevel: string = 'private'
): boolean => {
  if (!userRole || !currentUserId) return false;
  
  // Owner can always access their own entries
  if (entryOwnerId === currentUserId) {
    return hasPermission(userRole, 'knowledge_entries', 'read_own');
  }
  
  // Check sharing level permissions
  switch (sharingLevel) {
    case 'public':
      return hasPermission(userRole, 'knowledge_entries', 'read_shared');
    case 'cooperative':
      return hasPermission(userRole, 'knowledge_entries', 'read_cooperative');
    case 'research':
      return hasPermission(userRole, 'knowledge_entries', 'read_research');
    case 'business':
      return hasPermission(userRole, 'knowledge_entries', 'read_business');
    default:
      return false;
  }
};

// Get available sharing options based on user role
export const getAvailableSharingOptions = (userRole: UserRole | null | undefined): Array<{
  value: string;
  label: string;
  description: string;
}> => {
  const options = [
    { value: 'private', label: 'Private', description: 'Only you can see this entry' }
  ];
  
  if (!userRole) return options;
  
  if (hasPermission(userRole, 'knowledge_entries', 'share')) {
    options.push({
      value: 'public',
      label: 'Public',
      description: 'Share with other farmers and extension officers'
    });
  }
  
  if (hasPermission(userRole, 'knowledge_entries', 'share_cooperative')) {
    options.push({
      value: 'cooperative',
      label: 'Cooperative',
      description: 'Share with your cooperative members'
    });
  }
  
  if (hasPermission(userRole, 'knowledge_entries', 'share_business')) {
    options.push({
      value: 'business',
      label: 'Business',
      description: 'Share with business partners and suppliers'
    });
  }
  
  if (userRole === 'researcher' || userRole === 'admin') {
    options.push({
      value: 'research',
      label: 'Research',
      description: 'Share for agricultural research purposes'
    });
  }
  
  return options;
};

// Check if user can perform bulk operations
export const canPerformBulkOperation = (
  userRole: UserRole | null | undefined,
  operation: 'delete' | 'archive' | 'export' | 'duplicate',
  entriesOwnedByUser: boolean = true
): boolean => {
  if (!userRole) return false;
  
  switch (operation) {
    case 'delete':
      return entriesOwnedByUser && hasPermission(userRole, 'knowledge_entries', 'delete_own');
    case 'archive':
      return entriesOwnedByUser && hasPermission(userRole, 'knowledge_entries', 'update_own');
    case 'export':
      return hasPermission(userRole, 'knowledge_entries', 'export_own');
    case 'duplicate':
      return hasPermission(userRole, 'knowledge_entries', 'create');
    default:
      return false;
  }
};

// Get role display information
export const getRoleInfo = (role: UserRole): {
  name: string;
  description: string;
  color: string;
  icon: string;
} => {
  const roleInfo = {
    farmer: {
      name: 'Farmer',
      description: 'Individual farmer managing their own agricultural knowledge',
      color: 'green',
      icon: '🌾'
    },
    extension_officer: {
      name: 'Extension Officer',
      description: 'Agricultural extension officer providing guidance to farmers',
      color: 'blue',
      icon: '👩‍🌾'
    },
    researcher: {
      name: 'Researcher',
      description: 'Agricultural researcher studying farming practices and innovations',
      color: 'purple',
      icon: '🔬'
    },
    admin: {
      name: 'Administrator',
      description: 'System administrator with full access to all features',
      color: 'red',
      icon: '⚙️'
    },
    cooperative_member: {
      name: 'Cooperative Member',
      description: 'Member of an agricultural cooperative sharing knowledge with peers',
      color: 'orange',
      icon: '🤝'
    },
    agribusiness: {
      name: 'Agribusiness',
      description: 'Business entity involved in agricultural value chain',
      color: 'indigo',
      icon: '🏢'
    }
  };
  
  return roleInfo[role];
};

// Check if user has administrative privileges
export const isAdmin = (userRole: UserRole | null | undefined): boolean => {
  return userRole === 'admin';
};

// Check if user can manage templates
export const canManageTemplates = (userRole: UserRole | null | undefined): boolean => {
  return hasPermission(userRole, 'templates', 'create') || 
         hasPermission(userRole, 'templates', 'modify');
};

// Check if user can view analytics
export const canViewAnalytics = (userRole: UserRole | null | undefined): boolean => {
  return hasPermission(userRole, 'analytics', 'view_basic') ||
         hasPermission(userRole, 'analytics', 'view_advanced') ||
         hasPermission(userRole, 'analytics', 'view_business');
};

// Get analytics level based on role
export const getAnalyticsLevel = (userRole: UserRole | null | undefined): 'none' | 'basic' | 'advanced' | 'business' => {
  if (!userRole) return 'none';
  
  if (hasPermission(userRole, 'analytics', 'view_advanced')) return 'advanced';
  if (hasPermission(userRole, 'analytics', 'view_business')) return 'business';
  if (hasPermission(userRole, 'analytics', 'view_basic')) return 'basic';
  
  return 'none';
};
</file>

<file path="src/shared/utils/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/shared/index.ts">
// Shared Module Exports
export * from './components';
export * from './hooks';
export * from './services';
export * from './types';
export * from './utils';
</file>

<file path="src/types/agriculture.ts">
/**
 * 농업 특화 타입 정의
 * 농장, 작물, 농업 활동과 관련된 모든 타입들을 정의합니다.
 */

import { BaseEntity, GeoLocation, LocationInfo, HealthStatus, BaseFilter, SortOption } from './domain';
import { Tables, TablesInsert, TablesUpdate } from '../integrations/supabase/types';

// === 기본 농업 엔티티 ===

// 농장 타입 (Supabase 기반)
export type Farm = Tables<'farms'>;
export type FarmInsert = TablesInsert<'farms'>;
export type FarmUpdate = TablesUpdate<'farms'>;

// 작물 타입 (Supabase 기반)
export type Crop = Tables<'crops'>;
export type CropInsert = TablesInsert<'crops'>;
export type CropUpdate = TablesUpdate<'crops'>;

// 농업 활동 타입 (Supabase 기반)
export type FarmActivity = Tables<'farm_activities'>;
export type FarmActivityInsert = TablesInsert<'farm_activities'>;
export type FarmActivityUpdate = TablesUpdate<'farm_activities'>;

// === 농장 관련 타입 ===

// 농장 유형
export type FarmType = 
  | 'crop_farm'       // 작물농장
  | 'livestock'       // 축산농장
  | 'dairy'          // 낙농농장
  | 'orchard'        // 과수원
  | 'greenhouse'     // 온실농장
  | 'hydroponic'     // 수경재배
  | 'organic'        // 유기농장
  | 'mixed'          // 복합농장
  | 'research';      // 연구농장

// 농장 생성 입력
export interface FarmCreateInput {
  name: string;
  location_name: string;
  farm_type?: FarmType;
  description?: string;
  area_hectares?: number;
  latitude?: number;
  longitude?: number;
}

// 농장 업데이트 입력
export interface FarmUpdateInput {
  name?: string;
  location_name?: string;
  farm_type?: FarmType;
  description?: string;
  area_hectares?: number;
  latitude?: number;
  longitude?: number;
}

// 농장과 작물 정보를 포함한 확장 타입
export interface FarmWithCrops extends Farm {
  crops: Crop[];
  crop_count: number;
  total_crop_area?: number;
  active_crops: number;
}

// 농장 통계
export interface FarmStats {
  total_area: number;
  cultivated_area: number;
  crop_count: number;
  active_crops: number;
  harvest_ready: number;
  health_distribution: Record<HealthStatus, number>;
  recent_activities: number;
}

// === 작물 관련 타입 ===

// 작물 성장 단계
export type GrowthStage = 
  | 'seed'           // 씨앗
  | 'germination'    // 발아
  | 'seedling'       // 모종
  | 'vegetative'     // 영양성장
  | 'flowering'      // 개화
  | 'fruiting'       // 결실
  | 'maturing'       // 성숙
  | 'harvest_ready'  // 수확가능
  | 'harvested'      // 수확완료
  | 'dormant';       // 휴면

// 작물 카테고리
export type CropCategory = 
  | 'cereals'        // 곡물
  | 'vegetables'     // 채소
  | 'fruits'         // 과일
  | 'herbs'          // 허브
  | 'legumes'        // 콩류
  | 'tubers'         // 구근류
  | 'fodder'         // 사료작물
  | 'ornamental'     // 관상식물
  | 'medicinal';     // 약용식물

// 작물 생성 입력
export interface CropCreateInput {
  farm_id: string;
  name: string;
  variety?: string;
  area_hectares?: number;
  planted_date?: string;
  expected_harvest_date?: string;
  growth_stage?: GrowthStage;
  health_status?: HealthStatus;
  notes?: string;
}

// 작물 업데이트 입력
export interface CropUpdateInput {
  name?: string;
  variety?: string;
  area_hectares?: number;
  planted_date?: string;
  expected_harvest_date?: string;
  actual_harvest_date?: string;
  growth_stage?: GrowthStage;
  health_status?: HealthStatus;
  notes?: string;
}

// 작물과 농장 정보를 포함한 확장 타입
export interface CropWithFarm extends Crop {
  farm: Farm;
  days_since_planted?: number;
  days_to_harvest?: number;
  growth_progress_percentage?: number;
}

// 작물 통계
export interface CropStats {
  total_crops: number;
  by_category: Record<CropCategory, number>;
  by_growth_stage: Record<GrowthStage, number>;
  by_health_status: Record<HealthStatus, number>;
  harvest_this_month: number;
  planted_this_month: number;
}

// === 농업 활동 관련 타입 ===

// 농업 활동 유형
export type ActivityType = 
  | 'planting'       // 파종/정식
  | 'watering'       // 물주기
  | 'fertilizing'    // 시비
  | 'pest_control'   // 방제
  | 'pruning'        // 전정
  | 'weeding'        // 제초
  | 'harvesting'     // 수확
  | 'soil_prep'      // 토양준비
  | 'monitoring'     // 모니터링
  | 'maintenance'    // 유지보수
  | 'treatment'      // 처리
  | 'other';         // 기타

// 농업 활동 생성 입력
export interface ActivityCreateInput {
  farm_id: string;
  crop_id?: string;
  activity_type: ActivityType;
  description: string;
  performed_at: string;
  cost?: number;
  quantity?: number;
  unit?: string;
}

// 농업 활동 업데이트 입력
export interface ActivityUpdateInput {
  activity_type?: ActivityType;
  description?: string;
  performed_at?: string;
  cost?: number;
  quantity?: number;
  unit?: string;
}

// 활동과 관련 정보를 포함한 확장 타입
export interface ActivityWithRelations extends FarmActivity {
  farm: Farm;
  crop?: Crop;
}

// 농업 활동 통계
export interface ActivityStats {
  total_activities: number;
  by_type: Record<ActivityType, number>;
  total_cost: number;
  this_month_activities: number;
  this_week_activities: number;
  recent_activities: ActivityWithRelations[];
}

// === 필터링 및 쿼리 옵션 ===

// 농장 필터
export interface FarmFilter extends BaseFilter {
  farm_type?: FarmType | FarmType[];
  min_area?: number;
  max_area?: number;
  has_crops?: boolean;
  location?: {
    radius_km?: number;
    center: GeoLocation;
  };
}

// 작물 필터
export interface CropFilter extends BaseFilter {
  farm_id?: string;
  growth_stage?: GrowthStage | GrowthStage[];
  health_status?: HealthStatus | HealthStatus[];
  category?: CropCategory | CropCategory[];
  planted_after?: Date | string;
  planted_before?: Date | string;
  harvest_due?: boolean; // 수확 예정인 작물만
  harvest_overdue?: boolean; // 수확이 늦은 작물만
}

// 농업 활동 필터
export interface ActivityFilter extends BaseFilter {
  farm_id?: string;
  crop_id?: string;
  activity_type?: ActivityType | ActivityType[];
  performed_after?: Date | string;
  performed_before?: Date | string;
  min_cost?: number;
  max_cost?: number;
  has_cost?: boolean;
}

// 정렬 옵션들
export type FarmSortField = 'created_at' | 'updated_at' | 'name' | 'area_hectares' | 'location_name';
export type CropSortField = 'created_at' | 'updated_at' | 'name' | 'planted_date' | 'expected_harvest_date' | 'area_hectares';
export type ActivitySortField = 'created_at' | 'updated_at' | 'performed_at' | 'activity_type' | 'cost';

export type FarmSortOption = SortOption<FarmSortField>;
export type CropSortOption = SortOption<CropSortField>;
export type ActivitySortOption = SortOption<ActivitySortField>;

// === AI 추천 및 인사이트 타입 ===

// 농업 추천사항
export interface AgricultureRecommendation {
  id: string;
  type: 'planting' | 'fertilizing' | 'pest_control' | 'harvesting' | 'irrigation' | 'general';
  priority: 'low' | 'medium' | 'high' | 'urgent';
  title: string;
  description: string;
  reasoning: string;
  target_entity_type: 'farm' | 'crop' | 'activity';
  target_entity_id: string;
  suggested_action?: string;
  estimated_cost?: number;
  estimated_time?: number; // hours
  deadline?: Date | string;
  created_at: Date | string;
  is_dismissed: boolean;
}

// 농업 인사이트
export interface AgricultureInsight {
  id: string;
  title: string;
  description: string;
  insight_type: 'performance' | 'trend' | 'anomaly' | 'prediction' | 'optimization';
  data: any; // 차트 데이터 등
  farm_id?: string;
  crop_id?: string;
  generated_at: Date | string;
  confidence_score: number; // 0-1
}

// === 계절 및 기후 연관 타입 ===

// 재배 시즌
export interface GrowingSeason {
  id: string;
  name: string;
  start_date: string; // MM-DD 형식
  end_date: string;   // MM-DD 형식
  suitable_crops: string[];
  region?: string;
  climate_zone?: string;
}

// 작물 캘린더
export interface CropCalendar {
  crop_name: string;
  variety?: string;
  planting_window: {
    start: string; // MM-DD
    end: string;   // MM-DD
  };
  harvest_window: {
    start: string; // MM-DD
    end: string;   // MM-DD
  };
  growth_duration_days: number;
  climate_requirements: {
    min_temperature?: number;
    max_temperature?: number;
    min_rainfall?: number;
    max_rainfall?: number;
    soil_ph_range?: [number, number];
  };
  region?: string;
}
</file>

<file path="src/types/chat.ts">
// Enhanced chat types with proper structure for agent collaboration

export interface ChatContext {
  type: 'general' | 'weather' | 'crops' | 'knowledge';
  metadata?: {
    cropType?: string;
    location?: string;
    timeRange?: string;
    language?: string;
  };
}

export interface ChatAgent {
  id: string;
  name: string;
  type: 'coordinator' | 'weather' | 'crops' | 'knowledge' | 'search';
  capabilities: string[];
}

export interface AgentResponse {
  agentId: string;
  content: string;
  sources?: string[];
  confidence: number;
  metadata?: Record<string, any>;
}

export interface ChatRequest {
  sessionId: string;
  message: string;
  userId: string;
  context?: ChatContext;
  previousAgents?: string[];
}

export interface ChatResponse {
  success: boolean;
  messageId?: string;
  timestamp: string;
  error?: string;
  agentResponses?: AgentResponse[];
}

// Message format that n8n should return
export interface N8nChatResponse {
  type: 'ai';
  content: {
    output: Array<{
      text: string;
      citations?: Array<{
        chunk_index: number;
        chunk_source_id: string;
        chunk_lines_from: number;
        chunk_lines_to: number;
      }>;
    }>;
  };
  metadata?: {
    agents?: AgentResponse[];
    processingTime?: number;
    confidence?: number;
  };
}

// Standardized error response
export interface ChatError {
  code: string;
  message: string;
  details?: any;
  timestamp: string;
}
</file>

<file path="src/types/domain.ts">
/**
 * 공통 도메인 타입 정의
 * 프로젝트 전체에서 사용되는 기본 타입들을 정의합니다.
 */

// 기본 엔티티 메타데이터
export interface BaseEntity {
  id: string;
  created_at: string;
  updated_at: string;
}

// 지리적 위치 정보
export interface GeoLocation {
  latitude: number;
  longitude: number;
  elevation?: number;
}

// 주소/위치 정보
export interface LocationInfo extends Partial<GeoLocation> {
  location_name: string;
  address?: string;
  postal_code?: string;
  city?: string;
  region?: string;
  country?: string;
}

// 시간 범위
export interface TimeRange {
  start: string | Date;
  end: string | Date;
}

// 페이지네이션
export interface Pagination {
  page: number;
  pageSize: number;
  total?: number;
}

// 정렬 옵션
export interface SortOption<T = string> {
  field: T;
  ascending?: boolean;
}

// API 응답 공통 타입
export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
}

export interface PaginatedApiResponse<T = any> extends ApiResponse<T[]> {
  pagination?: Pagination;
}

// 필터링 기본 타입
export interface BaseFilter {
  created_after?: Date | string;
  created_before?: Date | string;
  updated_after?: Date | string;
  updated_before?: Date | string;
  search_query?: string;
}

// 상태 타입들
export type ProcessingStatus = 
  | 'pending'     // 대기중
  | 'processing'  // 처리중
  | 'completed'   // 완료
  | 'failed'      // 실패
  | 'cancelled';  // 취소됨

export type HealthStatus = 
  | 'excellent'   // 매우 좋음
  | 'good'        // 좋음
  | 'fair'        // 보통
  | 'poor'        // 나쁨
  | 'critical'    // 심각함
  | 'unknown';    // 알 수 없음

export type AlertSeverity = 
  | 'low'         // 낮음
  | 'medium'      // 보통
  | 'high'        // 높음
  | 'critical';   // 심각함

// 단위 시스템
export type UnitSystem = 'metric' | 'imperial';

// 측정 단위들
export interface Units {
  temperature: 'celsius' | 'fahrenheit';
  length: 'cm' | 'inch' | 'meter' | 'feet';
  area: 'hectare' | 'acre' | 'sqm' | 'sqft';
  weight: 'kg' | 'pound' | 'gram' | 'ounce';
  volume: 'liter' | 'gallon' | 'ml' | 'cup';
  speed: 'kmh' | 'mph' | 'ms';
  pressure: 'hpa' | 'inchHg' | 'mmHg' | 'psi';
  precipitation: 'mm' | 'inch';
}

// 타임존
export type Timezone = string; // ISO timezone format (e.g., 'Asia/Seoul', 'UTC')

// 언어/로케일
export type Locale = 'ko-KR' | 'en-US' | 'ja-JP' | 'zh-CN';

// 파일 관련 타입
export interface FileMetadata {
  name: string;
  size: number;
  type: string;
  extension: string;
  last_modified?: Date;
  checksum?: string;
}

export interface FileUploadProgress {
  file_id: string;
  file_name: string;
  progress: number;        // 0-100
  status: 'uploading' | 'processing' | 'completed' | 'failed' | 'cancelled';
  error?: string;
  upload_start_time: Date;
  estimated_time_remaining?: number; // seconds
}

// 알림/경고 기본 타입
export interface BaseAlert {
  id: string;
  title: string;
  message: string;
  severity: AlertSeverity;
  alert_type: string;
  is_read: boolean;
  valid_from: string | Date;
  valid_until?: string | Date;
  created_at: string;
}

// 사용자 선호도
export interface UserPreferences {
  unit_system: UnitSystem;
  units: Partial<Units>;
  timezone: Timezone;
  locale: Locale;
  notifications_enabled: boolean;
  email_notifications: boolean;
  push_notifications: boolean;
  default_dashboard_view?: string;
}

// 검색 및 필터링 공통 타입
export interface SearchOptions {
  query?: string;
  filters?: Record<string, any>;
  sort?: SortOption[];
  pagination?: Partial<Pagination>;
}

// 통계 기본 타입
export interface BaseStats {
  total: number;
  active: number;
  inactive: number;
  recent_changes: number; // 최근 변경사항 수
  last_updated: Date | string;
}

// 데이터 검증 결과
export interface ValidationResult {
  is_valid: boolean;
  errors: string[];
  warnings?: string[];
}

// 실시간 이벤트 타입
export interface RealtimeEvent<T = any> {
  event_type: 'INSERT' | 'UPDATE' | 'DELETE';
  table: string;
  new_data?: T;
  old_data?: T;
  timestamp: Date | string;
}

// 에러 타입
export interface DomainError {
  code: string;
  message: string;
  details?: any;
  timestamp?: Date | string;
  context?: Record<string, any>;
}

// 설정 타입
export interface AppSettings {
  app_name: string;
  version: string;
  environment: 'development' | 'staging' | 'production';
  features: {
    weather_integration: boolean;
    ai_recommendations: boolean;
    mobile_app: boolean;
    api_access: boolean;
  };
  limits: {
    max_file_size_mb: number;
    max_farms_per_user: number;
    max_crops_per_farm: number;
    api_requests_per_hour: number;
  };
}
</file>

<file path="src/types/examples.ts">
/**
 * 새로운 타입 시스템 사용 예제
 * 실제 사용 패턴을 보여주는 예제 코드들입니다.
 */

import {
  // 농업 관련 타입들
  Farm,
  Crop,
  FarmCreateInput,
  CropCreateInput,
  GrowthStage,
  ActivityType,
  FarmActivity,
  
  // 날씨 관련 타입들
  WeatherData,
  WeatherCondition,
  WeatherAlert,
  WeatherAlertType,
  CurrentWeather,
  
  // 사용자 관련 타입들
  Profile,
  UserRole,
  NotificationSettings,
  
  // 공통 도메인 타입들
  ApiResponse,
  ProcessingStatus,
  HealthStatus,
  Pagination,
  
  // 타입 가드 함수들
  isValidGrowthStage,
  isValidWeatherCondition,
  isValidUserRole,
  
  // 유틸리티 함수들
  safeParseDate,
  safeParseNumber,
  isValidEmail,
  isValidLatitude,
  isValidLongitude
} from './index';

// === 농장 관리 예제 ===

// 농장 생성
export function createFarmExample(): FarmCreateInput {
  return {
    name: '햇살농장',
    location_name: '경기도 파주시 문산읍',
    farm_type: 'crop_farm',
    description: '친환경 채소를 재배하는 농장입니다.',
    area_hectares: 5.5,
    latitude: 37.8361,
    longitude: 126.7794
  };
}

// 작물 생성 및 검증
export function createCropWithValidation(
  farmId: string, 
  cropName: string, 
  growthStage: string
): CropCreateInput | null {
  // 타입 가드를 사용하여 런타임 검증
  if (!isValidGrowthStage(growthStage)) {
    console.error('Invalid growth stage:', growthStage);
    return null;
  }
  
  return {
    farm_id: farmId,
    name: cropName,
    variety: '개량종',
    area_hectares: 1.2,
    planted_date: new Date().toISOString(),
    growth_stage: growthStage, // 이제 타입 안전함
    health_status: 'good',
    notes: `${cropName} 작물 등록`
  };
}

// 농장 통계 계산
export function calculateFarmStats(farm: Farm, crops: Crop[]): {
  totalCrops: number;
  healthyPercentage: number;
  harvestReady: number;
} {
  const totalCrops = crops.length;
  const healthyCrops = crops.filter(crop => 
    crop.health_status === 'excellent' || crop.health_status === 'good'
  ).length;
  const harvestReady = crops.filter(crop => 
    crop.growth_stage === 'harvest_ready'
  ).length;
  
  return {
    totalCrops,
    healthyPercentage: totalCrops > 0 ? (healthyCrops / totalCrops) * 100 : 0,
    harvestReady
  };
}

// === 날씨 데이터 처리 예제 ===

// 날씨 데이터 검증 및 변환
export function processWeatherData(rawData: any): CurrentWeather | null {
  try {
    const weather: CurrentWeather = {
      location: {
        location_name: rawData.location || '알 수 없는 위치',
        latitude: safeParseNumber(rawData.lat),
        longitude: safeParseNumber(rawData.lon)
      },
      recorded_at: safeParseDate(rawData.timestamp) || new Date(),
      station_id: rawData.stationId || 'unknown',
      temperature: rawData.temp ? {
        value: safeParseNumber(rawData.temp),
        unit: 'celsius'
      } : undefined,
      humidity: rawData.humidity ? {
        value: safeParseNumber(rawData.humidity),
        unit: '%'
      } : undefined,
      precipitation: rawData.rain ? {
        value: safeParseNumber(rawData.rain),
        unit: 'mm'
      } : undefined
    };
    
    // 날씨 상태 검증
    if (rawData.condition && isValidWeatherCondition(rawData.condition)) {
      weather.weather_condition = rawData.condition;
    }
    
    return weather;
  } catch (error) {
    console.error('Failed to process weather data:', error);
    return null;
  }
}

// 농업 관련 날씨 경고 생성
export function createAgriculturalAlert(
  temperature: number,
  crops: Crop[],
  farmId: string
): WeatherAlert[] {
  const alerts: WeatherAlert[] = [];
  
  // 서리 경고 (온도가 2도 이하)
  if (temperature <= 2) {
    alerts.push({
      id: crypto.randomUUID(),
      alert_type: 'frost',
      title: '서리 주의보',
      message: '온도가 영하로 떨어질 위험이 있습니다. 작물 보온에 주의하세요.',
      severity: 'high',
      valid_from: new Date().toISOString(),
      farm_id: farmId,
      created_at: new Date().toISOString(),
      is_read: false
    });
  }
  
  // 극한 고온 경고 (온도가 35도 이상)
  if (temperature >= 35) {
    const vulnerableCrops = crops.filter(crop => 
      crop.growth_stage === 'flowering' || crop.growth_stage === 'fruiting'
    );
    
    if (vulnerableCrops.length > 0) {
      alerts.push({
        id: crypto.randomUUID(),
        alert_type: 'heat_wave',
        title: '극한 고온 경고',
        message: `극한 고온으로 인해 ${vulnerableCrops.length}개 작물이 위험할 수 있습니다.`,
        severity: 'critical',
        valid_from: new Date().toISOString(),
        farm_id: farmId,
        created_at: new Date().toISOString(),
        is_read: false
      });
    }
  }
  
  return alerts;
}

// === 사용자 관리 예제 ===

// 사용자 프로필 검증
export function validateUserProfile(profileData: any): Profile | null {
  if (!profileData.email || !isValidEmail(profileData.email)) {
    console.error('Invalid email address');
    return null;
  }
  
  if (profileData.role && !isValidUserRole(profileData.role)) {
    console.error('Invalid user role:', profileData.role);
    return null;
  }
  
  return {
    id: profileData.id || crypto.randomUUID(),
    email: profileData.email,
    full_name: profileData.full_name || null,
    avatar_url: profileData.avatar_url || null,
    created_at: safeParseDate(profileData.created_at)?.toISOString() || new Date().toISOString(),
    updated_at: new Date().toISOString()
  };
}

// 알림 설정 생성
export function createDefaultNotificationSettings(userId: string): NotificationSettings {
  return {
    user_id: userId,
    notification_types: {
      weather_alert: {
        enabled: true,
        email: true,
        push: true,
        frequency: 'immediate'
      },
      crop_reminder: {
        enabled: true,
        email: false,
        push: true,
        frequency: 'daily'
      },
      harvest_ready: {
        enabled: true,
        email: true,
        push: true,
        frequency: 'immediate'
      },
      activity_due: {
        enabled: true,
        email: false,
        push: true,
        frequency: 'daily'
      },
      system_update: {
        enabled: true,
        email: true,
        push: false,
        frequency: 'weekly'
      },
      subscription_expiry: {
        enabled: true,
        email: true,
        push: true,
        frequency: 'immediate'
      },
      security_alert: {
        enabled: true,
        email: true,
        push: true,
        frequency: 'immediate'
      }
    },
    quiet_hours: {
      enabled: true,
      start_time: '22:00',
      end_time: '07:00',
      timezone: 'Asia/Seoul'
    },
    language: 'ko-KR',
    updated_at: new Date().toISOString()
  };
}

// === API 응답 처리 예제 ===

// 표준 API 응답 래퍼
export function createApiResponse<T>(data: T): ApiResponse<T> {
  return {
    success: true,
    data,
    message: 'Success'
  };
}

export function createApiError(error: string): ApiResponse<never> {
  return {
    success: false,
    error,
    message: 'An error occurred'
  };
}

// 페이지네이션을 포함한 목록 응답
export function createPaginatedResponse<T>(
  items: T[],
  page: number,
  pageSize: number,
  total: number
): ApiResponse<T[]> & { pagination: Pagination } {
  return {
    success: true,
    data: items,
    pagination: {
      page,
      pageSize,
      total
    }
  };
}

// === 데이터 변환 유틸리티 예제 ===

// Supabase 데이터를 확장 타입으로 변환
export function enhanceCropData(
  crop: Crop,
  farm: Farm
): Crop & { 
  days_since_planted?: number;
  days_to_harvest?: number;
  growth_progress_percentage?: number;
} {
  const enhancedCrop = { ...crop };
  
  if (crop.planted_date) {
    const plantedDate = safeParseDate(crop.planted_date);
    if (plantedDate) {
      const daysSincePlanted = Math.floor(
        (Date.now() - plantedDate.getTime()) / (1000 * 60 * 60 * 24)
      );
      (enhancedCrop as any).days_since_planted = daysSincePlanted;
    }
  }
  
  if (crop.expected_harvest_date) {
    const harvestDate = safeParseDate(crop.expected_harvest_date);
    if (harvestDate) {
      const daysToHarvest = Math.floor(
        (harvestDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24)
      );
      (enhancedCrop as any).days_to_harvest = daysToHarvest;
    }
  }
  
  // 성장 단계별 진행률 계산 (예시)
  const stageProgress: Record<GrowthStage, number> = {
    seed: 0,
    germination: 10,
    seedling: 20,
    vegetative: 40,
    flowering: 60,
    fruiting: 75,
    maturing: 90,
    harvest_ready: 95,
    harvested: 100,
    dormant: 0
  };
  
  if (crop.growth_stage && isValidGrowthStage(crop.growth_stage)) {
    (enhancedCrop as any).growth_progress_percentage = stageProgress[crop.growth_stage];
  }
  
  return enhancedCrop;
}

// === 검색 및 필터링 예제 ===

// 작물 필터링 함수
export function filterCrops(
  crops: Crop[],
  filters: {
    healthStatus?: HealthStatus[];
    growthStage?: GrowthStage[];
    farmId?: string;
    searchQuery?: string;
  }
): Crop[] {
  return crops.filter(crop => {
    // 건강 상태 필터
    if (filters.healthStatus && filters.healthStatus.length > 0) {
      if (!crop.health_status || !filters.healthStatus.includes(crop.health_status as HealthStatus)) {
        return false;
      }
    }
    
    // 성장 단계 필터
    if (filters.growthStage && filters.growthStage.length > 0) {
      if (!crop.growth_stage || !filters.growthStage.includes(crop.growth_stage as GrowthStage)) {
        return false;
      }
    }
    
    // 농장 ID 필터
    if (filters.farmId && crop.farm_id !== filters.farmId) {
      return false;
    }
    
    // 검색어 필터
    if (filters.searchQuery) {
      const query = filters.searchQuery.toLowerCase();
      const matchesName = crop.name.toLowerCase().includes(query);
      const matchesVariety = crop.variety?.toLowerCase().includes(query);
      const matchesNotes = crop.notes?.toLowerCase().includes(query);
      
      if (!matchesName && !matchesVariety && !matchesNotes) {
        return false;
      }
    }
    
    return true;
  });
}

// === 유효성 검증 예제 ===

// 농장 데이터 유효성 검증
export function validateFarmData(data: any): string[] {
  const errors: string[] = [];
  
  if (!data.name || typeof data.name !== 'string' || data.name.trim().length === 0) {
    errors.push('농장명은 필수입니다.');
  }
  
  if (!data.location_name || typeof data.location_name !== 'string') {
    errors.push('위치명은 필수입니다.');
  }
  
  if (data.area_hectares !== undefined) {
    const area = safeParseNumber(data.area_hectares);
    if (area < 0 || area > 10000) {
      errors.push('농장 면적은 0 이상 10,000 헥타르 이하여야 합니다.');
    }
  }
  
  if (data.latitude !== undefined && !isValidLatitude(safeParseNumber(data.latitude))) {
    errors.push('위도 값이 올바르지 않습니다. (-90 ~ 90 사이의 값)');
  }
  
  if (data.longitude !== undefined && !isValidLongitude(safeParseNumber(data.longitude))) {
    errors.push('경도 값이 올바르지 않습니다. (-180 ~ 180 사이의 값)');
  }
  
  return errors;
}

export default {
  // 농장 관련
  createFarmExample,
  createCropWithValidation,
  calculateFarmStats,
  
  // 날씨 관련
  processWeatherData,
  createAgriculturalAlert,
  
  // 사용자 관련
  validateUserProfile,
  createDefaultNotificationSettings,
  
  // API 관련
  createApiResponse,
  createApiError,
  createPaginatedResponse,
  
  // 유틸리티
  enhanceCropData,
  filterCrops,
  validateFarmData
};
</file>

<file path="src/types/index.ts">
/**
 * 타입 시스템 중앙 진입점
 * 모든 도메인 타입들을 여기서 재출력하여 편리하게 사용할 수 있도록 합니다.
 */

// === 도메인 타입들 ===
export * from './domain';
export * from './agriculture';
export * from './weather';
export * from './user';

// === 기존 타입들과의 호환성 ===
export * from './message';

// === Supabase 타입들 (재출력) ===
export type {
  Database,
  Tables,
  TablesInsert,
  TablesUpdate,
  Enums,
  Json
} from '../integrations/supabase/types';

// === 타입 가드 및 유틸리티 함수들 ===

// 농장 관련 타입 가드
export const isValidFarmType = (value: any): value is import('./agriculture').FarmType => {
  const validTypes = [
    'crop_farm', 'livestock', 'dairy', 'orchard', 
    'greenhouse', 'hydroponic', 'organic', 'mixed', 'research'
  ];
  return typeof value === 'string' && validTypes.includes(value);
};

// 작물 성장 단계 타입 가드
export const isValidGrowthStage = (value: any): value is import('./agriculture').GrowthStage => {
  const validStages = [
    'seed', 'germination', 'seedling', 'vegetative', 'flowering',
    'fruiting', 'maturing', 'harvest_ready', 'harvested', 'dormant'
  ];
  return typeof value === 'string' && validStages.includes(value);
};

// 날씨 상태 타입 가드
export const isValidWeatherCondition = (value: any): value is import('./weather').WeatherCondition => {
  const validConditions = [
    'clear', 'partly_cloudy', 'cloudy', 'overcast',
    'rain_light', 'rain_moderate', 'rain_heavy', 'thunderstorm',
    'snow_light', 'snow_moderate', 'snow_heavy', 'sleet',
    'fog', 'mist', 'haze', 'dust', 'windy'
  ];
  return typeof value === 'string' && validConditions.includes(value);
};

// 사용자 역할 타입 가드
export const isValidUserRole = (value: any): value is import('./user').UserRole => {
  const validRoles = ['farmer', 'advisor', 'researcher', 'admin', 'viewer'];
  return typeof value === 'string' && validRoles.includes(value);
};

// 건강 상태 타입 가드
export const isValidHealthStatus = (value: any): value is import('./domain').HealthStatus => {
  const validStatuses = ['excellent', 'good', 'fair', 'poor', 'critical', 'unknown'];
  return typeof value === 'string' && validStatuses.includes(value);
};

// 처리 상태 타입 가드
export const isValidProcessingStatus = (value: any): value is import('./domain').ProcessingStatus => {
  const validStatuses = ['pending', 'processing', 'completed', 'failed', 'cancelled'];
  return typeof value === 'string' && validStatuses.includes(value);
};

// === 타입 변환 유틸리티 ===

// 문자열을 Date로 안전하게 변환
export const safeParseDate = (dateString: string | Date): Date | null => {
  if (dateString instanceof Date) return dateString;
  if (typeof dateString === 'string') {
    const date = new Date(dateString);
    return isNaN(date.getTime()) ? null : date;
  }
  return null;
};

// 숫자 값을 안전하게 파싱
export const safeParseNumber = (value: any, defaultValue: number = 0): number => {
  if (typeof value === 'number' && !isNaN(value)) return value;
  if (typeof value === 'string') {
    const parsed = parseFloat(value);
    return isNaN(parsed) ? defaultValue : parsed;
  }
  return defaultValue;
};

// 위도/경도 유효성 검증
export const isValidLatitude = (lat: number): boolean => {
  return typeof lat === 'number' && lat >= -90 && lat <= 90;
};

export const isValidLongitude = (lng: number): boolean => {
  return typeof lng === 'number' && lng >= -180 && lng <= 180;
};

// 이메일 유효성 검증
export const isValidEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// === 타입 별칭들 (편의성을 위한) ===

// 자주 사용되는 ID 타입들
export type UserId = string;
export type FarmId = string;
export type CropId = string;
export type WeatherStationId = string;
export type NotificationId = string;

// 자주 사용되는 날짜 타입들
export type Timestamp = string | Date;
export type DateString = string; // YYYY-MM-DD 형식
export type TimeString = string; // HH:MM 형식
export type DateTimeString = string; // ISO 8601 형식

// API 응답에서 자주 사용되는 타입들
export type ApiSuccess<T> = import('./domain').ApiResponse<T> & { success: true; data: T };
export type ApiError = import('./domain').ApiResponse<never> & { success: false; error: string };

// === 상수들 ===

// 기본 페이지네이션 설정
export const DEFAULT_PAGINATION = {
  page: 1,
  pageSize: 20
} as const;

// 기본 정렬 설정
export const DEFAULT_SORT = {
  ascending: false
} as const;

// 지원되는 파일 확장자들
export const SUPPORTED_IMAGE_EXTENSIONS = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'] as const;
export const SUPPORTED_DOCUMENT_EXTENSIONS = ['.pdf', '.doc', '.docx', '.txt', '.rtf'] as const;
export const SUPPORTED_SPREADSHEET_EXTENSIONS = ['.xls', '.xlsx', '.csv'] as const;

// API 제한사항
export const API_LIMITS = {
  MAX_FILE_SIZE_MB: 50,
  MAX_FILES_PER_UPLOAD: 10,
  MAX_DESCRIPTION_LENGTH: 2000,
  MAX_TITLE_LENGTH: 200,
  MIN_PASSWORD_LENGTH: 8
} as const;

// 시간 상수들 (밀리초)
export const TIME_CONSTANTS = {
  MINUTE: 60 * 1000,
  HOUR: 60 * 60 * 1000,
  DAY: 24 * 60 * 60 * 1000,
  WEEK: 7 * 24 * 60 * 60 * 1000,
  MONTH: 30 * 24 * 60 * 60 * 1000,
  YEAR: 365 * 24 * 60 * 60 * 1000
} as const;
</file>

<file path="src/types/README.md">
# 농업 특화 타입 시스템

AI4AgriWeather 프로젝트의 타입 시스템은 농업과 날씨 도메인에 특화된 중앙 집중식 타입 관리를 제공합니다.

## 구조 개요

```
src/types/
├── index.ts          # 중앙 진입점 - 모든 타입 재출력
├── domain.ts         # 공통 도메인 타입
├── agriculture.ts    # 농업 특화 타입
├── weather.ts        # 날씨 관련 타입
├── user.ts          # 사용자/프로필 타입
├── message.ts       # 기존 메시지 타입 (호환성)
└── README.md        # 이 파일
```

## 파일별 설명

### 1. `domain.ts` - 공통 도메인 타입
프로젝트 전체에서 사용되는 기본적인 타입들을 정의합니다.

**주요 타입:**
- `BaseEntity` - 기본 엔티티 구조
- `GeoLocation` - 지리적 위치
- `ProcessingStatus` - 처리 상태
- `HealthStatus` - 건강 상태
- `ApiResponse<T>` - API 응답 표준 형식
- `UserPreferences` - 사용자 선호도

```typescript
import { BaseEntity, ProcessingStatus, ApiResponse } from '@/types';

interface MyEntity extends BaseEntity {
  status: ProcessingStatus;
}

const response: ApiResponse<MyEntity> = {
  success: true,
  data: entity
};
```

### 2. `agriculture.ts` - 농업 특화 타입
농장, 작물, 농업 활동과 관련된 모든 타입들을 정의합니다.

**주요 타입:**
- `Farm`, `FarmCreateInput`, `FarmWithCrops`
- `Crop`, `CropCreateInput`, `CropWithFarm`
- `FarmActivity`, `ActivityType`, `GrowthStage`
- `AgricultureRecommendation`, `AgricultureInsight`

```typescript
import { Farm, Crop, GrowthStage, ActivityType } from '@/types';

const farm: Farm = {
  id: '123',
  name: '예시 농장',
  location_name: '서울시 강남구',
  // ... 기타 필드
};

const crop: Crop = {
  farm_id: farm.id,
  growth_stage: 'flowering' as GrowthStage,
  // ... 기타 필드
};
```

### 3. `weather.ts` - 날씨 관련 타입
기상 데이터, 예보, 경고 시스템과 관련된 타입들을 정의합니다.

**주요 타입:**
- `WeatherData`, `WeatherStation`, `WeatherAlert`
- `CurrentWeather`, `WeatherForecast`
- `WeatherCondition`, `WeatherAlertType`
- `AgriculturalIndex`, `CropWeatherRequirement`

```typescript
import { WeatherData, WeatherCondition, WeatherAlert } from '@/types';

const weather: WeatherData = {
  temperature: 25.5,
  humidity: 65,
  condition: 'partly_cloudy' as WeatherCondition,
  // ... 기타 필드
};
```

### 4. `user.ts` - 사용자/프로필 타입
사용자 계정, 프로필, 권한, 설정과 관련된 타입들을 정의합니다.

**주요 타입:**
- `Profile`, `ProfileCreateInput`, `ProfileWithFarms`
- `UserRole`, `UserPermissions`, `UserSubscription`
- `NotificationSettings`, `UserNotification`

```typescript
import { Profile, UserRole, NotificationSettings } from '@/types';

const profile: Profile = {
  email: 'farmer@example.com',
  role: 'farmer' as UserRole,
  // ... 기타 필드
};
```

## 사용 방법

### 1. 기본 사용법
```typescript
// 중앙 진입점에서 모든 타입을 가져올 수 있습니다
import { 
  Farm, 
  Crop, 
  WeatherData, 
  Profile, 
  ApiResponse 
} from '@/types';

// 또는 특정 도메인에서만 가져오기
import { Farm, Crop } from '@/types/agriculture';
import { WeatherData } from '@/types/weather';
```

### 2. 타입 가드 사용
```typescript
import { isValidGrowthStage, isValidWeatherCondition } from '@/types';

const userInput = 'flowering';
if (isValidGrowthStage(userInput)) {
  // userInput은 이제 GrowthStage 타입으로 추론됩니다
  console.log(`Valid growth stage: ${userInput}`);
}
```

### 3. API 응답 타입 활용
```typescript
import { ApiResponse, Farm } from '@/types';

async function getFarms(): Promise<ApiResponse<Farm[]>> {
  try {
    const farms = await api.get('/farms');
    return {
      success: true,
      data: farms
    };
  } catch (error) {
    return {
      success: false,
      error: error.message
    };
  }
}
```

### 4. 필터링 및 정렬 타입 활용
```typescript
import { CropFilter, CropSortOption } from '@/types';

const filter: CropFilter = {
  growth_stage: ['flowering', 'fruiting'],
  health_status: 'good',
  planted_after: new Date('2024-01-01')
};

const sort: CropSortOption = {
  field: 'planted_date',
  ascending: false
};
```

## Supabase 호환성

모든 타입들은 Supabase 데이터베이스 스키마와 완전히 호환됩니다:

```typescript
import { Tables, TablesInsert, TablesUpdate } from '@/types';

// Supabase 타입들을 직접 사용
type Farm = Tables<'farms'>;
type FarmInsert = TablesInsert<'farms'>;
type FarmUpdate = TablesUpdate<'farms'>;

// 또는 우리의 확장 타입 사용
import { Farm, FarmCreateInput, FarmUpdateInput } from '@/types';
```

## 타입 확장 가이드

새로운 도메인 타입을 추가해야 할 때:

1. **기본 타입**: `domain.ts`에 추가
2. **농업 관련**: `agriculture.ts`에 추가  
3. **날씨 관련**: `weather.ts`에 추가
4. **사용자 관련**: `user.ts`에 추가
5. **새 도메인**: 새 파일 생성 후 `index.ts`에서 재출력

### 예시: 새 도메인 추가
```typescript
// src/types/inventory.ts
export interface InventoryItem {
  id: string;
  name: string;
  quantity: number;
  // ...
}

// src/types/index.ts에 추가
export * from './inventory';
```

## 베스트 프랙티스

1. **중앙 임포트 사용**: `@/types`에서 임포트하여 일관성 유지
2. **타입 가드 활용**: 런타임 검증이 필요한 경우 제공된 타입 가드 사용
3. **기본값 활용**: `DEFAULT_PAGINATION`, `DEFAULT_SORT` 등의 상수 활용
4. **API 응답 표준화**: `ApiResponse<T>` 타입 일관적 사용
5. **네이밍 컨벤션**: 
   - 인터페이스: PascalCase (예: `WeatherData`)
   - 타입 별칭: PascalCase (예: `WeatherCondition`)
   - 유니온 타입: snake_case 문자열 (예: `'partly_cloudy'`)

## 마이그레이션 가이드

기존 코드에서 새 타입 시스템으로 마이그레이션:

```typescript
// Before
import { Database } from '@/integrations/supabase/types';
type Farm = Database['public']['Tables']['farms']['Row'];

// After
import { Farm } from '@/types';

// Before
interface WeatherResponse {
  temperature: number;
  humidity: number;
}

// After
import { WeatherData, ApiResponse } from '@/types';
type WeatherResponse = ApiResponse<WeatherData>;
```

이 타입 시스템을 통해 더 안전하고 일관된 코드 작성이 가능하며, 농업과 날씨 도메인의 복잡성을 효과적으로 관리할 수 있습니다.
</file>

<file path="src/types/user.ts">
/**
 * 사용자 및 프로필 관련 타입 정의
 * 사용자 계정, 프로필, 권한, 설정 등과 관련된 모든 타입들을 정의합니다.
 */

import { BaseEntity, UserPreferences, BaseFilter, SortOption } from './domain';
import { Tables, TablesInsert, TablesUpdate } from '../integrations/supabase/types';
import { Farm } from './agriculture';

// === 기본 사용자 엔티티 (Supabase 기반) ===

// 사용자 프로필 타입
export type Profile = Tables<'profiles'>;
export type ProfileInsert = TablesInsert<'profiles'>;
export type ProfileUpdate = TablesUpdate<'profiles'>;

// === 확장된 사용자 타입 ===

// 사용자 역할
export type UserRole = 
  | 'farmer'          // 농민
  | 'advisor'         // 농업지도사
  | 'researcher'      // 연구원
  | 'admin'          // 관리자
  | 'viewer';        // 조회자

// 구독 플랜
export type SubscriptionPlan = 
  | 'free'           // 무료
  | 'basic'          // 기본
  | 'premium'        // 프리미엄
  | 'enterprise';    // 기업

// 구독 상태
export type SubscriptionStatus = 
  | 'active'         // 활성
  | 'expired'        // 만료
  | 'cancelled'      // 취소
  | 'suspended';     // 정지

// 사용자 상태
export type UserStatus = 
  | 'active'         // 활성
  | 'inactive'       // 비활성
  | 'suspended'      // 정지
  | 'pending'        // 승인대기
  | 'verified';      // 인증완료

// === 확장된 프로필 타입 ===

// 프로필 생성 입력
export interface ProfileCreateInput {
  email: string;
  full_name?: string;
  avatar_url?: string;
}

// 프로필 업데이트 입력
export interface ProfileUpdateInput {
  full_name?: string;
  avatar_url?: string;
  phone_number?: string;
  date_of_birth?: string;
  address?: Address;
  bio?: string;
  role?: UserRole;
  preferences?: UserPreferences;
  emergency_contact?: EmergencyContact;
  professional_info?: ProfessionalInfo;
}

// 사용자 주소 정보
export interface Address {
  street?: string;
  city: string;
  state?: string;
  postal_code?: string;
  country: string;
  is_primary?: boolean;
}

// 비상 연락처
export interface EmergencyContact {
  name: string;
  relationship: string;
  phone_number: string;
  email?: string;
}

// 전문가 정보
export interface ProfessionalInfo {
  occupation?: string;
  organization?: string;
  license_number?: string;
  years_of_experience?: number;
  specialization?: string[];
  certifications?: Array<{
    name: string;
    issuer: string;
    issue_date: string;
    expiry_date?: string;
    certificate_id?: string;
  }>;
  education?: Array<{
    institution: string;
    degree: string;
    field_of_study: string;
    graduation_year: number;
  }>;
}

// 농장과 함께하는 확장된 프로필
export interface ProfileWithFarms extends Profile {
  farms: Farm[];
  farm_count: number;
  role: UserRole;
  status: UserStatus;
  last_login?: Date | string;
  subscription?: UserSubscription;
}

// === 구독 및 결제 ===

// 사용자 구독 정보
export interface UserSubscription {
  id: string;
  user_id: string;
  plan: SubscriptionPlan;
  status: SubscriptionStatus;
  started_at: Date | string;
  expires_at: Date | string;
  auto_renew: boolean;
  payment_method?: PaymentMethod;
  billing_cycle: 'monthly' | 'yearly';
  features: SubscriptionFeatures;
  usage: SubscriptionUsage;
}

// 결제 방법
export interface PaymentMethod {
  id: string;
  type: 'credit_card' | 'debit_card' | 'bank_transfer' | 'digital_wallet';
  last_four?: string;
  brand?: string;
  is_default: boolean;
  expires_at?: string;
}

// 구독 기능
export interface SubscriptionFeatures {
  max_farms: number;
  max_crops_per_farm: number;
  weather_alerts: boolean;
  ai_recommendations: boolean;
  historical_data_years: number;
  api_access: boolean;
  premium_support: boolean;
  custom_reports: boolean;
  data_export: boolean;
  mobile_app: boolean;
}

// 구독 사용량
export interface SubscriptionUsage {
  current_farms: number;
  current_crops: number;
  api_calls_this_month: number;
  storage_used_mb: number;
  reports_generated_this_month: number;
}

// === 권한 및 보안 ===

// 사용자 권한
export interface UserPermissions {
  farms: {
    create: boolean;
    read: boolean;
    update: boolean;
    delete: boolean;
  };
  crops: {
    create: boolean;
    read: boolean;
    update: boolean;
    delete: boolean;
  };
  weather: {
    read: boolean;
    manage_alerts: boolean;
  };
  reports: {
    create: boolean;
    export: boolean;
  };
  admin: {
    manage_users: boolean;
    system_settings: boolean;
    analytics: boolean;
  };
}

// 로그인 세션
export interface UserSession {
  user_id: string;
  session_id: string;
  device_info: {
    device_type: 'desktop' | 'mobile' | 'tablet';
    os: string;
    browser: string;
    ip_address: string;
    location?: {
      country?: string;
      region?: string;
      city?: string;
    };
  };
  created_at: Date | string;
  last_activity: Date | string;
  expires_at: Date | string;
  is_active: boolean;
}

// 사용자 활동 로그
export interface UserActivityLog {
  id: string;
  user_id: string;
  activity_type: UserActivityType;
  activity_description: string;
  resource_type?: string;
  resource_id?: string;
  ip_address?: string;
  user_agent?: string;
  created_at: Date | string;
  metadata?: Record<string, any>;
}

export type UserActivityType = 
  | 'login'
  | 'logout'
  | 'profile_update'
  | 'farm_create'
  | 'farm_update'
  | 'farm_delete'
  | 'crop_create'
  | 'crop_update'
  | 'crop_delete'
  | 'report_generate'
  | 'settings_change'
  | 'password_change'
  | 'subscription_change';

// === 알림 설정 ===

// 알림 타입
export type NotificationType = 
  | 'weather_alert'
  | 'crop_reminder'
  | 'harvest_ready'
  | 'activity_due'
  | 'system_update'
  | 'subscription_expiry'
  | 'security_alert';

// 알림 설정
export interface NotificationSettings {
  user_id: string;
  notification_types: Record<NotificationType, {
    enabled: boolean;
    email: boolean;
    push: boolean;
    sms?: boolean;
    frequency?: 'immediate' | 'daily' | 'weekly';
  }>;
  quiet_hours?: {
    enabled: boolean;
    start_time: string; // HH:MM
    end_time: string;   // HH:MM
    timezone: string;
  };
  language: string;
  updated_at: Date | string;
}

// 사용자 알림
export interface UserNotification {
  id: string;
  user_id: string;
  type: NotificationType;
  title: string;
  message: string;
  data?: Record<string, any>;
  is_read: boolean;
  is_sent: boolean;
  delivery_channels: Array<'email' | 'push' | 'sms' | 'in_app'>;
  created_at: Date | string;
  scheduled_for?: Date | string;
  sent_at?: Date | string;
  read_at?: Date | string;
  expires_at?: Date | string;
}

// === 팀 및 공유 ===

// 팀 (농장 공유)
export interface Team {
  id: string;
  name: string;
  description?: string;
  owner_id: string;
  created_at: Date | string;
  updated_at: Date | string;
}

// 팀 멤버
export interface TeamMember {
  id: string;
  team_id: string;
  user_id: string;
  role: TeamRole;
  permissions: TeamPermissions;
  invited_at: Date | string;
  joined_at?: Date | string;
  status: 'pending' | 'active' | 'suspended';
}

export type TeamRole = 
  | 'owner'
  | 'admin'
  | 'editor'
  | 'viewer';

// 팀 권한
export interface TeamPermissions {
  farm_access: string[]; // farm IDs
  can_invite: boolean;
  can_edit_crops: boolean;
  can_add_activities: boolean;
  can_view_reports: boolean;
  can_manage_settings: boolean;
}

// === 필터링 및 쿼리 옵션 ===

// 사용자 필터
export interface UserFilter extends BaseFilter {
  role?: UserRole | UserRole[];
  status?: UserStatus | UserStatus[];
  subscription_plan?: SubscriptionPlan | SubscriptionPlan[];
  subscription_status?: SubscriptionStatus | SubscriptionStatus[];
  has_farms?: boolean;
  last_login_after?: Date | string;
  last_login_before?: Date | string;
  location?: {
    country?: string;
    region?: string;
    city?: string;
  };
}

// 알림 필터
export interface NotificationFilter extends BaseFilter {
  user_id?: string;
  type?: NotificationType | NotificationType[];
  is_read?: boolean;
  is_sent?: boolean;
  scheduled_after?: Date | string;
  scheduled_before?: Date | string;
}

// 정렬 옵션
export type UserSortField = 'created_at' | 'updated_at' | 'full_name' | 'email' | 'last_login';
export type NotificationSortField = 'created_at' | 'scheduled_for' | 'sent_at' | 'read_at';

export type UserSortOption = SortOption<UserSortField>;
export type NotificationSortOption = SortOption<NotificationSortField>;

// === 사용자 통계 ===

// 사용자 대시보드 통계
export interface UserDashboardStats {
  farms_count: number;
  crops_count: number;
  active_crops: number;
  upcoming_harvests: number;
  unread_notifications: number;
  weather_alerts_today: number;
  recent_activities: number;
  subscription_days_remaining?: number;
}

// 사용자 사용 패턴
export interface UserUsageStats {
  login_frequency: {
    daily: number;
    weekly: number;
    monthly: number;
  };
  feature_usage: Record<string, number>;
  most_active_hours: number[]; // 0-23
  device_preferences: Record<string, number>;
  location_sessions: Record<string, number>;
}

// === 온보딩 및 헬프 ===

// 온보딩 상태
export interface OnboardingState {
  user_id: string;
  is_completed: boolean;
  current_step: number;
  total_steps: number;
  completed_steps: string[];
  skipped_steps: string[];
  started_at: Date | string;
  completed_at?: Date | string;
}

// 사용자 피드백
export interface UserFeedback {
  id: string;
  user_id: string;
  type: 'bug_report' | 'feature_request' | 'general' | 'compliment';
  title: string;
  description: string;
  rating?: number; // 1-5
  category?: string;
  page_url?: string;
  device_info?: Record<string, any>;
  attachments?: string[];
  status: 'open' | 'in_progress' | 'resolved' | 'closed';
  admin_response?: string;
  created_at: Date | string;
  updated_at: Date | string;
}
</file>

<file path="src/types/weather.ts">
/**
 * 날씨 관련 타입 정의
 * 기상 데이터, 예보, 경고, 기상관측소 등 날씨와 관련된 모든 타입들을 정의합니다.
 */

import { BaseEntity, GeoLocation, LocationInfo, AlertSeverity, BaseFilter, SortOption, Units } from './domain';
import { Tables, TablesInsert, TablesUpdate } from '../integrations/supabase/types';

// === 기본 날씨 엔티티 (Supabase 기반) ===

// 날씨 데이터 타입
export type WeatherData = Tables<'weather_data'>;
export type WeatherDataInsert = TablesInsert<'weather_data'>;
export type WeatherDataUpdate = TablesUpdate<'weather_data'>;

// 기상관측소 타입
export type WeatherStation = Tables<'weather_stations'>;
export type WeatherStationInsert = TablesInsert<'weather_stations'>;
export type WeatherStationUpdate = TablesUpdate<'weather_stations'>;

// 날씨 경고 타입
export type WeatherAlert = Tables<'weather_alerts'>;
export type WeatherAlertInsert = TablesInsert<'weather_alerts'>;
export type WeatherAlertUpdate = TablesUpdate<'weather_alerts'>;

// === 현재 날씨 및 관측 데이터 ===

// 기상 측정 데이터 (단위 포함)
export interface WeatherMeasurement {
  temperature?: {
    value: number;
    unit: Units['temperature'];
  };
  humidity?: {
    value: number; // percentage
    unit: '%';
  };
  pressure?: {
    value: number;
    unit: Units['pressure'];
  };
  wind_speed?: {
    value: number;
    unit: Units['speed'];
  };
  wind_direction?: {
    value: number; // degrees (0-360)
    unit: 'degrees';
  };
  precipitation?: {
    value: number;
    unit: Units['precipitation'];
  };
  solar_radiation?: {
    value: number;
    unit: 'w/m2';
  };
  soil_temperature?: {
    value: number;
    unit: Units['temperature'];
  };
  soil_moisture?: {
    value: number; // percentage
    unit: '%';
  };
}

// 현재 날씨 상태
export interface CurrentWeather extends WeatherMeasurement {
  location: LocationInfo;
  recorded_at: Date | string;
  station_id: string;
  weather_condition?: WeatherCondition;
  feels_like_temperature?: number;
  visibility?: number; // km
  uv_index?: number;
  air_quality_index?: number;
}

// 날씨 상태
export type WeatherCondition = 
  | 'clear'           // 맑음
  | 'partly_cloudy'   // 구름조금
  | 'cloudy'          // 흐림
  | 'overcast'        // 구름많음
  | 'rain_light'      // 가벼운 비
  | 'rain_moderate'   // 보통 비
  | 'rain_heavy'      // 강한 비
  | 'thunderstorm'    // 뇌우
  | 'snow_light'      // 가벼운 눈
  | 'snow_moderate'   // 보통 눈
  | 'snow_heavy'      // 많은 눈
  | 'sleet'           // 진눈깨비
  | 'fog'             // 안개
  | 'mist'            // 박무
  | 'haze'            // 연무
  | 'dust'            // 황사
  | 'windy';          // 바람

// === 날씨 예보 ===

// 시간별 예보
export interface HourlyForecast extends WeatherMeasurement {
  forecast_time: Date | string;
  weather_condition: WeatherCondition;
  precipitation_probability?: number; // percentage
  cloud_cover?: number; // percentage
}

// 일별 예보
export interface DailyForecast {
  date: string; // YYYY-MM-DD
  weather_condition: WeatherCondition;
  temperature_min: number;
  temperature_max: number;
  humidity_min?: number;
  humidity_max?: number;
  precipitation_total?: number;
  precipitation_probability?: number;
  wind_speed_avg?: number;
  wind_speed_max?: number;
  wind_direction_avg?: number;
  sunrise?: string; // HH:MM
  sunset?: string;  // HH:MM
  moon_phase?: MoonPhase;
}

// 달의 위상
export type MoonPhase = 
  | 'new_moon'
  | 'waxing_crescent'
  | 'first_quarter'
  | 'waxing_gibbous'
  | 'full_moon'
  | 'waning_gibbous'
  | 'last_quarter'
  | 'waning_crescent';

// 종합 날씨 예보
export interface WeatherForecast {
  location: LocationInfo;
  current: CurrentWeather;
  hourly: HourlyForecast[]; // 다음 48시간
  daily: DailyForecast[];   // 다음 7일
  last_updated: Date | string;
  data_source: string;
}

// === 기상관측소 관련 ===

// 관측소 유형
export type StationType = 
  | 'automatic'       // 자동관측소
  | 'manual'         // 유인관측소
  | 'agricultural'   // 농업기상관측소
  | 'marine'         // 해상관측소
  | 'aviation'       // 항공기상관측소
  | 'research'       // 연구용관측소
  | 'private';       // 개인관측소

// 관측소 상태
export type StationStatus = 
  | 'active'         // 정상운영
  | 'maintenance'    // 점검중
  | 'inactive'       // 비활성
  | 'error'          // 오류
  | 'offline';       // 오프라인

// 관측소 생성 입력
export interface WeatherStationCreateInput {
  name: string;
  station_id: string;
  location_name: string;
  latitude: number;
  longitude: number;
  elevation?: number;
  station_type?: StationType;
  installation_date?: string;
  status?: StationStatus;
}

// 확장된 관측소 정보
export interface WeatherStationWithData extends WeatherStation {
  latest_data?: WeatherData;
  data_availability: {
    last_24h: number;    // 지난 24시간 데이터 개수
    last_7d: number;     // 지난 7일 데이터 개수
    last_30d: number;    // 지난 30일 데이터 개수
  };
  distance_km?: number; // 특정 지점으로부터의 거리
}

// === 날씨 경고 및 알림 ===

// 날씨 경고 유형
export type WeatherAlertType = 
  | 'temperature_extreme'  // 극한 온도
  | 'heat_wave'           // 폭염
  | 'cold_wave'           // 한파
  | 'heavy_rain'          // 호우
  | 'drought'             // 가뭄
  | 'strong_wind'         // 강풍
  | 'frost'               // 서리
  | 'hail'                // 우박
  | 'thunderstorm'        // 뇌우
  | 'snow_storm'          // 눈폭풍
  | 'typhoon'             // 태풍
  | 'air_quality'         // 대기질
  | 'uv_extreme'          // 자외선
  | 'agricultural';       // 농업특보

// 날씨 경고 생성 입력
export interface WeatherAlertCreateInput {
  alert_type: WeatherAlertType;
  title: string;
  message: string;
  severity: AlertSeverity;
  valid_from: string;
  valid_until?: string;
  farm_id?: string;
  user_id?: string;
}

// === 농업 기상 특화 타입 ===

// 농업 기상 지수
export interface AgriculturalIndex {
  date: string;
  growing_degree_days: number;      // 생장도일
  chill_hours?: number;             // 저온시간
  evapotranspiration: number;       // 증발산량
  soil_moisture_index: number;      // 토양수분지수
  pest_development_index?: number;  // 병해충발달지수
  disease_risk_index?: number;      // 병해위험지수
}

// 작물별 기상 요구사항
export interface CropWeatherRequirement {
  crop_name: string;
  optimal_temperature: {
    min: number;
    max: number;
    unit: Units['temperature'];
  };
  optimal_humidity: {
    min: number;
    max: number;
  };
  water_requirement: {
    daily_mm: number;
    growth_stage_multiplier: Record<string, number>;
  };
  frost_tolerance: 'high' | 'medium' | 'low' | 'none';
  heat_tolerance: 'high' | 'medium' | 'low';
  wind_tolerance: 'high' | 'medium' | 'low';
  critical_periods: Array<{
    stage: string;
    sensitivity: 'high' | 'medium' | 'low';
    weather_factors: WeatherFactor[];
  }>;
}

export type WeatherFactor = 
  | 'temperature'
  | 'humidity'
  | 'precipitation'
  | 'wind'
  | 'solar_radiation'
  | 'frost';

// 농업 기상 예보
export interface AgriculturalForecast {
  location: LocationInfo;
  crop_specific_advice: Array<{
    crop_name: string;
    growth_stage: string;
    recommendations: string[];
    warnings: string[];
    optimal_activities: string[];
  }>;
  field_work_conditions: {
    today: 'excellent' | 'good' | 'poor' | 'unsuitable';
    next_3_days: Array<{
      date: string;
      condition: 'excellent' | 'good' | 'poor' | 'unsuitable';
      activities: string[];
    }>;
  };
  irrigation_advice: {
    needed: boolean;
    amount_mm?: number;
    timing?: 'morning' | 'evening' | 'night';
    reasoning: string;
  };
}

// === 기상 데이터 분석 ===

// 기상 통계
export interface WeatherStats {
  period: {
    start: Date | string;
    end: Date | string;
  };
  temperature: {
    avg: number;
    min: number;
    max: number;
    extreme_days: number;
  };
  precipitation: {
    total: number;
    days_with_rain: number;
    max_daily: number;
    drought_days: number;
  };
  humidity: {
    avg: number;
    min: number;
    max: number;
  };
  wind: {
    avg_speed: number;
    max_speed: number;
    prevalent_direction: number;
  };
  growing_degree_days: number;
  frost_days: number;
}

// 기상 트렌드
export interface WeatherTrend {
  parameter: 'temperature' | 'precipitation' | 'humidity' | 'wind_speed';
  period: 'daily' | 'weekly' | 'monthly' | 'yearly';
  trend: 'increasing' | 'decreasing' | 'stable' | 'variable';
  change_rate: number; // per period
  confidence: number;  // 0-1
  significance: 'high' | 'medium' | 'low';
}

// === 필터링 및 쿼리 옵션 ===

// 날씨 데이터 필터
export interface WeatherDataFilter extends BaseFilter {
  station_id?: string | string[];
  location?: {
    radius_km: number;
    center: GeoLocation;
  };
  recorded_after?: Date | string;
  recorded_before?: Date | string;
  temperature_min?: number;
  temperature_max?: number;
  precipitation_min?: number;
  precipitation_max?: number;
  has_precipitation?: boolean;
}

// 날씨 경고 필터
export interface WeatherAlertFilter extends BaseFilter {
  alert_type?: WeatherAlertType | WeatherAlertType[];
  severity?: AlertSeverity | AlertSeverity[];
  is_active?: boolean;
  farm_id?: string;
  user_id?: string;
}

// 정렬 옵션
export type WeatherDataSortField = 'recorded_at' | 'temperature' | 'precipitation' | 'humidity' | 'wind_speed';
export type WeatherAlertSortField = 'created_at' | 'valid_from' | 'severity' | 'alert_type';

export type WeatherDataSortOption = SortOption<WeatherDataSortField>;
export type WeatherAlertSortOption = SortOption<WeatherAlertSortField>;

// === 외부 API 연동 타입 ===

// 날씨 API 제공자
export type WeatherProvider = 
  | 'kma'           // 기상청
  | 'openweather'   // OpenWeatherMap
  | 'weatherapi'    // WeatherAPI
  | 'accuweather'   // AccuWeather
  | 'custom';       // 커스텀

// API 응답 타입
export interface WeatherApiResponse<T = any> {
  provider: WeatherProvider;
  data: T;
  timestamp: Date | string;
  cache_expiry?: Date | string;
  api_calls_remaining?: number;
}

// 날씨 API 설정
export interface WeatherApiConfig {
  provider: WeatherProvider;
  api_key: string;
  base_url: string;
  rate_limit: {
    requests_per_hour: number;
    requests_per_day: number;
  };
  cache_duration_minutes: number;
  enabled: boolean;
}
</file>

<file path="src/utils/i18nHelper.ts">
import i18n from '@/i18n';

export const ensureI18nInitialized = async () => {
  if (!i18n.isInitialized) {
    console.log('Waiting for i18n to initialize...');
    await new Promise((resolve) => {
      const checkInterval = setInterval(() => {
        if (i18n.isInitialized) {
          clearInterval(checkInterval);
          resolve(true);
        }
      }, 50);
    });
  }
  
  console.log('i18n initialization status:', {
    isInitialized: i18n.isInitialized,
    language: i18n.language,
    resolvedLanguage: i18n.resolvedLanguage,
    hasLoadedNamespace: i18n.hasLoadedNamespace('translation'),
    supportedLngs: i18n.options.supportedLngs,
    resources: Object.keys(i18n.store?.data || {})
  });
  
  return true;
};

export const debugI18n = () => {
  console.group('🌐 i18n Debug Information');
  console.log('Current Language:', i18n.language);
  console.log('Resolved Language:', i18n.resolvedLanguage);
  console.log('Is Initialized:', i18n.isInitialized);
  console.log('Supported Languages:', i18n.options.supportedLngs);
  console.log('Store Data Keys:', Object.keys(i18n.store?.data || {}));
  console.log('Current Translations:', i18n.getResourceBundle(i18n.language, 'translation'));
  console.log('Test Translation (common.welcome):', i18n.t('common.welcome'));
  console.groupEnd();
};
</file>

<file path="src/debug.tsx">
import React from 'react';

export default function Debug() {
  return (
    <div style={{ padding: '20px', fontSize: '18px' }}>
      <h1>Debug Page</h1>
      <p>If you see this, React is working!</p>
      <p>Current time: {new Date().toLocaleString()}</p>
      <p>Environment: {import.meta.env.MODE}</p>
      <p>Supabase URL: {import.meta.env.VITE_SUPABASE_URL ? 'Set' : 'Not Set'}</p>
      <p>Supabase Key: {import.meta.env.VITE_SUPABASE_ANON_KEY ? 'Set' : 'Not Set'}</p>
    </div>
  );
}
</file>

<file path="supabase/functions/_shared/webhook-auth.ts">
import { createHmac } from "https://deno.land/std@0.168.0/crypto/mod.ts";

/**
 * Webhook authentication utilities for verifying HMAC-SHA256 signatures
 */

export interface WebhookAuthConfig {
  secret: string;
  headerName?: string;
  encoding?: 'hex' | 'base64';
  prefix?: string;
}

export interface WebhookAuthResult {
  isValid: boolean;
  error?: string;
  providedSignature?: string;
  expectedSignature?: string;
}

/**
 * Verifies webhook signature using HMAC-SHA256
 * @param request - The incoming request object
 * @param payload - The request payload (already parsed JSON or raw string)
 * @param config - Webhook authentication configuration
 * @returns Authentication result with validation status
 */
export async function verifyWebhookSignature(
  request: Request,
  payload: string | object,
  config: WebhookAuthConfig
): Promise<WebhookAuthResult> {
  try {
    // Get configuration with defaults
    const {
      secret,
      headerName = 'x-webhook-signature',
      encoding = 'hex',
      prefix = ''
    } = config;

    if (!secret) {
      return {
        isValid: false,
        error: 'Webhook secret not configured'
      };
    }

    // Get signature from header
    const providedSignature = request.headers.get(headerName);
    if (!providedSignature) {
      return {
        isValid: false,
        error: `Missing ${headerName} header`
      };
    }

    // Remove prefix if present
    const signature = prefix && providedSignature.startsWith(prefix)
      ? providedSignature.slice(prefix.length)
      : providedSignature;

    // Convert payload to string if needed
    const payloadString = typeof payload === 'string' 
      ? payload 
      : JSON.stringify(payload);

    // Create HMAC
    const encoder = new TextEncoder();
    const key = encoder.encode(secret);
    const data = encoder.encode(payloadString);
    
    const hmac = await createHmac('sha256', key);
    hmac.update(data);
    const hash = await hmac.digest();

    // Convert hash to specified encoding
    let expectedSignature: string;
    if (encoding === 'hex') {
      expectedSignature = Array.from(new Uint8Array(hash))
        .map(b => b.toString(16).padStart(2, '0'))
        .join('');
    } else if (encoding === 'base64') {
      expectedSignature = btoa(String.fromCharCode(...new Uint8Array(hash)));
    } else {
      return {
        isValid: false,
        error: `Unsupported encoding: ${encoding}`
      };
    }

    // Add prefix to expected signature if configured
    if (prefix) {
      expectedSignature = prefix + expectedSignature;
    }

    // Timing-safe comparison
    const isValid = timingSafeEqual(providedSignature, expectedSignature);

    return {
      isValid,
      providedSignature: providedSignature.substring(0, 10) + '...',
      expectedSignature: expectedSignature.substring(0, 10) + '...'
    };

  } catch (error) {
    console.error('Error verifying webhook signature:', error);
    return {
      isValid: false,
      error: `Verification error: ${error.message}`
    };
  }
}

/**
 * Timing-safe string comparison to prevent timing attacks
 */
function timingSafeEqual(a: string, b: string): boolean {
  if (a.length !== b.length) {
    return false;
  }

  let result = 0;
  for (let i = 0; i < a.length; i++) {
    result |= a.charCodeAt(i) ^ b.charCodeAt(i);
  }

  return result === 0;
}

/**
 * Creates an authentication middleware for webhook endpoints
 * @param config - Webhook authentication configuration
 * @returns Response if authentication fails, null if successful
 */
export async function authenticateWebhook(
  request: Request,
  rawBody: string,
  config: WebhookAuthConfig
): Promise<Response | null> {
  const result = await verifyWebhookSignature(request, rawBody, config);

  if (!result.isValid) {
    console.error('Webhook authentication failed:', {
      error: result.error,
      provided: result.providedSignature,
      expected: result.expectedSignature,
      timestamp: new Date().toISOString()
    });

    return new Response(
      JSON.stringify({
        error: 'Unauthorized',
        message: result.error || 'Invalid webhook signature'
      }),
      {
        status: 401,
        headers: {
          'Content-Type': 'application/json',
          'WWW-Authenticate': 'Signature'
        }
      }
    );
  }

  console.log('Webhook authentication successful', {
    timestamp: new Date().toISOString()
  });

  return null;
}

/**
 * Helper to get webhook secret from environment
 * @param envVar - Environment variable name
 * @returns Webhook secret or throws error
 */
export function getWebhookSecret(envVar: string): string {
  const secret = Deno.env.get(envVar);
  if (!secret) {
    throw new Error(`${envVar} environment variable not set`);
  }
  return secret;
}
</file>

<file path="supabase/migrations/20250122000000_strengthen_document_security.sql">
-- ============================================================================
-- STRENGTHEN DOCUMENT SECURITY
-- This migration adds additional security measures for the documents table
-- to prevent metadata manipulation and ensure data integrity
-- ============================================================================

-- Create a trigger to validate document metadata on insert/update
CREATE OR REPLACE FUNCTION public.validate_document_metadata()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_notebook_id uuid;
    v_user_id uuid;
BEGIN
    -- Extract notebook_id from metadata
    v_notebook_id := (NEW.metadata->>'notebook_id')::uuid;
    
    -- Validate notebook_id is provided
    IF v_notebook_id IS NULL THEN
        RAISE EXCEPTION 'notebook_id is required in metadata';
    END IF;
    
    -- Get the owner of the notebook
    SELECT user_id INTO v_user_id
    FROM public.notebooks
    WHERE id = v_notebook_id;
    
    -- Validate notebook exists
    IF v_user_id IS NULL THEN
        RAISE EXCEPTION 'Invalid notebook_id: notebook does not exist';
    END IF;
    
    -- For INSERT operations, verify the current user owns the notebook
    IF TG_OP = 'INSERT' THEN
        IF v_user_id != auth.uid() THEN
            RAISE EXCEPTION 'You can only create documents in your own notebooks';
        END IF;
    END IF;
    
    -- For UPDATE operations, verify the notebook_id hasn't changed
    IF TG_OP = 'UPDATE' THEN
        IF OLD.metadata->>'notebook_id' != NEW.metadata->>'notebook_id' THEN
            RAISE EXCEPTION 'Cannot change notebook_id of existing document';
        END IF;
    END IF;
    
    RETURN NEW;
END;
$$;

-- Create the trigger for documents table
DROP TRIGGER IF EXISTS validate_document_metadata_trigger ON public.documents;
CREATE TRIGGER validate_document_metadata_trigger
    BEFORE INSERT OR UPDATE ON public.documents
    FOR EACH ROW
    EXECUTE FUNCTION public.validate_document_metadata();

-- Add a check constraint to ensure metadata always contains notebook_id
ALTER TABLE public.documents
    DROP CONSTRAINT IF EXISTS documents_metadata_notebook_id_check;
    
ALTER TABLE public.documents
    ADD CONSTRAINT documents_metadata_notebook_id_check
    CHECK (metadata ? 'notebook_id' AND metadata->>'notebook_id' IS NOT NULL);

-- Create an index on metadata notebook_id for better performance
CREATE INDEX IF NOT EXISTS idx_documents_metadata_notebook_id 
    ON public.documents((metadata->>'notebook_id'));

-- Update the is_notebook_owner_for_document function to be more strict
CREATE OR REPLACE FUNCTION public.is_notebook_owner_for_document(doc_metadata jsonb)
RETURNS boolean
LANGUAGE sql
STABLE SECURITY DEFINER
AS $$
    SELECT EXISTS (
        SELECT 1 
        FROM public.notebooks 
        WHERE id = (doc_metadata->>'notebook_id')::uuid 
        AND user_id = auth.uid()
        AND (doc_metadata->>'notebook_id') IS NOT NULL
    );
$$;

-- Add additional RLS policy for service role operations
DROP POLICY IF EXISTS "Service role can manage all documents" ON public.documents;
CREATE POLICY "Service role can manage all documents"
    ON public.documents FOR ALL
    TO service_role
    USING (true)
    WITH CHECK (
        -- Even service role must provide valid notebook_id
        (metadata->>'notebook_id')::uuid IN (
            SELECT id FROM public.notebooks
        )
    );

-- Create a function to safely insert documents (for use by Edge Functions)
CREATE OR REPLACE FUNCTION public.insert_document_with_validation(
    p_content text,
    p_notebook_id uuid,
    p_embedding vector(1536),
    p_additional_metadata jsonb DEFAULT '{}'::jsonb
)
RETURNS uuid
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
    v_document_id bigint;
    v_metadata jsonb;
BEGIN
    -- Verify notebook exists
    IF NOT EXISTS (SELECT 1 FROM public.notebooks WHERE id = p_notebook_id) THEN
        RAISE EXCEPTION 'Invalid notebook_id: notebook does not exist';
    END IF;
    
    -- Build metadata with notebook_id
    v_metadata := jsonb_build_object('notebook_id', p_notebook_id::text) || p_additional_metadata;
    
    -- Insert document
    INSERT INTO public.documents (content, metadata, embedding)
    VALUES (p_content, v_metadata, p_embedding)
    RETURNING id INTO v_document_id;
    
    RETURN v_document_id;
END;
$$;

-- Grant execute permission to authenticated users
GRANT EXECUTE ON FUNCTION public.insert_document_with_validation TO authenticated;

-- Add comment explaining the security model
COMMENT ON TABLE public.documents IS 
'Stores vector embeddings for semantic search. 
Security: notebook_id in metadata is validated by trigger and cannot be changed after creation.
Always use insert_document_with_validation() function for safe inserts.';
</file>

<file path="CLAUDE.md">
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

AI4AgriWeather is a comprehensive smart agricultural platform designed for African farmers, particularly those in Tanzania and East Africa. It provides multilingual weather intelligence, crop management tools, and AI-powered agricultural insights.

## Development Commands

### Local Development
```bash
npm install                 # Install dependencies
npm run dev                 # Start development server (port 8080)
npm run build              # Build for production
npm run preview            # Preview production build locally
npm run start              # Start production server
npm run lint               # Run ESLint
```

### Environment Setup
Create a `.env.local` file with:
```env
VITE_SUPABASE_URL=your_supabase_url
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key
```

## Architecture Overview

### Tech Stack
- **Frontend**: React 18.3 + TypeScript + Vite
- **Styling**: Tailwind CSS with custom agricultural theme
- **State Management**: React Query (TanStack Query)
- **Database**: Supabase (PostgreSQL with Row Level Security)
- **Internationalization**: i18next (Korean, English, Swahili, French, Nepali, Uzbek)
- **Backend Functions**: Supabase Edge Functions
- **Automation**: n8n workflows for document processing and AI integration

### Project Structure
```
insights-lm-public/
├── src/
│   ├── components/
│   │   ├── farm/          # Agricultural features (Dashboard, Weather, Crops, Chat)
│   │   ├── auth/          # Authentication components
│   │   ├── ui/            # Reusable UI components (shadcn/ui)
│   │   └── ...
│   ├── contexts/          # React contexts (AuthContext)
│   ├── hooks/             # Custom React hooks
│   ├── i18n/              # Internationalization config and translations
│   ├── integrations/      # External service integrations (Supabase)
│   └── pages/             # Route-level components
├── supabase/
│   ├── functions/         # Edge functions for backend logic
│   └── migrations/        # Database schema migrations
└── n8n/                   # Workflow automation files
```

### Key Features & Components

1. **Weather Intelligence** (`WeatherCenter.tsx`)
   - 24-hour, 7-day, and seasonal forecasts
   - Agricultural metrics (evapotranspiration, soil moisture, UV index)
   - Weather-based farming recommendations

2. **Crop Management** (`CropManagement.tsx`)
   - 22 local crop varieties management
   - Planting calendar for Masika and Vuli seasons
   - Market price tracking

3. **AI Agricultural Assistant** (`AgriChat.tsx`)
   - Multilingual chat support
   - Integration with LLM via n8n workflows
   - Context-aware farming advice

4. **Knowledge Base** (`KnowledgeBase.tsx`, `KnowledgeEntry.tsx`)
   - Agricultural documentation and best practices
   - Document processing and vector search capabilities
   - Support for multiple file types (PDF, TXT, DOC)

### Database Schema
Key tables in Supabase:
- `profiles`: User profiles with agricultural preferences
- `notebooks`: Agricultural knowledge entries
- `sources`: Document sources and file uploads
- `n8n_chat_histories`: AI chat conversation history
- `documents`: Vector embeddings for semantic search

### Authentication Flow
- Uses Supabase Auth with email/password
- Protected routes via `ProtectedRoute` component
- Auth state managed by `AuthContext`
- Row Level Security (RLS) policies protect user data

### Deployment
- Primary deployment on Railway
- Docker support included
- Static file serving via Express.js
- Environment variables required: `VITE_SUPABASE_URL`, `VITE_SUPABASE_ANON_KEY`

## Development Guidelines

### Path Aliases
- Use `@/` for imports from the `src/` directory
- Example: `import { Button } from '@/components/ui/button'`

### TypeScript Configuration
- Non-strict mode enabled (see tsconfig.json)
- Type checking is lenient for rapid development
- ESLint configured with React hooks and refresh plugins

### Styling Approach
- Tailwind CSS with custom agricultural theme (`agriculture-theme.css`)
- Component classes use `cn()` utility for conditional styling
- Responsive design with mobile-first approach

### State Management
- React Query for server state (data fetching, caching)
- Local state with React hooks
- Auth state via Context API

### Error Handling
- Toast notifications via Sonner (`useToast` hook)
- Form validation with react-hook-form and Zod
- Graceful fallbacks for missing environment variables

### n8n Workflow Integration
The project uses n8n workflows for:
- Document text extraction
- AI chat message processing
- Notebook content generation
- Vector store updates

Workflows are defined in the `n8n/` directory and must be imported into your n8n instance.

## Security Considerations

### Environment Variables
- **Required**: `VITE_SUPABASE_URL` and `VITE_SUPABASE_ANON_KEY` must be set
- **Webhook Secrets**: `DOCUMENT_WEBHOOK_SECRET` and `AUDIO_WEBHOOK_SECRET` for Edge Functions
- The application will fail to start if required environment variables are missing

### Authentication & Authorization
- Supabase Row Level Security (RLS) policies protect all user data
- Enhanced `documents` table security with metadata validation triggers
- JWT verification required for most Edge Functions
- Webhook callbacks use HMAC-SHA256 signature verification

### XSS Protection
- `MarkdownRenderer` component uses DOMPurify for HTML sanitization
- Strict allowlist for HTML tags and attributes
- All user-generated content is sanitized before rendering

### Database Security
- RLS policies prevent unauthorized access to user data
- Server-side validation of `notebook_id` in document metadata
- Constraints and triggers ensure data integrity
- Use `insert_document_with_validation()` function for safe document inserts

### Deployment Security
- GitHub Actions uses minimal permissions and environment protection
- Supabase CLI authentication instead of direct database credentials
- Webhook endpoints require proper authentication headers

## Header Components Usage

### ✅ Unified Header Component

**UnifiedHeader** (`/src/components/layout/UnifiedHeader.tsx`)
- Single header component for all pages
- Props:
  - `variant`: 'full' (with navigation) | 'minimal' (without navigation)
  - `showNavigation`: Control navigation visibility
  - `title`, `subtitle`: Custom page titles
  - `showBackButton`, `onBackClick`: Back navigation
- Features: 
  - Language selector (6 languages: EN, KO, SW, FR, NE, UZ)
  - Navigation menu (in 'full' variant)
  - User profile menu
  - Mobile responsive

**Usage Examples:**
```typescript
// Most pages (with navigation)
<UnifiedHeader variant="full" />

// Dashboard page (without navigation)
<UnifiedHeader variant="minimal" showNavigation={false} />
```

**Note**: Legacy AppHeader and DashboardHeader components are deprecated. All new development should use UnifiedHeader.

## Important Notes

1. **Environment Variables**: All sensitive configuration must use environment variables. Never commit credentials to the repository.

2. **Multilingual Support**: All user-facing text should use i18n translation keys. Translations are in `src/i18n/locales/`.

3. **Agricultural Focus**: Features should align with farming needs in East Africa, considering local crops, seasons, and practices.

4. **Mobile Optimization**: The platform is designed for mobile-first usage, considering limited internet connectivity in rural areas.

5. **No Test Suite**: Currently, there are no automated tests. Manual testing is required for all changes.

## Security Checklist for New Features

- [ ] Input sanitization and validation
- [ ] RLS policies for new database tables
- [ ] Environment variables for sensitive configuration
- [ ] XSS protection for user-generated content
- [ ] Authentication required for sensitive operations
- [ ] Webhook signature verification for external callbacks
</file>

<file path="SECURITY.md">
# Security Report - AI4AgriWeather Platform

## Executive Summary

This document outlines the security improvements implemented for the AI4AgriWeather platform to address identified vulnerabilities and strengthen the overall security posture. All critical and high-priority security issues have been resolved.

## Security Improvements Implemented

### 1. ✅ API Key Management (Critical Priority)

**Issue**: Hardcoded Supabase API keys in client code
**Solution**: 
- Removed all hardcoded credentials from `src/integrations/supabase/client.ts`
- Implemented mandatory environment variable validation
- Application fails fast with clear error messages if credentials are missing
- Updated `.env.example` with proper documentation

**Impact**: Eliminates credential exposure risk and enforces secure configuration practices.

### 2. ✅ Webhook Authentication (Critical Priority)

**Issue**: Unauthenticated Edge Function callbacks vulnerable to abuse
**Solution**:
- Implemented HMAC-SHA256 signature verification for all webhook callbacks
- Created shared authentication middleware in `_shared/webhook-auth.ts`
- Added webhook secret configuration to environment variables
- Both `process-document-callback` and `audio-generation-callback` now require valid signatures

**Impact**: Prevents unauthorized webhook triggering and potential DoS attacks.

### 3. ✅ Database Security Enhancement (Medium Priority)

**Issue**: Potential RLS policy bypass through metadata manipulation
**Solution**:
- Added database triggers to validate `notebook_id` in document metadata
- Created constraints ensuring metadata integrity
- Implemented `insert_document_with_validation()` function for safe inserts
- Enhanced RLS policies with additional service role restrictions

**Impact**: Prevents unauthorized access to user data through metadata manipulation.

### 4. ✅ XSS Protection (Medium Priority)

**Issue**: Potential XSS vulnerabilities in markdown rendering
**Solution**:
- `MarkdownRenderer` already implements comprehensive DOMPurify sanitization
- Strict allowlist for HTML tags and attributes
- Multiple layers of sanitization for nested content
- Safe handling of user-generated content

**Impact**: Eliminates XSS attack vectors in user-generated content.

### 5. ✅ Deployment Security (Low Priority)

**Issue**: GitHub Actions using excessive database privileges
**Solution**:
- Replaced direct database access with Supabase CLI authentication
- Applied principle of least privilege with minimal permissions
- Added environment protection for production deployments

**Impact**: Reduces attack surface and follows security best practices.

## Security Features Summary

### Authentication & Authorization
- ✅ Row Level Security (RLS) on all database tables
- ✅ JWT verification for authenticated endpoints
- ✅ Webhook signature verification (HMAC-SHA256)
- ✅ Environment-based configuration enforcement

### Data Protection
- ✅ Input sanitization with DOMPurify
- ✅ Database triggers for data validation
- ✅ Metadata integrity constraints
- ✅ User data isolation through RLS policies

### Infrastructure Security
- ✅ Secure CI/CD with minimal permissions
- ✅ Environment variable protection
- ✅ No credentials in source code
- ✅ Webhook endpoint authentication

## Configuration Requirements

### Environment Variables (Required)
```bash
# Supabase Configuration
VITE_SUPABASE_URL=your_supabase_project_url
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key

# Webhook Security (for Edge Functions)
DOCUMENT_WEBHOOK_SECRET=your_document_webhook_secret
AUDIO_WEBHOOK_SECRET=your_audio_webhook_secret
```

### GitHub Secrets (Required for Deployment)
```bash
SUPABASE_ACCESS_TOKEN=your_supabase_access_token
SUPABASE_PROJECT_ID=your_project_id
```

## Security Best Practices for Development

1. **Never commit sensitive data** - All credentials must use environment variables
2. **Validate all inputs** - Use the security checklist in CLAUDE.md
3. **Test RLS policies** - Verify data isolation between users
4. **Sanitize user content** - Use DOMPurify for any HTML rendering
5. **Authenticate webhooks** - Use signature verification for external callbacks

## Compliance & Standards

The platform now adheres to:
- ✅ OWASP Top 10 security practices
- ✅ Principle of least privilege
- ✅ Defense in depth strategy
- ✅ Secure development lifecycle practices

## Risk Assessment Status

| Risk Category | Previous Status | Current Status | Residual Risk |
|--------------|----------------|----------------|---------------|
| Credential Exposure | 🔴 High | 🟢 Low | Minimal |
| Unauthorized Access | 🔴 High | 🟢 Low | Minimal |
| Data Integrity | 🟡 Medium | 🟢 Low | Minimal |
| XSS Attacks | 🟡 Medium | 🟢 Low | Minimal |
| Infrastructure | 🟡 Medium | 🟢 Low | Minimal |

## Recommendations for Ongoing Security

1. **Regular Security Reviews**: Conduct quarterly security assessments
2. **Dependency Updates**: Keep security-related packages up to date
3. **Access Monitoring**: Monitor Supabase access logs for anomalies
4. **Key Rotation**: Regularly rotate webhook secrets and API keys
5. **Testing**: Implement automated security testing in CI/CD pipeline

---

**Security Status**: ✅ All identified vulnerabilities have been addressed
**Last Updated**: January 22, 2025
**Next Review Due**: April 22, 2025
</file>

<file path=".github/ISSUE_TEMPLATE/bug_report.md">
---
name: Bug report
about: Create a report to help us improve
title: ''
labels: ''
assignees: ''

---

**Describe the bug**
A clear and concise description of what the bug is.

**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
A clear and concise description of what you expected to happen.

**Screenshots**
If applicable, add screenshots to help explain your problem.

**Desktop (please complete the following information):**
 - OS: [e.g. iOS]
 - Browser [e.g. chrome, safari]
 - Version [e.g. 22]

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**
Add any other context about the problem here.
</file>

<file path=".github/workflows/deploy.yml">
name: Deploy Supabase Edge Functions and Migrations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: false
        default: 'production'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    # Apply principle of least privilege
    permissions:
      contents: read
    
    # Only run on specific branches/environments for security
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Supabase CLI
        run: |
          npm install -g supabase

      - name: Authenticate Supabase CLI
        run: |
          supabase login --access-token "${{ secrets.SUPABASE_ACCESS_TOKEN }}"

      - name: Link to Supabase Project
        run: |
          supabase link --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}

      - name: Deploy Supabase Edge Functions
        run: |
          supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}

      - name: Run Supabase Migrations
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        run: |
          # Use Supabase CLI's built-in authentication instead of direct database access
          # This is more secure as it uses proper API authentication
          supabase db push --project-ref ${{ secrets.SUPABASE_PROJECT_ID }}
</file>

<file path="public/file-types/PDF (1).svg">
<svg width="272" height="308" viewBox="0 0 272 308" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_12_662)">
<mask id="mask0_12_662" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="272" height="308">
<path d="M250 308H22C9.84974 308 0 298.15 0 286V22C0 9.84974 9.84974 0 22 0H170L272 102V286C272 298.15 262.15 308 250 308Z" fill="url(#paint0_linear_12_662)"/>
</mask>
<g mask="url(#mask0_12_662)">
<path d="M250 308H22C9.84974 308 0 298.15 0 286V22C0 9.84974 9.84974 0 22 0H170L272 102V286C272 298.15 262.15 308 250 308Z" fill="url(#paint1_linear_12_662)"/>
<path opacity="0.12" fill-rule="evenodd" clip-rule="evenodd" d="M199 139H73V127H199V139ZM199 169H73V157H199V169ZM73 199H199V187H73V199ZM199 229H73V217H199V229ZM73 259H199V247H73V259Z" fill="white"/>
<path d="M62.2181 217.395C61.2174 217.395 60.3748 217.053 59.6901 216.368C59.0054 215.683 58.6631 214.841 58.6631 213.84V165.492C58.6631 164.491 59.0054 163.649 59.6901 162.964C60.3748 162.227 61.2174 161.858 62.2181 161.858H80.2301C85.2334 161.858 89.3151 162.701 92.4751 164.386C95.6351 166.071 97.8998 168.231 99.2691 170.864C100.638 173.497 101.323 176.341 101.323 179.396C101.323 182.451 100.638 185.295 99.2691 187.928C97.8998 190.561 95.6351 192.721 92.4751 194.406C89.3151 196.091 85.2334 196.934 80.2301 196.934H65.8521V213.84C65.8521 214.841 65.4834 215.683 64.7461 216.368C64.0614 217.053 63.2188 217.395 62.2181 217.395ZM79.5191 190.14C84.8911 190.14 88.6568 189.113 90.8161 187.059C93.0281 185.005 94.1341 182.451 94.1341 179.396C94.1341 176.341 93.0281 173.787 90.8161 171.733C88.6568 169.679 84.8911 168.652 79.5191 168.652H65.8521V190.14H79.5191ZM120.826 217C119.825 217 118.983 216.658 118.298 215.973C117.613 215.288 117.271 214.446 117.271 213.445V165.492C117.271 164.491 117.613 163.649 118.298 162.964C118.983 162.227 119.825 161.858 120.826 161.858H136.705C142.709 161.858 147.791 163.201 151.952 165.887C156.165 168.52 159.325 171.944 161.432 176.157C163.539 180.37 164.592 184.794 164.592 189.429C164.592 194.064 163.539 198.488 161.432 202.701C159.325 206.914 156.165 210.364 151.952 213.05C147.791 215.683 142.709 217 136.705 217H120.826ZM135.836 210.285C140.155 210.285 143.947 209.416 147.212 207.678C150.477 205.887 153.005 203.438 154.796 200.331C156.587 197.171 157.482 193.537 157.482 189.429C157.482 185.321 156.587 181.713 154.796 178.606C153.005 175.446 150.477 172.997 147.212 171.259C143.947 169.468 140.155 168.573 135.836 168.573H124.46V210.285H135.836ZM185.683 217.395C184.683 217.395 183.84 217.053 183.155 216.368C182.471 215.683 182.128 214.841 182.128 213.84V165.492C182.128 164.491 182.471 163.649 183.155 162.964C183.84 162.227 184.683 161.858 185.683 161.858H216.414C217.362 161.858 218.152 162.2 218.784 162.885C219.469 163.517 219.811 164.307 219.811 165.255C219.811 166.203 219.469 166.993 218.784 167.625C218.152 168.257 217.362 168.573 216.414 168.573H189.317V186.032H213.649C214.597 186.032 215.387 186.374 216.019 187.059C216.704 187.691 217.046 188.481 217.046 189.429C217.046 190.377 216.704 191.167 216.019 191.799C215.387 192.431 214.597 192.747 213.649 192.747H189.317V213.84C189.317 214.841 188.949 215.683 188.211 216.368C187.527 217.053 186.684 217.395 185.683 217.395Z" fill="white"/>
<path d="M59.6901 216.368L61.1043 214.954L59.6901 216.368ZM59.6901 162.964L61.1043 164.378L61.1305 164.352L61.1557 164.325L59.6901 162.964ZM92.4751 164.386L93.4163 162.621L92.4751 164.386ZM99.2691 170.864L97.4947 171.787L99.2691 170.864ZM99.2691 187.928L97.4947 187.005L99.2691 187.928ZM92.4751 194.406L93.4163 196.171L92.4751 194.406ZM65.8521 196.934V194.934H63.8521V196.934H65.8521ZM64.7461 216.368L63.3852 214.902L63.3581 214.928L63.3319 214.954L64.7461 216.368ZM90.8161 187.059L89.4552 185.593L89.4464 185.602L89.4377 185.61L90.8161 187.059ZM90.8161 171.733L89.4377 173.182L89.4464 173.19L89.4552 173.199L90.8161 171.733ZM65.8521 168.652V166.652H63.8521V168.652H65.8521ZM65.8521 190.14H63.8521V192.14H65.8521V190.14ZM62.2181 215.395C61.728 215.395 61.4001 215.25 61.1043 214.954L58.2759 217.782C59.3494 218.856 60.7068 219.395 62.2181 219.395V215.395ZM61.1043 214.954C60.8085 214.658 60.6631 214.33 60.6631 213.84H56.6631C56.6631 215.351 57.2024 216.709 58.2759 217.782L61.1043 214.954ZM60.6631 213.84V165.492H56.6631V213.84H60.6631ZM60.6631 165.492C60.6631 165.002 60.8085 164.674 61.1043 164.378L58.2759 161.55C57.2024 162.623 56.6631 163.981 56.6631 165.492H60.6631ZM61.1557 164.325C61.4643 163.993 61.7771 163.858 62.2181 163.858V159.858C60.6578 159.858 59.2852 160.461 58.2245 161.603L61.1557 164.325ZM62.2181 163.858H80.2301V159.858H62.2181V163.858ZM80.2301 163.858C85.0283 163.858 88.7556 164.669 91.5339 166.151L93.4163 162.621C89.8746 160.732 85.4386 159.858 80.2301 159.858V163.858ZM91.5339 166.151C94.4124 167.686 96.3473 169.58 97.4947 171.787L101.043 169.941C99.4522 166.881 96.8578 164.457 93.4163 162.621L91.5339 166.151ZM97.4947 171.787C98.7114 174.127 99.3231 176.653 99.3231 179.396H103.323C103.323 176.03 102.565 172.868 101.043 169.941L97.4947 171.787ZM99.3231 179.396C99.3231 182.139 98.7114 184.665 97.4947 187.005L101.043 188.851C102.565 185.924 103.323 182.762 103.323 179.396H99.3231ZM97.4947 187.005C96.3473 189.212 94.4124 191.106 91.5339 192.641L93.4163 196.171C96.8578 194.335 99.4522 191.911 101.043 188.851L97.4947 187.005ZM91.5339 192.641C88.7556 194.123 85.0283 194.934 80.2301 194.934V198.934C85.4386 198.934 89.8746 198.06 93.4163 196.171L91.5339 192.641ZM80.2301 194.934H65.8521V198.934H80.2301V194.934ZM63.8521 196.934V213.84H67.8521V196.934H63.8521ZM63.8521 213.84C63.8521 214.281 63.7176 214.594 63.3852 214.902L66.107 217.834C67.2493 216.773 67.8521 215.4 67.8521 213.84H63.8521ZM63.3319 214.954C63.0361 215.25 62.7082 215.395 62.2181 215.395V219.395C63.7294 219.395 65.0868 218.856 66.1603 217.782L63.3319 214.954ZM79.5191 192.14C85.0311 192.14 89.4606 191.109 92.1945 188.508L89.4377 185.61C87.853 187.117 84.7511 188.14 79.5191 188.14V192.14ZM92.177 188.525C94.802 186.087 96.1341 182.999 96.1341 179.396H92.1341C92.1341 181.902 91.2542 183.923 89.4552 185.593L92.177 188.525ZM96.1341 179.396C96.1341 175.793 94.802 172.705 92.177 170.267L89.4552 173.199C91.2542 174.869 92.1341 176.89 92.1341 179.396H96.1341ZM92.1945 170.284C89.4606 167.683 85.0311 166.652 79.5191 166.652V170.652C84.7511 170.652 87.853 171.675 89.4377 173.182L92.1945 170.284ZM79.5191 166.652H65.8521V170.652H79.5191V166.652ZM63.8521 168.652V190.14H67.8521V168.652H63.8521ZM65.8521 192.14H79.5191V188.14H65.8521V192.14ZM118.298 215.973L119.712 214.559L118.298 215.973ZM118.298 162.964L119.712 164.378L119.739 164.352L119.764 164.325L118.298 162.964ZM151.952 165.887L150.867 167.567L150.88 167.575L150.892 167.583L151.952 165.887ZM161.432 176.157L159.643 177.051L161.432 176.157ZM161.432 202.701L159.643 201.807L161.432 202.701ZM151.952 213.05L153.022 214.74L153.027 214.736L151.952 213.05ZM147.212 207.678L148.152 209.443L148.163 209.438L148.174 209.432L147.212 207.678ZM154.796 200.331L156.529 201.33L156.533 201.323L156.536 201.317L154.796 200.331ZM154.796 178.606L153.056 179.592L153.06 179.598L153.063 179.605L154.796 178.606ZM147.212 171.259L146.25 173.013L146.261 173.019L146.272 173.024L147.212 171.259ZM124.46 168.573V166.573H122.46V168.573H124.46ZM124.46 210.285H122.46V212.285H124.46V210.285ZM120.826 215C120.336 215 120.008 214.855 119.712 214.559L116.884 217.387C117.957 218.461 119.315 219 120.826 219V215ZM119.712 214.559C119.417 214.263 119.271 213.935 119.271 213.445H115.271C115.271 214.956 115.81 216.314 116.884 217.387L119.712 214.559ZM119.271 213.445V165.492H115.271V213.445H119.271ZM119.271 165.492C119.271 165.002 119.417 164.674 119.712 164.378L116.884 161.55C115.81 162.623 115.271 163.981 115.271 165.492H119.271ZM119.764 164.325C120.072 163.993 120.385 163.858 120.826 163.858V159.858C119.266 159.858 117.893 160.461 116.833 161.603L119.764 164.325ZM120.826 163.858H136.705V159.858H120.826V163.858ZM136.705 163.858C142.407 163.858 147.093 165.131 150.867 167.567L153.037 164.207C148.49 161.271 143.012 159.858 136.705 159.858V163.858ZM150.892 167.583C154.811 170.032 157.71 173.186 159.643 177.051L163.221 175.263C160.941 170.702 157.52 167.008 153.012 164.191L150.892 167.583ZM159.643 177.051C161.613 180.992 162.592 185.11 162.592 189.429H166.592C166.592 184.479 165.464 179.749 163.221 175.263L159.643 177.051ZM162.592 189.429C162.592 193.748 161.613 197.866 159.643 201.807L163.221 203.595C165.464 199.109 166.592 194.379 166.592 189.429H162.592ZM159.643 201.807C157.708 205.676 154.804 208.86 150.877 211.364L153.027 214.736C157.526 211.868 160.943 208.152 163.221 203.595L159.643 201.807ZM150.883 211.36C147.106 213.75 142.414 215 136.705 215V219C143.004 219 148.477 217.616 153.022 214.74L150.883 211.36ZM136.705 215H120.826V219H136.705V215ZM135.836 212.285C140.427 212.285 144.552 211.359 148.152 209.443L146.272 205.913C143.341 207.473 139.882 208.285 135.836 208.285V212.285ZM148.174 209.432C151.748 207.472 154.548 204.767 156.529 201.33L153.063 199.332C151.463 202.11 149.207 204.303 146.25 205.924L148.174 209.432ZM156.536 201.317C158.519 197.819 159.482 193.837 159.482 189.429H155.482C155.482 193.237 154.655 196.523 153.056 199.345L156.536 201.317ZM159.482 189.429C159.482 185.022 158.519 181.06 156.529 177.607L153.063 179.605C154.655 182.366 155.482 185.62 155.482 189.429H159.482ZM156.536 177.62C154.555 174.123 151.746 171.407 148.152 169.494L146.272 173.024C149.209 174.587 151.456 176.769 153.056 179.592L156.536 177.62ZM148.174 169.505C144.57 167.529 140.437 166.573 135.836 166.573V170.573C139.873 170.573 143.324 171.408 146.25 173.013L148.174 169.505ZM135.836 166.573H124.46V170.573H135.836V166.573ZM122.46 168.573V210.285H126.46V168.573H122.46ZM124.46 212.285H135.836V208.285H124.46V212.285ZM183.155 216.368L184.569 214.954L183.155 216.368ZM183.155 162.964L184.569 164.378L184.596 164.352L184.621 164.325L183.155 162.964ZM218.784 162.885L217.315 164.242L217.369 164.3L217.428 164.355L218.784 162.885ZM218.784 167.625L217.428 166.155L217.398 166.183L217.37 166.211L218.784 167.625ZM189.317 168.573V166.573H187.317V168.573H189.317ZM189.317 186.032H187.317V188.032H189.317V186.032ZM216.019 187.059L214.55 188.416L214.604 188.474L214.663 188.529L216.019 187.059ZM216.019 191.799L214.663 190.329L214.633 190.357L214.605 190.385L216.019 191.799ZM189.317 192.747V190.747H187.317V192.747H189.317ZM188.211 216.368L186.85 214.902L186.823 214.928L186.797 214.954L188.211 216.368ZM185.683 215.395C185.193 215.395 184.865 215.25 184.569 214.954L181.741 217.782C182.815 218.856 184.172 219.395 185.683 219.395V215.395ZM184.569 214.954C184.274 214.658 184.128 214.33 184.128 213.84H180.128C180.128 215.351 180.668 216.709 181.741 217.782L184.569 214.954ZM184.128 213.84V165.492H180.128V213.84H184.128ZM184.128 165.492C184.128 165.002 184.274 164.674 184.569 164.378L181.741 161.55C180.668 162.623 180.128 163.981 180.128 165.492H184.128ZM184.621 164.325C184.929 163.993 185.242 163.858 185.683 163.858V159.858C184.123 159.858 182.75 160.461 181.69 161.603L184.621 164.325ZM185.683 163.858H216.414V159.858H185.683V163.858ZM216.414 163.858C216.815 163.858 217.069 163.975 217.315 164.242L220.254 161.528C219.236 160.426 217.909 159.858 216.414 159.858V163.858ZM217.428 164.355C217.694 164.601 217.811 164.854 217.811 165.255H221.811C221.811 163.76 221.244 162.433 220.141 161.415L217.428 164.355ZM217.811 165.255C217.811 165.656 217.694 165.909 217.428 166.155L220.141 169.095C221.244 168.077 221.811 166.75 221.811 165.255H217.811ZM217.37 166.211C217.138 166.443 216.868 166.573 216.414 166.573V170.573C217.857 170.573 219.167 170.071 220.198 169.039L217.37 166.211ZM216.414 166.573H189.317V170.573H216.414V166.573ZM187.317 168.573V186.032H191.317V168.573H187.317ZM189.317 188.032H213.649V184.032H189.317V188.032ZM213.649 188.032C214.05 188.032 214.304 188.149 214.55 188.416L217.489 185.702C216.471 184.6 215.144 184.032 213.649 184.032V188.032ZM214.663 188.529C214.929 188.775 215.046 189.028 215.046 189.429H219.046C219.046 187.934 218.479 186.607 217.376 185.589L214.663 188.529ZM215.046 189.429C215.046 189.83 214.929 190.083 214.663 190.329L217.376 193.269C218.479 192.251 219.046 190.924 219.046 189.429H215.046ZM214.605 190.385C214.373 190.617 214.103 190.747 213.649 190.747V194.747C215.092 194.747 216.402 194.245 217.433 193.213L214.605 190.385ZM213.649 190.747H189.317V194.747H213.649V190.747ZM187.317 192.747V213.84H191.317V192.747H187.317ZM187.317 213.84C187.317 214.281 187.183 214.594 186.85 214.902L189.572 217.834C190.714 216.773 191.317 215.4 191.317 213.84H187.317ZM186.797 214.954C186.501 215.25 186.173 215.395 185.683 215.395V219.395C187.195 219.395 188.552 218.856 189.625 217.782L186.797 214.954Z" fill="white"/>
<mask id="mask1_12_662" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="272" height="308">
<path d="M250 308H22C9.84974 308 0 298.15 0 286V22C0 9.84974 9.84974 0 22 0H170L272 102V286C272 298.15 262.15 308 250 308Z" fill="url(#paint2_linear_12_662)"/>
</mask>
<g mask="url(#mask1_12_662)">
<path opacity="0.08" d="M-27.5 208C95.9356 208 196 111.965 196 -6.5C196 -124.965 95.9356 -221 -27.5 -221C-150.936 -221 -251 -124.965 -251 -6.5C-251 111.965 -150.936 208 -27.5 208Z" fill="url(#paint3_linear_12_662)"/>
<path opacity="0.08" d="M-27.5 128C50.096 128 113 67.7823 113 -6.5C113 -80.7823 50.096 -141 -27.5 -141C-105.096 -141 -168 -80.7823 -168 -6.5C-168 67.7823 -105.096 128 -27.5 128Z" fill="url(#paint4_linear_12_662)"/>
<g filter="url(#filter0_d_12_662)">
<path d="M272 102H192C179.85 102 170 92.1503 170 80V0L272 102Z" fill="url(#paint5_linear_12_662)"/>
</g>
</g>
</g>
</g>
<defs>
<filter id="filter0_d_12_662" x="147" y="-24" width="152" height="152" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dx="2" dy="1"/>
<feGaussianBlur stdDeviation="12.5"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.33 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_12_662"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_12_662" result="shape"/>
</filter>
<linearGradient id="paint0_linear_12_662" x1="136" y1="0" x2="136" y2="308" gradientUnits="userSpaceOnUse">
<stop stop-color="#FF7979"/>
<stop offset="1" stop-color="#E85555"/>
</linearGradient>
<linearGradient id="paint1_linear_12_662" x1="136" y1="0" x2="136" y2="308" gradientUnits="userSpaceOnUse">
<stop stop-color="#FF7981"/>
<stop offset="1" stop-color="#E85567"/>
</linearGradient>
<linearGradient id="paint2_linear_12_662" x1="136" y1="0" x2="136" y2="308" gradientUnits="userSpaceOnUse">
<stop stop-color="#FF7981"/>
<stop offset="1" stop-color="#E85567"/>
</linearGradient>
<linearGradient id="paint3_linear_12_662" x1="-11.2723" y1="0.871146" x2="56.5069" y2="180.758" gradientUnits="userSpaceOnUse">
<stop stop-color="white" stop-opacity="0"/>
<stop offset="1" stop-color="white"/>
</linearGradient>
<linearGradient id="paint4_linear_12_662" x1="-17.2987" y1="-1.87802" x2="25.1204" y2="110.989" gradientUnits="userSpaceOnUse">
<stop stop-color="white" stop-opacity="0"/>
<stop offset="1" stop-color="white"/>
</linearGradient>
<linearGradient id="paint5_linear_12_662" x1="221" y1="0" x2="221" y2="102" gradientUnits="userSpaceOnUse">
<stop stop-color="#D03954"/>
<stop offset="1" stop-color="#C02A3C"/>
</linearGradient>
<clipPath id="clip0_12_662">
<rect width="272" height="308" fill="white"/>
</clipPath>
</defs>
</svg>
</file>

<file path="public/file-types/WEB (1).svg">
<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#7CA7D8"><path d="M480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm-40-82v-78q-33 0-56.5-23.5T360-320v-40L168-552q-3 18-5.5 36t-2.5 36q0 121 79.5 212T440-162Zm276-102q41-45 62.5-100.5T800-480q0-98-54.5-179T600-776v16q0 33-23.5 56.5T520-680h-80v80q0 17-11.5 28.5T400-560h-80v80h240q17 0 28.5 11.5T600-440v120h40q26 0 47 15.5t29 40.5Z"/></svg>
</file>

<file path="public/placeholder.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="1200" height="1200" fill="none"><rect width="1200" height="1200" fill="#EAEAEA" rx="3"/><g opacity=".5"><g opacity=".5"><path fill="#FAFAFA" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 736.5c-75.454 0-136.621-61.167-136.621-136.62 0-75.454 61.167-136.621 136.621-136.621 75.453 0 136.62 61.167 136.62 136.621 0 75.453-61.167 136.62-136.62 136.62Z"/></g><path stroke="url(#a)" stroke-width="2.418" d="M0-1.209h553.581" transform="scale(1 -1) rotate(45 1163.11 91.165)"/><path stroke="url(#b)" stroke-width="2.418" d="M404.846 598.671h391.726"/><path stroke="url(#c)" stroke-width="2.418" d="M599.5 795.742V404.017"/><path stroke="url(#d)" stroke-width="2.418" d="m795.717 796.597-391.441-391.44"/><path fill="#fff" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/><g clip-path="url(#e)"><path fill="#666" fill-rule="evenodd" d="M616.426 586.58h-31.434v16.176l3.553-3.554.531-.531h9.068l.074-.074 8.463-8.463h2.565l7.18 7.181V586.58Zm-15.715 14.654 3.698 3.699 1.283 1.282-2.565 2.565-1.282-1.283-5.2-5.199h-6.066l-5.514 5.514-.073.073v2.876a2.418 2.418 0 0 0 2.418 2.418h26.598a2.418 2.418 0 0 0 2.418-2.418v-8.317l-8.463-8.463-7.181 7.181-.071.072Zm-19.347 5.442v4.085a6.045 6.045 0 0 0 6.046 6.045h26.598a6.044 6.044 0 0 0 6.045-6.045v-7.108l1.356-1.355-1.282-1.283-.074-.073v-17.989h-38.689v23.43l-.146.146.146.147Z" clip-rule="evenodd"/></g><path stroke="#C9C9C9" stroke-width="2.418" d="M600.709 656.704c-31.384 0-56.825-25.441-56.825-56.824 0-31.384 25.441-56.825 56.825-56.825 31.383 0 56.824 25.441 56.824 56.825 0 31.383-25.441 56.824-56.824 56.824Z"/></g><defs><linearGradient id="a" x1="554.061" x2="-.48" y1=".083" y2=".087" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="b" x1="796.912" x2="404.507" y1="599.963" y2="599.965" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="c" x1="600.792" x2="600.794" y1="403.677" y2="796.082" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><linearGradient id="d" x1="404.85" x2="796.972" y1="403.903" y2="796.02" gradientUnits="userSpaceOnUse"><stop stop-color="#C9C9C9" stop-opacity="0"/><stop offset=".208" stop-color="#C9C9C9"/><stop offset=".792" stop-color="#C9C9C9"/><stop offset="1" stop-color="#C9C9C9" stop-opacity="0"/></linearGradient><clipPath id="e"><path fill="#fff" d="M581.364 580.535h38.689v38.689h-38.689z"/></clipPath></defs></svg>
</file>

<file path="public/robots.txt">
User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Twitterbot
Allow: /

User-agent: facebookexternalhit
Allow: /

User-agent: *
Allow: /
</file>

<file path="src/components/auth/AgriOnboarding.tsx">
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { 
  Wheat, 
  MapPin, 
  Users, 
  Ruler, 
  Calendar,
  CheckCircle,
  ArrowRight,
  ArrowLeft,
  Sprout,
  Tractor
} from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/features/authentication';
import { useToast } from '@/hooks/use-toast';
import { COMMON_CROPS_TANZANIA, TANZANIA_REGIONS } from '@/utils/agricultureTemplates';

interface OnboardingData {
  full_name: string;
  farm_name: string;
  farm_location: string;
  farm_size: number;
  farm_size_unit: string;
  primary_crops: string[];
  farming_experience: number;
  farming_type: string;
  region: string;
  user_role: string;
  phone_number: string;
  preferred_language: string;
}

interface AgriOnboardingProps {
  onComplete: () => void;
}

const AgriOnboarding = ({ onComplete }: AgriOnboardingProps) => {
  const [currentStep, setCurrentStep] = useState(1);
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState<OnboardingData>({
    full_name: '',
    farm_name: '',
    farm_location: '',
    farm_size: 0,
    farm_size_unit: 'hectares',
    primary_crops: [],
    farming_experience: 0,
    farming_type: 'mixed',
    region: '',
    user_role: 'farmer',
    phone_number: '',
    preferred_language: 'english'
  });

  const { user } = useAuth();
  const { toast } = useToast();

  const totalSteps = 4;
  const progress = (currentStep / totalSteps) * 100;

  const updateFormData = (field: keyof OnboardingData, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const toggleCrop = (crop: string) => {
    setFormData(prev => ({
      ...prev,
      primary_crops: prev.primary_crops.includes(crop)
        ? prev.primary_crops.filter(c => c !== crop)
        : [...prev.primary_crops, crop]
    }));
  };

  const handleNext = () => {
    if (currentStep < totalSteps) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrevious = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleComplete = async () => {
    if (!user) {
      toast({
        title: "Error",
        description: "User not authenticated",
        variant: "destructive"
      });
      return;
    }

    setLoading(true);
    try {
      const { error } = await supabase
        .from('profiles')
        .update({
          ...formData,
          onboarding_completed: true,
          updated_at: new Date().toISOString()
        })
        .eq('id', user.id);

      if (error) throw error;

      toast({
        title: "Welcome to AI4AgriWeather!",
        description: "Your profile has been set up successfully.",
      });

      onComplete();
    } catch (error) {
      console.error('Onboarding error:', error);
      toast({
        title: "Error",
        description: "Failed to save profile information. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const renderStep = () => {
    switch (currentStep) {
      case 1:
        return (
          <Card className="w-full max-w-2xl">
            <CardHeader className="text-center">
              <div className="flex justify-center mb-4">
                <div className="p-3 bg-green-100 rounded-full">
                  <Users className="h-8 w-8 text-green-600" />
                </div>
              </div>
              <CardTitle>Personal Information</CardTitle>
              <CardDescription>
                Let's start with some basic information about you
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="full_name">Full Name *</Label>
                  <Input
                    id="full_name"
                    value={formData.full_name}
                    onChange={(e) => updateFormData('full_name', e.target.value)}
                    placeholder="John Doe"
                    required
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="phone_number">Phone Number</Label>
                  <Input
                    id="phone_number"
                    value={formData.phone_number}
                    onChange={(e) => updateFormData('phone_number', e.target.value)}
                    placeholder="+255 123 456 789"
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="user_role">Your Role</Label>
                  <Select value={formData.user_role} onValueChange={(value) => updateFormData('user_role', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select your role" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="farmer">Farmer</SelectItem>
                      <SelectItem value="extension_officer">Extension Officer</SelectItem>
                      <SelectItem value="researcher">Researcher</SelectItem>
                      <SelectItem value="cooperative_member">Cooperative Member</SelectItem>
                      <SelectItem value="agribusiness">Agribusiness</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="preferred_language">Preferred Language</Label>
                  <Select value={formData.preferred_language} onValueChange={(value) => updateFormData('preferred_language', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select language" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="english">English</SelectItem>
                      <SelectItem value="swahili">Kiswahili</SelectItem>
                      <SelectItem value="both">Both</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="farming_experience">Years of Farming Experience</Label>
                <Input
                  id="farming_experience"
                  type="number"
                  value={formData.farming_experience}
                  onChange={(e) => updateFormData('farming_experience', parseInt(e.target.value) || 0)}
                  placeholder="0"
                  min="0"
                />
              </div>
            </CardContent>
          </Card>
        );

      case 2:
        return (
          <Card className="w-full max-w-2xl">
            <CardHeader className="text-center">
              <div className="flex justify-center mb-4">
                <div className="p-3 bg-blue-100 rounded-full">
                  <MapPin className="h-8 w-8 text-blue-600" />
                </div>
              </div>
              <CardTitle>Farm Location & Size</CardTitle>
              <CardDescription>
                Tell us about your farm location and size
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="farm_name">Farm Name</Label>
                <Input
                  id="farm_name"
                  value={formData.farm_name}
                  onChange={(e) => updateFormData('farm_name', e.target.value)}
                  placeholder="Green Valley Farm"
                />
              </div>

              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="farm_location">Farm Location/Village</Label>
                  <Input
                    id="farm_location"
                    value={formData.farm_location}
                    onChange={(e) => updateFormData('farm_location', e.target.value)}
                    placeholder="Village/Ward name"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="region">Region</Label>
                  <Select value={formData.region} onValueChange={(value) => updateFormData('region', value)}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select region" />
                    </SelectTrigger>
                    <SelectContent>
                      {TANZANIA_REGIONS.map(region => (
                        <SelectItem key={region} value={region}>
                          {region.replace('_', ' ').toUpperCase()}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="farm_size">Farm Size</Label>
                  <Input
                    id="farm_size"
                    type="number"
                    value={formData.farm_size}
                    onChange={(e) => updateFormData('farm_size', parseFloat(e.target.value) || 0)}
                    placeholder="0"
                    min="0"
                    step="0.1"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="farm_size_unit">Unit</Label>
                  <Select value={formData.farm_size_unit} onValueChange={(value) => updateFormData('farm_size_unit', value)}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="hectares">Hectares</SelectItem>
                      <SelectItem value="acres">Acres</SelectItem>
                      <SelectItem value="square_meters">Square Meters</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="farming_type">Type of Farming</Label>
                <Select value={formData.farming_type} onValueChange={(value) => updateFormData('farming_type', value)}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select farming type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="subsistence">Subsistence Farming</SelectItem>
                    <SelectItem value="commercial">Commercial Farming</SelectItem>
                    <SelectItem value="mixed">Mixed Farming</SelectItem>
                    <SelectItem value="organic">Organic Farming</SelectItem>
                    <SelectItem value="livestock">Livestock</SelectItem>
                    <SelectItem value="aquaculture">Aquaculture</SelectItem>
                    <SelectItem value="horticulture">Horticulture</SelectItem>
                    <SelectItem value="agroforestry">Agroforestry</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>
        );

      case 3:
        return (
          <Card className="w-full max-w-2xl">
            <CardHeader className="text-center">
              <div className="flex justify-center mb-4">
                <div className="p-3 bg-green-100 rounded-full">
                  <Wheat className="h-8 w-8 text-green-600" />
                </div>
              </div>
              <CardTitle>Primary Crops</CardTitle>
              <CardDescription>
                Select the main crops you grow or are interested in
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                {COMMON_CROPS_TANZANIA.map(crop => (
                  <div
                    key={crop}
                    className={`p-3 border rounded-lg cursor-pointer transition-all ${
                      formData.primary_crops.includes(crop)
                        ? 'border-green-500 bg-green-50'
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => toggleCrop(crop)}
                  >
                    <div className="flex items-center space-x-2">
                      <Checkbox
                        checked={formData.primary_crops.includes(crop)}
                        readOnly
                      />
                      <span className="text-sm font-medium">
                        {crop.replace('_', ' ').toUpperCase()}
                      </span>
                    </div>
                  </div>
                ))}
              </div>

              {formData.primary_crops.length > 0 && (
                <div className="mt-4">
                  <Label>Selected Crops:</Label>
                  <div className="flex flex-wrap gap-2 mt-2">
                    {formData.primary_crops.map(crop => (
                      <Badge key={crop} variant="secondary" className="bg-green-100 text-green-800">
                        {crop.replace('_', ' ').toUpperCase()}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        );

      case 4:
        return (
          <Card className="w-full max-w-2xl">
            <CardHeader className="text-center">
              <div className="flex justify-center mb-4">
                <div className="p-3 bg-blue-100 rounded-full">
                  <CheckCircle className="h-8 w-8 text-blue-600" />
                </div>
              </div>
              <CardTitle>Almost Done!</CardTitle>
              <CardDescription>
                Review your information and complete setup
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <div className="flex justify-between items-center py-2 border-b">
                  <span className="font-medium">Full Name:</span>
                  <span>{formData.full_name}</span>
                </div>
                <div className="flex justify-between items-center py-2 border-b">
                  <span className="font-medium">Role:</span>
                  <span>{formData.user_role.replace('_', ' ')}</span>
                </div>
                <div className="flex justify-between items-center py-2 border-b">
                  <span className="font-medium">Farm:</span>
                  <span>{formData.farm_name || 'Not specified'}</span>
                </div>
                <div className="flex justify-between items-center py-2 border-b">
                  <span className="font-medium">Location:</span>
                  <span>{formData.farm_location}, {formData.region}</span>
                </div>
                <div className="flex justify-between items-center py-2 border-b">
                  <span className="font-medium">Farm Size:</span>
                  <span>{formData.farm_size} {formData.farm_size_unit}</span>
                </div>
                <div className="flex justify-between items-center py-2 border-b">
                  <span className="font-medium">Experience:</span>
                  <span>{formData.farming_experience} years</span>
                </div>
                <div className="flex justify-between items-center py-2 border-b">
                  <span className="font-medium">Primary Crops:</span>
                  <span>{formData.primary_crops.length} selected</span>
                </div>
              </div>

              <div className="bg-green-50 p-4 rounded-lg">
                <div className="flex items-center space-x-2 mb-2">
                  <Sprout className="h-5 w-5 text-green-600" />
                  <span className="font-medium text-green-800">What's Next?</span>
                </div>
                <ul className="text-sm text-green-700 space-y-1">
                  <li>• Access personalized agricultural knowledge entries</li>
                  <li>• Get weather forecasts for your region</li>
                  <li>• Receive crop-specific farming advice</li>
                  <li>• Connect with other farmers in your area</li>
                </ul>
              </div>
            </CardContent>
          </Card>
        );

      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 via-blue-50 to-emerald-50 p-4">
      {/* Background decoration */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-green-200 rounded-full opacity-20 blur-3xl"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-200 rounded-full opacity-20 blur-3xl"></div>
      </div>

      <div className="w-full max-w-4xl relative z-10">
        {/* Progress bar */}
        <div className="mb-8">
          <div className="flex justify-between items-center mb-2">
            <h1 className="text-2xl font-bold text-gray-900">Welcome to AI4AgriWeather</h1>
            <span className="text-sm text-gray-500">Step {currentStep} of {totalSteps}</span>
          </div>
          <Progress value={progress} className="h-2" />
        </div>

        {/* Step content */}
        <div className="flex justify-center mb-8">
          {renderStep()}
        </div>

        {/* Navigation buttons */}
        <div className="flex justify-between items-center">
          <Button
            variant="outline"
            onClick={handlePrevious}
            disabled={currentStep === 1}
            className="flex items-center space-x-2"
          >
            <ArrowLeft className="h-4 w-4" />
            <span>Previous</span>
          </Button>

          {currentStep < totalSteps ? (
            <Button
              onClick={handleNext}
              disabled={
                (currentStep === 1 && !formData.full_name) ||
                (currentStep === 2 && (!formData.region || formData.farm_size <= 0))
              }
              className="flex items-center space-x-2"
            >
              <span>Next</span>
              <ArrowRight className="h-4 w-4" />
            </Button>
          ) : (
            <Button
              onClick={handleComplete}
              disabled={loading}
              className="flex items-center space-x-2"
            >
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  <span>Setting up...</span>
                </>
              ) : (
                <>
                  <CheckCircle className="h-4 w-4" />
                  <span>Complete Setup</span>
                </>
              )}
            </Button>
          )}
        </div>
      </div>
    </div>
  );
};

export default AgriOnboarding;
</file>

<file path="src/components/chat/CitationButton.tsx">
import React from 'react';
import { Button } from '@/components/ui/button';

interface CitationButtonProps {
  chunkIndex: number;
  onClick: () => void;
  className?: string;
}

const CitationButton = ({ chunkIndex, onClick, className = '' }: CitationButtonProps) => {
  return (
    <Button
      variant="outline"
      size="sm"
      onClick={onClick}
      className={`inline-flex items-center justify-center w-6 h-6 p-0 ml-1 text-xs font-medium text-blue-600 border-blue-300 hover:bg-blue-50 hover:border-blue-400 rounded-full ${className}`}
    >
      {chunkIndex + 1}
    </Button>
  );
};

export default CitationButton;
</file>

<file path="src/components/chat/MarkdownRenderer.tsx">
import React from 'react';
import DOMPurify from 'dompurify';
import { MessageSegment, Citation } from '@/types/message';
import CitationButton from './CitationButton';

interface MarkdownRendererProps {
  content: string | { segments: MessageSegment[]; citations: Citation[] };
  className?: string;
  onCitationClick?: (citation: Citation) => void;
  isUserMessage?: boolean;
}

// Configure DOMPurify for safe markdown rendering
const DOMPURIFY_CONFIG = {
  ALLOWED_TAGS: ['strong', 'em', 'b', 'i', 'p', 'br', 'span', 'div', 'a', 'code', 'pre', 'blockquote', 'ul', 'ol', 'li', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
  ALLOWED_ATTR: ['href', 'target', 'rel', 'class'],
  ALLOW_DATA_ATTR: false,
  RETURN_DOM: false,
  RETURN_DOM_FRAGMENT: false,
  SAFE_FOR_TEMPLATES: true,
  // Prevent window.open and other potentially dangerous features
  ADD_ATTR: ['target'],
  // Force all links to open in new tab with proper security
  FORCE_BODY: false,
  // Remove dangerous schemes
  ALLOWED_URI_REGEXP: /^(?:(?:https?|mailto):|[^a-z]|[a-z+.-]+(?:[^a-z+.\-:]|$))/i
};

// Helper function to sanitize text
const sanitizeText = (text: string): string => {
  return DOMPurify.sanitize(text, DOMPURIFY_CONFIG);
};

const MarkdownRenderer = ({ content, className = '', onCitationClick, isUserMessage = false }: MarkdownRendererProps) => {
  // Handle enhanced content with citations
  if (typeof content === 'object' && 'segments' in content) {
    return (
      <div className={className}>
        {processMarkdownWithCitations(content.segments, content.citations, onCitationClick, isUserMessage)}
      </div>
    );
  }

  // For legacy string content, convert to simple format
  const segments: MessageSegment[] = [{ text: typeof content === 'string' ? content : '' }];
  const citations: Citation[] = [];
  
  return (
    <div className={className}>
      {processMarkdownWithCitations(segments, citations, onCitationClick, isUserMessage)}
    </div>
  );
};

// Function to process markdown with citations inline
const processMarkdownWithCitations = (
  segments: MessageSegment[], 
  citations: Citation[], 
  onCitationClick?: (citation: Citation) => void,
  isUserMessage: boolean = false
) => {
  // For user messages, render as inline content without paragraph breaks
  if (isUserMessage) {
    return (
      <span>
        {segments.map((segment, index) => (
          <span key={index}>
            {processInlineMarkdown(segment.text)}
            {segment.citation_id && onCitationClick && (
              <CitationButton
                chunkIndex={(() => {
                  const citation = citations.find(c => c.citation_id === segment.citation_id);
                  return citation?.chunk_index || 0;
                })()}
                onClick={() => {
                  const citation = citations.find(c => c.citation_id === segment.citation_id);
                  if (citation) {
                    onCitationClick(citation);
                  }
                }}
              />
            )}
          </span>
        ))}
      </span>
    );
  }

  // For AI messages, treat each segment as a potential paragraph
  const paragraphs: JSX.Element[] = [];
  
  segments.forEach((segment, segmentIndex) => {
    const citation = segment.citation_id ? citations.find(c => c.citation_id === segment.citation_id) : undefined;
    
    // Sanitize segment text before processing
    const sanitizedSegmentText = sanitizeText(segment.text);
    
    // Split segment text by double line breaks to handle multiple paragraphs within a segment
    const paragraphTexts = sanitizedSegmentText.split('\n\n').filter(text => text.trim());
    
    paragraphTexts.forEach((paragraphText, paragraphIndex) => {
      // Process the paragraph text for markdown formatting
      const processedContent = processTextWithMarkdown(paragraphText.trim());
      
      paragraphs.push(
        <p key={`${segmentIndex}-${paragraphIndex}`} className="mb-4 leading-relaxed">
          {processedContent}
          {/* Add citation at the end of the paragraph if this is the last paragraph of the segment */}
          {paragraphIndex === paragraphTexts.length - 1 && citation && onCitationClick && (
            <CitationButton
              chunkIndex={citation.chunk_index || 0}
              onClick={() => onCitationClick(citation)}
            />
          )}
        </p>
      );
    });
  });
  
  return paragraphs;
};

// Helper function to process text with markdown formatting (bold, line breaks)
const processTextWithMarkdown = (text: string) => {
  // Sanitize the input text first
  const sanitizedText = sanitizeText(text);
  const lines = sanitizedText.split('\n');
  
  return lines.map((line, lineIndex) => {
    const parts = line.split(/(\*\*.*?\*\*|__.*?__)/g);
    
    const processedLine = parts.map((part, partIndex) => {
      if (part.match(/^\*\*(.*)\*\*$/)) {
        const boldText = part.replace(/^\*\*(.*)\*\*$/, '$1');
        // Sanitize the extracted bold text content
        const sanitizedBoldText = sanitizeText(boldText);
        return <strong key={partIndex}>{sanitizedBoldText}</strong>;
      } else if (part.match(/^__(.*__)$/)) {
        const boldText = part.replace(/^__(.*__)$/, '$1');
        // Sanitize the extracted bold text content
        const sanitizedBoldText = sanitizeText(boldText);
        return <strong key={partIndex}>{sanitizedBoldText}</strong>;
      } else {
        // For regular text, we already sanitized it above
        return part;
      }
    });

    return (
      <span key={lineIndex}>
        {processedLine}
        {lineIndex < lines.length - 1 && <br />}
      </span>
    );
  });
};

// Function to process markdown inline without creating paragraph breaks
const processInlineMarkdown = (text: string) => {
  // Sanitize the input text first
  const sanitizedText = sanitizeText(text);
  const parts = sanitizedText.split(/(\*\*.*?\*\*|__.*?__)/g);
  
  return parts.map((part, partIndex) => {
    if (part.match(/^\*\*(.*)\*\*$/)) {
      const boldText = part.replace(/^\*\*(.*)\*\*$/, '$1');
      // Sanitize the extracted bold text content
      const sanitizedBoldText = sanitizeText(boldText);
      return <strong key={partIndex}>{sanitizedBoldText}</strong>;
    } else if (part.match(/^__(.*__)$/)) {
      const boldText = part.replace(/^__(.*__)$/, '$1');
      // Sanitize the extracted bold text content
      const sanitizedBoldText = sanitizeText(boldText);
      return <strong key={partIndex}>{sanitizedBoldText}</strong>;
    } else {
      // Replace line breaks with spaces for inline rendering
      // The text is already sanitized above
      return part.replace(/\n/g, ' ');
    }
  });
};

export default MarkdownRenderer;
</file>

<file path="src/components/chat/SourceViewer.tsx">
import React from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Citation } from '@/types/message';

interface SourceViewerProps {
  citation: Citation | null;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

const SourceViewer = ({ citation, open, onOpenChange }: SourceViewerProps) => {
  if (!citation) return null;

  const getSourceIcon = (type: string) => {
    switch (type) {
      case 'pdf':
        return '📄';
      case 'text':
        return '📝';
      case 'website':
        return '🌐';
      case 'youtube':
        return '📺';
      case 'audio':
        return '🎵';
      default:
        return '📄';
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <span className="text-xl">{getSourceIcon(citation.source_type)}</span>
            <span>{citation.source_title}</span>
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4">
          <div className="flex items-center space-x-2">
            <Badge variant="outline" className="text-xs">
              Citation {citation.citation_id}
            </Badge>
            {citation.chunk_lines_from && citation.chunk_lines_to && (
              <Badge variant="outline" className="text-xs">
                Lines {citation.chunk_lines_from}-{citation.chunk_lines_to}
              </Badge>
            )}
          </div>
          
          {citation.excerpt && (
            <div className="border-l-4 border-blue-500 pl-4">
              <h4 className="font-medium text-gray-900 mb-2">Source Excerpt</h4>
              <ScrollArea className="max-h-64">
                <p className="text-sm text-gray-700 leading-relaxed">
                  {citation.excerpt}
                </p>
              </ScrollArea>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default SourceViewer;
</file>

<file path="src/components/dashboard/AgriDashboardStats.tsx">
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { 
  Wheat, 
  Cloud, 
  Bug, 
  TrendingUp, 
  Calendar,
  MapPin,
  Users,
  BookOpen,
  BarChart3,
  Clock
} from 'lucide-react';
import { useAuth } from '@/features/authentication';
import { getCategoryIcon, getCategoryName, AGRICULTURAL_CATEGORIES } from '@/utils/agricultureTemplates';
import { useTranslation } from 'react-i18next';

interface KnowledgeEntry {
  id: string;
  title: string;
  category: string;
  created_at: string;
  updated_at: string;
  tags: string[];
  crop_types: string[];
  sources: any[];
}

interface AgriDashboardStatsProps {
  knowledgeEntries: KnowledgeEntry[];
  isLoading: boolean;
}

const AgriDashboardStats = ({ knowledgeEntries, isLoading }: AgriDashboardStatsProps) => {
  const { t } = useTranslation();
  const { profile } = useAuth();

  // Calculate statistics
  const totalEntries = knowledgeEntries?.length || 0;
  const categoryCounts = knowledgeEntries?.reduce((acc, entry) => {
    const category = entry.category || 'general_farming';
    acc[category] = (acc[category] || 0) + 1;
    return acc;
  }, {} as Record<string, number>) || {};

  const recentEntries = knowledgeEntries?.filter(entry => {
    const oneWeekAgo = new Date();
    oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
    return new Date(entry.created_at) > oneWeekAgo;
  })?.length || 0;

  const cropSpecificEntries = knowledgeEntries?.filter(entry => 
    entry.crop_types && entry.crop_types.length > 0
  )?.length || 0;

  const weatherRelatedEntries = knowledgeEntries?.filter(entry => 
    entry.category === 'weather_climate'
  )?.length || 0;

  if (isLoading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        {[1, 2, 3, 4].map(i => (
          <Card key={i} className="animate-pulse">
            <CardHeader className="pb-2">
              <div className="h-4 bg-gray-200 rounded w-3/4"></div>
            </CardHeader>
            <CardContent>
              <div className="h-8 bg-gray-200 rounded w-1/2 mb-2"></div>
              <div className="h-3 bg-gray-200 rounded w-full"></div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  return (
    <div className="space-y-8">
      {/* Welcome Section with Farmer Info */}
      {profile && (
        <Card className="bg-gradient-to-r from-green-50 to-blue-50 border-green-200">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle className="text-2xl text-green-800">
                  {t('dashboard.welcomeBack', { name: profile.full_name || t('onboarding.farmer') })}
                </CardTitle>
                <CardDescription className="text-green-600 mt-2">
                  {profile.farm_name && `${profile.farm_name} • `}
                  {profile.farm_location && `${profile.farm_location} • `}
                  {profile.farm_size && `${profile.farm_size} ${profile.farm_size_unit}`}
                </CardDescription>
              </div>
              <div className="flex items-center space-x-4">
                <div className="text-center">
                  <div className="flex items-center space-x-1 text-sm text-green-600">
                    <MapPin className="h-4 w-4" />
                    <span>{profile.region?.replace('_', ' ').toUpperCase()}</span>
                  </div>
                </div>
                <div className="text-center">
                  <div className="flex items-center space-x-1 text-sm text-green-600">
                    <Calendar className="h-4 w-4" />
                    <span>{profile.farming_experience} {t('dashboard.yearsExp')}</span>
                  </div>
                </div>
              </div>
            </div>
            {profile.primary_crops && profile.primary_crops.length > 0 && (
              <div className="flex flex-wrap gap-2 mt-4">
                <span className="text-sm font-medium text-green-700">{t('dashboard.primaryCrops')}</span>
                {profile.primary_crops.slice(0, 5).map(crop => (
                  <Badge key={crop} variant="secondary" className="bg-green-100 text-green-800">
                    {crop.replace('_', ' ').toUpperCase()}
                  </Badge>
                ))}
                {profile.primary_crops.length > 5 && (
                  <Badge variant="secondary" className="bg-green-100 text-green-800">
                    {t('dashboard.moreCount', { count: profile.primary_crops.length - 5 })}
                  </Badge>
                )}
              </div>
            )}
          </CardHeader>
        </Card>
      )}

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">{t('dashboard.knowledgeEntries')}</CardTitle>
            <BookOpen className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalEntries}</div>
            <p className="text-xs text-muted-foreground">
              {t('dashboard.totalEntries')}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">{t('dashboard.recentActivity')}</CardTitle>
            <Clock className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{recentEntries}</div>
            <p className="text-xs text-muted-foreground">
              {t('dashboard.newEntriesThisWeek')}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">{t('dashboard.cropSpecific')}</CardTitle>
            <Wheat className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{cropSpecificEntries}</div>
            <p className="text-xs text-muted-foreground">
              {t('dashboard.entriesWithCropInfo')}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">{t('dashboard.weatherInsights')}</CardTitle>
            <Cloud className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{weatherRelatedEntries}</div>
            <p className="text-xs text-muted-foreground">
              {t('dashboard.weatherClimateEntries')}
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Knowledge Categories Breakdown */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <BarChart3 className="h-5 w-5" />
              <span>{t('dashboard.knowledgeCategories')}</span>
            </CardTitle>
            <CardDescription>
              {t('dashboard.distributionDescription')}
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            {Object.entries(AGRICULTURAL_CATEGORIES).map(([key, category]) => {
              const count = categoryCounts[key] || 0;
              const percentage = totalEntries > 0 ? (count / totalEntries) * 100 : 0;
              
              return (
                <div key={key} className="space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <span className="text-lg">{category.icon}</span>
                      <span className="text-sm font-medium">{category.name}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="text-sm font-bold">{count}</span>
                      <span className="text-xs text-muted-foreground">
                        ({percentage.toFixed(0)}%)
                      </span>
                    </div>
                  </div>
                  <Progress value={percentage} className="h-2" />
                </div>
              );
            })}
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <TrendingUp className="h-5 w-5" />
              <span>{t('dashboard.quickActions')}</span>
            </CardTitle>
            <CardDescription>
              {t('dashboard.commonTasks')}
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="grid grid-cols-1 gap-3">
              <div className="flex items-center justify-between p-3 bg-blue-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <Cloud className="h-5 w-5 text-blue-600" />
                  <div>
                    <p className="font-medium text-blue-900">{t('templates.weatherForecast')}</p>
                    <p className="text-sm text-blue-600">{t('templates.trackWeatherPatterns')}</p>
                  </div>
                </div>
                <Badge variant="secondary">{t('templates.guide')}</Badge>
              </div>

              <div className="flex items-center justify-between p-3 bg-green-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <Wheat className="h-5 w-5 text-green-600" />
                  <div>
                    <p className="font-medium text-green-900">{t('templates.cropPlanning')}</p>
                    <p className="text-sm text-green-600">{t('templates.planPlantingSchedules')}</p>
                  </div>
                </div>
                <Badge variant="secondary">{t('templates.template')}</Badge>
              </div>

              <div className="flex items-center justify-between p-3 bg-red-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <Bug className="h-5 w-5 text-red-600" />
                  <div>
                    <p className="font-medium text-red-900">{t('templates.pestControl')}</p>
                    <p className="text-sm text-red-600">{t('templates.identifyManagePests')}</p>
                  </div>
                </div>
                <Badge variant="secondary">{t('templates.reference')}</Badge>
              </div>

              <div className="flex items-center justify-between p-3 bg-purple-50 rounded-lg">
                <div className="flex items-center space-x-3">
                  <TrendingUp className="h-5 w-5 text-purple-600" />
                  <div>
                    <p className="font-medium text-purple-900">{t('dashboard.marketPrices')}</p>
                    <p className="text-sm text-purple-600">{t('templates.trackMarketTrends')}</p>
                  </div>
                </div>
                <Badge variant="secondary">{t('templates.analysis')}</Badge>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
};

export default AgriDashboardStats;
</file>

<file path="src/components/dashboard/AgriKnowledgeGrid.tsx">
import React, { useState, useMemo } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import NotebookCard from './NotebookCard';
import BulkActions from './BulkActions';
import { Check, Grid3X3, List, ChevronDown, Search, Filter, Plus } from 'lucide-react';
import { useNotebooks } from '@/hooks/useNotebooks';
import { useNavigate } from 'react-router-dom';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
  DropdownMenuLabel,
} from '@/components/ui/dropdown-menu';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { 
  AGRICULTURAL_CATEGORIES, 
  KNOWLEDGE_TEMPLATES, 
  getCategoryIcon, 
  getCategoryColor,
  getCategoryName 
} from '@/utils/agricultureTemplates';
import { useTranslation } from 'react-i18next';

const AgriKnowledgeGrid = () => {
  const { t } = useTranslation();
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [sortBy, setSortBy] = useState('Most recent');
  const [filterCategory, setFilterCategory] = useState('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [showTemplateDialog, setShowTemplateDialog] = useState(false);
  const [selectedEntries, setSelectedEntries] = useState<string[]>([]);
  
  const {
    notebooks,
    isLoading,
    createNotebook,
    isCreating
  } = useNotebooks();
  const navigate = useNavigate();

  // Filter and search notebooks
  const filteredNotebooks = useMemo(() => {
    if (!notebooks) return [];
    
    let filtered = [...notebooks];
    
    // Filter by category
    if (filterCategory !== 'all') {
      filtered = filtered.filter(notebook => 
        notebook.category === filterCategory
      );
    }
    
    // Search filter
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(notebook =>
        notebook.title.toLowerCase().includes(query) ||
        notebook.description?.toLowerCase().includes(query) ||
        notebook.tags?.some(tag => tag.toLowerCase().includes(query)) ||
        notebook.crop_types?.some(crop => crop.toLowerCase().includes(query))
      );
    }
    
    return filtered;
  }, [notebooks, filterCategory, searchQuery]);

  // Sort notebooks
  const sortedNotebooks = useMemo(() => {
    const sorted = [...filteredNotebooks];
    
    if (sortBy === 'Most recent') {
      return sorted.sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime());
    } else if (sortBy === 'Title') {
      return sorted.sort((a, b) => a.title.localeCompare(b.title));
    } else if (sortBy === 'Category') {
      return sorted.sort((a, b) => (a.category || '').localeCompare(b.category || ''));
    }
    
    return sorted;
  }, [filteredNotebooks, sortBy]);

  const handleCreateFromTemplate = (template: any) => {
    createNotebook({
      title: template.title,
      description: template.description,
      category: template.category,
      subcategory: template.subcategory,
      tags: template.tags,
      crop_types: template.crop_types,
      difficulty_level: template.difficulty_level,
      knowledge_type: template.knowledge_type,
      season: template.season,
      icon: template.icon,
      color: template.color,
      is_template: false,
      template_category: template.id,
    }, {
      onSuccess: data => {
        console.log('Navigating to notebook:', data.id);
        navigate(`/notebook/${data.id}`);
        setShowTemplateDialog(false);
      },
      onError: error => {
        console.error('Failed to create notebook:', error);
      }
    });
  };

  const handleCreateBlank = () => {
    createNotebook({
      title: t('knowledge.newEntry'),
      description: '',
      category: 'general_farming',
      knowledge_type: 'guide',
    }, {
      onSuccess: data => {
        console.log('Navigating to notebook:', data.id);
        navigate(`/notebook/${data.id}`);
      },
      onError: error => {
        console.error('Failed to create notebook:', error);
      }
    });
  };

  const handleNotebookClick = (notebookId: string, e: React.MouseEvent) => {
    const target = e.target as HTMLElement;
    const isDeleteAction = target.closest('[data-delete-action="true"]') || target.closest('.delete-button') || target.closest('[role="dialog"]');
    const isCheckboxAction = target.closest('[data-checkbox-action="true"]') || target.closest('input[type="checkbox"]');
    
    if (isDeleteAction || isCheckboxAction) {
      console.log('Click prevented due to action');
      return;
    }
    navigate(`/notebook/${notebookId}`);
  };

  const handleSelectEntry = (entryId: string, checked: boolean) => {
    if (checked) {
      setSelectedEntries(prev => [...prev, entryId]);
    } else {
      setSelectedEntries(prev => prev.filter(id => id !== entryId));
    }
  };

  const handleRefresh = () => {
    // This will be handled by the useNotebooks hook's real-time updates
    window.location.reload();
  };

  // Get category stats for filter dropdown
  const categoryStats = useMemo(() => {
    const stats = { all: notebooks?.length || 0 };
    notebooks?.forEach(notebook => {
      const category = notebook.category || 'general_farming';
      stats[category] = (stats[category] || 0) + 1;
    });
    return stats;
  }, [notebooks]);

  if (isLoading) {
    return (
      <div className="space-y-6">
        {/* Stats skeleton */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          {[1, 2, 3, 4].map(i => (
            <div key={i} className="h-24 bg-gray-200 rounded-lg animate-pulse"></div>
          ))}
        </div>
        
        {/* Grid skeleton */}
        <div className="text-center py-16">
          <p className="text-gray-600">{t('common.loading')}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Bulk Actions */}
      <BulkActions
        selectedEntries={selectedEntries}
        allEntries={sortedNotebooks}
        onSelectionChange={setSelectedEntries}
        onRefresh={handleRefresh}
      />

      {/* Header with search and filters */}
      <div className="flex flex-col lg:flex-row lg:items-center justify-between gap-4">
        <div className="flex flex-col sm:flex-row gap-4 flex-1">
          {/* Search */}
          <div className="relative flex-1 max-w-md">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder={t('knowledge.searchPlaceholder')}
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
          
          {/* Category filter */}
          <Select value={filterCategory} onValueChange={setFilterCategory}>
            <SelectTrigger className="w-48">
              <SelectValue placeholder={t('common.filter')} />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">
                {t('knowledge.allCategories')} ({categoryStats.all})
              </SelectItem>
              <DropdownMenuSeparator />
              {Object.entries(AGRICULTURAL_CATEGORIES).map(([key, category]) => (
                <SelectItem key={key} value={key}>
                  <div className="flex items-center space-x-2">
                    <span>{category.icon}</span>
                    <span>{category.name}</span>
                    <span className="text-gray-500">({categoryStats[key] || 0})</span>
                  </div>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* Actions */}
        <div className="flex items-center space-x-4">
          {/* Sort dropdown */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <div className="flex items-center space-x-2 bg-white rounded-lg border px-3 py-2 cursor-pointer hover:bg-gray-50 transition-colors">
                <span className="text-sm text-gray-600">{sortBy}</span>
                <ChevronDown className="h-4 w-4 text-gray-400" />
              </div>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-48">
              <DropdownMenuItem onClick={() => setSortBy('Most recent')} className="flex items-center justify-between">
                Most recent
                {sortBy === 'Most recent' && <Check className="h-4 w-4" />}
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSortBy('Title')} className="flex items-center justify-between">
                Title
                {sortBy === 'Title' && <Check className="h-4 w-4" />}
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSortBy('Category')} className="flex items-center justify-between">
                Category
                {sortBy === 'Category' && <Check className="h-4 w-4" />}
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>

          {/* Create dropdown */}
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button className="bg-green-600 hover:bg-green-700 text-white" disabled={isCreating}>
                <Plus className="h-4 w-4 mr-2" />
                {isCreating ? t('knowledge.creating') : t('common.create')}
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel>{t('knowledge.createEntry')}</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={handleCreateBlank}>
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 bg-gray-100 rounded flex items-center justify-center">
                    📝
                  </div>
                  <div>
                    <p className="font-medium">{t('knowledge.newEntry')}</p>
                    <p className="text-sm text-gray-500">{t('templates.startFromScratch')}</p>
                  </div>
                </div>
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setShowTemplateDialog(true)}>
                <div className="flex items-center space-x-2">
                  <div className="w-8 h-8 bg-blue-100 rounded flex items-center justify-center">
                    📋
                  </div>
                  <div>
                    <p className="font-medium">{t('templates.startWithTemplate')}</p>
                    <p className="text-sm text-gray-500">{t('templates.chooseTemplate')}</p>
                  </div>
                </div>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      {/* Results summary */}
      <div className="flex items-center justify-between text-sm text-gray-600">
        <div>
          {t('knowledge.totalEntries')}: {sortedNotebooks.length} / {notebooks?.length || 0}
          {filterCategory !== 'all' && (
            <span> in {getCategoryName(filterCategory)}</span>
          )}
          {searchQuery && (
            <span> matching "{searchQuery}"</span>
          )}
        </div>
        
        {(filterCategory !== 'all' || searchQuery) && (
          <Button 
            variant="ghost" 
            size="sm" 
            onClick={() => {
              setFilterCategory('all');
              setSearchQuery('');
            }}
          >
            {t('knowledge.clearSearch')}
          </Button>
        )}
      </div>

      {/* Knowledge entries grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {sortedNotebooks.map(notebook => (
          <div key={notebook.id} onClick={e => handleNotebookClick(notebook.id, e)}>
            <NotebookCard 
              notebook={{
                id: notebook.id,
                title: notebook.title,
                date: new Date(notebook.updated_at).toLocaleDateString('en-US', {
                  month: 'short',
                  day: 'numeric',
                  year: 'numeric'
                }),
                sources: notebook.sources?.[0]?.count || 0,
                icon: notebook.icon || getCategoryIcon(notebook.category || 'general_farming'),
                color: notebook.color || getCategoryColor(notebook.category || 'general_farming'),
                category: notebook.category,
                tags: notebook.tags,
                crop_types: notebook.crop_types,
                difficulty_level: notebook.difficulty_level,
                knowledge_type: notebook.knowledge_type,
              }}
              isSelected={selectedEntries.includes(notebook.id)}
              onSelect={handleSelectEntry}
              showCheckbox={true}
            />
          </div>
        ))}
      </div>

      {/* Empty state */}
      {sortedNotebooks.length === 0 && (
        <div className="text-center py-16">
          <div className="max-w-md mx-auto">
            {searchQuery || filterCategory !== 'all' ? (
              <>
                <div className="text-6xl mb-4">🔍</div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">{t('knowledge.noResults')}</h3>
                <p className="text-gray-600 mb-4">
                  {t('knowledge.noMatch')}
                </p>
                <Button 
                  variant="outline" 
                  onClick={() => {
                    setFilterCategory('all');
                    setSearchQuery('');
                  }}
                >
                  {t('knowledge.clearSearch')}
                </Button>
              </>
            ) : (
              <>
                <div className="text-6xl mb-4">🌾</div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">{t('dashboard.noKnowledgeEntries')}</h3>
                <p className="text-gray-600 mb-4">
                  {t('knowledge.startBuilding')}
                </p>
                <Button onClick={() => setShowTemplateDialog(true)}>
                  {t('dashboard.createFirstEntry')}
                </Button>
              </>
            )}
          </div>
        </div>
      )}

      {/* Template selection dialog */}
      <Dialog open={showTemplateDialog} onOpenChange={setShowTemplateDialog}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>{t('templates.chooseTemplate')}</DialogTitle>
            <DialogDescription>
              {t('templates.templateDescription')}
            </DialogDescription>
          </DialogHeader>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 py-4">
            {KNOWLEDGE_TEMPLATES.map(template => (
              <div
                key={template.id}
                className="p-4 border rounded-lg cursor-pointer hover:border-green-500 transition-colors"
                onClick={() => handleCreateFromTemplate(template)}
              >
                <div className="flex items-start space-x-3">
                  <div className={`w-10 h-10 ${template.color} rounded-lg flex items-center justify-center text-lg`}>
                    {template.icon}
                  </div>
                  <div className="flex-1 min-w-0">
                    <h4 className="font-medium text-gray-900 mb-1">{template.title}</h4>
                    <p className="text-sm text-gray-600 mb-2">{template.description}</p>
                    <div className="flex flex-wrap gap-1">
                      <Badge variant="secondary" className="text-xs">
                        {getCategoryName(template.category)}
                      </Badge>
                      <Badge variant="outline" className="text-xs">
                        {template.knowledge_type}
                      </Badge>
                      {template.difficulty_level && (
                        <Badge variant="outline" className="text-xs">
                          {template.difficulty_level}
                        </Badge>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>

          <DialogFooter>
            <Button variant="outline" onClick={() => setShowTemplateDialog(false)}>
              {t('common.cancel')}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default AgriKnowledgeGrid;
</file>

<file path="src/components/dashboard/BulkActions.tsx">
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
  DropdownMenuLabel,
} from '@/components/ui/dropdown-menu';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { 
  MoreVertical, 
  Archive, 
  Trash2, 
  Download, 
  Tag, 
  Copy,
  CheckCircle,
  X
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

interface KnowledgeEntry {
  id: string;
  title: string;
  category?: string;
  tags?: string[];
  crop_types?: string[];
  is_archived?: boolean;
}

interface BulkActionsProps {
  selectedEntries: string[];
  allEntries: KnowledgeEntry[];
  onSelectionChange: (selected: string[]) => void;
  onRefresh: () => void;
}

const BulkActions = ({ 
  selectedEntries, 
  allEntries, 
  onSelectionChange, 
  onRefresh 
}: BulkActionsProps) => {
  const [loading, setLoading] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [showArchiveDialog, setShowArchiveDialog] = useState(false);
  const { toast } = useToast();

  const selectedCount = selectedEntries.length;
  const totalCount = allEntries.length;
  const isAllSelected = selectedCount === totalCount && totalCount > 0;
  const isPartiallySelected = selectedCount > 0 && selectedCount < totalCount;

  const handleSelectAll = () => {
    if (isAllSelected) {
      onSelectionChange([]);
    } else {
      onSelectionChange(allEntries.map(entry => entry.id));
    }
  };

  const handleBulkArchive = async () => {
    setLoading(true);
    try {
      const { error } = await supabase
        .from('notebooks')
        .update({ 
          is_archived: true,
          updated_at: new Date().toISOString()
        })
        .in('id', selectedEntries);

      if (error) throw error;

      toast({
        title: "Entries Archived",
        description: `${selectedCount} knowledge entries have been archived.`,
      });

      onSelectionChange([]);
      onRefresh();
    } catch (error) {
      console.error('Archive error:', error);
      toast({
        title: "Archive Failed",
        description: "Failed to archive entries. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
      setShowArchiveDialog(false);
    }
  };

  const handleBulkDelete = async () => {
    setLoading(true);
    try {
      // First delete related sources
      const { error: sourcesError } = await supabase
        .from('sources')
        .delete()
        .in('notebook_id', selectedEntries);

      if (sourcesError) throw sourcesError;

      // Then delete the notebooks
      const { error: notebooksError } = await supabase
        .from('notebooks')
        .delete()
        .in('id', selectedEntries);

      if (notebooksError) throw notebooksError;

      toast({
        title: "Entries Deleted",
        description: `${selectedCount} knowledge entries have been permanently deleted.`,
      });

      onSelectionChange([]);
      onRefresh();
    } catch (error) {
      console.error('Delete error:', error);
      toast({
        title: "Delete Failed",
        description: "Failed to delete entries. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
      setShowDeleteDialog(false);
    }
  };

  const handleExport = async () => {
    setLoading(true);
    try {
      // Get full data for selected entries
      const { data: entries, error } = await supabase
        .from('notebooks')
        .select(`
          *,
          sources (
            title,
            type,
            url,
            summary
          ),
          notes (
            title,
            content
          )
        `)
        .in('id', selectedEntries);

      if (error) throw error;

      // Create export data
      const exportData = {
        exported_at: new Date().toISOString(),
        entries_count: entries?.length || 0,
        entries: entries?.map(entry => ({
          id: entry.id,
          title: entry.title,
          description: entry.description,
          category: entry.category,
          subcategory: entry.subcategory,
          tags: entry.tags,
          crop_types: entry.crop_types,
          difficulty_level: entry.difficulty_level,
          knowledge_type: entry.knowledge_type,
          season: entry.season,
          created_at: entry.created_at,
          updated_at: entry.updated_at,
          sources: entry.sources,
          notes: entry.notes
        }))
      };

      // Download as JSON
      const blob = new Blob([JSON.stringify(exportData, null, 2)], {
        type: 'application/json'
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `agricultural-knowledge-export-${new Date().toISOString().split('T')[0]}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      toast({
        title: "Export Complete",
        description: `${selectedCount} knowledge entries have been exported.`,
      });

      onSelectionChange([]);
    } catch (error) {
      console.error('Export error:', error);
      toast({
        title: "Export Failed",
        description: "Failed to export entries. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleDuplicate = async () => {
    setLoading(true);
    try {
      // Get the entries to duplicate
      const { data: originalEntries, error: fetchError } = await supabase
        .from('notebooks')
        .select('*')
        .in('id', selectedEntries);

      if (fetchError) throw fetchError;

      // Create duplicates
      const duplicates = originalEntries?.map(entry => ({
        ...entry,
        id: undefined, // Let Supabase generate new ID
        title: `Copy of ${entry.title}`,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      }));

      if (duplicates) {
        const { error: insertError } = await supabase
          .from('notebooks')
          .insert(duplicates);

        if (insertError) throw insertError;
      }

      toast({
        title: "Entries Duplicated",
        description: `${selectedCount} knowledge entries have been duplicated.`,
      });

      onSelectionChange([]);
      onRefresh();
    } catch (error) {
      console.error('Duplicate error:', error);
      toast({
        title: "Duplication Failed",
        description: "Failed to duplicate entries. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  if (selectedCount === 0) {
    return null;
  }

  return (
    <>
      <div className="flex items-center justify-between p-4 bg-blue-50 border border-blue-200 rounded-lg mb-4">
        <div className="flex items-center space-x-4">
          <Checkbox
            checked={isAllSelected}
            ref={(el) => {
              if (el) el.indeterminate = isPartiallySelected;
            }}
            onCheckedChange={handleSelectAll}
          />
          <div className="flex items-center space-x-2">
            <CheckCircle className="h-4 w-4 text-blue-600" />
            <span className="font-medium text-blue-900">
              {selectedCount} selected
            </span>
            {selectedCount < totalCount && (
              <button
                onClick={handleSelectAll}
                className="text-blue-600 hover:text-blue-800 text-sm underline"
              >
                Select all {totalCount}
              </button>
            )}
          </div>
        </div>

        <div className="flex items-center space-x-2">
          <Button
            variant="outline"
            size="sm"
            onClick={() => onSelectionChange([])}
          >
            <X className="h-4 w-4 mr-1" />
            Clear
          </Button>

          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm" disabled={loading}>
                <MoreVertical className="h-4 w-4 mr-1" />
                Actions
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-48">
              <DropdownMenuLabel>Bulk Actions</DropdownMenuLabel>
              <DropdownMenuSeparator />
              
              <DropdownMenuItem onClick={handleExport} disabled={loading}>
                <Download className="h-4 w-4 mr-2" />
                Export Selected
              </DropdownMenuItem>
              
              <DropdownMenuItem onClick={handleDuplicate} disabled={loading}>
                <Copy className="h-4 w-4 mr-2" />
                Duplicate Selected
              </DropdownMenuItem>
              
              <DropdownMenuSeparator />
              
              <DropdownMenuItem 
                onClick={() => setShowArchiveDialog(true)} 
                disabled={loading}
              >
                <Archive className="h-4 w-4 mr-2" />
                Archive Selected
              </DropdownMenuItem>
              
              <DropdownMenuItem 
                onClick={() => setShowDeleteDialog(true)} 
                disabled={loading}
                className="text-red-600 focus:text-red-600"
              >
                <Trash2 className="h-4 w-4 mr-2" />
                Delete Selected
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      {/* Archive Confirmation Dialog */}
      <AlertDialog open={showArchiveDialog} onOpenChange={setShowArchiveDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Archive Knowledge Entries?</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to archive {selectedCount} knowledge entries? 
              Archived entries can be restored later but won't appear in your main view.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel disabled={loading}>Cancel</AlertDialogCancel>
            <AlertDialogAction 
              onClick={handleBulkArchive}
              disabled={loading}
              className="bg-orange-600 hover:bg-orange-700"
            >
              {loading ? 'Archiving...' : 'Archive Entries'}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>

      {/* Delete Confirmation Dialog */}
      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Knowledge Entries?</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to permanently delete {selectedCount} knowledge entries? 
              This action cannot be undone and will also delete all associated sources and notes.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel disabled={loading}>Cancel</AlertDialogCancel>
            <AlertDialogAction 
              onClick={handleBulkDelete}
              disabled={loading}
              className="bg-red-600 hover:bg-red-700"
            >
              {loading ? 'Deleting...' : 'Delete Permanently'}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
};

export default BulkActions;
</file>

<file path="src/components/dashboard/NotebookGrid.tsx">
import React, { useState, useMemo } from 'react';
import { Button } from '@/components/ui/button';
import NotebookCard from './NotebookCard';
import { Check, Grid3X3, List, ChevronDown } from 'lucide-react';
import { useNotebooks } from '@/hooks/useNotebooks';
import { useNavigate } from 'react-router-dom';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

const NotebookGrid = () => {
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [sortBy, setSortBy] = useState('Most recent');
  const {
    notebooks,
    isLoading,
    createNotebook,
    isCreating
  } = useNotebooks();
  const navigate = useNavigate();

  const sortedNotebooks = useMemo(() => {
    if (!notebooks) return [];
    
    const sorted = [...notebooks];
    
    if (sortBy === 'Most recent') {
      return sorted.sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime());
    } else if (sortBy === 'Title') {
      return sorted.sort((a, b) => a.title.localeCompare(b.title));
    }
    
    return sorted;
  }, [notebooks, sortBy]);

  const handleCreateNotebook = () => {
    createNotebook({
      title: 'Untitled notebook',
      description: ''
    }, {
      onSuccess: data => {
        console.log('Navigating to notebook:', data.id);
        navigate(`/notebook/${data.id}`);
      },
      onError: error => {
        console.error('Failed to create notebook:', error);
      }
    });
  };

  const handleNotebookClick = (notebookId: string, e: React.MouseEvent) => {
    // Check if the click is coming from a delete action or other interactive element
    const target = e.target as HTMLElement;
    const isDeleteAction = target.closest('[data-delete-action="true"]') || target.closest('.delete-button') || target.closest('[role="dialog"]');
    if (isDeleteAction) {
      console.log('Click prevented due to delete action');
      return;
    }
    navigate(`/notebook/${notebookId}`);
  };

  if (isLoading) {
    return <div className="text-center py-16">
        <p className="text-gray-600">Loading notebooks...</p>
      </div>;
  }

  return <div>
      <div className="flex items-center justify-between mb-8">
        <Button className="bg-black hover:bg-gray-800 text-white rounded-full px-6" onClick={handleCreateNotebook} disabled={isCreating}>
          {isCreating ? 'Creating...' : '+ Create new'}
        </Button>
        
        <div className="flex items-center space-x-4">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <div className="flex items-center space-x-2 bg-white rounded-lg border px-3 py-2 cursor-pointer hover:bg-gray-50 transition-colors">
                <span className="text-sm text-gray-600">{sortBy}</span>
                <ChevronDown className="h-4 w-4 text-gray-400" />
              </div>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-48">
              <DropdownMenuItem onClick={() => setSortBy('Most recent')} className="flex items-center justify-between">
                Most recent
                {sortBy === 'Most recent' && <Check className="h-4 w-4" />}
              </DropdownMenuItem>
              <DropdownMenuItem onClick={() => setSortBy('Title')} className="flex items-center justify-between">
                Title
                {sortBy === 'Title' && <Check className="h-4 w-4" />}
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {sortedNotebooks.map(notebook => <div key={notebook.id} onClick={e => handleNotebookClick(notebook.id, e)}>
            <NotebookCard notebook={{
          id: notebook.id,
          title: notebook.title,
          date: new Date(notebook.updated_at).toLocaleDateString('en-US', {
            month: 'short',
            day: 'numeric',
            year: 'numeric'
          }),
          sources: notebook.sources?.[0]?.count || 0,
          icon: notebook.icon || '📝',
          color: notebook.color || 'bg-gray-100'
        }} />
          </div>)}
      </div>
    </div>;
};

export default NotebookGrid;
</file>

<file path="src/components/farm/AgriChat.tsx">
import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { AgricultureChatArea } from './AgricultureChatArea';
import { useCreateNotebook } from '@/hooks/useNotebooks';
import { useToast } from '@/hooks/use-toast';
import UnifiedHeader from '@/components/layout/UnifiedHeader';
import { 
  Bot,
  Cloud,
  Wheat,
  Bug,
  DollarSign,
  HelpCircle,
  Plus,
  MessageSquare
} from 'lucide-react';

const chatContexts = [
  {
    id: 'weather',
    name: 'Weather & Climate',
    icon: Cloud,
    color: 'text-blue-600',
    description: 'Weather forecasts and climate advice'
  },
  {
    id: 'crops',
    name: 'Crop Management',
    icon: Wheat,
    color: 'text-green-600',
    description: 'Crop growing and management tips'
  },
  {
    id: 'pests',
    name: 'Pest & Disease',
    icon: Bug,
    color: 'text-orange-600',
    description: 'Pest identification and control'
  },
  {
    id: 'market',
    name: 'Market Information',
    icon: DollarSign,
    color: 'text-purple-600',
    description: 'Market prices and selling advice'
  }
] as const;

export function AgriChat() {
  const [activeNotebooks, setActiveNotebooks] = useState<{[key: string]: string}>({});
  const [activeTab, setActiveTab] = useState('weather');
  const createNotebook = useCreateNotebook();
  const { toast } = useToast();

  const getOrCreateNotebook = async (context: string) => {
    // Check if we already have a notebook for this context
    if (activeNotebooks[context]) {
      return activeNotebooks[context];
    }

    try {
      // Create a new notebook for this context
      const result = await createNotebook.mutateAsync({
        title: `${context.charAt(0).toUpperCase() + context.slice(1)} Consultation`,
        description: `AI consultation session for ${context} related questions`
      });

      setActiveNotebooks(prev => ({
        ...prev,
        [context]: result.id
      }));

      return result.id;
    } catch (error) {
      console.error('Error creating notebook:', error);
      toast({
        title: "Error",
        description: "Failed to create consultation session. Please try again.",
        variant: "destructive",
      });
      return null;
    }
  };

  // Create default notebook when component loads
  useEffect(() => {
    if (!activeNotebooks[activeTab]) {
      getOrCreateNotebook(activeTab);
    }
  }, [activeTab]);

  return (
    <div className="min-h-screen bg-gradient-to-b from-green-50 to-blue-50">
      <UnifiedHeader variant="full" />

      <main className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <Card className="h-[calc(100vh-180px)]">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="h-full flex flex-col">
            <div className="p-4 border-b">
              <TabsList className="grid w-full grid-cols-4">
                {chatContexts.map((context) => {
                  const IconComponent = context.icon;
                  return (
                    <TabsTrigger 
                      key={context.id} 
                      value={context.id}
                      className="flex items-center gap-2"
                      onClick={async () => {
                        if (!activeNotebooks[context.id]) {
                          await getOrCreateNotebook(context.id);
                        }
                      }}
                    >
                      <IconComponent className="h-4 w-4" />
                      <span className="hidden sm:inline">{context.name}</span>
                    </TabsTrigger>
                  );
                })}
              </TabsList>
            </div>

            {chatContexts.map((context) => (
              <TabsContent 
                key={context.id} 
                value={context.id} 
                className="flex-1 m-0 p-0"
              >
                <AgricultureChatArea
                  notebookId={activeNotebooks[context.id] || undefined}
                  context={context.id as any}
                />
              </TabsContent>
            ))}
          </Tabs>
        </Card>

        {/* Help Tips */}
        <Card className="mt-4">
          <CardContent className="p-4">
            <div className="flex items-start space-x-2">
              <HelpCircle className="h-4 w-4 text-blue-600 mt-0.5" />
              <div className="text-sm text-gray-600">
                <p className="font-semibold text-gray-900 mb-1">Tips for better answers:</p>
                <ul className="space-y-1">
                  <li>• Include your crop type and growth stage</li>
                  <li>• Mention your location for weather-specific advice</li>
                  <li>• Describe symptoms clearly for pest/disease diagnosis</li>
                  <li>• Each tab provides specialized advice for that topic</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </main>
    </div>
  );
}
</file>

<file path="src/components/farm/AgricultureChatArea.tsx">
import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Send, Mic, Camera, Loader2, Wheat, Cloud, Bug, DollarSign } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { useChatMessages } from '@/hooks/useChatMessages';
import MarkdownRenderer from '@/components/chat/MarkdownRenderer';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { cn } from '@/lib/utils';

interface AgricultureChatAreaProps {
  notebookId?: string;
  context?: 'weather' | 'crops' | 'pests' | 'market' | 'general';
}

const contextPrompts = {
  weather: {
    systemPrompt: `You are AI4AgriWeather, an intelligent agricultural weather advisor for farmers. Provide practical, actionable advice about:
- Weather interpretation for farming decisions
- Seasonal planning based on weather patterns
- Climate adaptation strategies
- Irrigation and water management
- Protection from extreme weather
Always consider Tanzania's tropical climate and local conditions.`,
    quickQuestions: [
      "What does the weather forecast mean for my crops?",
      "When is the best time to plant during rainy season?",
      "How can I protect my crops from drought?",
      "What should I do if heavy rains are coming?"
    ],
    icon: Cloud,
    color: "text-blue-600"
  },
  crops: {
    systemPrompt: `You are AI4AgriWeather, an expert agricultural advisor specializing in crop management with weather intelligence. Provide guidance on:
- Crop selection and varieties suitable for Tanzania
- Planting, growing, and harvesting techniques
- Soil preparation and fertility management
- Crop rotation and intercropping
- Yield optimization strategies
Focus on major Tanzanian crops like maize, rice, coffee, cassava, and beans.`,
    quickQuestions: [
      "What's the best variety of maize for my region?",
      "How do I improve my soil before planting?",
      "When should I harvest my coffee?",
      "What crops grow well together?"
    ],
    icon: Wheat,
    color: "text-green-600"
  },
  pests: {
    systemPrompt: `You are AI4AgriWeather, a plant pathology and pest management expert with weather-based pest prediction. Help farmers with:
- Pest and disease identification
- Integrated pest management (IPM) strategies
- Organic and chemical treatment options
- Prevention and early detection methods
- Beneficial insects and natural predators
Emphasize sustainable and cost-effective solutions.`,
    quickQuestions: [
      "How do I identify fall armyworm on my maize?",
      "What natural pesticides can I use?",
      "How can I prevent coffee berry disease?",
      "Are there beneficial insects I should protect?"
    ],
    icon: Bug,
    color: "text-orange-600"
  },
  market: {
    systemPrompt: `You are AI4AgriWeather, an agricultural marketing and economics advisor with weather-informed market insights. Provide guidance on:
- Market price analysis and trends
- Best timing for selling crops
- Quality standards and grading
- Value addition and processing
- Cooperative and group marketing
- Access to credit and financing
Help farmers maximize their income from agricultural activities.`,
    quickQuestions: [
      "When should I sell my harvest for best prices?",
      "How can I improve the quality of my produce?",
      "What are the benefits of joining a cooperative?",
      "How can I add value to my crops?"
    ],
    icon: DollarSign,
    color: "text-purple-600"
  },
  general: {
    systemPrompt: `You are AI4AgriWeather, a comprehensive agricultural advisor with intelligent weather integration. Provide practical advice on:
- General farming best practices
- Sustainable agriculture methods
- Farm management and planning
- Technology adoption in agriculture
- Climate-smart farming techniques
- Record keeping and farm business management
Always provide context-appropriate advice for smallholder farmers in Tanzania.`,
    quickQuestions: [
      "How can I make my farm more sustainable?",
      "What records should I keep for my farm?",
      "How do I plan my farming activities for the year?",
      "What new technologies can help my farm?"
    ],
    icon: Wheat,
    color: "text-gray-600"
  }
};

export function AgricultureChatArea({ notebookId, context = 'general' }: AgricultureChatAreaProps) {
  const [message, setMessage] = useState('');
  const [isRecording, setIsRecording] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  
  const contextConfig = contextPrompts[context];
  const IconComponent = contextConfig.icon;
  
  const {
    messages,
    sendMessage,
    sendMessageAsync,
    isSending,
  } = useChatMessages(notebookId);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  const handleSendMessage = async () => {
    if (!message.trim() || isSending || !notebookId) return;

    const userMessage = message.trim();
    setMessage('');

    // Add context-specific system prompt to the message
    const contextualMessage = `Context: You are helping with ${context} related questions. ${contextConfig.systemPrompt}\n\nUser Question: ${userMessage}`;

    try {
      await sendMessageAsync({
        notebookId: notebookId,
        role: 'user',
        content: contextualMessage
      });
    } catch (error) {
      console.error('Error sending message:', error);
    }
  };

  const handleQuickQuestion = (question: string) => {
    setMessage(question);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  // Show loading state if no notebookId
  if (!notebookId) {
    return (
      <div className="flex flex-col h-full">
        <div className="p-4 border-b bg-gray-50">
          <div className="flex items-center space-x-2">
            <IconComponent className={`h-5 w-5 ${contextConfig.color}`} />
            <h3 className="font-semibold capitalize">{context} Assistant</h3>
            <Badge variant="outline" className="ml-auto">
              Setting up...
            </Badge>
          </div>
        </div>
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <Loader2 className="h-8 w-8 animate-spin text-gray-400 mx-auto mb-4" />
            <p className="text-gray-600">Setting up your consultation session...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-full">
      {/* Context Header */}
      <div className="p-4 border-b bg-gray-50">
        <div className="flex items-center space-x-2">
          <IconComponent className={`h-5 w-5 ${contextConfig.color}`} />
          <h3 className="font-semibold capitalize">{context} Assistant</h3>
          <Badge variant="outline" className="ml-auto">
            AI Advisor
          </Badge>
        </div>
      </div>

      {/* Quick Questions */}
      {messages.length === 0 && (
        <div className="p-4 border-b">
          <p className="text-sm text-gray-600 mb-3">Quick questions to get started:</p>
          <div className="space-y-2">
            {contextConfig.quickQuestions.map((question, index) => (
              <Button
                key={index}
                variant="outline"
                size="sm"
                className="w-full text-left justify-start h-auto p-3 whitespace-normal"
                onClick={() => handleQuickQuestion(question)}
              >
                {question}
              </Button>
            ))}
          </div>
        </div>
      )}

      {/* Messages Area */}
      <ScrollArea className="flex-1 p-4" ref={scrollAreaRef}>
        <div className="space-y-4">
          {messages.length === 0 && (
            <div className="text-center py-8">
              <IconComponent className={`h-12 w-12 mx-auto mb-4 ${contextConfig.color}`} />
              <h3 className="text-lg font-semibold text-gray-700 mb-2">
                {context.charAt(0).toUpperCase() + context.slice(1)} Assistant Ready
              </h3>
              <p className="text-gray-500 max-w-md mx-auto">
                Ask me anything about {context} related to your farming needs. 
                I'm here to provide practical, actionable advice.
              </p>
            </div>
          )}
          
          {messages.map((msg) => (
            <div
              key={msg.id}
              className={cn(
                "flex gap-3",
                msg.role === 'user' ? 'flex-row-reverse' : 'flex-row'
              )}
            >
              <Avatar className="h-8 w-8">
                <AvatarFallback className={
                  msg.role === 'user' 
                    ? 'bg-blue-100 text-blue-600' 
                    : 'bg-green-100 text-green-600'
                }>
                  {msg.role === 'user' ? 'U' : 'AI'}
                </AvatarFallback>
              </Avatar>
              <div
                className={cn(
                  "max-w-[80%] space-y-1",
                  msg.role === 'user' ? 'items-end' : 'items-start'
                )}
              >
                <div
                  className={cn(
                    "rounded-lg px-4 py-2",
                    msg.role === 'user'
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-100 text-gray-900'
                  )}
                >
                  {msg.role === 'assistant' ? (
                    <MarkdownRenderer content={msg.content} />
                  ) : (
                    <p className="text-sm whitespace-pre-wrap">{msg.content}</p>
                  )}
                </div>
                <p className="text-xs text-gray-500 px-1">
                  {new Date(msg.created_at).toLocaleTimeString()}
                </p>
              </div>
            </div>
          ))}
          
          {isSending && (
            <div className="flex gap-3">
              <Avatar className="h-8 w-8">
                <AvatarFallback className="bg-green-100 text-green-600">
                  AI
                </AvatarFallback>
              </Avatar>
              <div className="bg-gray-100 rounded-lg px-4 py-2">
                <div className="flex items-center space-x-2">
                  <Loader2 className="h-4 w-4 animate-spin" />
                  <span className="text-sm text-gray-600">Thinking...</span>
                </div>
              </div>
            </div>
          )}
        </div>
      </ScrollArea>

      {/* Input Area */}
      <div className="p-4 border-t">
        <div className="flex space-x-2">
          <Button
            variant="outline"
            size="icon"
            onClick={() => setIsRecording(!isRecording)}
            className={cn(
              isRecording && "bg-red-100 text-red-600"
            )}
          >
            <Mic className="h-4 w-4" />
          </Button>
          <Input
            value={message}
            onChange={(e) => setMessage(e.target.value)}
            onKeyPress={handleKeyPress}
            placeholder={`Ask about ${context}...`}
            className="flex-1"
            disabled={isSending}
          />
          <Button
            onClick={handleSendMessage}
            disabled={!message.trim() || isSending}
          >
            <Send className="h-4 w-4" />
          </Button>
        </div>
        <p className="text-xs text-gray-500 mt-2 text-center">
          Specialized {context} advice powered by AI4AgriWeather
        </p>
      </div>
    </div>
  );
}
</file>

<file path="src/components/farm/CropManagement.tsx">
import React from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import UnifiedHeader from '@/components/layout/UnifiedHeader';
import { Filter, Search } from 'lucide-react';
import { CropCard } from './crops/CropCard';
import { CropSummaryStats } from './crops/CropSummaryStats';
import { CropPlantingCalendar } from './crops/CropPlantingCalendar';
import { CropGuidesList } from './crops/CropGuidesList';
import { PestDiseaseManager } from './crops/PestDiseaseManager';
import { useCropData } from './crops/useCropData';


export function CropManagement() {
  const {
    crops,
    selectedCrop,
    setSelectedCrop,
    searchTerm,
    setSearchTerm,
    summaryStats,
    cropGuides,
    pestDiseases
  } = useCropData();

  return (
    <div className="min-h-screen bg-gradient-to-b from-green-50 to-emerald-50">
      <UnifiedHeader variant="full" />

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Search and Filter */}
        <div className="mb-6 flex gap-4">
          <div className="flex-1 relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder="Search crops..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
          <Button variant="outline">
            <Filter className="h-4 w-4 mr-2" />
            Filter
          </Button>
        </div>

        <Tabs defaultValue="overview" className="space-y-4">
          <TabsList>
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="calendar">Planting Calendar</TabsTrigger>
            <TabsTrigger value="guides">Crop Guides</TabsTrigger>
            <TabsTrigger value="pests">Pest & Disease</TabsTrigger>
          </TabsList>

          <TabsContent value="overview">
            <CropSummaryStats stats={summaryStats} />
            
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
              {crops.map((crop) => (
                <CropCard 
                  key={crop.id} 
                  crop={crop} 
                  onSelect={setSelectedCrop}
                />
              ))}
            </div>
          </TabsContent>

          <TabsContent value="calendar">
            <CropPlantingCalendar />
          </TabsContent>

          <TabsContent value="guides">
            <CropGuidesList cropGuides={cropGuides} />
          </TabsContent>

          <TabsContent value="pests">
            <PestDiseaseManager pestDiseases={pestDiseases} />
          </TabsContent>
        </Tabs>
      </main>
    </div>
  );
}
</file>

<file path="src/components/farm/FarmDashboard.tsx">
import React from 'react';
import UnifiedHeader from '@/components/layout/UnifiedHeader';
import {
  WeatherSummaryCard,
  CropStatusSummary,
  AlertsSection,
  QuickActionsGrid,
  RecentKnowledgeSection,
  RecentActivitiesCard,
  useDashboardData
} from './dashboard';


export function FarmDashboard() {
  const {
    weather,
    crops,
    alerts,
    knowledgeEntries,
    notebooksCount,
    isKnowledgeLoading
  } = useDashboardData();

  return (
    <div className="min-h-screen bg-gradient-to-b from-sky-50 to-green-50">
      <UnifiedHeader variant="full" />

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Alerts Section */}
        <AlertsSection alerts={alerts} />

        {/* Weather Overview */}
        <WeatherSummaryCard weather={weather} />

        {/* Crops Status & Quick Actions */}
        <div className="grid md:grid-cols-2 gap-6 mb-6">
          <CropStatusSummary crops={crops} />
          <QuickActionsGrid />
        </div>

        {/* Knowledge Base & Activities */}
        <div className="grid md:grid-cols-2 gap-6">
          <RecentKnowledgeSection 
            knowledgeEntries={knowledgeEntries} 
            isLoading={isKnowledgeLoading} 
          />
          <RecentActivitiesCard notebooksCount={notebooksCount} />
        </div>
      </main>
    </div>
  );
}
</file>

<file path="src/components/farm/KnowledgeBase.tsx">
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { useNotebooks } from '@/hooks/useNotebooks';
import { useAuth } from '@/features/authentication';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import UnifiedHeader from '@/components/layout/UnifiedHeader';
import { 
  Plus, 
  Search, 
  Book, 
  Calendar,
  Wheat,
  Cloud,
  Bug,
  DollarSign,
  FileText,
  Clock,
  Eye,
  Trash2,
  MoreHorizontal
} from 'lucide-react';
import { Link } from 'react-router-dom';
import { formatDistanceToNow } from 'date-fns';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

const useKnowledgeCategories = () => {
  const { t } = useTranslation();
  return [
    { id: 'weather', name: t('knowledge.weatherClimate'), icon: Cloud, color: 'bg-blue-100 text-blue-800' },
    { id: 'crops', name: t('knowledge.cropManagement'), icon: Wheat, color: 'bg-green-100 text-green-800' },
    { id: 'pests', name: t('knowledge.pestDisease'), icon: Bug, color: 'bg-orange-100 text-orange-800' },
    { id: 'market', name: t('knowledge.marketInfo'), icon: DollarSign, color: 'bg-purple-100 text-purple-800' },
    { id: 'general', name: t('knowledge.generalFarming'), icon: FileText, color: 'bg-gray-100 text-gray-800' }
  ];
};

export function KnowledgeBase() {
  const { t } = useTranslation();
  const { user } = useAuth();
  const { data: notebooks = [], isLoading, error } = useNotebooks();
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);
  const knowledgeCategories = useKnowledgeCategories();

  const filteredNotebooks = notebooks.filter(notebook => {
    const matchesSearch = notebook.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         notebook.description?.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesCategory = !selectedCategory || 
                           notebook.title?.toLowerCase().includes(selectedCategory) ||
                           notebook.description?.toLowerCase().includes(selectedCategory);
    
    return matchesSearch && matchesCategory;
  });

  const getCategoryFromTitle = (title: string) => {
    const titleLower = title.toLowerCase();
    if (titleLower.includes('weather') || titleLower.includes('climate') || titleLower.includes('rain')) {
      return knowledgeCategories.find(c => c.id === 'weather');
    }
    if (titleLower.includes('crop') || titleLower.includes('plant') || titleLower.includes('seed')) {
      return knowledgeCategories.find(c => c.id === 'crops');
    }
    if (titleLower.includes('pest') || titleLower.includes('disease') || titleLower.includes('insect')) {
      return knowledgeCategories.find(c => c.id === 'pests');
    }
    if (titleLower.includes('market') || titleLower.includes('price') || titleLower.includes('sell')) {
      return knowledgeCategories.find(c => c.id === 'market');
    }
    return knowledgeCategories.find(c => c.id === 'general');
  };

  const getNotebookIcon = (title: string) => {
    const category = getCategoryFromTitle(title);
    return category?.icon || FileText;
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-green-50 to-emerald-50">
        <UnifiedHeader variant="full" />
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto mb-4"></div>
            <p className="text-gray-600">Loading your knowledge base...</p>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-green-50 to-emerald-50">
        <UnifiedHeader variant="full" />
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <p className="text-red-600">Error loading knowledge base: {error.message}</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-green-50 to-emerald-50">
      <UnifiedHeader variant="full" />

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Search and Filters */}
        <div className="mb-6 space-y-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder={t('knowledge.searchPlaceholder')}
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10"
            />
          </div>
          
          {/* Category Filters */}
          <div className="flex flex-wrap gap-2">
            <Button
              variant={selectedCategory === null ? "default" : "outline"}
              size="sm"
              onClick={() => setSelectedCategory(null)}
            >
              {t('knowledge.allCategories')}
            </Button>
            {knowledgeCategories.map((category) => {
              const IconComponent = category.icon;
              return (
                <Button
                  key={category.id}
                  variant={selectedCategory === category.id ? "default" : "outline"}
                  size="sm"
                  onClick={() => setSelectedCategory(selectedCategory === category.id ? null : category.id)}
                  className="flex items-center gap-1"
                >
                  <IconComponent className="h-3 w-3" />
                  {category.name}
                </Button>
              );
            })}
          </div>
        </div>

        {/* Empty State */}
        {filteredNotebooks.length === 0 && !searchTerm && (
          <Card className="text-center py-12">
            <CardContent>
              <Book className="h-16 w-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                {t('knowledge.startBuilding')}
              </h3>
              <p className="text-gray-600 mb-6 max-w-md mx-auto">
                {t('knowledge.storeImportant')}
              </p>
              <Button asChild>
                <Link to="/knowledge/new">
                  <Plus className="h-4 w-4 mr-2" />
                  {t('knowledge.createFirst')}
                </Link>
              </Button>
            </CardContent>
          </Card>
        )}

        {/* Search Results Empty State */}
        {filteredNotebooks.length === 0 && searchTerm && (
          <Card className="text-center py-12">
            <CardContent>
              <Search className="h-16 w-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-900 mb-2">
                {t('knowledge.noResults')}
              </h3>
              <p className="text-gray-600 mb-4">
                {t('knowledge.noMatch')} "{searchTerm}"
              </p>
              <Button variant="outline" onClick={() => setSearchTerm('')}>
                {t('knowledge.clearSearch')}
              </Button>
            </CardContent>
          </Card>
        )}

        {/* Knowledge Base Grid */}
        {filteredNotebooks.length > 0 && (
          <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredNotebooks.map((notebook) => {
              const IconComponent = getNotebookIcon(notebook.title || '');
              const category = getCategoryFromTitle(notebook.title || '');
              
              return (
                <Card key={notebook.id} className="hover:shadow-lg transition-shadow group">
                  <CardHeader>
                    <div className="flex items-start justify-between">
                      <div className="flex items-start space-x-3 flex-1">
                        <div className="p-2 bg-green-100 rounded-lg">
                          <IconComponent className="h-5 w-5 text-green-600" />
                        </div>
                        <div className="flex-1 min-w-0">
                          <CardTitle className="text-lg truncate">
                            {notebook.title || 'Untitled Knowledge Entry'}
                          </CardTitle>
                          {category && (
                            <Badge className={category.color} variant="secondary">
                              {category.name}
                            </Badge>
                          )}
                        </div>
                      </div>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="sm" className="opacity-0 group-hover:opacity-100">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem asChild>
                            <Link to={`/knowledge/${notebook.id}`}>
                              <Eye className="h-4 w-4 mr-2" />
                              View
                            </Link>
                          </DropdownMenuItem>
                          <DropdownMenuItem className="text-red-600">
                            <Trash2 className="h-4 w-4 mr-2" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <CardDescription className="mb-4 line-clamp-3">
                      {notebook.description || 'No description available'}
                    </CardDescription>
                    
                    <div className="flex items-center justify-between text-sm text-gray-500">
                      <div className="flex items-center space-x-1">
                        <Clock className="h-3 w-3" />
                        <span>
                          {notebook.updated_at 
                            ? formatDistanceToNow(new Date(notebook.updated_at), { addSuffix: true })
                            : 'Recently'
                          }
                        </span>
                      </div>
                      <div className="flex items-center space-x-1">
                        <Calendar className="h-3 w-3" />
                        <span>
                          {notebook.created_at 
                            ? new Date(notebook.created_at).toLocaleDateString()
                            : 'Today'
                          }
                        </span>
                      </div>
                    </div>
                    
                    <Button asChild className="w-full mt-4" variant="outline">
                      <Link to={`/knowledge/${notebook.id}`}>
                        Open Knowledge Entry
                      </Link>
                    </Button>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        )}

        {/* Stats Summary */}
        {notebooks.length > 0 && (
          <Card className="mt-8">
            <CardContent className="p-6">
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
                <div>
                  <p className="text-2xl font-bold text-green-600">{notebooks.length}</p>
                  <p className="text-sm text-gray-600">{t('knowledge.totalEntries')}</p>
                </div>
                <div>
                  <p className="text-2xl font-bold text-blue-600">
                    {notebooks.filter(n => getCategoryFromTitle(n.title || '').id === 'weather').length}
                  </p>
                  <p className="text-sm text-gray-600">{t('knowledge.weatherEntries')}</p>
                </div>
                <div>
                  <p className="text-2xl font-bold text-green-600">
                    {notebooks.filter(n => getCategoryFromTitle(n.title || '').id === 'crops').length}
                  </p>
                  <p className="text-sm text-gray-600">{t('knowledge.cropEntries')}</p>
                </div>
                <div>
                  <p className="text-2xl font-bold text-orange-600">
                    {notebooks.filter(n => getCategoryFromTitle(n.title || '').id === 'pests').length}
                  </p>
                  <p className="text-sm text-gray-600">{t('knowledge.pestEntries')}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </main>
    </div>
  );
}
</file>

<file path="src/components/farm/KnowledgeEntry.tsx">
import React, { useState } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import { useNotebook } from '@/hooks/useNotebooks';
import { useSources } from '@/hooks/useSources';
import { useChatMessages } from '@/hooks/useChatMessages';
import { useNotebookGeneration } from '@/hooks/useNotebookGeneration';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import UnifiedHeader from '@/components/layout/UnifiedHeader';
import { 
  ArrowLeft,
  Plus,
  FileText,
  MessageSquare,
  Send,
  Paperclip,
  Mic,
  Book,
  Wheat,
  Cloud,
  Bug,
  DollarSign,
  Upload,
  Link as LinkIcon,
  Youtube,
  Loader2
} from 'lucide-react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import AddSourcesDialog from '@/components/notebook/AddSourcesDialog';
import MarkdownRenderer from '@/components/notebook/MarkdownRenderer';
import ChatArea from '@/components/notebook/ChatArea';
import SourcesSidebar from '@/components/notebook/SourcesSidebar';
// Debug component removed for production

const knowledgeCategories = [
  { id: 'weather', name: 'Weather & Climate', icon: Cloud, color: 'bg-blue-100 text-blue-800' },
  { id: 'crops', name: 'Crop Management', icon: Wheat, color: 'bg-green-100 text-green-800' },
  { id: 'pests', name: 'Pest & Disease', icon: Bug, color: 'bg-orange-100 text-orange-800' },
  { id: 'market', name: 'Market Information', icon: DollarSign, color: 'bg-purple-100 text-purple-800' },
  { id: 'general', name: 'General Farming', icon: FileText, color: 'bg-gray-100 text-gray-800' }
];

export function KnowledgeEntry() {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [showAddSources, setShowAddSources] = useState(false);
  const [activeTab, setActiveTab] = useState('chat');
  const [questionToSend, setQuestionToSend] = useState<string | null>(null);
  
  const { data: notebook, isLoading: notebookLoading, error: notebookError } = useNotebook(id!);
  const { data: sources = [] } = useSources(id!);
  const { data: messages = [] } = useChatMessages(id!);
  
  const getCategoryFromTitle = (title: string) => {
    const titleLower = title.toLowerCase();
    if (titleLower.includes('weather') || titleLower.includes('climate') || titleLower.includes('rain')) {
      return knowledgeCategories.find(c => c.id === 'weather');
    }
    if (titleLower.includes('crop') || titleLower.includes('plant') || titleLower.includes('seed')) {
      return knowledgeCategories.find(c => c.id === 'crops');
    }
    if (titleLower.includes('pest') || titleLower.includes('disease') || titleLower.includes('insect')) {
      return knowledgeCategories.find(c => c.id === 'pests');
    }
    if (titleLower.includes('market') || titleLower.includes('price') || titleLower.includes('sell')) {
      return knowledgeCategories.find(c => c.id === 'market');
    }
    return knowledgeCategories.find(c => c.id === 'general');
  };

  if (notebookLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-green-50 to-emerald-50">
        <UnifiedHeader variant="full" showBackButton onBackClick={() => navigate('/knowledge')} />
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <Loader2 className="h-8 w-8 animate-spin text-green-600 mx-auto mb-4" />
            <p className="text-gray-600">Loading knowledge entry...</p>
          </div>
        </div>
      </div>
    );
  }

  if (notebookError || !notebook) {
    return (
      <div className="min-h-screen bg-gradient-to-b from-green-50 to-emerald-50">
        <UnifiedHeader variant="full" showBackButton onBackClick={() => navigate('/knowledge')} />
        <div className="flex items-center justify-center h-64">
          <div className="text-center">
            <p className="text-red-600 mb-4">Knowledge entry not found</p>
            <Button asChild>
              <Link to="/knowledge">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Knowledge Base
              </Link>
            </Button>
          </div>
        </div>
      </div>
    );
  }

  const category = getCategoryFromTitle(notebook.title || '');
  const IconComponent = category?.icon || FileText;

  const handleSendQuestion = (question: string) => {
    setQuestionToSend(question);
    setActiveTab('chat');
  };

  return (
    <div className="min-h-screen bg-gray-50">
      <UnifiedHeader 
        variant="full"
        title={notebook.title || 'Knowledge Entry'} 
        subtitle={notebook.description || category?.name}
        showBackButton 
        onBackClick={() => navigate('/knowledge')} 
      />

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div className="grid lg:grid-cols-4 gap-6 h-[calc(100vh-180px)]">
          {/* Sources Sidebar */}
          <div className="lg:col-span-1">
            <Card className="h-full">
              <CardHeader>
                <CardTitle className="text-lg flex items-center gap-2">
                  <FileText className="h-5 w-5" />
                  Sources ({sources?.length || 0})
                </CardTitle>
                <CardDescription>
                  Documents and references for this knowledge entry
                </CardDescription>
              </CardHeader>
              <CardContent className="p-0">
                <SourcesSidebar notebookId={id!} />
              </CardContent>
            </Card>
          </div>

          {/* Main Content Area */}
          <div className="lg:col-span-2">
            <Card className="h-full">
              <Tabs value={activeTab} onValueChange={setActiveTab} className="h-full flex flex-col">
                <div className="px-6 pt-6">
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="chat" className="flex items-center gap-2">
                      <MessageSquare className="h-4 w-4" />
                      AI Assistant
                    </TabsTrigger>
                    <TabsTrigger value="overview" className="flex items-center gap-2">
                      <Book className="h-4 w-4" />
                      Overview
                    </TabsTrigger>
                  </TabsList>
                </div>
                
                <TabsContent value="chat" className="flex-1 px-6 pb-6">
                  <ChatArea 
                    notebookId={id!} 
                    hasSource={sources.length > 0}
                    notebook={notebook}
                    questionToSend={questionToSend}
                    onQuestionSent={() => setQuestionToSend(null)}
                  />
                </TabsContent>
                
                <TabsContent value="overview" className="flex-1 px-6 pb-6">
                  <ScrollArea className="h-full">
                    <div className="space-y-4">
                      <div>
                        <h3 className="text-lg font-semibold mb-2">Description</h3>
                        <p className="text-gray-600">
                          {notebook.description || 'No description available for this knowledge entry.'}
                        </p>
                      </div>
                      
                      <Separator />
                      
                      <div>
                        <h3 className="text-lg font-semibold mb-2">Entry Details</h3>
                        <dl className="space-y-2">
                          <div className="flex justify-between">
                            <dt className="text-sm text-gray-600">Created:</dt>
                            <dd className="text-sm font-medium">
                              {notebook.created_at ? new Date(notebook.created_at).toLocaleDateString() : 'Unknown'}
                            </dd>
                          </div>
                          <div className="flex justify-between">
                            <dt className="text-sm text-gray-600">Last Updated:</dt>
                            <dd className="text-sm font-medium">
                              {notebook.updated_at ? new Date(notebook.updated_at).toLocaleDateString() : 'Unknown'}
                            </dd>
                          </div>
                          <div className="flex justify-between">
                            <dt className="text-sm text-gray-600">Sources:</dt>
                            <dd className="text-sm font-medium">{sources.length} files</dd>
                          </div>
                          <div className="flex justify-between">
                            <dt className="text-sm text-gray-600">Conversations:</dt>
                            <dd className="text-sm font-medium">{messages.length} messages</dd>
                          </div>
                        </dl>
                      </div>

                      {notebook.example_questions && notebook.example_questions.length > 0 && (
                        <>
                          <Separator />
                          <div>
                            <h3 className="text-lg font-semibold mb-2">Suggested Questions</h3>
                            <div className="space-y-2">
                              {notebook.example_questions.map((question, index) => (
                                <Button
                                  key={index}
                                  variant="outline"
                                  className="w-full text-left justify-start h-auto p-3 whitespace-normal"
                                  onClick={() => handleSendQuestion(question)}
                                >
                                  {question}
                                </Button>
                              ))}
                            </div>
                          </div>
                        </>
                      )}
                    </div>
                  </ScrollArea>
                </TabsContent>
              </Tabs>
            </Card>
          </div>

          {/* Notes Sidebar */}
          <div className="lg:col-span-1">
            <Card className="h-full">
              <CardHeader>
                <CardTitle className="text-lg">Notes</CardTitle>
                <CardDescription>
                  Your personal notes and insights
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="text-sm text-gray-500 text-center py-8">
                  Notes feature coming soon...
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>

      {/* Add Sources Dialog */}
      <AddSourcesDialog
        open={showAddSources}
        onOpenChange={setShowAddSources}
        notebookId={id!}
      />
    </div>
  );
}
</file>

<file path="src/components/farm/NewKnowledgeEntry.tsx">
import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { useNavigate, Link } from 'react-router-dom';
import { useCreateNotebook } from '@/hooks/useNotebooks';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import UnifiedHeader from '@/components/layout/UnifiedHeader';
import { 
  ArrowLeft,
  Book,
  Wheat,
  Cloud,
  Bug,
  DollarSign,
  FileText,
  Loader2,
  Plus
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

const knowledgeCategories = [
  { 
    id: 'weather', 
    name: 'Weather & Climate', 
    icon: Cloud, 
    color: 'bg-blue-100 text-blue-800 border-blue-200',
    description: 'Weather forecasts, climate patterns, seasonal information'
  },
  { 
    id: 'crops', 
    name: 'Crop Management', 
    icon: Wheat, 
    color: 'bg-green-100 text-green-800 border-green-200',
    description: 'Planting guides, harvest times, crop varieties, cultivation techniques'
  },
  { 
    id: 'pests', 
    name: 'Pest & Disease', 
    icon: Bug, 
    color: 'bg-orange-100 text-orange-800 border-orange-200',
    description: 'Pest identification, disease prevention, treatment methods'
  },
  { 
    id: 'market', 
    name: 'Market Information', 
    icon: DollarSign, 
    color: 'bg-purple-100 text-purple-800 border-purple-200',
    description: 'Market prices, selling strategies, buyer information'
  },
  { 
    id: 'general', 
    name: 'General Farming', 
    icon: FileText, 
    color: 'bg-gray-100 text-gray-800 border-gray-200',
    description: 'General agricultural knowledge, techniques, and resources'
  }
];

const suggestedTopics = {
  weather: [
    'Seasonal rainfall patterns in Tanzania',
    'How to interpret weather forecasts for farming',
    'Climate change impacts on agriculture',
    'Best practices during dry seasons'
  ],
  crops: [
    'Maize cultivation best practices',
    'Coffee farming techniques',
    'Rice growing in Tanzania',
    'Organic farming methods'
  ],
  pests: [
    'Fall armyworm identification and control',
    'Coffee berry disease prevention',
    'Integrated pest management strategies',
    'Natural pesticide alternatives'
  ],
  market: [
    'Understanding commodity prices',
    'When to sell your harvest',
    'Cooperative marketing benefits',
    'Export opportunities for farmers'
  ],
  general: [
    'Soil health and fertility management',
    'Water conservation techniques',
    'Farm record keeping',
    'Agricultural technology adoption'
  ]
};

export function NewKnowledgeEntry() {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const { toast } = useToast();
  const createNotebook = useCreateNotebook();
  
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('');
  const [isCreating, setIsCreating] = useState(false);

  const handleCategorySelect = (categoryId: string) => {
    setSelectedCategory(categoryId);
    
    // Auto-suggest title prefix based on category
    if (!title) {
      const category = knowledgeCategories.find(c => c.id === categoryId);
      if (category) {
        setTitle(`${category.name}: `);
      }
    }
  };

  const handleSuggestedTopic = (topic: string) => {
    setTitle(topic);
    setDescription(`Knowledge entry about: ${topic}`);
  };

  const handleCreate = async () => {
    if (!title.trim()) {
      toast({
        title: "Title Required",
        description: "Please enter a title for your knowledge entry.",
        variant: "destructive",
      });
      return;
    }

    setIsCreating(true);
    
    try {
      const result = await createNotebook.mutateAsync({
        title: title.trim(),
        description: description.trim() || undefined,
      });

      toast({
        title: "Knowledge Entry Created",
        description: "Your new knowledge entry has been created successfully.",
      });

      // Navigate to the new knowledge entry
      navigate(`/knowledge/${result.id}`);
    } catch (error) {
      console.error('Error creating knowledge entry:', error);
      toast({
        title: "Creation Failed",
        description: "Failed to create knowledge entry. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsCreating(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-green-50 to-emerald-50">
      <UnifiedHeader
        variant="full" 
        title="New Knowledge Entry" 
        subtitle="Create agricultural knowledge documentation"
        showBackButton 
        onBackClick={() => navigate('/knowledge')} 
      />

      <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="space-y-8">
          {/* Category Selection */}
          <Card>
            <CardHeader>
              <CardTitle>{t('knowledge.chooseCategory')}</CardTitle>
              <CardDescription>
                {t('knowledge.selectType')}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
                {knowledgeCategories.map((category) => {
                  const IconComponent = category.icon;
                  return (
                    <Card
                      key={category.id}
                      className={`cursor-pointer transition-all hover:shadow-md ${
                        selectedCategory === category.id 
                          ? 'ring-2 ring-green-500 bg-green-50' 
                          : 'hover:bg-gray-50'
                      }`}
                      onClick={() => handleCategorySelect(category.id)}
                    >
                      <CardContent className="p-4">
                        <div className="flex items-start space-x-3">
                          <div className={`p-2 rounded-lg ${category.color}`}>
                            <IconComponent className="h-5 w-5" />
                          </div>
                          <div className="flex-1">
                            <h3 className="font-semibold text-sm">{category.name}</h3>
                            <p className="text-xs text-gray-600 mt-1">
                              {category.description}
                            </p>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  );
                })}
              </div>
            </CardContent>
          </Card>

          {/* Suggested Topics */}
          {selectedCategory && (
            <Card>
              <CardHeader>
                <CardTitle>Suggested Topics</CardTitle>
                <CardDescription>
                  Popular topics for {knowledgeCategories.find(c => c.id === selectedCategory)?.name}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid md:grid-cols-2 gap-2">
                  {suggestedTopics[selectedCategory as keyof typeof suggestedTopics]?.map((topic, index) => (
                    <Button
                      key={index}
                      variant="outline"
                      className="text-left justify-start h-auto p-3 whitespace-normal"
                      onClick={() => handleSuggestedTopic(topic)}
                    >
                      <Plus className="h-3 w-3 mr-2 flex-shrink-0" />
                      {topic}
                    </Button>
                  ))}
                </div>
              </CardContent>
            </Card>
          )}

          {/* Entry Details */}
          <Card>
            <CardHeader>
              <CardTitle>{t('knowledge.entryDetails')}</CardTitle>
              <CardDescription>
                {t('knowledge.provideBasic')}
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="title">{t('knowledge.titleRequired')}</Label>
                <Input
                  id="title"
                  placeholder={t('knowledge.titlePlaceholder')}
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  className="text-lg"
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="description">{t('knowledge.descriptionOptional')}</Label>
                <Textarea
                  id="description"
                  placeholder={t('knowledge.descriptionPlaceholder')}
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  rows={3}
                />
              </div>

              <div className="flex items-center justify-between pt-4">
                <p className="text-sm text-gray-600">
                  {t('knowledge.addSourcesAfter')}
                </p>
                <Button 
                  onClick={handleCreate}
                  disabled={!title.trim() || isCreating}
                  size="lg"
                >
                  {isCreating ? (
                    <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      {t('knowledge.creating')}
                    </>
                  ) : (
                    <>
                      <Plus className="h-4 w-4 mr-2" />
                      {t('knowledge.createKnowledgeEntry')}
                    </>
                  )}
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Tips */}
          <Card className="bg-blue-50 border-blue-200">
            <CardContent className="p-6">
              <h3 className="font-semibold text-blue-900 mb-2">💡 Tips for creating effective knowledge entries</h3>
              <ul className="text-sm text-blue-800 space-y-1">
                <li>• Use descriptive titles that clearly indicate the topic</li>
                <li>• Upload relevant documents, PDFs, or web links as sources</li>
                <li>• Ask the AI assistant questions to explore the topic deeply</li>
                <li>• Organize related information under appropriate categories</li>
                <li>• Update entries as you learn new information</li>
              </ul>
            </CardContent>
          </Card>
        </div>
      </main>
    </div>
  );
}
</file>

<file path="src/components/farm/WeatherCenter.tsx">
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Button } from '@/components/ui/button';
import UnifiedHeader from '@/components/layout/UnifiedHeader';
import { 
  Cloud, 
  CloudRain, 
  Sun, 
  Wind, 
  Droplets,
  Thermometer,
  Eye,
  Gauge,
  TrendingUp,
  TrendingDown,
  Calendar,
  Bell,
  Info
} from 'lucide-react';
import {
  LineChart,
  Line,
  AreaChart,
  Area,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend
} from 'recharts';

// Mock data for weather forecast
const hourlyData = Array.from({ length: 24 }, (_, i) => ({
  hour: `${i}:00`,
  temperature: 22 + Math.random() * 10,
  humidity: 60 + Math.random() * 20,
  rainfall: Math.random() > 0.7 ? Math.random() * 5 : 0,
}));

const weeklyData = [
  { day: 'Mon', high: 32, low: 22, rainfall: 0, condition: 'sunny' },
  { day: 'Tue', high: 30, low: 21, rainfall: 2, condition: 'cloudy' },
  { day: 'Wed', high: 28, low: 20, rainfall: 15, condition: 'rainy' },
  { day: 'Thu', high: 29, low: 21, rainfall: 5, condition: 'cloudy' },
  { day: 'Fri', high: 31, low: 22, rainfall: 0, condition: 'sunny' },
  { day: 'Sat', high: 33, low: 23, rainfall: 0, condition: 'sunny' },
  { day: 'Sun', high: 32, low: 22, rainfall: 1, condition: 'cloudy' },
];

const agriculturalIndices = {
  evapotranspiration: 5.2,
  soilMoisture: 65,
  uvIndex: 8,
  growingDegreeDays: 18,
};

export function WeatherCenter() {
  const [alertsEnabled, setAlertsEnabled] = useState(true);

  const getWeatherIcon = (condition: string) => {
    switch (condition) {
      case 'sunny':
        return <Sun className="h-6 w-6 text-yellow-500" />;
      case 'cloudy':
        return <Cloud className="h-6 w-6 text-gray-500" />;
      case 'rainy':
        return <CloudRain className="h-6 w-6 text-blue-500" />;
      default:
        return <Cloud className="h-6 w-6 text-gray-500" />;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-blue-50 to-sky-50">
      <UnifiedHeader variant="full" />

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Current Conditions */}
        <Card className="mb-6 bg-gradient-to-r from-blue-400 to-sky-300 text-white">
          <CardContent className="p-6">
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <h2 className="text-3xl font-bold mb-2">Current Conditions</h2>
                <div className="flex items-center space-x-4 mb-4">
                  <Sun className="h-16 w-16" />
                  <div>
                    <p className="text-5xl font-bold">28°C</p>
                    <p className="text-lg">Mostly Sunny</p>
                  </div>
                </div>
                <p className="text-sm opacity-90">
                  Good conditions for field work. UV protection recommended.
                </p>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-white/20 rounded-lg p-3">
                  <div className="flex items-center space-x-2 mb-1">
                    <Droplets className="h-4 w-4" />
                    <span className="text-sm">Humidity</span>
                  </div>
                  <p className="text-xl font-semibold">65%</p>
                </div>
                <div className="bg-white/20 rounded-lg p-3">
                  <div className="flex items-center space-x-2 mb-1">
                    <Wind className="h-4 w-4" />
                    <span className="text-sm">Wind Speed</span>
                  </div>
                  <p className="text-xl font-semibold">12 km/h</p>
                </div>
                <div className="bg-white/20 rounded-lg p-3">
                  <div className="flex items-center space-x-2 mb-1">
                    <Eye className="h-4 w-4" />
                    <span className="text-sm">Visibility</span>
                  </div>
                  <p className="text-xl font-semibold">10 km</p>
                </div>
                <div className="bg-white/20 rounded-lg p-3">
                  <div className="flex items-center space-x-2 mb-1">
                    <Gauge className="h-4 w-4" />
                    <span className="text-sm">Pressure</span>
                  </div>
                  <p className="text-xl font-semibold">1013 mb</p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Agricultural Indices */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle>Agricultural Indices</CardTitle>
            <CardDescription>
              Key metrics for farming decisions
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-4 gap-4">
              <div className="text-center p-4 bg-green-50 rounded-lg">
                <p className="text-sm text-gray-600 mb-1">Evapotranspiration</p>
                <p className="text-2xl font-bold text-green-700">
                  {agriculturalIndices.evapotranspiration} mm/day
                </p>
                <p className="text-xs text-gray-500 mt-1">Moderate water loss</p>
              </div>
              <div className="text-center p-4 bg-blue-50 rounded-lg">
                <p className="text-sm text-gray-600 mb-1">Soil Moisture</p>
                <p className="text-2xl font-bold text-blue-700">
                  {agriculturalIndices.soilMoisture}%
                </p>
                <p className="text-xs text-gray-500 mt-1">Good for planting</p>
              </div>
              <div className="text-center p-4 bg-orange-50 rounded-lg">
                <p className="text-sm text-gray-600 mb-1">UV Index</p>
                <p className="text-2xl font-bold text-orange-700">
                  {agriculturalIndices.uvIndex}
                </p>
                <p className="text-xs text-gray-500 mt-1">Very High</p>
              </div>
              <div className="text-center p-4 bg-purple-50 rounded-lg">
                <p className="text-sm text-gray-600 mb-1">Growing Degree Days</p>
                <p className="text-2xl font-bold text-purple-700">
                  {agriculturalIndices.growingDegreeDays}°C
                </p>
                <p className="text-xs text-gray-500 mt-1">Accumulated today</p>
              </div>
            </div>
            <div className="mt-4 p-4 bg-blue-50 rounded-lg flex items-start space-x-2">
              <Info className="h-5 w-5 text-blue-600 mt-0.5" />
              <div className="text-sm text-blue-800">
                <p className="font-semibold mb-1">Irrigation Recommendation</p>
                <p>Based on current evapotranspiration and soil moisture, irrigate 20-25mm in the next 2 days for optimal crop growth.</p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Forecast Tabs */}
        <Tabs defaultValue="hourly" className="space-y-4">
          <TabsList className="grid w-full md:w-auto md:inline-grid grid-cols-3">
            <TabsTrigger value="hourly">24-Hour</TabsTrigger>
            <TabsTrigger value="weekly">7-Day</TabsTrigger>
            <TabsTrigger value="seasonal">Seasonal</TabsTrigger>
          </TabsList>

          <TabsContent value="hourly">
            <Card>
              <CardHeader>
                <CardTitle>24-Hour Forecast</CardTitle>
                <CardDescription>
                  Hourly temperature and rainfall predictions
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="h-80">
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart data={hourlyData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="hour" />
                      <YAxis yAxisId="temp" orientation="left" />
                      <YAxis yAxisId="rain" orientation="right" />
                      <Tooltip />
                      <Legend />
                      <Line 
                        yAxisId="temp"
                        type="monotone" 
                        dataKey="temperature" 
                        stroke="#ef4444" 
                        name="Temperature (°C)"
                      />
                      <Bar 
                        yAxisId="rain"
                        dataKey="rainfall" 
                        fill="#3b82f6" 
                        name="Rainfall (mm)"
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="weekly">
            <Card>
              <CardHeader>
                <CardTitle>7-Day Forecast</CardTitle>
                <CardDescription>
                  Weekly weather outlook for farm planning
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid gap-3">
                  {weeklyData.map((day, index) => (
                    <div 
                      key={index}
                      className="flex items-center justify-between p-3 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors"
                    >
                      <div className="flex items-center space-x-4">
                        <p className="font-semibold w-12">{day.day}</p>
                        {getWeatherIcon(day.condition)}
                        <div className="flex items-center space-x-2">
                          <TrendingUp className="h-4 w-4 text-red-500" />
                          <span className="font-medium">{day.high}°</span>
                          <TrendingDown className="h-4 w-4 text-blue-500" />
                          <span className="text-gray-600">{day.low}°</span>
                        </div>
                      </div>
                      <div className="flex items-center space-x-4">
                        {day.rainfall > 0 && (
                          <div className="flex items-center space-x-1 text-blue-600">
                            <Droplets className="h-4 w-4" />
                            <span className="text-sm">{day.rainfall}mm</span>
                          </div>
                        )}
                        <span className="text-sm text-gray-600 capitalize">
                          {day.condition}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="seasonal">
            <Card>
              <CardHeader>
                <CardTitle>Seasonal Outlook</CardTitle>
                <CardDescription>
                  Long-term predictions and historical comparisons
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="p-4 bg-green-50 rounded-lg">
                    <h4 className="font-semibold text-green-800 mb-2">
                      Next 3 Months: Above Average Rainfall Expected
                    </h4>
                    <p className="text-sm text-green-700">
                      La Niña conditions are likely to bring 20-30% more rainfall than average. 
                      Good for water-intensive crops but monitor for flooding risks.
                    </p>
                  </div>
                  <div className="grid md:grid-cols-3 gap-4">
                    <div className="text-center p-4 border rounded-lg">
                      <Calendar className="h-8 w-8 mx-auto mb-2 text-blue-600" />
                      <p className="font-semibold">Masika (Long Rains)</p>
                      <p className="text-sm text-gray-600">March - May</p>
                      <p className="text-xs mt-1">Expected: Normal</p>
                    </div>
                    <div className="text-center p-4 border rounded-lg">
                      <Calendar className="h-8 w-8 mx-auto mb-2 text-green-600" />
                      <p className="font-semibold">Vuli (Short Rains)</p>
                      <p className="text-sm text-gray-600">October - December</p>
                      <p className="text-xs mt-1">Expected: Above Normal</p>
                    </div>
                    <div className="text-center p-4 border rounded-lg">
                      <Calendar className="h-8 w-8 mx-auto mb-2 text-orange-600" />
                      <p className="font-semibold">Kiangazi (Dry)</p>
                      <p className="text-sm text-gray-600">June - September</p>
                      <p className="text-xs mt-1">Expected: Drier than usual</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Weather Alerts */}
        {alertsEnabled && (
          <Card className="mt-6 border-orange-200 bg-orange-50">
            <CardHeader>
              <CardTitle className="text-orange-800">Active Weather Alerts</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="flex items-start space-x-3">
                  <CloudRain className="h-5 w-5 text-orange-600 mt-0.5" />
                  <div>
                    <p className="font-semibold text-orange-800">Heavy Rainfall Warning</p>
                    <p className="text-sm text-orange-700">
                      Expected 40-60mm of rain in the next 48 hours. Ensure proper drainage in fields and postpone fertilizer application.
                    </p>
                    <p className="text-xs text-orange-600 mt-1">Valid until: Tomorrow 6:00 PM</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </main>
    </div>
  );
}
</file>

<file path="src/components/notebook/AudioPlayer.tsx">
import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Slider } from '@/components/ui/slider';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { Play, Pause, RotateCcw, Volume2, Download, MoreVertical, Trash2, Loader2, RefreshCw, AlertTriangle } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface AudioPlayerProps {
  audioUrl: string;
  title?: string;
  notebookId?: string;
  expiresAt?: string | null;
  onError?: () => void;
  onDeleted?: () => void;
  onRetry?: () => void;
  onUrlRefresh?: (notebookId: string) => void;
}

const AudioPlayer = ({ 
  audioUrl, 
  title = "Deep Dive Conversation", 
  notebookId,
  expiresAt,
  onError,
  onDeleted,
  onRetry,
  onUrlRefresh
}: AudioPlayerProps) => {
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [volume, setVolume] = useState(1);
  const [loading, setLoading] = useState(true);
  const [isDeleting, setIsDeleting] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);
  const [audioError, setAudioError] = useState<string | null>(null);
  const [retryCount, setRetryCount] = useState(0);
  const [autoRetryInProgress, setAutoRetryInProgress] = useState(false);
  const audioRef = useRef<HTMLAudioElement>(null);
  const { toast } = useToast();

  // Check if audio is expired
  const isExpired = expiresAt ? new Date(expiresAt) <= new Date() : false;

  useEffect(() => {
    const audio = audioRef.current;
    if (!audio) return;

    const updateTime = () => setCurrentTime(audio.currentTime);
    const updateDuration = () => {
      setDuration(audio.duration);
      setLoading(false);
      setAudioError(null);
      setRetryCount(0);
    };
    const handleEnded = () => setIsPlaying(false);
    const handleError = async (e: Event) => {
      console.error('Audio error:', e);
      setLoading(false);
      setIsPlaying(false);
      
      // If the URL has expired and we have a notebookId, try to refresh it automatically
      if ((isExpired || audioError?.includes('403') || audioError?.includes('expired')) && 
          notebookId && onUrlRefresh && retryCount < 2 && !autoRetryInProgress) {
        console.log('Audio URL expired or access denied, attempting automatic refresh...');
        setAutoRetryInProgress(true);
        setRetryCount(prev => prev + 1);
        onUrlRefresh(notebookId);
        return;
      }

      if (retryCount < 2 && !autoRetryInProgress) {
        // Auto-retry up to 2 times for transient errors
        setTimeout(() => {
          setRetryCount(prev => prev + 1);
          audio.load();
        }, 1000 * (retryCount + 1)); // Exponential backoff
      } else {
        setAudioError('Failed to load audio');
        setAutoRetryInProgress(false);
        onError?.();
      }
    };

    const handleCanPlay = () => {
      setLoading(false);
      setAudioError(null);
      setRetryCount(0);
      setAutoRetryInProgress(false);
    };

    const handleLoadStart = () => {
      if (autoRetryInProgress) {
        setLoading(true);
      }
    };

    audio.addEventListener('timeupdate', updateTime);
    audio.addEventListener('loadedmetadata', updateDuration);
    audio.addEventListener('canplay', handleCanPlay);
    audio.addEventListener('loadstart', handleLoadStart);
    audio.addEventListener('ended', handleEnded);
    audio.addEventListener('error', handleError);

    return () => {
      audio.removeEventListener('timeupdate', updateTime);
      audio.removeEventListener('loadedmetadata', updateDuration);
      audio.removeEventListener('canplay', handleCanPlay);
      audio.removeEventListener('loadstart', handleLoadStart);
      audio.removeEventListener('ended', handleEnded);
      audio.removeEventListener('error', handleError);
    };
  }, [onError, isExpired, retryCount, notebookId, onUrlRefresh, audioError, autoRetryInProgress]);

  // Reload audio when URL changes (for automatic refresh)
  useEffect(() => {
    const audio = audioRef.current;
    if (audio && autoRetryInProgress) {
      console.log('Reloading audio with new URL...');
      audio.load();
    }
  }, [audioUrl, autoRetryInProgress]);

  const togglePlayPause = () => {
    const audio = audioRef.current;
    if (!audio || audioError) return;

    if (isPlaying) {
      audio.pause();
    } else {
      const playPromise = audio.play();
      if (playPromise !== undefined) {
        playPromise.catch(error => {
          console.error('Play failed:', error);
          setAudioError('Playback failed');
        });
      }
    }
    setIsPlaying(!isPlaying);
  };

  const handleSeek = (value: number[]) => {
    const audio = audioRef.current;
    if (!audio || audioError) return;

    const time = value[0];
    audio.currentTime = time;
    setCurrentTime(time);
  };

  const handleVolumeChange = (value: number[]) => {
    const audio = audioRef.current;
    if (!audio) return;

    const vol = value[0];
    audio.volume = vol;
    setVolume(vol);
  };

  const restart = () => {
    const audio = audioRef.current;
    if (!audio || audioError) return;

    audio.currentTime = 0;
    setCurrentTime(0);
  };

  const retryLoad = () => {
    const audio = audioRef.current;
    if (!audio) return;

    setLoading(true);
    setAudioError(null);
    setRetryCount(0);
    setAutoRetryInProgress(false);
    audio.load();
  };

  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  const downloadAudio = async () => {
    setIsDownloading(true);
    
    try {
      // Fetch the audio file
      const response = await fetch(audioUrl);
      if (!response.ok) {
        throw new Error('Failed to fetch audio file');
      }
      
      // Create a blob from the response
      const blob = await response.blob();
      
      // Create a temporary URL for the blob
      const blobUrl = URL.createObjectURL(blob);
      
      // Create a temporary anchor element and trigger download
      const link = document.createElement('a');
      link.href = blobUrl;
      link.download = `${title}.mp3`;
      document.body.appendChild(link);
      link.click();
      
      // Clean up
      document.body.removeChild(link);
      URL.revokeObjectURL(blobUrl);
      
      toast({
        title: "Download Started",
        description: "Your audio file is being downloaded.",
      });
    } catch (error) {
      console.error('Download failed:', error);
      toast({
        title: "Download Failed",
        description: "Failed to download the audio file. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsDownloading(false);
    }
  };

  const deleteAudio = async () => {
    if (!notebookId) {
      toast({
        title: "Error",
        description: "Cannot delete audio - notebook ID not found",
        variant: "destructive",
      });
      return;
    }

    setIsDeleting(true);
    
    try {
      const { supabase } = await import('@/integrations/supabase/client');
      
      // First, try to remove all files in the notebook folder from storage
      try {
        console.log('Attempting to list files in folder:', notebookId);
        
        // List all files in the notebook folder
        const { data: files, error: listError } = await supabase.storage
          .from('audio')
          .list(notebookId);

        if (listError) {
          console.error('Error listing files:', listError);
        } else if (files && files.length > 0) {
          // Delete all files in the folder
          const filePaths = files.map(file => `${notebookId}/${file.name}`);
          console.log('Deleting files:', filePaths);
          
          const { error: deleteError } = await supabase.storage
            .from('audio')
            .remove(filePaths);

          if (deleteError) {
            console.error('Error deleting files from storage:', deleteError);
          } else {
            console.log('Successfully deleted files from storage');
          }
        }
      } catch (storageError) {
        console.error('Storage operation failed:', storageError);
        // Continue with database update even if storage deletion fails
      }

      // Update the notebook to clear audio overview fields
      const { error } = await supabase
        .from('notebooks')
        .update({
          audio_overview_url: null,
          audio_url_expires_at: null,
          audio_overview_generation_status: null
        })
        .eq('id', notebookId);

      if (error) {
        console.error('Error updating notebook:', error);
        throw error;
      }

      toast({
        title: "Audio Deleted",
        description: "The audio overview and associated files have been successfully deleted.",
      });

      // Call the onDeleted callback to update parent component
      onDeleted?.();

    } catch (error) {
      console.error('Failed to delete audio:', error);
      toast({
        title: "Delete Failed",
        description: "Failed to delete the audio overview. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsDeleting(false);
    }
  };

  return (
    <Card className="p-4 space-y-4">
      <audio ref={audioRef} src={audioUrl} preload="metadata" />
      
      <div className="flex items-center justify-between">
        <div className="flex-1">
          <h4 className="font-medium text-gray-900">{title}</h4>
        </div>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" size="sm" disabled={isDeleting}>
              {isDeleting ? (
                <Loader2 className="h-4 w-4 animate-spin" />
              ) : (
                <MoreVertical className="h-4 w-4" />
              )}
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem onClick={downloadAudio} disabled={isDownloading}>
              {isDownloading ? (
                <Loader2 className="h-4 w-4 mr-2 animate-spin" />
              ) : (
                <Download className="h-4 w-4 mr-2" />
              )}
              {isDownloading ? 'Downloading...' : 'Download'}
            </DropdownMenuItem>
            <DropdownMenuItem 
              onClick={deleteAudio}
              className="text-red-600 focus:text-red-600"
              disabled={isDeleting}
            >
              <Trash2 className="h-4 w-4 mr-2" />
              Delete
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>

      {/* Auto-refresh indicator */}
      {autoRetryInProgress && (
        <div className="flex items-center justify-between p-3 bg-blue-50 rounded-md border border-blue-200">
          <div className="flex items-center space-x-2">
            <Loader2 className="h-4 w-4 text-blue-600 animate-spin" />
            <span className="text-sm text-blue-600">Refreshing audio access...</span>
          </div>
        </div>
      )}

      {/* Error State */}
      {audioError && !autoRetryInProgress && (
        <div className="flex items-center justify-between p-3 bg-red-50 rounded-md border border-red-200">
          <div className="flex items-center space-x-2">
            <AlertTriangle className="h-4 w-4 text-red-600" />
            <span className="text-sm text-red-600">{audioError}</span>
          </div>
          <Button
            variant="outline"
            size="sm"
            onClick={onRetry || retryLoad}
            className="text-red-600 border-red-300 hover:bg-red-50"
          >
            <RefreshCw className="h-4 w-4 mr-1" />
            Retry
          </Button>
        </div>
      )}

      {/* Progress Bar */}
      <div className="space-y-2">
        <Slider
          value={[currentTime]}
          max={duration || 100}
          step={1}
          onValueChange={handleSeek}
          className="w-full"
          disabled={loading || !!audioError}
        />
        <div className="flex justify-between text-xs text-gray-500">
          <span>{formatTime(currentTime)}</span>
          <span>{formatTime(duration)}</span>
        </div>
      </div>

      {/* Controls */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Button
            variant="ghost"
            size="sm"
            onClick={restart}
            disabled={loading || !!audioError}
          >
            <RotateCcw className="h-4 w-4" />
          </Button>
          
          <Button
            variant="default"
            size="sm"
            onClick={togglePlayPause}
            disabled={loading || !!audioError}
            className="w-12"
          >
            {loading ? (
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white" />
            ) : isPlaying ? (
              <Pause className="h-4 w-4" />
            ) : (
              <Play className="h-4 w-4" />
            )}
          </Button>
        </div>

        {/* Volume Control */}
        <div className="flex items-center space-x-2 w-24">
          <Volume2 className="h-4 w-4 text-gray-500" />
          <Slider
            value={[volume]}
            max={1}
            step={0.1}
            onValueChange={handleVolumeChange}
            className="flex-1"
          />
        </div>
      </div>
    </Card>
  );
};

export default AudioPlayer;
</file>

<file path="src/components/notebook/CopiedTextDialog.tsx">
import React, { useState, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Copy, ClipboardPaste } from 'lucide-react';

interface CopiedTextDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSubmit: (title: string, content: string) => void;
}

const CopiedTextDialog = ({
  open,
  onOpenChange,
  onSubmit
}: CopiedTextDialogProps) => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Auto-populate with clipboard content when dialog opens
  useEffect(() => {
    if (open) {
      navigator.clipboard.readText()
        .then(text => {
          if (text && text.trim()) {
            setContent(text);
            // Generate a default title based on content length
            const words = text.trim().split(' ').slice(0, 8).join(' ');
            setTitle(words.length > 50 ? words.substring(0, 50) + '...' : words);
          }
        })
        .catch(err => {
          console.log('Could not read clipboard:', err);
        });
    }
  }, [open]);

  const handleSubmit = async () => {
    if (!title.trim() || !content.trim()) {
      return;
    }

    setIsSubmitting(true);
    try {
      await onSubmit(title.trim(), content.trim());
      setTitle('');
      setContent('');
      onOpenChange(false);
    } catch (error) {
      console.error('Error submitting copied text:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleClose = () => {
    setTitle('');
    setContent('');
    onOpenChange(false);
  };

  const handlePasteFromClipboard = async () => {
    try {
      const text = await navigator.clipboard.readText();
      if (text) {
        setContent(text);
        if (!title.trim()) {
          const words = text.trim().split(' ').slice(0, 8).join(' ');
          setTitle(words.length > 50 ? words.substring(0, 50) + '...' : words);
        }
      }
    } catch (err) {
      console.error('Could not read clipboard:', err);
    }
  };

  const isValid = title.trim() !== '' && content.trim() !== '';
  const characterCount = content.length;

  return (
    <Dialog open={open} onOpenChange={handleClose}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Copy className="h-5 w-5 text-purple-600" />
            <span>Add Copied Text</span>
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          <div>
            <p className="text-sm text-gray-600 mb-4">
              This dialog automatically reads from your clipboard. You can also manually paste content below.
            </p>
          </div>

          <div className="space-y-2">
            <Label htmlFor="title" className="text-sm font-medium">
              Title
            </Label>
            <Input
              id="title"
              placeholder="Enter a title for this content..."
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <Label htmlFor="content" className="text-sm font-medium">
                Content
              </Label>
              <Button
                variant="outline"
                size="sm"
                onClick={handlePasteFromClipboard}
                className="flex items-center space-x-1"
              >
                <ClipboardPaste className="h-4 w-4" />
                <span>Paste from Clipboard</span>
              </Button>
            </div>
            <Textarea
              id="content"
              placeholder="Your copied content will appear here..."
              value={content}
              onChange={(e) => setContent(e.target.value)}
              className="min-h-[200px] resize-y"
            />
            <div className="flex justify-between text-xs text-gray-500">
              <span>{characterCount} characters</span>
              {characterCount > 10000 && (
                <span className="text-amber-600">Large content may take longer to process</span>
              )}
            </div>
          </div>

          <div className="flex justify-end space-x-2 pt-4">
            <Button variant="outline" onClick={handleClose}>
              Cancel
            </Button>
            <Button 
              onClick={handleSubmit} 
              disabled={!isValid || isSubmitting}
            >
              {isSubmitting ? 'Adding...' : 'Add Copied Text'}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default CopiedTextDialog;
</file>

<file path="src/components/notebook/MobileNotebookTabs.tsx">
import React from 'react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { FileText, MessageCircle, NotebookPen } from 'lucide-react';
import SourcesSidebar from './SourcesSidebar';
import ChatArea from './ChatArea';
import StudioSidebar from './StudioSidebar';
import { Citation } from '@/types/message';

interface MobileNotebookTabsProps {
  hasSource: boolean;
  notebookId?: string;
  notebook?: {
    id: string;
    title: string;
    description?: string;
    generation_status?: string;
    icon?: string;
    example_questions?: string[];
  } | null;
  selectedCitation?: Citation | null;
  onCitationClose?: () => void;
  setSelectedCitation?: (citation: Citation | null) => void;
  onCitationClick?: (citation: Citation) => void;
}

const MobileNotebookTabs = ({
  hasSource,
  notebookId,
  notebook,
  selectedCitation,
  onCitationClose,
  setSelectedCitation,
  onCitationClick
}: MobileNotebookTabsProps) => {
  return (
    <Tabs defaultValue="chat" className="flex-1 flex flex-col overflow-hidden">
      <TabsList className="grid w-full grid-cols-3 bg-gray-100 p-1 h-12 rounded-none border-b border-gray-200">
        <TabsTrigger 
          value="sources" 
          className="flex items-center space-x-2 text-sm data-[state=active]:bg-white data-[state=active]:shadow-sm"
        >
          <FileText className="h-4 w-4" />
          <span className="hidden sm:inline">Sources</span>
        </TabsTrigger>
        <TabsTrigger 
          value="chat" 
          className="flex items-center space-x-2 text-sm data-[state=active]:bg-white data-[state=active]:shadow-sm"
        >
          <MessageCircle className="h-4 w-4" />
          <span className="hidden sm:inline">Chat</span>
        </TabsTrigger>
        <TabsTrigger 
          value="studio" 
          className="flex items-center space-x-2 text-sm data-[state=active]:bg-white data-[state=active]:shadow-sm"
        >
          <NotebookPen className="h-4 w-4" />
          <span className="hidden sm:inline">Notes</span>
        </TabsTrigger>
      </TabsList>

      <TabsContent value="sources" className="flex-1 overflow-hidden mt-0">
        <SourcesSidebar 
          hasSource={hasSource}
          notebookId={notebookId}
          selectedCitation={selectedCitation}
          onCitationClose={onCitationClose}
          setSelectedCitation={setSelectedCitation}
        />
      </TabsContent>

      <TabsContent value="chat" className="flex-1 overflow-hidden mt-0">
        <ChatArea 
          hasSource={hasSource}
          notebookId={notebookId}
          notebook={notebook}
          onCitationClick={onCitationClick}
        />
      </TabsContent>

      <TabsContent value="studio" className="flex-1 overflow-hidden mt-0">
        <StudioSidebar 
          notebookId={notebookId}
          onCitationClick={onCitationClick}
        />
      </TabsContent>
    </Tabs>
  );
};

export default MobileNotebookTabs;
</file>

<file path="src/components/notebook/MultipleWebsiteUrlsDialog.tsx">
import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Link } from 'lucide-react';

interface MultipleWebsiteUrlsDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSubmit: (urls: string[]) => void;
}

const MultipleWebsiteUrlsDialog = ({
  open,
  onOpenChange,
  onSubmit
}: MultipleWebsiteUrlsDialogProps) => {
  const [urlsText, setUrlsText] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async () => {
    // Parse URLs from textarea - split by newlines and filter out empty lines
    const urls = urlsText
      .split('\n')
      .map(url => url.trim())
      .filter(url => url !== '');
    
    if (urls.length === 0) {
      return;
    }

    setIsSubmitting(true);
    try {
      await onSubmit(urls);
      setUrlsText('');
      onOpenChange(false);
    } catch (error) {
      console.error('Error submitting URLs:', error);
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleClose = () => {
    setUrlsText('');
    onOpenChange(false);
  };

  // Count valid URLs for display
  const validUrls = urlsText
    .split('\n')
    .map(url => url.trim())
    .filter(url => url !== '');
  
  const isValid = validUrls.length > 0;

  return (
    <Dialog open={open} onOpenChange={handleClose}>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Link className="h-5 w-5 text-green-600" />
            <span>Add Multiple Website URLs</span>
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          <div>
            <Label className="text-sm font-medium">Website URLs</Label>
            <p className="text-sm text-gray-600 mb-3">
              Enter multiple website URLs, one per line. Each URL will be scraped as a separate source.
            </p>
          </div>

          <div>
            <Textarea
              placeholder={`Enter URLs one per line, for example:
https://example.com
https://another-site.com
https://third-website.org`}
              value={urlsText}
              onChange={(e) => setUrlsText(e.target.value)}
              className="min-h-32 resize-y"
              rows={6}
            />
            {validUrls.length > 0 && (
              <p className="text-sm text-gray-500 mt-2">
                {validUrls.length} URL{validUrls.length !== 1 ? 's' : ''} detected
              </p>
            )}
          </div>

          <div className="flex justify-end space-x-2 pt-4">
            <Button variant="outline" onClick={handleClose}>
              Cancel
            </Button>
            <Button 
              onClick={handleSubmit} 
              disabled={!isValid || isSubmitting}
            >
              {isSubmitting ? 'Adding...' : `Add ${validUrls.length} Website${validUrls.length !== 1 ? 's' : ''}`}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default MultipleWebsiteUrlsDialog;
</file>

<file path="src/components/notebook/NotebookHeader.tsx">
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { User, LogOut } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { useNotebookUpdate } from '@/hooks/useNotebookUpdate';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { useLogout } from '@/services/authService';
import Logo from '@/components/ui/Logo';

interface NotebookHeaderProps {
  title: string;
  notebookId?: string;
}

const NotebookHeader = ({ title, notebookId }: NotebookHeaderProps) => {
  const navigate = useNavigate();
  const { logout } = useLogout();
  const [isEditing, setIsEditing] = useState(false);
  const [editedTitle, setEditedTitle] = useState(title);
  const { updateNotebook, isUpdating } = useNotebookUpdate();

  const handleTitleClick = () => {
    if (notebookId) {
      setIsEditing(true);
      setEditedTitle(title);
    }
  };

  const handleTitleSubmit = () => {
    if (notebookId && editedTitle.trim() && editedTitle !== title) {
      updateNotebook({
        id: notebookId,
        updates: { title: editedTitle.trim() }
      });
    }
    setIsEditing(false);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleTitleSubmit();
    } else if (e.key === 'Escape') {
      setEditedTitle(title);
      setIsEditing(false);
    }
  };

  const handleBlur = () => {
    handleTitleSubmit();
  };

  const handleIconClick = () => {
    navigate('/');
  };

  return (
    <header className="bg-white border-b border-gray-200 px-6 py-4">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2">
            <button 
              onClick={handleIconClick}
              className="hover:bg-gray-50 rounded transition-colors p-1"
            >
              <Logo />
            </button>
            {isEditing ? (
              <Input
                value={editedTitle}
                onChange={(e) => setEditedTitle(e.target.value)}
                onKeyDown={handleKeyDown}
                onBlur={handleBlur}
                className="text-lg font-medium text-gray-900 border-none shadow-none p-0 h-auto focus-visible:ring-0 min-w-[300px] w-auto"
                autoFocus
                disabled={isUpdating}
              />
            ) : (
              <span 
                className="text-lg font-medium text-gray-900 cursor-pointer hover:bg-gray-50 rounded px-2 py-1 transition-colors"
                onClick={handleTitleClick}
              >
                {title}
              </span>
            )}
          </div>
        </div>
        
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2">
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="p-0">
                  <div className="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center cursor-pointer hover:bg-purple-600 transition-colors">
                    <User className="h-4 w-4 text-white" />
                  </div>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-48">
                <DropdownMenuItem onClick={logout} className="cursor-pointer">
                  <LogOut className="h-4 w-4 mr-2" />
                  Sign Out
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>
      </div>
    </header>
  );
};

export default NotebookHeader;
</file>

<file path="src/components/notebook/NoteEditor.tsx">
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Trash2, Save, X, Wand2 } from 'lucide-react';
import { Note } from '@/hooks/useNotes';
import MarkdownRenderer from '@/components/chat/MarkdownRenderer';
import { Citation } from '@/types/message';
import { supabase } from '@/integrations/supabase/client';

interface NoteEditorProps {
  note?: Note;
  onSave: (title: string, content: string) => void;
  onDelete?: () => void;
  onCancel: () => void;
  isLoading?: boolean;
  onCitationClick?: (citation: Citation) => void;
}

const NoteEditor = ({ note, onSave, onDelete, onCancel, isLoading, onCitationClick }: NoteEditorProps) => {
  const [title, setTitle] = useState(note?.title || '');
  const [content, setContent] = useState(note?.content || '');
  // AI response notes should NEVER be in edit mode - they're read-only
  const [isEditing, setIsEditing] = useState(!note || note.source_type === 'user');
  const [isGeneratingTitle, setIsGeneratingTitle] = useState(false);

  useEffect(() => {
    setTitle(note?.title || '');
    setContent(note?.content || '');
    // AI response notes should NEVER be editable - they open in view mode
    setIsEditing(!note || note.source_type === 'user');
  }, [note]);

  const handleSave = () => {
    if (title.trim() && content.trim()) {
      onSave(title.trim(), content.trim());
    }
  };

  const handleEdit = () => {
    // Only allow editing of user notes, not AI responses
    if (note?.source_type === 'ai_response') {
      console.log('NoteEditor: Cannot edit AI response note');
      return;
    }
    setIsEditing(true);
  };

  const handleCancelEdit = () => {
    if (note) {
      setTitle(note.title);
      setContent(note.content);
      // AI response notes should return to view mode, user notes can be cancelled
      setIsEditing(note.source_type === 'ai_response' ? false : false);
    } else {
      onCancel();
    }
  };

  const handleGenerateTitle = async () => {
    if (!note || note.source_type !== 'ai_response') return;
    
    setIsGeneratingTitle(true);
    try {
      const { data, error } = await supabase.functions.invoke('generate-note-title', {
        body: { content: note.content }
      });
      
      if (error) throw error;
      
      if (data?.title) {
        setTitle(data.title);
      }
    } catch (error) {
      console.error('Error generating title:', error);
    } finally {
      setIsGeneratingTitle(false);
    }
  };

  // Parse AI response content if it's structured
  const parseContent = (contentStr: string) => {
    try {
      const parsed = JSON.parse(contentStr);
      if (parsed.segments && parsed.citations) {
        return parsed;
      }
    } catch (e) {
      // Not JSON, return as string
    }
    return contentStr;
  };

  const isAIResponse = note?.source_type === 'ai_response';
  const parsedContent = isAIResponse ? parseContent(content) : content;

  if (!isEditing && note) {
    // View mode for existing notes
    return (
      <div className="flex flex-col h-full">
        {/* Header */}
        <div className="p-4 border-b border-gray-200 flex-shrink-0">
          <div className="flex items-center justify-between mb-4">
            <h3 className="font-medium text-gray-900">
              {isAIResponse ? 'AI Response' : 'Note'}
            </h3>
            <div className="flex items-center space-x-2">
              {!isAIResponse && (
                <Button variant="ghost" size="sm" onClick={handleEdit}>
                  Edit
                </Button>
              )}
              <Button variant="ghost" size="sm" onClick={onCancel}>
                <X className="h-4 w-4" />
              </Button>
            </div>
          </div>
          
          <h2 className="text-lg font-semibold text-gray-900">{title}</h2>
        </div>

        {/* Content */}
        <div className="flex-1 p-4 overflow-auto">
          {isAIResponse && typeof parsedContent === 'object' ? (
            <MarkdownRenderer 
              content={parsedContent}
              className="prose max-w-none"
              onCitationClick={onCitationClick}
            />
          ) : (
            <div className="whitespace-pre-wrap text-gray-700">{typeof parsedContent === 'string' ? parsedContent : content}</div>
          )}
        </div>

        {/* Footer */}
        <div className="p-4 border-t border-gray-200 flex-shrink-0">
          <div className="flex justify-between">
            <div>
              {note && onDelete && (
                <Button 
                  variant="ghost" 
                  size="sm" 
                  onClick={onDelete}
                  disabled={isLoading}
                  className="text-red-600 hover:text-red-700"
                >
                  <Trash2 className="h-4 w-4 mr-2" />
                  Delete
                </Button>
              )}
            </div>
            <div className="text-xs text-gray-500">
              {note?.created_at && new Date(note.created_at).toLocaleDateString()}
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Edit mode (only for user notes or new notes)
  return (
    <div className="flex flex-col h-full">
      {/* Header */}
      <div className="p-4 border-b border-gray-200 flex-shrink-0">
        <div className="flex items-center justify-between mb-4">
          <h3 className="font-medium text-gray-900">
            {note ? 'Edit Note' : 'New Note'}
          </h3>
          <Button variant="ghost" size="sm" onClick={handleCancelEdit}>
            <X className="h-4 w-4" />
          </Button>
        </div>
        
        <div className="flex space-x-2 mb-4">
          <Input
            placeholder="Note title"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            className="flex-1"
          />
          {isAIResponse && (
            <Button 
              variant="outline" 
              size="sm"
              onClick={handleGenerateTitle}
              disabled={isGeneratingTitle}
            >
              <Wand2 className="h-4 w-4 mr-2" />
              {isGeneratingTitle ? 'Generating...' : 'Generate Title'}
            </Button>
          )}
        </div>
      </div>

      {/* Content */}
      <div className="flex-1 p-4 overflow-hidden">
        <Textarea
          placeholder="Write your note here..."
          value={content}
          onChange={(e) => setContent(e.target.value)}
          className="w-full h-full resize-none border-0 focus-visible:ring-0 p-0"
        />
      </div>

      {/* Footer */}
      <div className="p-4 border-t border-gray-200 flex-shrink-0">
        <div className="flex justify-between">
          <div>
            {note && onDelete && !isAIResponse && (
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={onDelete}
                disabled={isLoading}
                className="text-red-600 hover:text-red-700"
              >
                <Trash2 className="h-4 w-4 mr-2" />
                Delete
              </Button>
            )}
          </div>
          <Button 
            onClick={handleSave}
            disabled={!title.trim() || !content.trim() || isLoading}
            size="sm"
          >
            <Save className="h-4 w-4 mr-2" />
            {isLoading ? 'Saving...' : 'Save'}
          </Button>
        </div>
      </div>
    </div>
  );
};

export default NoteEditor;
</file>

<file path="src/components/notebook/PasteTextDialog.tsx">
import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Copy } from 'lucide-react';

interface PasteTextDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSubmit: (title: string, content: string) => void;
}

const PasteTextDialog = ({ open, onOpenChange, onSubmit }: PasteTextDialogProps) => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!content.trim()) return;

    setIsLoading(true);
    try {
      await onSubmit(title.trim() || 'Pasted Text', content.trim());
      setTitle('');
      setContent('');
      onOpenChange(false);
    } catch (error) {
      console.error('Error adding text source:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handlePasteFromClipboard = async () => {
    try {
      const text = await navigator.clipboard.readText();
      setContent(text);
    } catch (error) {
      console.error('Failed to read clipboard:', error);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-2xl max-h-[80vh]">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Copy className="h-5 w-5 text-gray-600" />
            <span>Add Text Source</span>
          </DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="text-title">Title (optional)</Label>
            <Input
              id="text-title"
              placeholder="Enter a title for this text..."
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <Label htmlFor="text-content">Content</Label>
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={handlePasteFromClipboard}
              >
                <Copy className="h-4 w-4 mr-2" />
                Paste from clipboard
              </Button>
            </div>
            <Textarea
              id="text-content"
              placeholder="Paste or type your text here..."
              value={content}
              onChange={(e) => setContent(e.target.value)}
              rows={12}
              required
              className="min-h-[300px]"
            />
            <p className="text-xs text-gray-500">
              {content.length} characters
            </p>
          </div>

          <div className="flex space-x-2 pt-4">
            <Button
              type="button"
              variant="outline"
              className="flex-1"
              onClick={() => onOpenChange(false)}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              className="flex-1"
              disabled={!content.trim() || isLoading}
            >
              {isLoading ? 'Adding...' : 'Add Source'}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default PasteTextDialog;
</file>

<file path="src/components/notebook/RenameSourceDialog.tsx">
import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useSourceUpdate } from '@/hooks/useSourceUpdate';

interface RenameSourceDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  source: any;
  notebookId?: string;
}

const RenameSourceDialog = ({ open, onOpenChange, source, notebookId }: RenameSourceDialogProps) => {
  const [title, setTitle] = useState('');
  const { updateSource, isUpdating } = useSourceUpdate();

  useEffect(() => {
    if (source && open) {
      setTitle(source.title);
    }
  }, [source, open]);

  const handleSave = async () => {
    if (!source || !title.trim()) return;

    await updateSource({
      sourceId: source.id,
      title: title.trim(),
    });

    onOpenChange(false);
    setTitle('');
  };

  const handleCancel = () => {
    onOpenChange(false);
    setTitle('');
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Rename {source?.title}?</DialogTitle>
          <DialogDescription>
            Enter a new name for this source.
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="grid gap-2">
            <Label htmlFor="source-name">Source Name *</Label>
            <Input
              id="source-name"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Enter source name"
            />
          </div>
        </div>
        <DialogFooter>
          <Button variant="outline" onClick={handleCancel}>
            Cancel
          </Button>
          <Button 
            onClick={handleSave}
            disabled={!title.trim() || isUpdating}
          >
            {isUpdating ? 'Saving...' : 'Save'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default RenameSourceDialog;
</file>

<file path="src/components/notebook/SaveToNoteButton.tsx">
import React from 'react';
import { Button } from '@/components/ui/button';
import { FileText } from 'lucide-react';
import { useNotes } from '@/hooks/useNotes';

interface SaveToNoteButtonProps {
  content: string | { segments: any[]; citations: any[] };
  notebookId?: string;
  onSaved?: () => void;
}

const SaveToNoteButton = ({ content, notebookId, onSaved }: SaveToNoteButtonProps) => {
  const { createNote, isCreating } = useNotes(notebookId);

  const handleSaveToNote = () => {
    if (!notebookId) return;
    
    console.log('SaveToNoteButton: Saving content:', content);
    console.log('SaveToNoteButton: Content type:', typeof content);
    console.log('SaveToNoteButton: Is object with segments:', typeof content === 'object' && content && 'segments' in content);
    
    // Handle both string content and enhanced content with citations
    let contentText: string;
    let title: string;
    let source_type: 'user' | 'ai_response';
    let extracted_text: string | undefined;
    
    // Check if this is an AI response with structured content (object with segments)
    const isAIResponse = typeof content === 'object' && content && 'segments' in content && Array.isArray(content.segments);
    
    if (isAIResponse) {
      console.log('SaveToNoteButton: Detected AI response with segments');
      // For AI responses with citations, save the structured content as JSON
      contentText = JSON.stringify(content);
      // Generate title from the first segment's text
      const firstSegmentText = content.segments[0]?.text || 'AI Response';
      title = firstSegmentText.length > 50 ? firstSegmentText.substring(0, 47) + '...' : firstSegmentText;
      source_type = 'ai_response';
      
      // Extract text for preview from first few segments
      extracted_text = content.segments
        .slice(0, 3)
        .map((segment: any) => segment.text)
        .join(' ')
        .substring(0, 200);
    } else {
      console.log('SaveToNoteButton: Detected user message');
      // For simple string content (typically user messages)
      const contentString = typeof content === 'string' ? content : String(content);
      contentText = contentString;
      const firstLine = contentString.split('\n')[0];
      title = firstLine.length > 50 ? firstLine.substring(0, 47) + '...' : firstLine;
      source_type = 'user';
      extracted_text = undefined; // User notes don't need extracted text
    }
    
    console.log('SaveToNoteButton: Final source_type:', source_type);
    console.log('SaveToNoteButton: Final title:', title);
    
    createNote({ title, content: contentText, source_type, extracted_text });
    onSaved?.();
  };

  if (!notebookId) return null;

  return (
    <Button
      variant="ghost"
      size="sm"
      onClick={handleSaveToNote}
      disabled={isCreating}
      className="flex items-center space-x-1 text-gray-600 hover:text-gray-800"
    >
      <FileText className="h-3 w-3" />
      <span className="text-xs">{isCreating ? 'Saving...' : 'Save to note'}</span>
    </Button>
  );
};

export default SaveToNoteButton;
</file>

<file path="src/components/notebook/WebsiteUrlInput.tsx">
import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Globe } from 'lucide-react';

interface WebsiteUrlInputProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSubmit: (url: string) => void;
}

const WebsiteUrlInput = ({ open, onOpenChange, onSubmit }: WebsiteUrlInputProps) => {
  const [url, setUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!url.trim()) return;

    setIsLoading(true);
    try {
      await onSubmit(url.trim());
      setUrl('');
      onOpenChange(false);
    } catch (error) {
      console.error('Error adding website source:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Globe className="h-5 w-5 text-blue-600" />
            <span>Add Website</span>
          </DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="website-url">Website URL</Label>
            <Input
              id="website-url"
              type="url"
              placeholder="https://example.com"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              required
            />
            <p className="text-xs text-gray-500">
              Enter the URL of the website you want to add as a source
            </p>
          </div>

          <div className="flex space-x-2 pt-4">
            <Button
              type="button"
              variant="outline"
              className="flex-1"
              onClick={() => onOpenChange(false)}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              className="flex-1"
              disabled={!url.trim() || isLoading}
            >
              {isLoading ? 'Adding...' : 'Add Source'}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default WebsiteUrlInput;
</file>

<file path="src/components/notebook/YouTubeUrlInput.tsx">
import React, { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Youtube } from 'lucide-react';

interface YouTubeUrlInputProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onSubmit: (url: string) => void;
}

const YouTubeUrlInput = ({ open, onOpenChange, onSubmit }: YouTubeUrlInputProps) => {
  const [url, setUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!url.trim()) return;

    setIsLoading(true);
    try {
      await onSubmit(url.trim());
      setUrl('');
      onOpenChange(false);
    } catch (error) {
      console.error('Error adding YouTube source:', error);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center space-x-2">
            <Youtube className="h-5 w-5 text-red-600" />
            <span>Add YouTube Video</span>
          </DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="space-y-2">
            <Label htmlFor="youtube-url">YouTube URL</Label>
            <Input
              id="youtube-url"
              type="url"
              placeholder="https://www.youtube.com/watch?v=..."
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              required
            />
            <p className="text-xs text-gray-500">
              Paste the full YouTube video URL
            </p>
          </div>

          <div className="flex space-x-2 pt-4">
            <Button
              type="button"
              variant="outline"
              className="flex-1"
              onClick={() => onOpenChange(false)}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              className="flex-1"
              disabled={!url.trim() || isLoading}
            >
              {isLoading ? 'Adding...' : 'Add Source'}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default YouTubeUrlInput;
</file>

<file path="src/components/profile/UserProfileDialog.tsx">
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Separator } from '@/components/ui/separator';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { 
  User, 
  MapPin, 
  Phone, 
  Mail, 
  Calendar,
  Wheat,
  Globe,
  Edit,
  Save,
  X,
  Sprout,
  Tractor
} from 'lucide-react';
import { useAuth } from '@/features/authentication';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { COMMON_CROPS_TANZANIA, TANZANIA_REGIONS } from '@/utils/agricultureTemplates';

interface UserProfileDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

const UserProfileDialog = ({ open, onOpenChange }: UserProfileDialogProps) => {
  const { user, profile, refreshProfile } = useAuth();
  const { toast } = useToast();
  const [loading, setLoading] = useState(false);
  const [editing, setEditing] = useState(false);
  const [formData, setFormData] = useState({
    full_name: '',
    farm_name: '',
    farm_location: '',
    farm_size: 0,
    farm_size_unit: 'hectares',
    primary_crops: [] as string[],
    farming_experience: 0,
    farming_type: 'mixed',
    region: '',
    user_role: 'farmer',
    phone_number: '',
    preferred_language: 'english'
  });

  // Initialize form data when profile changes
  useEffect(() => {
    if (profile) {
      setFormData({
        full_name: profile.full_name || '',
        farm_name: profile.farm_name || '',
        farm_location: profile.farm_location || '',
        farm_size: profile.farm_size || 0,
        farm_size_unit: profile.farm_size_unit || 'hectares',
        primary_crops: profile.primary_crops || [],
        farming_experience: profile.farming_experience || 0,
        farming_type: profile.farming_type || 'mixed',
        region: profile.region || '',
        user_role: profile.user_role || 'farmer',
        phone_number: profile.phone_number || '',
        preferred_language: profile.preferred_language || 'english'
      });
    }
  }, [profile]);

  const updateFormData = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const toggleCrop = (crop: string) => {
    setFormData(prev => ({
      ...prev,
      primary_crops: prev.primary_crops.includes(crop)
        ? prev.primary_crops.filter(c => c !== crop)
        : [...prev.primary_crops, crop]
    }));
  };

  const handleSave = async () => {
    if (!user) {
      toast({
        title: "Error",
        description: "User not authenticated",
        variant: "destructive"
      });
      return;
    }

    setLoading(true);
    try {
      const { error } = await supabase
        .from('profiles')
        .update({
          ...formData,
          updated_at: new Date().toISOString()
        })
        .eq('id', user.id);

      if (error) throw error;

      toast({
        title: "Profile Updated",
        description: "Your profile information has been saved successfully.",
      });

      await refreshProfile();
      setEditing(false);
    } catch (error) {
      console.error('Profile update error:', error);
      toast({
        title: "Error",
        description: "Failed to update profile. Please try again.",
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    // Reset form data to original profile values
    if (profile) {
      setFormData({
        full_name: profile.full_name || '',
        farm_name: profile.farm_name || '',
        farm_location: profile.farm_location || '',
        farm_size: profile.farm_size || 0,
        farm_size_unit: profile.farm_size_unit || 'hectares',
        primary_crops: profile.primary_crops || [],
        farming_experience: profile.farming_experience || 0,
        farming_type: profile.farming_type || 'mixed',
        region: profile.region || '',
        user_role: profile.user_role || 'farmer',
        phone_number: profile.phone_number || '',
        preferred_language: profile.preferred_language || 'english'
      });
    }
    setEditing(false);
  };

  if (!profile) {
    return null;
  }

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Avatar className="h-12 w-12">
                <AvatarFallback className="bg-green-100 text-green-700 text-lg font-semibold">
                  {(formData.full_name || 'U').charAt(0).toUpperCase()}
                </AvatarFallback>
              </Avatar>
              <div>
                <DialogTitle className="text-xl">User Profile</DialogTitle>
                <DialogDescription>
                  Manage your agricultural profile and farm information
                </DialogDescription>
              </div>
            </div>
            <Button
              variant={editing ? "outline" : "secondary"}
              onClick={() => setEditing(!editing)}
              disabled={loading}
            >
              {editing ? <X className="h-4 w-4 mr-2" /> : <Edit className="h-4 w-4 mr-2" />}
              {editing ? 'Cancel' : 'Edit Profile'}
            </Button>
          </div>
        </DialogHeader>

        <Tabs defaultValue="personal" className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="personal">Personal Info</TabsTrigger>
            <TabsTrigger value="farm">Farm Details</TabsTrigger>
            <TabsTrigger value="preferences">Preferences</TabsTrigger>
          </TabsList>

          <TabsContent value="personal" className="space-y-6 mt-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <User className="h-5 w-5" />
                  <span>Personal Information</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="full_name">Full Name</Label>
                    {editing ? (
                      <Input
                        id="full_name"
                        value={formData.full_name}
                        onChange={(e) => updateFormData('full_name', e.target.value)}
                        placeholder="Enter your full name"
                      />
                    ) : (
                      <div className="p-2 bg-gray-50 rounded border text-sm">
                        {formData.full_name || 'Not provided'}
                      </div>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="email">Email Address</Label>
                    <div className="p-2 bg-gray-50 rounded border text-sm text-gray-600">
                      <Mail className="h-4 w-4 inline mr-2" />
                      {user?.email || 'Not available'}
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="phone_number">Phone Number</Label>
                    {editing ? (
                      <Input
                        id="phone_number"
                        value={formData.phone_number}
                        onChange={(e) => updateFormData('phone_number', e.target.value)}
                        placeholder="+255 123 456 789"
                      />
                    ) : (
                      <div className="p-2 bg-gray-50 rounded border text-sm">
                        <Phone className="h-4 w-4 inline mr-2" />
                        {formData.phone_number || 'Not provided'}
                      </div>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="user_role">Role</Label>
                    {editing ? (
                      <Select value={formData.user_role} onValueChange={(value) => updateFormData('user_role', value)}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="farmer">Farmer</SelectItem>
                          <SelectItem value="extension_officer">Extension Officer</SelectItem>
                          <SelectItem value="researcher">Researcher</SelectItem>
                          <SelectItem value="cooperative_member">Cooperative Member</SelectItem>
                          <SelectItem value="agribusiness">Agribusiness</SelectItem>
                        </SelectContent>
                      </Select>
                    ) : (
                      <div className="p-2 bg-gray-50 rounded border text-sm">
                        {formData.user_role?.replace('_', ' ') || 'Not specified'}
                      </div>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="farming_experience">Years of Experience</Label>
                    {editing ? (
                      <Input
                        id="farming_experience"
                        type="number"
                        value={formData.farming_experience}
                        onChange={(e) => updateFormData('farming_experience', parseInt(e.target.value) || 0)}
                        min="0"
                      />
                    ) : (
                      <div className="p-2 bg-gray-50 rounded border text-sm">
                        <Calendar className="h-4 w-4 inline mr-2" />
                        {formData.farming_experience} years
                      </div>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="farm" className="space-y-6 mt-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Tractor className="h-5 w-5" />
                  <span>Farm Information</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="farm_name">Farm Name</Label>
                    {editing ? (
                      <Input
                        id="farm_name"
                        value={formData.farm_name}
                        onChange={(e) => updateFormData('farm_name', e.target.value)}
                        placeholder="Enter farm name"
                      />
                    ) : (
                      <div className="p-2 bg-gray-50 rounded border text-sm">
                        {formData.farm_name || 'Not provided'}
                      </div>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="farm_location">Farm Location</Label>
                    {editing ? (
                      <Input
                        id="farm_location"
                        value={formData.farm_location}
                        onChange={(e) => updateFormData('farm_location', e.target.value)}
                        placeholder="Village/Ward name"
                      />
                    ) : (
                      <div className="p-2 bg-gray-50 rounded border text-sm">
                        <MapPin className="h-4 w-4 inline mr-2" />
                        {formData.farm_location || 'Not provided'}
                      </div>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="region">Region</Label>
                    {editing ? (
                      <Select value={formData.region} onValueChange={(value) => updateFormData('region', value)}>
                        <SelectTrigger>
                          <SelectValue placeholder="Select region" />
                        </SelectTrigger>
                        <SelectContent>
                          {TANZANIA_REGIONS.map(region => (
                            <SelectItem key={region} value={region}>
                              {region.replace('_', ' ').toUpperCase()}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    ) : (
                      <div className="p-2 bg-gray-50 rounded border text-sm">
                        {formData.region?.replace('_', ' ').toUpperCase() || 'Not specified'}
                      </div>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="farming_type">Farming Type</Label>
                    {editing ? (
                      <Select value={formData.farming_type} onValueChange={(value) => updateFormData('farming_type', value)}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="subsistence">Subsistence Farming</SelectItem>
                          <SelectItem value="commercial">Commercial Farming</SelectItem>
                          <SelectItem value="mixed">Mixed Farming</SelectItem>
                          <SelectItem value="organic">Organic Farming</SelectItem>
                          <SelectItem value="livestock">Livestock</SelectItem>
                          <SelectItem value="aquaculture">Aquaculture</SelectItem>
                          <SelectItem value="horticulture">Horticulture</SelectItem>
                          <SelectItem value="agroforestry">Agroforestry</SelectItem>
                        </SelectContent>
                      </Select>
                    ) : (
                      <div className="p-2 bg-gray-50 rounded border text-sm">
                        {formData.farming_type?.replace('_', ' ') || 'Not specified'}
                      </div>
                    )}
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="farm_size">Farm Size</Label>
                    {editing ? (
                      <Input
                        id="farm_size"
                        type="number"
                        value={formData.farm_size}
                        onChange={(e) => updateFormData('farm_size', parseFloat(e.target.value) || 0)}
                        min="0"
                        step="0.1"
                      />
                    ) : (
                      <div className="p-2 bg-gray-50 rounded border text-sm">
                        {formData.farm_size || 'Not specified'}
                      </div>
                    )}
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="farm_size_unit">Unit</Label>
                    {editing ? (
                      <Select value={formData.farm_size_unit} onValueChange={(value) => updateFormData('farm_size_unit', value)}>
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="hectares">Hectares</SelectItem>
                          <SelectItem value="acres">Acres</SelectItem>
                          <SelectItem value="square_meters">Square Meters</SelectItem>
                        </SelectContent>
                      </Select>
                    ) : (
                      <div className="p-2 bg-gray-50 rounded border text-sm">
                        {formData.farm_size_unit || 'hectares'}
                      </div>
                    )}
                  </div>
                </div>

                <Separator />

                <div className="space-y-4">
                  <Label className="flex items-center space-x-2">
                    <Sprout className="h-4 w-4" />
                    <span>Primary Crops</span>
                  </Label>
                  
                  {editing ? (
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                      {COMMON_CROPS_TANZANIA.map(crop => (
                        <div
                          key={crop}
                          className={`p-3 border rounded-lg cursor-pointer transition-all ${
                            formData.primary_crops.includes(crop)
                              ? 'border-green-500 bg-green-50'
                              : 'border-gray-200 hover:border-gray-300'
                          }`}
                          onClick={() => toggleCrop(crop)}
                        >
                          <div className="flex items-center space-x-2">
                            <Checkbox
                              checked={formData.primary_crops.includes(crop)}
                              readOnly
                            />
                            <span className="text-sm">
                              {crop.replace('_', ' ').toUpperCase()}
                            </span>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="flex flex-wrap gap-2">
                      {formData.primary_crops.length > 0 ? (
                        formData.primary_crops.map(crop => (
                          <Badge key={crop} variant="secondary" className="bg-green-100 text-green-800">
                            {crop.replace('_', ' ').toUpperCase()}
                          </Badge>
                        ))
                      ) : (
                        <span className="text-gray-500 text-sm">No crops selected</span>
                      )}
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="preferences" className="space-y-6 mt-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Globe className="h-5 w-5" />
                  <span>Preferences</span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="preferred_language">Preferred Language</Label>
                  {editing ? (
                    <Select value={formData.preferred_language} onValueChange={(value) => updateFormData('preferred_language', value)}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="english">English</SelectItem>
                        <SelectItem value="swahili">Kiswahili</SelectItem>
                        <SelectItem value="both">Both</SelectItem>
                      </SelectContent>
                    </Select>
                  ) : (
                    <div className="p-2 bg-gray-50 rounded border text-sm">
                      {formData.preferred_language === 'both' ? 'English & Kiswahili' : 
                       formData.preferred_language === 'swahili' ? 'Kiswahili' : 'English'}
                    </div>
                  )}
                </div>

                <Separator />

                <div className="space-y-2">
                  <Label>Account Information</Label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                    <div className="p-3 bg-gray-50 rounded border">
                      <span className="font-medium">Member since:</span><br />
                      {profile.created_at ? new Date(profile.created_at).toLocaleDateString() : 'Unknown'}
                    </div>
                    <div className="p-3 bg-gray-50 rounded border">
                      <span className="font-medium">Last updated:</span><br />
                      {profile.updated_at ? new Date(profile.updated_at).toLocaleDateString() : 'Never'}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {editing && (
          <DialogFooter className="mt-6">
            <Button variant="outline" onClick={handleCancel} disabled={loading}>
              Cancel
            </Button>
            <Button onClick={handleSave} disabled={loading}>
              {loading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                  Saving...
                </>
              ) : (
                <>
                  <Save className="h-4 w-4 mr-2" />
                  Save Changes
                </>
              )}
            </Button>
          </DialogFooter>
        )}
      </DialogContent>
    </Dialog>
  );
};

export default UserProfileDialog;
</file>

<file path="src/components/ui/accordion.tsx">
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger> & {
    chevronColor?: string;
  }
>(({ className, children, chevronColor, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown 
        className="h-4 w-4 shrink-0 transition-transform duration-200" 
        style={chevronColor ? { color: chevronColor } : {}}
      />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
</file>

<file path="src/components/ui/alert-dialog.tsx">
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
</file>

<file path="src/components/ui/alert.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
</file>

<file path="src/components/ui/AppHeader.tsx">
import React, { useState } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useTranslation } from 'react-i18next';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { User, LogOut, Settings, Wheat, Shield, Home, Cloud, Sprout, MessageCircle, BookOpen, ArrowLeft, Menu, X, Globe } from 'lucide-react';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from '@/components/ui/dropdown-menu';
import { useLogout } from '@/services/authService';
import { useAuth } from '@/features/authentication';
import Logo from '@/components/ui/Logo';
import UserProfileDialog from '@/components/profile/UserProfileDialog';
import { getRoleInfo, type UserRole } from '@/utils/permissions';

interface AppHeaderProps {
  title?: string;
  subtitle?: string;
  showBackButton?: boolean;
  onBackClick?: () => void;
}

const AppHeader = ({ title, subtitle, showBackButton = false, onBackClick }: AppHeaderProps) => {
  const navigate = useNavigate();
  const location = useLocation();
  const { t, i18n } = useTranslation();
  const { logout } = useLogout();
  const { profile } = useAuth();
  const [showProfileDialog, setShowProfileDialog] = useState(false);
  const [showMobileMenu, setShowMobileMenu] = useState(false);

  const languages = [
    { code: 'ko', name: t('language.korean'), flag: '🇰🇷' },
    { code: 'en', name: t('language.english'), flag: '🇺🇸' },
    { code: 'sw', name: t('language.swahili'), flag: '🇹🇿' },
    { code: 'fr', name: t('language.french'), flag: '🇫🇷' },
    { code: 'ne', name: t('language.nepali'), flag: '🇳🇵' },
    { code: 'uz', name: t('language.uzbek'), flag: '🇺🇿' }
  ];

  const changeLanguage = async (langCode: string) => {
    try {
      await i18n.changeLanguage(langCode);
      // Force re-render to apply language changes
      window.location.reload();
    } catch (error) {
      console.error('Error changing language:', error);
    }
  };

  const getUserInitial = () => {
    if (profile?.full_name) {
      return profile.full_name.charAt(0).toUpperCase();
    }
    if (profile?.email) {
      return profile.email.charAt(0).toUpperCase();
    }
    return 'U';
  };

  const getRoleBadge = () => {
    if (!profile?.user_role) return null;
    const roleInfo = getRoleInfo(profile.user_role as UserRole);
    return (
      <Badge variant="secondary" className={`text-xs bg-${roleInfo.color}-100 text-${roleInfo.color}-800`}>
        {roleInfo.icon} {roleInfo.name}
      </Badge>
    );
  };

  const navigationItems = [
    { path: '/', icon: Home, label: t('navigation.dashboard'), color: 'text-blue-600' },
    { path: '/weather', icon: Cloud, label: t('navigation.weather'), color: 'text-sky-600' },
    { path: '/crops', icon: Sprout, label: t('navigation.crops'), color: 'text-green-600' },
    { path: '/chat', icon: MessageCircle, label: t('navigation.chat'), color: 'text-purple-600' },
    { path: '/knowledge', icon: BookOpen, label: t('navigation.knowledge'), color: 'text-orange-600' },
  ];

  const handleBackClick = () => {
    if (onBackClick) {
      onBackClick();
    } else {
      navigate(-1);
    }
  };

  const getCurrentPageTitle = () => {
    if (title) return title;
    
    const currentNav = navigationItems.find(item => item.path === location.pathname);
    return currentNav?.label || 'AI4AgriWeather';
  };

  const getCurrentPageSubtitle = () => {
    if (subtitle) return subtitle;
    
    const currentNav = navigationItems.find(item => item.path === location.pathname);
    if (currentNav) {
      switch (currentNav.path) {
        case '/': return t('dashboard.subtitle');
        case '/weather': return t('weather.subtitle');
        case '/crops': return t('crops.subtitle');
        case '/chat': return t('chat.subtitle');
        case '/knowledge': return t('knowledge.subtitle');
        default: return 'Smart Farm Assistant';
      }
    }
    return 'Smart Farm Assistant';
  };

  return (
    <>
      <header className="bg-white border-b px-4 sm:px-6 py-4 sticky top-0 z-50">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            {showBackButton && (
              <Button 
                variant="ghost" 
                size="sm" 
                onClick={handleBackClick}
                className="p-2 hover:bg-gray-100"
              >
                <ArrowLeft className="h-4 w-4" />
              </Button>
            )}
            
            <Logo />
            <div>
              <h1 className="text-lg sm:text-xl font-medium text-gray-900">
                {getCurrentPageTitle()}
              </h1>
              <p className="text-xs sm:text-sm text-gray-500">
                {getCurrentPageSubtitle()}
              </p>
            </div>
          </div>
          
          <div className="flex items-center space-x-2 sm:space-x-4">
            {/* Desktop Navigation */}
            <nav className="hidden lg:flex items-center space-x-1">
              {navigationItems.map((item) => {
                const Icon = item.icon;
                const isActive = location.pathname === item.path;
                return (
                  <Button
                    key={item.path}
                    variant={isActive ? "secondary" : "ghost"}
                    size="sm"
                    onClick={() => navigate(item.path)}
                    className={`flex items-center space-x-2 ${isActive ? 'bg-gray-100' : 'hover:bg-gray-50'}`}
                  >
                    <Icon className={`h-4 w-4 ${isActive ? item.color : 'text-gray-600'}`} />
                    <span className={`text-sm ${isActive ? 'font-medium text-gray-900' : 'text-gray-600'}`}>
                      {item.label}
                    </span>
                  </Button>
                );
              })}
            </nav>

            {/* Language Selector */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="flex items-center space-x-1 px-2">
                  <Globe className="h-4 w-4" />
                  <span className="hidden sm:inline text-sm">
                    {languages.find(lang => lang.code === i18n.language)?.flag || '🌐'}
                  </span>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-48">
                <div className="px-2 py-1.5 text-sm font-medium text-gray-700">
                  {t('language.selectLanguage')}
                </div>
                <DropdownMenuSeparator />
                {languages.map((lang) => (
                  <DropdownMenuItem
                    key={lang.code}
                    onClick={() => changeLanguage(lang.code)}
                    className={`cursor-pointer ${
                      i18n.language === lang.code ? 'bg-gray-100 font-medium' : ''
                    }`}
                  >
                    <span className="mr-2">{lang.flag}</span>
                    {lang.name}
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>

            {/* Mobile Menu Button */}
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setShowMobileMenu(!showMobileMenu)}
              className="lg:hidden p-2"
            >
              {showMobileMenu ? <X className="h-4 w-4" /> : <Menu className="h-4 w-4" />}
            </Button>

            {/* User info display */}
            {profile && (
              <div className="hidden md:flex items-center space-x-3">
                <div className="text-right">
                  <div className="flex items-center space-x-2 justify-end">
                    <p className="text-sm font-medium text-gray-900">
                      {profile.full_name || 'User'}
                    </p>
                    {getRoleBadge()}
                  </div>
                  <p className="text-xs text-gray-500">
                    {profile.farm_name || profile.user_role?.replace('_', ' ') || 'Farmer'}
                  </p>
                </div>
                {profile.farm_location && (
                  <div className="flex items-center text-xs text-gray-500">
                    <Wheat className="h-3 w-3 mr-1" />
                    <span>{profile.farm_location}</span>
                  </div>
                )}
              </div>
            )}

            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="p-0">
                  <div className="w-8 h-8 sm:w-10 sm:h-10 bg-green-500 rounded-full flex items-center justify-center cursor-pointer hover:bg-green-600 transition-colors">
                    <span className="text-white font-medium text-sm">{getUserInitial()}</span>
                  </div>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56">
                <div className="px-2 py-1.5 text-sm">
                  <div className="font-medium">{profile?.full_name || 'User'}</div>
                  <div className="text-xs text-gray-500">{profile?.email}</div>
                </div>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={() => setShowProfileDialog(true)} className="cursor-pointer">
                  <Settings className="h-4 w-4 mr-2" />
                  {t('common.profileSettings')}
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={logout} className="cursor-pointer text-red-600 focus:text-red-600">
                  <LogOut className="h-4 w-4 mr-2" />
                  {t('common.logout')}
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>

        {/* Mobile Navigation Menu */}
        {showMobileMenu && (
          <div className="lg:hidden mt-4 pt-4 border-t">
            <nav className="grid grid-cols-2 gap-2">
              {navigationItems.map((item) => {
                const Icon = item.icon;
                const isActive = location.pathname === item.path;
                return (
                  <Button
                    key={item.path}
                    variant={isActive ? "secondary" : "ghost"}
                    size="sm"
                    onClick={() => {
                      navigate(item.path);
                      setShowMobileMenu(false);
                    }}
                    className={`flex items-center space-x-2 justify-start ${isActive ? 'bg-gray-100' : 'hover:bg-gray-50'}`}
                  >
                    <Icon className={`h-4 w-4 ${isActive ? item.color : 'text-gray-600'}`} />
                    <span className={`text-sm ${isActive ? 'font-medium text-gray-900' : 'text-gray-600'}`}>
                      {item.label}
                    </span>
                  </Button>
                );
              })}
            </nav>
          </div>
        )}
      </header>

      <UserProfileDialog 
        open={showProfileDialog} 
        onOpenChange={setShowProfileDialog} 
      />
    </>
  );
};

export default AppHeader;
</file>

<file path="src/components/ui/aspect-ratio.tsx">
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }
</file>

<file path="src/components/ui/avatar.tsx">
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
</file>

<file path="src/components/ui/badge.tsx">
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
</file>

<file path="src/components/ui/breadcrumb.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:size-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}
</file>

<file path="src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="src/components/ui/calendar.tsx">
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };
</file>

<file path="src/components/ui/card.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
</file>

<file path="src/components/ui/carousel.tsx">
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
</file>

<file path="src/components/ui/chart.tsx">
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
</file>

<file path="src/components/ui/checkbox.tsx">
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
</file>

<file path="src/components/ui/collapsible.tsx">
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
</file>

<file path="src/components/ui/command.tsx">
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
</file>

<file path="src/components/ui/context-menu.tsx">
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}
</file>

<file path="src/components/ui/dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="src/components/ui/drawer.tsx">
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}
</file>

<file path="src/components/ui/dropdown-menu.tsx">
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
</file>

<file path="src/components/ui/form.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
</file>

<file path="src/components/ui/hover-card.tsx">
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }
</file>

<file path="src/components/ui/input-otp.tsx">
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }
</file>

<file path="src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="src/components/ui/label.tsx">
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
</file>

<file path="src/components/ui/Logo.tsx">
import React from 'react';

interface LogoProps {
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

const Logo = ({ size = 'md', className = '' }: LogoProps) => {
  const sizeClasses = {
    sm: 'w-6 h-6',
    md: 'w-8 h-8', 
    lg: 'w-12 h-12'
  };

  const iconSizes = {
    sm: '16px',
    md: '20px',
    lg: '28px'
  };

  return (
    <div className={`${sizeClasses[size]} bg-black rounded-full flex items-center justify-center ${className}`}>
      <svg 
        xmlns="http://www.w3.org/2000/svg" 
        height={iconSizes[size]} 
        viewBox="0 -960 960 960" 
        width={iconSizes[size]} 
        fill="#FFFFFF"
      >
        <path d="M480-80q-33 0-56.5-23.5T400-160h160q0 33-23.5 56.5T480-80ZM320-200v-80h320v80H320Zm10-120q-69-41-109.5-110T180-580q0-125 87.5-212.5T480-880q125 0 212.5 87.5T780-580q0 81-40.5 150T630-320H330Zm24-80h252q45-32 69.5-79T700-580q0-92-64-156t-156-64q-92 0-156 64t-64 156q0 54 24.5 101t69.5 79Zm126 0Z" />
      </svg>
    </div>
  );
};

export default Logo;
</file>

<file path="src/components/ui/menubar.tsx">
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
</file>

<file path="src/components/ui/navigation-menu.tsx">
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}
</file>

<file path="src/components/ui/pagination.tsx">
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}
</file>

<file path="src/components/ui/popover.tsx">
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
</file>

<file path="src/components/ui/progress.tsx">
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
</file>

<file path="src/components/ui/radio-group.tsx">
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
</file>

<file path="src/components/ui/resizable.tsx">
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }
</file>

<file path="src/components/ui/scroll-area.tsx">
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
</file>

<file path="src/components/ui/select.tsx">
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
</file>

<file path="src/components/ui/separator.tsx">
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
</file>

<file path="src/components/ui/sheet.tsx">
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"
import * as React from "react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
  VariantProps<typeof sheetVariants> { }

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet, SheetClose,
  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger
}
</file>

<file path="src/components/ui/sidebar.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-sidebar-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
</file>

<file path="src/components/ui/skeleton.tsx">
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
</file>

<file path="src/components/ui/slider.tsx">
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
</file>

<file path="src/components/ui/sonner.tsx">
import { useTheme } from "next-themes"
import { Toaster as Sonner, toast } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster, toast }
</file>

<file path="src/components/ui/switch.tsx">
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
</file>

<file path="src/components/ui/table.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
</file>

<file path="src/components/ui/tabs.tsx">
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
</file>

<file path="src/components/ui/textarea.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }
</file>

<file path="src/components/ui/toast.tsx">
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
</file>

<file path="src/components/ui/toaster.tsx">
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
</file>

<file path="src/components/ui/toggle-group.tsx">
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }
</file>

<file path="src/components/ui/toggle.tsx">
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }
</file>

<file path="src/components/ui/tooltip.tsx">
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
</file>

<file path="src/components/ui/use-toast.ts">
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };
</file>

<file path="src/hooks/use-mobile.tsx">
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
</file>

<file path="src/hooks/use-toast.ts">
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
</file>

<file path="src/hooks/useAudioOverview.tsx">
import { useState, useEffect } from 'react';
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

export const useAudioOverview = (notebookId?: string) => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [generationStatus, setGenerationStatus] = useState<string | null>(null);
  const [isAutoRefreshing, setIsAutoRefreshing] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Set up realtime subscription for notebook updates
  useEffect(() => {
    if (!notebookId) return;

    const channel = supabase
      .channel('notebook-audio-updates')
      .on(
        'postgres_changes',
        {
          event: 'UPDATE',
          schema: 'public',
          table: 'notebooks',
          filter: `id=eq.${notebookId}`
        },
        (payload) => {
          console.log('Notebook updated:', payload);
          const newData = payload.new as any;
          
          if (newData.audio_overview_generation_status) {
            setGenerationStatus(newData.audio_overview_generation_status);
            
            if (newData.audio_overview_generation_status === 'completed' && newData.audio_overview_url) {
              setIsGenerating(false);
              toast({
                title: "Audio Overview Ready!",
                description: "Your deep dive conversation is ready to play!",
              });
              
              // Invalidate queries to refresh the UI
              queryClient.invalidateQueries({ queryKey: ['notebooks'] });
            } else if (newData.audio_overview_generation_status === 'failed') {
              setIsGenerating(false);
              toast({
                title: "Generation Failed",
                description: "Failed to generate audio overview. Please try again.",
                variant: "destructive",
              });
            }
          }
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [notebookId, toast, queryClient]);

  const generateAudioOverview = useMutation({
    mutationFn: async (notebookId: string) => {
      setIsGenerating(true);
      setGenerationStatus('generating');
      
      const { data, error } = await supabase.functions.invoke('generate-audio-overview', {
        body: { notebookId }
      });

      if (error) {
        console.error('Error starting audio generation:', error);
        throw error;
      }

      return data;
    },
    onSuccess: (data, notebookId) => {
      console.log('Audio generation started successfully:', data);
    },
    onError: (error) => {
      console.error('Audio generation failed to start:', error);
      setIsGenerating(false);
      setGenerationStatus(null);
      
      toast({
        title: "Failed to Start Generation",
        description: error.message || "Failed to start audio generation. Please try again.",
        variant: "destructive",
      });
    }
  });

  const refreshAudioUrl = useMutation({
    mutationFn: async ({ notebookId, silent = false }: { notebookId: string; silent?: boolean }) => {
      if (!silent) {
        setIsAutoRefreshing(true);
      }

      const { data, error } = await supabase.functions.invoke('refresh-audio-url', {
        body: { notebookId }
      });

      if (error) {
        console.error('Error refreshing audio URL:', error);
        throw error;
      }

      return data;
    },
    onSuccess: (data, variables) => {
      console.log('Audio URL refreshed successfully:', data);
      // Invalidate queries to refresh the UI with new URL
      queryClient.invalidateQueries({ queryKey: ['notebooks'] });
      
      if (!variables.silent) {
        setIsAutoRefreshing(false);
      }
    },
    onError: (error, variables) => {
      console.error('Failed to refresh audio URL:', error);
      if (!variables.silent) {
        setIsAutoRefreshing(false);
        toast({
          title: "Failed to Refresh URL",
          description: "Unable to refresh the audio URL. Please try again.",
          variant: "destructive",
        });
      }
    }
  });

  const checkAudioExpiry = (expiresAt: string | null): boolean => {
    if (!expiresAt) return true;
    return new Date(expiresAt) <= new Date();
  };

  const autoRefreshIfExpired = async (notebookId: string, expiresAt: string | null) => {
    if (checkAudioExpiry(expiresAt) && !isAutoRefreshing && !refreshAudioUrl.isPending) {
      console.log('Audio URL expired, auto-refreshing...');
      try {
        await refreshAudioUrl.mutateAsync({ notebookId, silent: true });
      } catch (error) {
        console.error('Auto-refresh failed:', error);
      }
    }
  };

  return {
    generateAudioOverview: generateAudioOverview.mutate,
    refreshAudioUrl: (notebookId: string) => refreshAudioUrl.mutate({ notebookId }),
    autoRefreshIfExpired,
    isGenerating: isGenerating || generateAudioOverview.isPending,
    isAutoRefreshing,
    generationStatus,
    checkAudioExpiry,
  };
};
</file>

<file path="src/hooks/useChatMessages.tsx">
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/features/authentication';
import { EnhancedChatMessage, Citation, MessageSegment } from '@/types/message';
import { useToast } from '@/hooks/use-toast';
import { useEffect } from 'react';

// Type for the expected message structure from n8n_chat_histories
interface N8nMessageFormat {
  type: 'human' | 'ai';
  content: string | {
    segments: Array<{ text: string; citation_id?: number }>;
    citations: Array<{
      citation_id: number;
      source_id: string;
      source_title: string;
      source_type: string;
      page_number?: number;
      chunk_index?: number;
      excerpt?: string;
    }>;
  };
  additional_kwargs?: any;
  response_metadata?: any;
  tool_calls?: any[];
  invalid_tool_calls?: any[];
}

// Type for the AI response structure from n8n
interface N8nAiResponseContent {
  output: Array<{
    text: string;
    citations?: Array<{
      chunk_index: number;
      chunk_source_id: string;
      chunk_lines_from: number;
      chunk_lines_to: number;
    }>;
  }>;
}

const transformMessage = (item: any, sourceMap: Map<string, any>): EnhancedChatMessage => {
  console.log('Processing item:', item);
  
  // Handle the message format based on your JSON examples
  let transformedMessage: EnhancedChatMessage['message'];
  
  // Check if message is an object and has the expected structure
  if (item.message && 
      typeof item.message === 'object' && 
      !Array.isArray(item.message) &&
      'type' in item.message && 
      'content' in item.message) {
    
    // Type assertion with proper checking
    const messageObj = item.message as unknown as N8nMessageFormat;
    
    // Check if this is an AI message with JSON content that needs parsing
    if (messageObj.type === 'ai' && typeof messageObj.content === 'string') {
      try {
        const parsedContent = JSON.parse(messageObj.content) as N8nAiResponseContent;
        
        if (parsedContent.output && Array.isArray(parsedContent.output)) {
          // Transform the parsed content into segments and citations
          const segments: MessageSegment[] = [];
          const citations: Citation[] = [];
          let citationIdCounter = 1;
          
          parsedContent.output.forEach((outputItem) => {
            // Add the text segment
            segments.push({
              text: outputItem.text,
              citation_id: outputItem.citations && outputItem.citations.length > 0 ? citationIdCounter : undefined
            });
            
            // Process citations if they exist
            if (outputItem.citations && outputItem.citations.length > 0) {
              outputItem.citations.forEach((citation) => {
                const sourceInfo = sourceMap.get(citation.chunk_source_id);
                citations.push({
                  citation_id: citationIdCounter,
                  source_id: citation.chunk_source_id,
                  source_title: sourceInfo?.title || 'Unknown Source',
                  source_type: sourceInfo?.type || 'pdf',
                  chunk_lines_from: citation.chunk_lines_from,
                  chunk_lines_to: citation.chunk_lines_to,
                  chunk_index: citation.chunk_index,
                  excerpt: `Lines ${citation.chunk_lines_from}-${citation.chunk_lines_to}`
                });
              });
              citationIdCounter++;
            }
          });
          
          transformedMessage = {
            type: 'ai',
            content: {
              segments,
              citations
            },
            additional_kwargs: messageObj.additional_kwargs,
            response_metadata: messageObj.response_metadata,
            tool_calls: messageObj.tool_calls,
            invalid_tool_calls: messageObj.invalid_tool_calls
          };
        } else {
          // Fallback for AI messages that don't match expected format
          transformedMessage = {
            type: 'ai',
            content: messageObj.content,
            additional_kwargs: messageObj.additional_kwargs,
            response_metadata: messageObj.response_metadata,
            tool_calls: messageObj.tool_calls,
            invalid_tool_calls: messageObj.invalid_tool_calls
          };
        }
      } catch (parseError) {
        console.log('Failed to parse AI content as JSON, treating as plain text:', parseError);
        // If parsing fails, treat as regular string content
        transformedMessage = {
          type: 'ai',
          content: messageObj.content,
          additional_kwargs: messageObj.additional_kwargs,
          response_metadata: messageObj.response_metadata,
          tool_calls: messageObj.tool_calls,
          invalid_tool_calls: messageObj.invalid_tool_calls
        };
      }
    } else {
      // Handle non-AI messages or AI messages that don't need parsing
      transformedMessage = {
        type: messageObj.type === 'human' ? 'human' : 'ai',
        content: messageObj.content || 'Empty message',
        additional_kwargs: messageObj.additional_kwargs,
        response_metadata: messageObj.response_metadata,
        tool_calls: messageObj.tool_calls,
        invalid_tool_calls: messageObj.invalid_tool_calls
      };
    }
  } else if (typeof item.message === 'string') {
    // Handle case where message is just a string
    transformedMessage = {
      type: 'human',
      content: item.message
    };
  } else {
    // Fallback for any other cases
    transformedMessage = {
      type: 'human',
      content: 'Unable to parse message'
    };
  }

  console.log('Transformed message:', transformedMessage);

  return {
    id: item.id,
    session_id: item.session_id,
    message: transformedMessage
  };
};

export const useChatMessages = (notebookId?: string) => {
  const { user } = useAuth();
  const queryClient = useQueryClient();
  const { toast } = useToast();

  const {
    data: messages = [],
    isLoading,
    error,
  } = useQuery({
    queryKey: ['chat-messages', notebookId],
    queryFn: async () => {
      if (!notebookId) return [];
      
      const { data, error } = await supabase
        .from('n8n_chat_histories')
        .select('*')
        .eq('session_id', notebookId)
        .order('id', { ascending: true });

      if (error) throw error;
      
      // Also fetch sources to get proper source titles
      const { data: sourcesData } = await supabase
        .from('sources')
        .select('id, title, type')
        .eq('notebook_id', notebookId);
      
      const sourceMap = new Map(sourcesData?.map(s => [s.id, s]) || []);
      
      console.log('Raw data from database:', data);
      console.log('Sources map:', sourceMap);
      
      // Transform the data to match our expected format
      return data.map((item) => transformMessage(item, sourceMap));
    },
    enabled: !!notebookId && !!user,
    refetchOnMount: true,
    refetchOnReconnect: true,
  });

  // Set up Realtime subscription for new messages
  useEffect(() => {
    if (!notebookId || !user) return;

    console.log('Setting up Realtime subscription for notebook:', notebookId);

    const channel = supabase
      .channel('chat-messages')
      .on(
        'postgres_changes',
        {
          event: 'INSERT',
          schema: 'public',
          table: 'n8n_chat_histories',
          filter: `session_id=eq.${notebookId}`
        },
        async (payload) => {
          console.log('Realtime: New message received:', payload);
          
          // Fetch sources for proper transformation
          const { data: sourcesData } = await supabase
            .from('sources')
            .select('id, title, type')
            .eq('notebook_id', notebookId);
          
          const sourceMap = new Map(sourcesData?.map(s => [s.id, s]) || []);
          
          // Transform the new message
          const newMessage = transformMessage(payload.new, sourceMap);
          
          // Update the query cache with the new message
          queryClient.setQueryData(['chat-messages', notebookId], (oldMessages: EnhancedChatMessage[] = []) => {
            // Check if message already exists to prevent duplicates
            const messageExists = oldMessages.some(msg => msg.id === newMessage.id);
            if (messageExists) {
              console.log('Message already exists, skipping:', newMessage.id);
              return oldMessages;
            }
            
            console.log('Adding new message to cache:', newMessage);
            return [...oldMessages, newMessage];
          });
        }
      )
      .subscribe((status) => {
        console.log('Realtime subscription status:', status);
      });

    return () => {
      console.log('Cleaning up Realtime subscription');
      supabase.removeChannel(channel);
    };
  }, [notebookId, user, queryClient]);

  const sendMessage = useMutation({
    mutationFn: async (messageData: {
      notebookId: string;
      role: 'user' | 'assistant';
      content: string;
    }) => {
      if (!user) throw new Error('User not authenticated');

      // Call the n8n webhook
      const webhookResponse = await supabase.functions.invoke('send-chat-message', {
        body: {
          session_id: messageData.notebookId,
          message: messageData.content,
          user_id: user.id
        }
      });

      if (webhookResponse.error) {
        throw new Error(`Webhook error: ${webhookResponse.error.message}`);
      }

      return webhookResponse.data;
    },
    onSuccess: () => {
      // The response will appear via Realtime, so we don't need to do anything here
      console.log('Message sent to webhook successfully');
    },
  });

  const deleteChatHistory = useMutation({
    mutationFn: async (notebookId: string) => {
      if (!user) throw new Error('User not authenticated');

      console.log('Deleting chat history for notebook:', notebookId);
      
      const { error } = await supabase
        .from('n8n_chat_histories')
        .delete()
        .eq('session_id', notebookId);

      if (error) {
        console.error('Error deleting chat history:', error);
        throw error;
      }
      
      console.log('Chat history deleted successfully');
      return notebookId;
    },
    onSuccess: (notebookId) => {
      console.log('Chat history cleared for notebook:', notebookId);
      toast({
        title: "Chat history cleared",
        description: "All messages have been deleted successfully.",
      });
      
      // Clear the query data and refetch to confirm
      queryClient.setQueryData(['chat-messages', notebookId], []);
      queryClient.invalidateQueries({
        queryKey: ['chat-messages', notebookId]
      });
    },
    onError: (error) => {
      console.error('Failed to delete chat history:', error);
      toast({
        title: "Error",
        description: "Failed to clear chat history. Please try again.",
        variant: "destructive",
      });
    }
  });

  return {
    messages,
    isLoading,
    error,
    sendMessage: sendMessage.mutate,
    sendMessageAsync: sendMessage.mutateAsync,
    isSending: sendMessage.isPending,
    deleteChatHistory: deleteChatHistory.mutate,
    isDeletingChatHistory: deleteChatHistory.isPending,
  };
};
</file>

<file path="src/hooks/useDocumentProcessing.tsx">
import { useMutation } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

export const useDocumentProcessing = () => {
  const { toast } = useToast();

  const processDocument = useMutation({
    mutationFn: async ({
      sourceId,
      filePath,
      sourceType
    }: {
      sourceId: string;
      filePath: string;
      sourceType: string;
    }) => {
      console.log('Initiating document processing for:', { sourceId, filePath, sourceType });

      const { data, error } = await supabase.functions.invoke('process-document', {
        body: {
          sourceId,
          filePath,
          sourceType
        }
      });

      if (error) {
        console.error('Document processing error:', error);
        throw error;
      }

      return data;
    },
    onSuccess: (data) => {
      console.log('Document processing initiated successfully:', data);
    },
    onError: (error) => {
      console.error('Failed to initiate document processing:', error);
      toast({
        title: "Processing Error",
        description: "Failed to start document processing. Please try again.",
        variant: "destructive",
      });
    },
  });

  return {
    processDocumentAsync: processDocument.mutateAsync,
    processDocument: processDocument.mutate,
    isProcessing: processDocument.isPending,
  };
};
</file>

<file path="src/hooks/useFileUpload.tsx">
import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

export const useFileUpload = () => {
  const [isUploading, setIsUploading] = useState(false);
  const { toast } = useToast();

  const uploadFile = async (file: File, notebookId: string, sourceId: string): Promise<string | null> => {
    try {
      setIsUploading(true);
      
      // Get file extension
      const fileExtension = file.name.split('.').pop() || 'bin';
      
      // Create file path: sources/{notebook_id}/{source_id}.{extension}
      const filePath = `${notebookId}/${sourceId}.${fileExtension}`;
      
      console.log('Uploading file to:', filePath);
      
      // Upload file to Supabase storage
      const { data, error } = await supabase.storage
        .from('sources')
        .upload(filePath, file, {
          cacheControl: '3600',
          upsert: false
        });

      if (error) {
        console.error('Upload error:', error);
        throw error;
      }

      console.log('File uploaded successfully:', data);
      return filePath;
    } catch (error) {
      console.error('File upload failed:', error);
      toast({
        title: "Upload Error",
        description: `Failed to upload ${file.name}. Please try again.`,
        variant: "destructive",
      });
      return null;
    } finally {
      setIsUploading(false);
    }
  };

  const getFileUrl = (filePath: string): string => {
    const { data } = supabase.storage
      .from('sources')
      .getPublicUrl(filePath);
    
    return data.publicUrl;
  };

  return {
    uploadFile,
    getFileUrl,
    isUploading,
  };
};
</file>

<file path="src/hooks/useIsDesktop.tsx">
import * as React from "react"

const DESKTOP_BREAKPOINT = 1100

export function useIsDesktop() {
  const [isDesktop, setIsDesktop] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(min-width: ${DESKTOP_BREAKPOINT}px)`)
    const onChange = () => {
      setIsDesktop(window.innerWidth >= DESKTOP_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsDesktop(window.innerWidth >= DESKTOP_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isDesktop
}
</file>

<file path="src/hooks/useNotebookDelete.tsx">
/**
 * 노트북 삭제 훅 - 새로운 API 서비스 기반
 * notebooks API 서비스를 사용하여 안전한 노트북 삭제 수행
 */

import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useAuth } from '@/features/authentication';
import { useToast } from '@/hooks/use-toast';
import { deleteNotebook } from '@/services/notebooks';
import type { Notebook } from '@/services/notebooks/types';

export const useNotebookDelete = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const deleteNotebookMutation = useMutation({
    mutationFn: async (notebookId: string): Promise<Notebook> => {
      console.log('Starting notebook deletion process for:', notebookId);
      
      try {
        const deletedNotebook = await deleteNotebook(notebookId);
        console.log('Notebook deleted successfully:', deletedNotebook.title);
        return deletedNotebook;
      } catch (error) {
        console.error('Error in deletion process:', error);
        throw error;
      }
    },
    onSuccess: (deletedNotebook, notebookId) => {
      console.log('Delete mutation success, invalidating queries');
      
      // 관련된 모든 쿼리 무효화
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
      queryClient.invalidateQueries({ queryKey: ['sources', notebookId] });
      queryClient.invalidateQueries({ queryKey: ['notebook', notebookId] });
      
      // 성공 토스트
      toast({
        title: "Notebook deleted",
        description: `"${deletedNotebook?.title || 'Notebook'}" and all its sources have been successfully deleted.`,
      });
    },
    onError: (error: any) => {
      console.error('Delete mutation error:', error);
      
      let errorMessage = "Failed to delete the notebook. Please try again.";
      
      // 에러 타입에 따른 구체적인 메시지 제공
      if (error?.code === 'PGRST116') {
        errorMessage = "Notebook not found or you don't have permission to delete it.";
      } else if (error?.message?.includes('foreign key')) {
        errorMessage = "Cannot delete notebook due to data dependencies. Please contact support.";
      } else if (error?.message?.includes('network') || error?.message?.includes('Network')) {
        errorMessage = "Network error. Please check your connection and try again.";
      } else if (error?.message?.includes('auth') || error?.message?.includes('JWT')) {
        errorMessage = "Authentication error. Please sign in again.";
      } else if (error?.message) {
        errorMessage = error.message;
      }
      
      // 에러 토스트
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });

  return {
    deleteNotebook: deleteNotebookMutation.mutate,
    deleteNotebookAsync: deleteNotebookMutation.mutateAsync,
    isDeleting: deleteNotebookMutation.isPending,
    error: deleteNotebookMutation.error,
  };
};
</file>

<file path="src/hooks/useNotebookGeneration.tsx">
/**
 * 노트북 생성 훅 - 새로운 API 서비스 기반
 * notebooks generation API 서비스를 사용하여 콘텐츠 생성 관리
 */

import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useAuth } from '@/features/authentication';
import { useToast } from '@/hooks/use-toast';
import { 
  generateNotebookContent,
  generateAudioOverview,
  refreshAudioUrl,
  autoRefreshIfExpired,
  generationUtils
} from '@/services/notebooks';
import type { 
  NotebookContentGenerationRequest,
  AudioOverviewGenerationRequest,
  AudioUrlRefreshRequest,
  NotebookApiResponse 
} from '@/services/notebooks/types';

/**
 * 노트북 콘텐츠 생성 훅
 */
export const useNotebookGeneration = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const generateContentMutation = useMutation({
    mutationFn: async (request: NotebookContentGenerationRequest): Promise<NotebookApiResponse> => {
      console.log('Starting notebook content generation for:', request.notebookId, 
                  'with source type:', request.sourceType);
      
      try {
        const response = await generateNotebookContent(request);
        console.log('Notebook content generation response:', response);
        return response;
      } catch (error) {
        console.error('Error generating notebook content:', error);
        throw error;
      }
    },
    onSuccess: (data) => {
      console.log('Notebook generation successful:', data);
      
      // 관련 쿼리들 무효화하여 UI 새로고침
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
      queryClient.invalidateQueries({ queryKey: ['notebook'] });
      
      toast({
        title: "Content Generated",
        description: "Notebook title and description have been generated successfully.",
      });
    },
    onError: (error: any) => {
      console.error('Notebook generation failed:', error);
      
      let errorMessage = "Failed to generate notebook content. Please try again.";
      
      // 에러 타입에 따른 구체적인 메시지 제공
      if (error?.message?.includes('network') || error?.message?.includes('Network')) {
        errorMessage = "Network error. Please check your connection and try again.";
      } else if (error?.message?.includes('auth') || error?.message?.includes('JWT')) {
        errorMessage = "Authentication error. Please sign in again.";
      } else if (error?.message?.includes('timeout')) {
        errorMessage = "Generation request timed out. Please try again.";
      } else if (error?.message?.includes('quota') || error?.message?.includes('limit')) {
        errorMessage = "You've reached your generation limit. Please try again later.";
      } else if (error?.message) {
        errorMessage = error.message;
      }
      
      toast({
        title: "Generation Failed",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });

  return {
    generateNotebookContent: generateContentMutation.mutate,
    generateNotebookContentAsync: generateContentMutation.mutateAsync,
    isGenerating: generateContentMutation.isPending,
    error: generateContentMutation.error,
  };
};

/**
 * 오디오 개요 생성 훅
 */
export const useAudioOverviewGeneration = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const generateAudioMutation = useMutation({
    mutationFn: async (request: AudioOverviewGenerationRequest): Promise<NotebookApiResponse> => {
      console.log('Starting audio overview generation for notebook:', request.notebookId);
      
      try {
        const response = await generateAudioOverview(request);
        console.log('Audio overview generation response:', response);
        return response;
      } catch (error) {
        console.error('Error generating audio overview:', error);
        throw error;
      }
    },
    onSuccess: (data, variables) => {
      console.log('Audio generation successful:', data);
      
      // 관련 쿼리들 무효화
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
      queryClient.invalidateQueries({ queryKey: ['notebook', variables.notebookId] });
      
      toast({
        title: "Audio Generated",
        description: "Audio overview has been generated successfully.",
      });
    },
    onError: (error: any) => {
      console.error('Audio generation failed:', error);
      
      let errorMessage = "Failed to generate audio overview. Please try again.";
      
      if (error?.message?.includes('network') || error?.message?.includes('Network')) {
        errorMessage = "Network error. Please check your connection and try again.";
      } else if (error?.message?.includes('timeout')) {
        errorMessage = "Audio generation timed out. Please try again.";
      } else if (error?.message) {
        errorMessage = error.message;
      }
      
      toast({
        title: "Audio Generation Failed",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });

  return {
    generateAudioOverview: generateAudioMutation.mutate,
    generateAudioOverviewAsync: generateAudioMutation.mutateAsync,
    isGeneratingAudio: generateAudioMutation.isPending,
    error: generateAudioMutation.error,
  };
};

/**
 * 오디오 URL 새로고침 훅
 */
export const useAudioUrlRefresh = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const refreshUrlMutation = useMutation({
    mutationFn: async (request: AudioUrlRefreshRequest): Promise<NotebookApiResponse> => {
      console.log('Refreshing audio URL for notebook:', request.notebookId, 
                  'silent:', request.silent);
      
      try {
        const response = await refreshAudioUrl(request);
        console.log('Audio URL refresh response:', response);
        return response;
      } catch (error) {
        console.error('Error refreshing audio URL:', error);
        throw error;
      }
    },
    onSuccess: (data, variables) => {
      console.log('Audio URL refresh successful:', data);
      
      // 관련 쿼리들 무효화
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
      queryClient.invalidateQueries({ queryKey: ['notebook', variables.notebookId] });
      
      if (!variables.silent) {
        toast({
          title: "Audio URL Refreshed",
          description: "Audio URL has been refreshed successfully.",
        });
      }
    },
    onError: (error: any, variables) => {
      console.error('Audio URL refresh failed:', error);
      
      if (!variables.silent) {
        toast({
          title: "Refresh Failed",
          description: "Failed to refresh audio URL. Please try again.",
          variant: "destructive",
        });
      }
    },
  });

  return {
    refreshAudioUrl: refreshUrlMutation.mutate,
    refreshAudioUrlAsync: refreshUrlMutation.mutateAsync,
    isRefreshing: refreshUrlMutation.isPending,
    error: refreshUrlMutation.error,
  };
};

/**
 * 자동 오디오 URL 갱신 훅 (만료 확인 포함)
 */
export const useAutoAudioRefresh = () => {
  const { refreshAudioUrlAsync } = useAudioUrlRefresh();

  const autoRefresh = async (notebookId: string, expiresAt: string | null): Promise<NotebookApiResponse | null> => {
    try {
      return await autoRefreshIfExpired(notebookId, expiresAt);
    } catch (error) {
      console.error('Auto-refresh failed:', error);
      return null;
    }
  };

  return {
    autoRefresh,
    ...generationUtils, // 유틸리티 함수들 노출
  };
};
</file>

<file path="src/hooks/useNotebookUpdate.tsx">
/**
 * 노트북 업데이트 훅 - 새로운 API 서비스 기반
 * notebooks API 서비스를 사용하여 안전한 노트북 업데이트 수행
 */

import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useAuth } from '@/features/authentication';
import { useToast } from '@/hooks/use-toast';
import { updateNotebook } from '@/services/notebooks';
import type { Notebook, NotebookUpdateInput } from '@/services/notebooks/types';

export const useNotebookUpdate = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const updateNotebookMutation = useMutation({
    mutationFn: async ({ 
      id, 
      updates 
    }: { 
      id: string; 
      updates: NotebookUpdateInput;
    }): Promise<Notebook> => {
      console.log('Updating notebook:', id, updates);
      
      try {
        const updatedNotebook = await updateNotebook(id, updates);
        console.log('Notebook updated successfully:', updatedNotebook);
        return updatedNotebook;
      } catch (error) {
        console.error('Error updating notebook:', error);
        throw error;
      }
    },
    onSuccess: (data) => {
      console.log('Update mutation success, invalidating queries');
      
      // 관련 쿼리들 무효화
      queryClient.invalidateQueries({ queryKey: ['notebook', data.id] });
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
      
      // 특정 경우에만 성공 토스트 표시 (제목 변경 시)
      toast({
        title: "Notebook updated",
        description: "The notebook has been updated successfully.",
      });
    },
    onError: (error: any) => {
      console.error('Update mutation error:', error);
      
      let errorMessage = "Failed to update the notebook. Please try again.";
      
      // 에러 타입에 따른 구체적인 메시지 제공
      if (error?.code === 'PGRST116') {
        errorMessage = "Notebook not found or you don't have permission to update it.";
      } else if (error?.message?.includes('network') || error?.message?.includes('Network')) {
        errorMessage = "Network error. Please check your connection and try again.";
      } else if (error?.message?.includes('auth') || error?.message?.includes('JWT')) {
        errorMessage = "Authentication error. Please sign in again.";
      } else if (error?.message?.includes('validation')) {
        errorMessage = "Invalid data provided. Please check your input and try again.";
      } else if (error?.message) {
        errorMessage = error.message;
      }
      
      // 에러 토스트
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });

  return {
    updateNotebook: updateNotebookMutation.mutate,
    updateNotebookAsync: updateNotebookMutation.mutateAsync,
    isUpdating: updateNotebookMutation.isPending,
    error: updateNotebookMutation.error,
  };
};
</file>

<file path="src/hooks/useNotes.tsx">
import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/features/authentication';

export interface Note {
  id: string;
  notebook_id: string;
  title: string;
  content: string;
  source_type: 'user' | 'ai_response';
  extracted_text?: string;
  created_at: string;
  updated_at: string;
}

export const useNotes = (notebookId?: string) => {
  const { user } = useAuth();
  const queryClient = useQueryClient();

  const { data: notes, isLoading } = useQuery({
    queryKey: ['notes', notebookId],
    queryFn: async () => {
      if (!notebookId) return [];
      
      const { data, error } = await supabase
        .from('notes')
        .select('*')
        .eq('notebook_id', notebookId)
        .order('updated_at', { ascending: false });
      
      if (error) throw error;
      return data as Note[];
    },
    enabled: !!notebookId && !!user,
  });

  const createNoteMutation = useMutation({
    mutationFn: async ({ 
      title, 
      content, 
      source_type = 'user',
      extracted_text 
    }: { 
      title: string; 
      content: string; 
      source_type?: 'user' | 'ai_response';
      extracted_text?: string;
    }) => {
      if (!notebookId) throw new Error('Notebook ID is required');
      
      const { data, error } = await supabase
        .from('notes')
        .insert([{
          notebook_id: notebookId,
          title,
          content,
          source_type,
          extracted_text,
        }])
        .select()
        .single();
      
      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['notes', notebookId] });
    },
  });

  const updateNoteMutation = useMutation({
    mutationFn: async ({ id, title, content }: { id: string; title: string; content: string }) => {
      const { data, error } = await supabase
        .from('notes')
        .update({ title, content, updated_at: new Date().toISOString() })
        .eq('id', id)
        .select()
        .single();
      
      if (error) throw error;
      return data;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['notes', notebookId] });
    },
  });

  const deleteNoteMutation = useMutation({
    mutationFn: async (id: string) => {
      const { error } = await supabase
        .from('notes')
        .delete()
        .eq('id', id);
      
      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['notes', notebookId] });
    },
  });

  return {
    notes,
    isLoading,
    createNote: createNoteMutation.mutate,
    isCreating: createNoteMutation.isPending,
    updateNote: updateNoteMutation.mutate,
    isUpdating: updateNoteMutation.isPending,
    deleteNote: deleteNoteMutation.mutate,
    isDeleting: deleteNoteMutation.isPending,
  };
};
</file>

<file path="src/hooks/useSourceDelete.tsx">
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/features/authentication';
import { useToast } from '@/hooks/use-toast';

export const useSourceDelete = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const deleteSource = useMutation({
    mutationFn: async (sourceId: string) => {
      console.log('Starting source deletion process for:', sourceId);
      
      try {
        // First, get the source details including file information
        const { data: source, error: fetchError } = await supabase
          .from('sources')
          .select('id, title, file_path, type')
          .eq('id', sourceId)
          .single();

        if (fetchError) {
          console.error('Error fetching source:', fetchError);
          throw new Error('Failed to find source');
        }

        console.log('Found source to delete:', source.title, 'with file_path:', source.file_path);

        // Delete the file from storage if it exists
        if (source.file_path) {
          console.log('Deleting file from storage:', source.file_path);
          
          const { error: storageError } = await supabase.storage
            .from('sources')
            .remove([source.file_path]);

          if (storageError) {
            console.error('Error deleting file from storage:', storageError);
            // Don't throw here - we still want to delete the database record
            // even if the file deletion fails (file might already be gone)
          } else {
            console.log('File deleted successfully from storage');
          }
        } else {
          console.log('No file to delete from storage (URL-based source or no file_path)');
        }

        // Delete the source record from the database
        const { error: deleteError } = await supabase
          .from('sources')
          .delete()
          .eq('id', sourceId);

        if (deleteError) {
          console.error('Error deleting source from database:', deleteError);
          throw deleteError;
        }
        
        console.log('Source deleted successfully from database');
        return source;
      } catch (error) {
        console.error('Error in source deletion process:', error);
        throw error;
      }
    },
    onSuccess: (deletedSource) => {
      console.log('Delete mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['sources'] });
      toast({
        title: "Source deleted",
        description: `"${deletedSource?.title || 'Source'}" has been successfully deleted.`,
      });
    },
    onError: (error: any) => {
      console.error('Delete mutation error:', error);
      
      let errorMessage = "Failed to delete the source. Please try again.";
      
      // Provide more specific error messages based on the error type
      if (error?.code === 'PGRST116') {
        errorMessage = "Source not found or you don't have permission to delete it.";
      } else if (error?.message?.includes('foreign key')) {
        errorMessage = "Cannot delete source due to data dependencies. Please contact support.";
      } else if (error?.message?.includes('network')) {
        errorMessage = "Network error. Please check your connection and try again.";
      }
      
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      });
    },
  });

  return {
    deleteSource: deleteSource.mutate,
    isDeleting: deleteSource.isPending,
  };
};
</file>

<file path="src/hooks/useSourceUpdate.tsx">
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/features/authentication';
import { useToast } from '@/hooks/use-toast';

export const useSourceUpdate = () => {
  const queryClient = useQueryClient();
  const { user } = useAuth();
  const { toast } = useToast();

  const updateSource = useMutation({
    mutationFn: async ({ sourceId, title }: { sourceId: string; title: string }) => {
      console.log('Updating source:', sourceId, 'with title:', title);
      
      const { data, error } = await supabase
        .from('sources')
        .update({ title })
        .eq('id', sourceId)
        .select()
        .single();

      if (error) {
        console.error('Error updating source:', error);
        throw error;
      }
      
      console.log('Source updated successfully');
      return data;
    },
    onSuccess: () => {
      console.log('Update mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['sources'] });
      toast({
        title: "Source renamed",
        description: "The source has been successfully renamed.",
      });
    },
    onError: (error) => {
      console.error('Update mutation error:', error);
      toast({
        title: "Error",
        description: "Failed to rename the source. Please try again.",
        variant: "destructive",
      });
    },
  });

  return {
    updateSource: updateSource.mutate,
    isUpdating: updateSource.isPending,
  };
};
</file>

<file path="src/i18n/locales/en.json">
{
  "common": {
    "welcome": "Welcome",
    "login": "Login",
    "logout": "Logout",
    "loading": "Loading...",
    "error": "Error",
    "save": "Save",
    "cancel": "Cancel",
    "search": "Search",
    "filter": "Filter",
    "back": "Back",
    "next": "Next",
    "create": "Create",
    "edit": "Edit",
    "delete": "Delete",
    "view": "View",
    "today": "Today",
    "yesterday": "Yesterday",
    "tomorrow": "Tomorrow",
    "yes": "Yes",
    "no": "No",
    "profileSettings": "Profile Settings",
    "smartFarmAssistant": "Smart Farm Assistant"
  },
  "navigation": {
    "dashboard": "Dashboard",
    "weather": "Weather Center",
    "crops": "Crop Management",
    "chat": "AI Chat",
    "knowledge": "Knowledge Base"
  },
  "dashboard": {
    "title": "Farm Dashboard",
    "subtitle": "Monitor your farm conditions and weather at a glance",
    "quickWeather": "Today's Weather",
    "temperature": "Temperature",
    "humidity": "Humidity",
    "rainfall": "Rainfall",
    "windSpeed": "Wind Speed",
    "cropStatus": "Crop Status",
    "activeCrops": "Active Crops",
    "healthyPlants": "Healthy Plants",
    "needsAttention": "Needs Attention",
    "recentActivities": "Recent Activities",
    "weatherAlerts": "Weather Alerts",
    "upcomingTasks": "Upcoming Tasks",
    "quickActions": "Quick Actions",
    "commonTasks": "Common tasks and information",
    "recentKnowledgeEntries": "Recent Knowledge Entries",
    "viewAll": "View All →",
    "yourLatestInsights": "Your latest agricultural insights",
    "yourFarmingJourney": "Your farming journey",
    "askAboutWeather": "Ask About Weather",
    "knowledgeBase": "Knowledge Base",
    "plantingCalendar": "Planting Calendar",
    "marketPrices": "Market Prices",
    "addNewKnowledge": "Add New Knowledge",
    "noKnowledgeEntries": "No knowledge entries yet",
    "createFirstEntry": "Create First Entry",
    "startKnowledgeJourney": "Start Your Agricultural Knowledge Journey",
    "buildKnowledgeBase": "Build a comprehensive knowledge base for your farm with AI-powered agricultural insights and templates",
    "knowledgeEntries": "Knowledge Entries",
    "totalEntries": "Total agricultural knowledge entries",
    "recentActivity": "Recent Activity",
    "newEntriesThisWeek": "New entries this week",
    "cropSpecific": "Crop-Specific",
    "entriesWithCropInfo": "Entries with crop information",
    "weatherInsights": "Weather Insights",
    "weatherClimateEntries": "Weather & climate entries",
    "knowledgeCategories": "Knowledge Categories",
    "distributionDescription": "Distribution of your agricultural knowledge entries",
    "welcomeBack": "Welcome back, {name}!",
    "yearsExp": "years exp.",
    "primaryCrops": "Primary crops:",
    "moreCount": "+{count} more"
  },
  "activities": {
    "appliedFertilizer": "Applied fertilizer to maize field",
    "receivedWeatherAdvisory": "Received weather advisory for upcoming rain",
    "harvestedRice": "Harvested 2 hectares of rice",
    "addedKnowledgeEntries": "Added {notebooksCount} knowledge entries",
    "threeDaysAgo": "3 days ago",
    "oneWeekAgo": "1 week ago"
  },
  "weather": {
    "title": "Weather Center",
    "subtitle": "Accurate agricultural weather information and forecasts",
    "current": "Current Weather",
    "forecast": "Forecast",
    "hourly": "Hourly",
    "daily": "Daily",
    "weekly": "Weekly",
    "alerts": "Weather Alerts",
    "recommendations": "Agricultural Recommendations"
  },
  "crops": {
    "title": "Crop Management",
    "subtitle": "Monitor and manage your crop conditions",
    "overview": "Overview",
    "calendar": "Planting Calendar",
    "guides": "Crop Guides",
    "pests": "Pest & Disease",
    "totalArea": "Total Area",
    "activeCrops": "Active Crops",
    "expectedYield": "Expected Yield",
    "healthStatus": "Health Status",
    "stage": "Stage",
    "progress": "Progress",
    "nextAction": "Next Action",
    "plantingCalendar": "Planting Calendar",
    "commonPests": "Common Pests & Diseases",
    "daysToHarvest": "{days} days to harvest",
    "maize": "Maize",
    "maizeLocal": "Mahindi",
    "coffee": "Coffee",
    "coffeeLocal": "Kahawa",
    "applyFertilizerDays": "Apply fertilizer in {days} days",
    "monitorPests": "Monitor for pests",
    "excellent": "Excellent",
    "good": "Good"
  },
  "alerts": {
    "heavyRainfallWarning": "Heavy rainfall expected in {days} days. Prepare drainage.",
    "plantingWindowInfo": "Optimal planting window for rice starts next week."
  },
  "chat": {
    "title": "AI Agricultural Consultation",
    "subtitle": "Get expert agricultural advice from AI",
    "weatherContext": "Weather & Climate",
    "cropsContext": "Crop Management",
    "pestsContext": "Pest & Disease",
    "marketContext": "Market Information",
    "askQuestion": "Ask your question...",
    "send": "Send",
    "tips": "Tips for better answers",
    "includeCropType": "Include your crop type and growth stage",
    "mentionLocation": "Mention your location for weather-specific advice",
    "describeSymptoms": "Describe symptoms clearly for pest/disease diagnosis",
    "useSpecializedTabs": "Each tab provides specialized advice for that topic"
  },
  "knowledge": {
    "title": "Knowledge Base",
    "subtitle": "Systematically manage your agricultural knowledge and information",
    "searchPlaceholder": "Search your knowledge base...",
    "allCategories": "All Categories",
    "weatherClimate": "Weather & Climate",
    "cropManagement": "Crop Management",
    "pestDisease": "Pest & Disease",
    "marketInfo": "Market Information",
    "generalFarming": "General Farming",
    "createFirst": "Create First Entry",
    "startBuilding": "Start Building Your Knowledge Base",
    "storeImportant": "Create your first knowledge entry to store important farming information, research findings, and agricultural insights",
    "noResults": "No Results Found",
    "noMatch": "No knowledge entries match your search",
    "clearSearch": "Clear Search",
    "totalEntries": "Total Entries",
    "weatherEntries": "Weather Entries",
    "cropEntries": "Crop Entries",
    "pestEntries": "Pest Entries",
    "newEntry": "New Knowledge Entry",
    "createEntry": "Create agricultural knowledge documentation",
    "chooseCategory": "Choose a Category",
    "selectType": "Select the type of agricultural knowledge you want to document",
    "suggestedTopics": "Suggested Topics",
    "entryDetails": "Entry Details",
    "provideBasic": "Provide basic information about your knowledge entry",
    "titleRequired": "Title *",
    "titlePlaceholder": "e.g., Best practices for maize cultivation in Northern Tanzania",
    "descriptionOptional": "Description (Optional)",
    "descriptionPlaceholder": "Brief description of what this knowledge entry will cover...",
    "addSourcesAfter": "You can add sources and start conversations after creating the entry",
    "createKnowledgeEntry": "Create Knowledge Entry",
    "creating": "Creating...",
    "tipsTitle": "Tips for creating effective knowledge entries",
    "tip1": "Use descriptive titles that clearly indicate the topic",
    "tip2": "Upload relevant documents, PDFs, or web links as sources",
    "tip3": "Ask the AI assistant questions to explore the topic deeply",
    "tip4": "Organize related information under appropriate categories",
    "tip5": "Update entries as you learn new information",
    "agriculturalDocuments": "Agricultural Documents",
    "researchPapers": "Research papers, farming guides, and technical reports",
    "onlineResources": "Online Resources",
    "agriculturalWebsites": "Agricultural websites, extension services, and market data",
    "multimediaContent": "Multimedia Content",
    "trainingVideos": "Training videos, audio guides, and visual references"
  },
  "templates": {
    "startWithTemplate": "Start with Template",
    "chooseTemplate": "Choose an Agricultural Template",
    "templateDescription": "Select from our pre-built templates to get started quickly with proven agricultural knowledge structures",
    "startFromScratch": "Start from Scratch",
    "weatherForecast": "Weather Forecast",
    "trackWeatherPatterns": "Track weekly weather patterns",
    "cropPlanning": "Crop Planning",
    "planPlantingSchedules": "Plan planting schedules",
    "pestControl": "Pest Control",
    "identifyManagePests": "Identify and manage pests",
    "trackMarketTrends": "Track crop market trends",
    "guide": "Guide",
    "template": "Template",
    "reference": "Reference",
    "analysis": "Analysis"
  },
  "knowledgeEntry": {
    "sources": "Sources",
    "documentsReferences": "Documents and references for this knowledge entry",
    "aiAssistant": "AI Assistant",
    "overview": "Overview",
    "loadingEntry": "Loading knowledge entry...",
    "entryNotFound": "Knowledge entry not found",
    "backToKnowledge": "Back to Knowledge Base",
    "description": "Description",
    "noDescription": "No description available for this knowledge entry",
    "entryDetails": "Entry Details",
    "created": "Created",
    "lastUpdated": "Last Updated",
    "files": "files",
    "conversations": "messages",
    "suggestedQuestions": "Suggested Questions",
    "notes": "Notes",
    "personalNotes": "Your personal notes and insights",
    "notesComingSoon": "Notes feature coming soon...",
    "unknown": "Unknown"
  },
  "auth": {
    "title": "AI4AgriWeather",
    "signUpSubtitle": "Create an account to access smart agricultural weather intelligence",
    "signInSubtitle": "Sign in to your AI4AgriWeather dashboard",
    "email": "Email",
    "emailPlaceholder": "farmer@example.com",
    "password": "Password",
    "createAccount": "Create Account",
    "signIn": "Sign In",
    "creatingAccount": "Creating account...",
    "signingIn": "Signing in...",
    "alreadyHaveAccount": "Already have an account?",
    "newToAI4AgriWeather": "New to AI4AgriWeather?",
    "getAccessTo": "Get access to:",
    "realTimeWeather": "Real-time weather forecasts",
    "aiPoweredCrop": "AI-powered crop management",
    "personalizedFarming": "Personalized farming advice",
    "accountCreated": "Account created!",
    "checkEmailConfirm": "Please check your email to confirm your account.",
    "welcomeMessage": "Welcome to AI4AgriWeather!",
    "signInSuccess": "You have successfully signed in.",
    "invalidCredentials": "Invalid email or password.",
    "confirmEmailFirst": "Please confirm your email before signing in."
  },
  "language": {
    "korean": "Korean",
    "english": "English",
    "swahili": "Swahili",
    "french": "French",
    "nepali": "Nepali",
    "uzbek": "Uzbek",
    "selectLanguage": "Select Language"
  },
  "onboarding": {
    "personalInfo": "Personal Information",
    "personalInfoDesc": "Let's start with some basic information about you",
    "farmLocation": "Farm Location & Size",
    "farmLocationDesc": "Tell us about your farm location and size",
    "cropSelection": "Crop Selection",
    "cropSelectionDesc": "What crops do you grow on your farm?",
    "farmingPractices": "Farming Practices",
    "farmingPracticesDesc": "Tell us about your farming methods and goals",
    "fullName": "Full Name",
    "phoneNumber": "Phone Number",
    "yourRole": "Your Role",
    "preferredLanguage": "Preferred Language",
    "yearsExperience": "Years of Farming Experience",
    "farmName": "Farm Name",
    "farmLocationLabel": "Farm Location/Village",
    "region": "Region",
    "farmSize": "Farm Size",
    "unit": "Unit",
    "primaryCrops": "Primary Crops",
    "selectCrops": "Select the crops you grow (you can select multiple)",
    "farmingType": "Farming Type",
    "additionalNotes": "Additional Notes",
    "fullNamePlaceholder": "John Doe",
    "phoneNumberPlaceholder": "+255 123 456 789",
    "farmNamePlaceholder": "Green Valley Farm",
    "villageWardPlaceholder": "Village/Ward name",
    "additionalNotesPlaceholder": "Any additional information about your farming needs...",
    "selectRole": "Select your role",
    "selectLanguage": "Select language",
    "selectRegion": "Select region",
    "farmer": "Farmer",
    "extensionOfficer": "Extension Officer",
    "researcher": "Researcher",
    "cooperativeMember": "Cooperative Member",
    "agribusiness": "Agribusiness",
    "extension_officer": "Extension Officer",
    "cooperative_member": "Cooperative Member",
    "english": "English",
    "swahili": "Kiswahili",
    "both": "Both",
    "hectares": "Hectares",
    "acres": "Acres",
    "squareMeters": "Square Meters",
    "subsistence": "Subsistence Farming",
    "commercial": "Commercial Farming",
    "mixed": "Mixed Farming",
    "organic": "Organic Farming",
    "livestock": "Livestock",
    "aquaculture": "Aquaculture",
    "horticulture": "Horticulture",
    "agroforestry": "Agroforestry",
    "typeOfFarming": "Type of Farming",
    "selectFarmingType": "Select farming type",
    "selectedCrops": "Selected Crops:",
    "almostDone": "Almost Done!",
    "reviewInformation": "Review your information and complete setup",
    "role": "Role",
    "farm": "Farm",
    "location": "Location",
    "experience": "Experience",
    "years": "years",
    "selected": "selected",
    "notSpecified": "Not specified",
    "whatsNext": "What's Next?",
    "accessPersonalized": "Access personalized agricultural knowledge entries",
    "getWeatherForecasts": "Get weather forecasts for your region",
    "receiveCropAdvice": "Receive crop-specific farming advice",
    "connectWithFarmers": "Connect with other farmers in your area",
    "step": "Step",
    "of": "of",
    "settingUp": "Setting up...",
    "completeSetup": "Complete Setup",
    "previous": "Previous",
    "next": "Next",
    "completeProfile": "Complete Profile",
    "completingProfile": "Completing profile...",
    "skipForNow": "Skip for now",
    "welcomeMessage": "Welcome to AI4AgriWeather!",
    "profileSetupSuccess": "Your profile has been set up successfully.",
    "error": "Error",
    "userNotAuthenticated": "User not authenticated",
    "profileSaveError": "Failed to save profile information. Please try again.",
    "selectAtLeastOneCrop": "Please select at least one crop"
  }
}
</file>

<file path="src/i18n/locales/ko.json">
{
  "common": {
    "welcome": "환영합니다",
    "login": "로그인",
    "logout": "로그아웃",
    "loading": "로딩 중...",
    "error": "오류",
    "save": "저장",
    "cancel": "취소",
    "search": "검색",
    "filter": "필터",
    "back": "뒤로가기",
    "next": "다음",
    "create": "생성",
    "edit": "편집",
    "delete": "삭제",
    "view": "보기",
    "today": "오늘",
    "yesterday": "어제",
    "tomorrow": "내일",
    "yes": "예",
    "no": "아니오",
    "profileSettings": "프로필 설정",
    "smartFarmAssistant": "스마트 농장 도우미"
  },
  "navigation": {
    "dashboard": "대시보드",
    "weather": "날씨센터",
    "crops": "작물관리",
    "chat": "AI채팅",
    "knowledge": "지식베이스"
  },
  "dashboard": {
    "title": "농장 대시보드",
    "subtitle": "농장 상황과 날씨 정보를 한눈에 확인하세요",
    "quickWeather": "오늘의 날씨",
    "temperature": "온도",
    "humidity": "습도",
    "rainfall": "강수량",
    "windSpeed": "풍속",
    "cropStatus": "작물 현황",
    "activeCrops": "재배 중인 작물",
    "healthyPlants": "건강한 식물",
    "needsAttention": "관리 필요",
    "recentActivities": "최근 활동",
    "weatherAlerts": "날씨 경보",
    "upcomingTasks": "예정된 작업",
    "quickActions": "빠른 실행",
    "commonTasks": "일반적인 작업 및 정보",
    "recentKnowledgeEntries": "최근 지식 항목",
    "viewAll": "모두 보기 →",
    "yourLatestInsights": "최신 농업 통찰력",
    "yourFarmingJourney": "당신의 농업 여정",
    "askAboutWeather": "날씨 문의하기",
    "knowledgeBase": "지식 베이스",
    "plantingCalendar": "재배 달력",
    "marketPrices": "시장 가격",
    "addNewKnowledge": "새 지식 추가",
    "noKnowledgeEntries": "아직 지식 항목이 없습니다",
    "createFirstEntry": "첫 번째 항목 생성",
    "startKnowledgeJourney": "농업 지식 여정을 시작하세요",
    "buildKnowledgeBase": "AI 기반 농업 통찰력과 템플릿으로 농장을 위한 종합적인 지식 베이스를 구축하세요",
    "knowledgeEntries": "지식 항목",
    "totalEntries": "전체 농업 지식 항목",
    "recentActivity": "최근 활동",
    "newEntriesThisWeek": "이번 주 새 항목",
    "cropSpecific": "작물별",
    "entriesWithCropInfo": "작물 정보가 포함된 항목",
    "weatherInsights": "날씨 통찰력",
    "weatherClimateEntries": "날씨 및 기후 항목",
    "knowledgeCategories": "지식 카테고리",
    "distributionDescription": "농업 지식 항목의 분포",
    "welcomeBack": "{name}님, 다시 오신 것을 환영합니다!",
    "yearsExp": "년 경력",
    "primaryCrops": "주요 작물:",
    "moreCount": "+{count}개 더보기"
  },
  "activities": {
    "appliedFertilizer": "옥수수 밭에 비료 시비",
    "receivedWeatherAdvisory": "다가오는 비에 대한 날씨 경보 수신",
    "harvestedRice": "벼 2헥타르 수확",
    "addedKnowledgeEntries": "지식 항목 {notebooksCount}개 추가",
    "threeDaysAgo": "3일 전",
    "oneWeekAgo": "1주일 전"
  },
  "weather": {
    "title": "날씨 센터",
    "subtitle": "정확한 농업 기상 정보와 예보",
    "current": "현재 날씨",
    "forecast": "일기예보",
    "hourly": "시간별",
    "daily": "일별",
    "weekly": "주간",
    "alerts": "기상 경보",
    "recommendations": "농업 권장사항"
  },
  "crops": {
    "title": "작물 관리",
    "subtitle": "작물 상태 모니터링 및 관리",
    "overview": "개요",
    "calendar": "재배 달력",
    "guides": "재배 가이드",
    "pests": "병해충",
    "totalArea": "총 재배 면적",
    "activeCrops": "재배 중인 작물",
    "expectedYield": "예상 수확량",
    "healthStatus": "건강 상태",
    "stage": "성장 단계",
    "progress": "진행률",
    "nextAction": "다음 작업",
    "plantingCalendar": "재배 달력",
    "commonPests": "주요 병해충",
    "daysToHarvest": "{days}일 후 수확",
    "maize": "옥수수",
    "maizeLocal": "옥수수",
    "coffee": "커피",
    "coffeeLocal": "커피",
    "applyFertilizerDays": "{days}일 후 비료 시비",
    "monitorPests": "병해충 모니터링",
    "excellent": "매우 좋음",
    "good": "좋음"
  },
  "alerts": {
    "heavyRainfallWarning": "{days}일 후 폭우 예상. 배수 준비 필요.",
    "plantingWindowInfo": "다음 주부터 벼 재배 최적기입니다."
  },
  "chat": {
    "title": "AI 농업 상담",
    "subtitle": "전문 AI와 농업 상담을 나누세요",
    "weatherContext": "날씨 & 기후",
    "cropsContext": "작물 관리",
    "pestsContext": "병해충",
    "marketContext": "시장 정보",
    "askQuestion": "질문을 입력하세요...",
    "send": "전송",
    "tips": "더 나은 답변을 위한 팁",
    "includeCropType": "작물 종류와 성장 단계를 포함하세요",
    "mentionLocation": "지역별 날씨 조언을 위해 위치를 언급하세요",
    "describeSymptoms": "병해충 진단을 위해 증상을 명확히 설명하세요",
    "useSpecializedTabs": "각 탭은 해당 주제에 특화된 조언을 제공합니다"
  },
  "knowledge": {
    "title": "지식 베이스",
    "subtitle": "농업 지식과 정보를 체계적으로 관리하세요",
    "searchPlaceholder": "지식 베이스 검색...",
    "allCategories": "모든 카테고리",
    "weatherClimate": "날씨 & 기후",
    "cropManagement": "작물 관리",
    "pestDisease": "병해충",
    "marketInfo": "시장 정보",
    "generalFarming": "일반 농업",
    "createFirst": "첫 번째 항목 생성",
    "startBuilding": "지식 베이스 구축을 시작하세요",
    "storeImportant": "중요한 농업 정보, 연구 결과, 농업 통찰을 저장하여 첫 번째 지식 항목을 생성하세요",
    "noResults": "검색 결과 없음",
    "noMatch": "검색어와 일치하는 지식 항목이 없습니다",
    "clearSearch": "검색 지우기",
    "totalEntries": "총 항목",
    "weatherEntries": "날씨 항목",
    "cropEntries": "작물 항목",
    "pestEntries": "병해충 항목",
    "newEntry": "새 지식 항목",
    "createEntry": "농업 지식 문서 생성",
    "chooseCategory": "카테고리 선택",
    "selectType": "문서화할 농업 지식 유형을 선택하세요",
    "suggestedTopics": "추천 주제",
    "entryDetails": "항목 세부사항",
    "provideBasic": "지식 항목에 대한 기본 정보를 제공하세요",
    "titleRequired": "제목 *",
    "titlePlaceholder": "예: 탄자니아 북부 지역 옥수수 재배 모범 사례",
    "descriptionOptional": "설명 (선택사항)",
    "descriptionPlaceholder": "이 지식 항목이 다룰 내용에 대한 간단한 설명...",
    "addSourcesAfter": "항목 생성 후 출처를 추가하고 대화를 시작할 수 있습니다",
    "createKnowledgeEntry": "지식 항목 생성",
    "creating": "생성 중...",
    "tipsTitle": "효과적인 지식 항목 생성을 위한 팁",
    "tip1": "주제를 명확히 나타내는 설명적인 제목을 사용하세요",
    "tip2": "관련 문서, PDF 또는 웹 링크를 소스로 업로드하세요",
    "tip3": "AI 어시스턴트에게 질문하여 주제를 깊이 탐구하세요",
    "tip4": "관련 정보를 적절한 카테고리로 정리하세요",
    "tip5": "새로운 정보를 학습할 때마다 항목을 업데이트하세요",
    "agriculturalDocuments": "농업 문서",
    "researchPapers": "연구 논문, 농업 가이드 및 기술 보고서",
    "onlineResources": "온라인 자료",
    "agriculturalWebsites": "농업 웹사이트, 지도 서비스 및 시장 데이터",
    "multimediaContent": "멀티미디어 콘텐츠",
    "trainingVideos": "교육 비디오, 오디오 가이드 및 시각 참고자료"
  },
  "templates": {
    "startWithTemplate": "템플릿으로 시작",
    "chooseTemplate": "농업 템플릿 선택",
    "templateDescription": "검증된 농업 지식 구조로 빠르게 시작할 수 있는 사전 제작된 템플릿을 선택하세요",
    "startFromScratch": "처음부터 시작",
    "weatherForecast": "날씨 예보",
    "trackWeatherPatterns": "주간 날씨 패턴 추적",
    "cropPlanning": "작물 계획",
    "planPlantingSchedules": "재배 일정 계획",
    "pestControl": "병해충 방제",
    "identifyManagePests": "병해충 식별 및 관리",
    "trackMarketTrends": "작물 시장 동향 추적",
    "guide": "가이드",
    "template": "템플릿",
    "reference": "참고자료",
    "analysis": "분석"
  },
  "knowledgeEntry": {
    "sources": "소스",
    "documentsReferences": "이 지식 항목의 문서 및 참고자료",
    "aiAssistant": "AI 어시스턴트",
    "overview": "개요",
    "loadingEntry": "지식 항목 로딩 중...",
    "entryNotFound": "지식 항목을 찾을 수 없습니다",
    "backToKnowledge": "지식 베이스로 돌아가기",
    "description": "설명",
    "noDescription": "이 지식 항목에 대한 설명이 없습니다",
    "entryDetails": "항목 세부사항",
    "created": "생성일",
    "lastUpdated": "마지막 업데이트",
    "files": "파일",
    "conversations": "대화",
    "suggestedQuestions": "추천 질문",
    "notes": "노트",
    "personalNotes": "개인 노트 및 통찰",
    "notesComingSoon": "노트 기능이 곧 출시됩니다...",
    "unknown": "알 수 없음"
  },
  "auth": {
    "title": "AI4AgriWeather",
    "signUpSubtitle": "스마트 농업 기상 정보에 접근하기 위한 계정을 만드세요",
    "signInSubtitle": "AI4AgriWeather 대시보드에 로그인하세요",
    "email": "이메일",
    "emailPlaceholder": "farmer@example.com",
    "password": "비밀번호",
    "createAccount": "계정 만들기",
    "signIn": "로그인",
    "creatingAccount": "계정 생성 중...",
    "signingIn": "로그인 중...",
    "alreadyHaveAccount": "이미 계정이 있으신가요?",
    "newToAI4AgriWeather": "AI4AgriWeather가 처음이신가요?",
    "getAccessTo": "다음 기능에 접근하세요:",
    "realTimeWeather": "실시간 날씨 예보",
    "aiPoweredCrop": "AI 기반 작물 관리",
    "personalizedFarming": "맞춤형 농업 조언",
    "accountCreated": "계정이 생성되었습니다!",
    "checkEmailConfirm": "계정을 확인하려면 이메일을 확인해 주세요.",
    "welcomeMessage": "AI4AgriWeather에 오신 것을 환영합니다!",
    "signInSuccess": "성공적으로 로그인되었습니다.",
    "invalidCredentials": "잘못된 이메일 또는 비밀번호입니다.",
    "confirmEmailFirst": "로그인하기 전에 이메일을 확인해 주세요."
  },
  "language": {
    "korean": "한국어",
    "english": "영어",
    "swahili": "스와힐리어",
    "french": "프랑스어",
    "nepali": "네팔어",
    "uzbek": "우즈베크어",
    "selectLanguage": "언어 선택"
  },
  "onboarding": {
    "personalInfo": "개인 정보",
    "personalInfoDesc": "기본 정보를 입력해 주세요",
    "farmLocation": "농장 위치 및 크기",
    "farmLocationDesc": "농장의 위치와 크기를 알려주세요",
    "cropSelection": "작물 선택",
    "cropSelectionDesc": "어떤 작물을 재배하시나요?",
    "farmingPractices": "농업 방식",
    "farmingPracticesDesc": "농업 방법과 목표를 알려주세요",
    "fullName": "성명",
    "phoneNumber": "전화번호",
    "yourRole": "역할",
    "preferredLanguage": "선호 언어",
    "yearsExperience": "농업 경력",
    "farmName": "농장 이름",
    "farmLocationLabel": "농장 위치/마을",
    "region": "지역",
    "farmSize": "농장 크기",
    "unit": "단위",
    "primaryCrops": "주요 작물",
    "selectCrops": "재배하는 작물을 선택하세요 (다중 선택 가능)",
    "farmingType": "농업 유형",
    "additionalNotes": "추가 정보",
    "fullNamePlaceholder": "홍길동",
    "phoneNumberPlaceholder": "+82 10 1234 5678",
    "farmNamePlaceholder": "그린밸리 농장",
    "villageWardPlaceholder": "마을/동 이름",
    "additionalNotesPlaceholder": "농업 관련 추가 정보나 요구사항을 입력하세요...",
    "selectRole": "역할을 선택하세요",
    "selectLanguage": "언어를 선택하세요",
    "selectRegion": "지역을 선택하세요",
    "farmer": "농부",
    "extensionOfficer": "농업 지도사",
    "researcher": "연구원",
    "cooperativeMember": "협동조합원",
    "agribusiness": "농업 비즈니스",
    "english": "영어",
    "swahili": "스와힐리어",
    "both": "모두",
    "hectares": "헥타르",
    "acres": "에이커",
    "squareMeters": "평방미터",
    "subsistence": "자급 농업",
    "commercial": "상업 농업",
    "mixed": "혼합형 (자급 및 상업)",
    "organic": "유기농업",
    "previous": "이전",
    "next": "다음",
    "completeProfile": "프로필 완성",
    "completingProfile": "프로필 완성 중...",
    "skipForNow": "나중에 하기",
    "welcomeMessage": "AI4AgriWeather에 오신 것을 환영합니다!",
    "profileSetupSuccess": "프로필이 성공적으로 설정되었습니다.",
    "error": "오류",
    "userNotAuthenticated": "사용자가 인증되지 않았습니다",
    "profileSaveError": "프로필 정보 저장에 실패했습니다. 다시 시도해 주세요.",
    "selectAtLeastOneCrop": "최소 하나 이상의 작물을 선택해 주세요"
  }
}
</file>

<file path="src/i18n/locales/sw.json">
{
  "common": {
    "welcome": "Karibu",
    "login": "Ingia",
    "logout": "Toka",
    "loading": "Inapakia...",
    "error": "Hitilafu",
    "save": "Hifadhi",
    "cancel": "Ghairi",
    "search": "Tafuta",
    "filter": "Chuja",
    "back": "Rudi",
    "next": "Ifuata",
    "create": "Unda",
    "edit": "Hariri",
    "delete": "Futa",
    "view": "Ona",
    "today": "Leo",
    "yesterday": "Jana",
    "tomorrow": "Kesho",
    "yes": "Ndiyo",
    "no": "Hapana",
    "profileSettings": "Mipangilio ya Wasifu",
    "smartFarmAssistant": "Msaidizi wa Shamba Mahiri"
  },
  "navigation": {
    "dashboard": "Dashibodi",
    "weather": "Kituo cha Hali ya Hewa",
    "crops": "Usimamizi wa Mazao",
    "chat": "Mazungumzo ya AI",
    "knowledge": "Msingi wa Maarifa"
  },
  "dashboard": {
    "title": "Dashibodi ya Shamba",
    "subtitle": "Fuatilia hali ya shamba lako na hali ya hewa kwa haraka",
    "quickWeather": "Hali ya Hewa ya Leo",
    "temperature": "Joto",
    "humidity": "Unyevu",
    "rainfall": "Mvua",
    "windSpeed": "Kasi ya Upepo",
    "cropStatus": "Hali ya Mazao",
    "activeCrops": "Mazao yanayolimwa",
    "healthyPlants": "Mimea Mizuri",
    "needsAttention": "Yanahitaji Utunzaji",
    "recentActivities": "Shughuli za Hivi Karibuni",
    "weatherAlerts": "Tahadhari za Hali ya Hewa",
    "upcomingTasks": "Kazi Zinazokuja",
    "quickActions": "Vitendo vya Haraka",
    "commonTasks": "Kazi za kawaida na habari",
    "recentKnowledgeEntries": "Maingizo ya Maarifa ya Hivi Karibuni",
    "viewAll": "Tazama Yote →",
    "yourLatestInsights": "Maarifa yako mapya ya kilimo",
    "yourFarmingJourney": "Safari yako ya kilimo",
    "askAboutWeather": "Uliza Kuhusu Hali ya Hewa",
    "knowledgeBase": "Msingi wa Maarifa",
    "plantingCalendar": "Kalenda ya Kupanda",
    "marketPrices": "Bei za Sokoni",
    "addNewKnowledge": "Ongeza Maarifa Mapya",
    "noKnowledgeEntries": "Hakuna maingizo ya maarifa bado",
    "createFirstEntry": "Unda Ingizo la Kwanza",
    "startKnowledgeJourney": "Anza Safari yako ya Maarifa ya Kilimo",
    "buildKnowledgeBase": "Jenga msingi mkubwa wa maarifa kwa shamba lako kwa kutumia ufahamu wa kilimo unaoendeshwa na AI na violezo",
    "knowledgeEntries": "Maingizo ya Maarifa",
    "totalEntries": "Jumla ya maingizo ya maarifa ya kilimo",
    "recentActivity": "Shughuli za Hivi Karibuni",
    "newEntriesThisWeek": "Maingizo mapya wiki hii",
    "cropSpecific": "Maalum kwa Zao",
    "entriesWithCropInfo": "Maingizo yenye habari za mazao",
    "weatherInsights": "Ufahamu wa Hali ya Hewa",
    "weatherClimateEntries": "Maingizo ya hali ya hewa na hali ya anga",
    "knowledgeCategories": "Aina za Maarifa",
    "distributionDescription": "Mgawanyiko wa maingizo yako ya maarifa ya kilimo",
    "welcomeBack": "Karibu tena, {name}!",
    "yearsExp": "miaka ya uzoefu",
    "primaryCrops": "Mazao makuu:",
    "moreCount": "+{count} zaidi"
  },
  "activities": {
    "appliedFertilizer": "Kuweka mbolea katika shamba la mahindi",
    "receivedWeatherAdvisory": "Kupokea tahadhari ya hali ya hewa kuhusu mvua inayokuja",
    "harvestedRice": "Kuvuna hekta 2 za mpunga",
    "addedKnowledgeEntries": "Kuongeza maingizo {notebooksCount} ya maarifa",
    "threeDaysAgo": "Siku 3 zilizopita",
    "oneWeekAgo": "Wiki 1 iliyopita"
  },
  "weather": {
    "title": "Kituo cha Hali ya Hewa",
    "subtitle": "Taarifa sahihi za hali ya hewa ya kilimo na utabiri",
    "current": "Hali ya Hewa ya Sasa",
    "forecast": "Utabiri",
    "hourly": "Kila Saa",
    "daily": "Kila Siku",
    "weekly": "Kila Wiki",
    "alerts": "Tahadhari za Hali ya Hewa",
    "recommendations": "Mapendekezo ya Kilimo"
  },
  "crops": {
    "title": "Usimamizi wa Mazao",
    "subtitle": "Fuatilia na simamia hali ya mazao yako",
    "overview": "Muhtasari",
    "calendar": "Kalenda ya Kupanda",
    "guides": "Miongozo ya Mazao",
    "pests": "Wadudu na Magonjwa",
    "totalArea": "Eneo la Jumla",
    "activeCrops": "Mazao Yanayolimwa",
    "expectedYield": "Mavuno Yanayotarajiwa",
    "healthStatus": "Hali ya Afya",
    "stage": "Hatua",
    "progress": "Maendeleo",
    "nextAction": "Kitendo Kifuatacho",
    "plantingCalendar": "Kalenda ya Kupanda",
    "commonPests": "Wadudu na Magonjwa ya Kawaida",
    "daysToHarvest": "Siku {days} mpaka mavuno",
    "maize": "Mahindi",
    "maizeLocal": "Mahindi",
    "coffee": "Kahawa",
    "coffeeLocal": "Kahawa",
    "applyFertilizerDays": "Weka mbolea baada ya siku {days}",
    "monitorPests": "Fuatilia wadudu",
    "excellent": "Bora sana",
    "good": "Nzuri"
  },
  "alerts": {
    "heavyRainfallWarning": "Mvua kubwa inatarajiwa baada ya siku {days}. Andaa mifereji.",
    "plantingWindowInfo": "Wakati bora wa kupanda mpunga unaanza wiki ijayo."
  },
  "chat": {
    "title": "Ushauri wa Kilimo wa AI",
    "subtitle": "Pata ushauri wa mtaalam wa kilimo kutoka kwa AI",
    "weatherContext": "Hali ya Hewa na Tabianchi",
    "cropsContext": "Usimamizi wa Mazao",
    "pestsContext": "Wadudu na Magonjwa",
    "marketContext": "Taarifa za Soko",
    "askQuestion": "Uliza swali lako...",
    "send": "Tuma",
    "tips": "Vidokezo vya majibu bora",
    "includeCropType": "Jumuisha aina ya mazao yako na hatua ya ukuaji",
    "mentionLocation": "Taja eneo lako kwa ushauri maalum wa hali ya hewa",
    "describeSymptoms": "Eleza dalili kwa uwazi kwa utambuzi wa wadudu/magonjwa",
    "useSpecializedTabs": "Kila kichupo kinatoa ushauri maalum kwa mada hiyo"
  },
  "knowledge": {
    "title": "Msingi wa Maarifa",
    "subtitle": "Simamia maarifa yako ya kilimo kwa mfumo",
    "searchPlaceholder": "Tafuta katika msingi wako wa maarifa...",
    "allCategories": "Kategoria Zote",
    "weatherClimate": "Hali ya Hewa na Tabianchi",
    "cropManagement": "Usimamizi wa Mazao",
    "pestDisease": "Wadudu na Magonjwa",
    "marketInfo": "Taarifa za Soko",
    "generalFarming": "Kilimo cha Jumla",
    "createFirst": "Unda Ingizo la Kwanza",
    "startBuilding": "Anza Kujenga Msingi wako wa Maarifa",
    "storeImportant": "Unda ingizo lako la kwanza la maarifa ili kuhifadhi taarifa muhimu za kilimo, matokeo ya utafiti, na maarifa ya kilimo",
    "noResults": "Hakuna Matokeo Yaliyopatikana",
    "noMatch": "Hakuna maingizo ya maarifa yanayolingana na utafutaji wako",
    "clearSearch": "Futa Utafutaji",
    "totalEntries": "Maingizo ya Jumla",
    "weatherEntries": "Maingizo ya Hali ya Hewa",
    "cropEntries": "Maingizo ya Mazao",
    "pestEntries": "Maingizo ya Wadudu",
    "newEntry": "Ingizo Jipya la Maarifa",
    "createEntry": "Unda nyaraka za maarifa ya kilimo",
    "chooseCategory": "Chagua Kategoria",
    "selectType": "Chagua aina ya maarifa ya kilimo unayotaka kuandika",
    "suggestedTopics": "Mada Zilizopendekezwa",
    "entryDetails": "Maelezo ya Ingizo",
    "provideBasic": "Toa taarifa za msingi kuhusu ingizo lako la maarifa",
    "titleRequired": "Kichwa *",
    "titlePlaceholder": "mfano, Mbinu bora za kulima mahindi Kaskazini mwa Tanzania",
    "descriptionOptional": "Maelezo (Si Lazima)",
    "descriptionPlaceholder": "Maelezo mafupi ya yale ambayo ingizo hili la maarifa litashughulikia...",
    "addSourcesAfter": "Unaweza kuongeza vyanzo na kuanza mazungumzo baada ya kuunda ingizo",
    "createKnowledgeEntry": "Unda Ingizo la Maarifa",
    "creating": "Inaunda...",
    "tipsTitle": "Vidokezo vya kuunda maingizo mazuri ya maarifa",
    "tip1": "Tumia vichwa vya habari vinavyoeleza wazi mada",
    "tip2": "Pakia nyaraka muhimu, PDF, au viungo vya tovuti kama vyanzo",
    "tip3": "Uliza msaidizi wa AI maswali ili kuchunguza mada kwa kina",
    "tip4": "Panga taarifa zinazohusiana chini ya kategoria zinazofaa",
    "tip5": "Sasisha maingizo unapojifunza taarifa mpya",
    "agriculturalDocuments": "Nyaraka za Kilimo",
    "researchPapers": "Karatasi za utafiti, miongozo ya kilimo, na ripoti za kiufundi",
    "onlineResources": "Rasilimali za Mtandaoni",
    "agriculturalWebsites": "Tovuti za kilimo, huduma za ugani, na data za soko",
    "multimediaContent": "Maudhui ya Vyombo Vingi",
    "trainingVideos": "Video za mafunzo, miongozo ya sauti, na marejeleo ya picha"
  },
  "templates": {
    "startWithTemplate": "Anza na Kiolezo",
    "chooseTemplate": "Chagua Kiolezo cha Kilimo",
    "templateDescription": "Chagua kutoka kwa violezo vilivyojengwa tayari ili kuanza haraka na miundo ya maarifa ya kilimo iliyothibitishwa",
    "startFromScratch": "Anza kutoka Mwanzo",
    "weatherForecast": "Utabiri wa Hali ya Hewa",
    "trackWeatherPatterns": "Fuatilia mifumo ya hali ya hewa ya kila wiki",
    "cropPlanning": "Mpango wa Mazao",
    "planPlantingSchedules": "Panga ratiba za kupanda",
    "pestControl": "Udhibiti wa Wadudu",
    "identifyManagePests": "Tambua na udhibiti wadudu",
    "trackMarketTrends": "Fuatilia mitindo ya soko la mazao",
    "guide": "Mwongozo",
    "template": "Kiolezo",
    "reference": "Marejeleo",
    "analysis": "Uchambuzi"
  },
  "knowledgeEntry": {
    "sources": "Vyanzo",
    "documentsReferences": "Nyaraka na marejeleo ya ingizo hili la maarifa",
    "aiAssistant": "Msaidizi wa AI",
    "overview": "Muhtasari",
    "loadingEntry": "Inapakia ingizo la maarifa...",
    "entryNotFound": "Ingizo la maarifa halilipatikani",
    "backToKnowledge": "Rudi kwenye Msingi wa Maarifa",
    "description": "Maelezo",
    "noDescription": "Hakuna maelezo yanayopatikana kwa ingizo hili la maarifa",
    "entryDetails": "Maelezo ya Ingizo",
    "created": "Iliundwa",
    "lastUpdated": "Ilisasishwa Mwisho",
    "files": "faili",
    "conversations": "ujumbe",
    "suggestedQuestions": "Maswali Yaliyopendekezwa",
    "notes": "Maelezo",
    "personalNotes": "Maelezo yako ya kibinafsi na maarifa",
    "notesComingSoon": "Kipengele cha maelezo kinakuja hivi karibuni...",
    "unknown": "Haijulikani"
  },
  "auth": {
    "title": "AI4AgriWeather",
    "signUpSubtitle": "Fungua akaunti ili kupata huduma za kielelezo za hali ya hewa ya kilimo",
    "signInSubtitle": "Ingia kwenye dashibodi yako ya AI4AgriWeather",
    "email": "Barua pepe",
    "emailPlaceholder": "mkulima@mfano.com",
    "password": "Nenosiri",
    "createAccount": "Fungua Akaunti",
    "signIn": "Ingia",
    "creatingAccount": "Inafungua akaunti...",
    "signingIn": "Inaingia...",
    "alreadyHaveAccount": "Tayari una akaunti?",
    "newToAI4AgriWeather": "Umepya kwenye AI4AgriWeather?",
    "getAccessTo": "Pata ufikiaji wa:",
    "realTimeWeather": "Utabiri wa hali ya hewa wa wakati halisi",
    "aiPoweredCrop": "Usimamizi wa mazao unaoendeshwa na AI",
    "personalizedFarming": "Ushauri wa kilimo uliobinafsishwa",
    "accountCreated": "Akaunti imefunguliwa!",
    "checkEmailConfirm": "Tafadhali angalia barua pepe yako ili kuthibitisha akaunti yako.",
    "welcomeMessage": "Karibu AI4AgriWeather!",
    "signInSuccess": "Umefanikiwa kuingia.",
    "invalidCredentials": "Barua pepe au nenosiri si sahihi.",
    "confirmEmailFirst": "Tafadhali thibitisha barua pepe yako kabla ya kuingia."
  },
  "language": {
    "korean": "Kikorea",
    "english": "Kiingereza",
    "swahili": "Kiswahili",
    "french": "Kifaransa",
    "nepali": "Kinepali",
    "uzbek": "Kiuzbeki",
    "selectLanguage": "Chagua Lugha"
  },
  "onboarding": {
    "personalInfo": "Taarifa Binafsi",
    "personalInfoDesc": "Hebu tuanze na taarifa zako za msingi",
    "farmLocation": "Mahali pa Shamba na Ukubwa",
    "farmLocationDesc": "Tuambie kuhusu mahali pa shamba lako na ukubwa wake",
    "cropSelection": "Uchaguzi wa Mazao",
    "cropSelectionDesc": "Ni mazao gani unayopanda shambani kwako?",
    "farmingPractices": "Mbinu za Kilimo",
    "farmingPracticesDesc": "Tuambie kuhusu mbinu zako za kilimo na malengo",
    "fullName": "Jina Kamili",
    "phoneNumber": "Nambari ya Simu",
    "yourRole": "Jukumu Lako",
    "preferredLanguage": "Lugha Unayopendelea",
    "yearsExperience": "Miaka ya Uzoefu wa Kilimo",
    "farmName": "Jina la Shamba",
    "farmLocationLabel": "Mahali pa Shamba/Kijiji",
    "region": "Mkoa",
    "farmSize": "Ukubwa wa Shamba",
    "unit": "Kipimo",
    "primaryCrops": "Mazao ya Msingi",
    "selectCrops": "Chagua mazao unayopanda (unaweza kuchagua mengi)",
    "farmingType": "Aina ya Kilimo",
    "additionalNotes": "Maelezo Zaidi",
    "fullNamePlaceholder": "Juma Mwamba",
    "phoneNumberPlaceholder": "+255 123 456 789",
    "farmNamePlaceholder": "Shamba la Kijani",
    "villageWardPlaceholder": "Jina la kijiji/kata",
    "additionalNotesPlaceholder": "Taarifa yoyote ya ziada kuhusu mahitaji yako ya kilimo...",
    "selectRole": "Chagua jukumu lako",
    "selectLanguage": "Chagua lugha",
    "selectRegion": "Chagua mkoa",
    "farmer": "Mkulima",
    "extensionOfficer": "Afisa Ugani",
    "researcher": "Mtafiti",
    "cooperativeMember": "Mjumbe wa Chama cha Ushirika",
    "agribusiness": "Biashara ya Kilimo",
    "english": "Kiingereza",
    "swahili": "Kiswahili",
    "both": "Zote mbili",
    "hectares": "Hekta",
    "acres": "Ekari",
    "squareMeters": "Meta za Mraba",
    "subsistence": "Kilimo cha Kujikimu",
    "commercial": "Kilimo cha Biashara",
    "mixed": "Mchanganyiko (Kujikimu na Biashara)",
    "organic": "Kilimo Hai",
    "previous": "Iliyotangulia",
    "next": "Ifuatayo",
    "completeProfile": "Kamilisha Wasifu",
    "completingProfile": "Inakamilisha wasifu...",
    "skipForNow": "Ruka kwa sasa",
    "welcomeMessage": "Karibu AI4AgriWeather!",
    "profileSetupSuccess": "Wasifu wako umewekwa vizuri.",
    "error": "Hitilafu",
    "userNotAuthenticated": "Mtumiaji hajathibitishwa",
    "profileSaveError": "Imeshindwa kuhifadhi taarifa za wasifu. Tafadhali jaribu tena.",
    "selectAtLeastOneCrop": "Tafadhali chagua angalau zao moja"
  }
}
</file>

<file path="src/i18n/index.ts">
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import LanguageDetector from 'i18next-browser-languagedetector';

import en from './locales/en.json';
import ko from './locales/ko.json';
import sw from './locales/sw.json';
import fr from './locales/fr.json';
import ne from './locales/ne.json';
import uz from './locales/uz.json';

const resources = {
  en: {
    translation: en
  },
  ko: {
    translation: ko
  },
  sw: {
    translation: sw
  },
  fr: {
    translation: fr
  },
  ne: {
    translation: ne
  },
  uz: {
    translation: uz
  }
};

i18n
  .use(LanguageDetector)
  .use(initReactI18next)
  .init({
    resources,
    fallbackLng: 'en',
    supportedLngs: ['en', 'ko', 'sw', 'fr', 'ne', 'uz'],
    debug: false,
    
    interpolation: {
      escapeValue: false
    },
    
    detection: {
      order: ['localStorage', 'navigator', 'htmlTag'],
      caches: ['localStorage']
    },
    
    react: {
      useSuspense: true
    }
  });

// Log initialization
i18n.on('initialized', () => {
  console.log('i18n initialized successfully');
  console.log('Current language:', i18n.language);
  console.log('Available languages:', i18n.languages);
  console.log('Resources loaded:', Object.keys(i18n.store.data));
});

export default i18n;
</file>

<file path="src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="src/pages/Notebook.tsx">
import React, { useState } from 'react';
import { useParams } from 'react-router-dom';
import { useNotebooks } from '@/hooks/useNotebooks';
import { useSources } from '@/hooks/useSources';
import { useIsDesktop } from '@/hooks/useIsDesktop';
import NotebookHeader from '@/components/notebook/NotebookHeader';
import SourcesSidebar from '@/components/notebook/SourcesSidebar';
import ChatArea from '@/components/notebook/ChatArea';
import StudioSidebar from '@/components/notebook/StudioSidebar';
import MobileNotebookTabs from '@/components/notebook/MobileNotebookTabs';
import { Citation } from '@/types/message';

const Notebook = () => {
  const { id: notebookId } = useParams();
  const { notebooks } = useNotebooks();
  const { sources } = useSources(notebookId);
  const [selectedCitation, setSelectedCitation] = useState<Citation | null>(null);
  const isDesktop = useIsDesktop();

  const notebook = notebooks?.find(n => n.id === notebookId);
  const hasSource = sources && sources.length > 0;
  const isSourceDocumentOpen = !!selectedCitation;

  const handleCitationClick = (citation: Citation) => {
    setSelectedCitation(citation);
  };

  const handleCitationClose = () => {
    setSelectedCitation(null);
  };

  // Dynamic width calculations for desktop - expand studio when editing notes
  const sourcesWidth = isSourceDocumentOpen ? 'w-[35%]' : 'w-[25%]';
  const studioWidth = 'w-[30%]'; // Expanded width for note editing
  const chatWidth = isSourceDocumentOpen ? 'w-[35%]' : 'w-[45%]';

  return (
    <div className="h-screen bg-white flex flex-col overflow-hidden">
      <NotebookHeader 
        title={notebook?.title || 'Untitled Notebook'} 
        notebookId={notebookId} 
      />
      
      {isDesktop ? (
        // Desktop layout (3-column)
        <div className="flex-1 flex overflow-hidden">
          <div className={`${sourcesWidth} flex-shrink-0`}>
            <SourcesSidebar 
              hasSource={hasSource || false} 
              notebookId={notebookId}
              selectedCitation={selectedCitation}
              onCitationClose={handleCitationClose}
              setSelectedCitation={setSelectedCitation}
            />
          </div>
          
          <div className={`${chatWidth} flex-shrink-0`}>
            <ChatArea 
              hasSource={hasSource || false} 
              notebookId={notebookId}
              notebook={notebook}
              onCitationClick={handleCitationClick}
            />
          </div>
          
          <div className={`${studioWidth} flex-shrink-0`}>
            <StudioSidebar 
              notebookId={notebookId} 
              onCitationClick={handleCitationClick}
            />
          </div>
        </div>
      ) : (
        // Mobile/Tablet layout (tabs)
        <MobileNotebookTabs
          hasSource={hasSource || false}
          notebookId={notebookId}
          notebook={notebook}
          selectedCitation={selectedCitation}
          onCitationClose={handleCitationClose}
          setSelectedCitation={setSelectedCitation}
          onCitationClick={handleCitationClick}
        />
      )}
    </div>
  );
};

export default Notebook;
</file>

<file path="src/pages/NotFound.tsx">
import { useLocation } from "react-router-dom";
import { useEffect } from "react";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error(
      "404 Error: User attempted to access non-existent route:",
      location.pathname
    );
  }, [location.pathname]);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="text-center">
        <h1 className="text-4xl font-bold mb-4">404</h1>
        <p className="text-xl text-gray-600 mb-4">Oops! Page not found</p>
        <a href="/" className="text-blue-500 hover:text-blue-700 underline">
          Return to Home
        </a>
      </div>
    </div>
  );
};

export default NotFound;
</file>

<file path="src/pages/NotFoundPage.tsx">
import React from 'react';
import { Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Home, ArrowLeft, Wheat } from 'lucide-react';

const NotFoundPage = () => {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 via-blue-50 to-emerald-50">
      <div className="text-center px-4">
        <div className="mb-8">
          <div className="flex items-center justify-center mb-4">
            <div className="p-4 bg-orange-100 rounded-full">
              <Wheat className="h-16 w-16 text-orange-600" />
            </div>
          </div>
          <h1 className="text-6xl font-bold text-gray-900 mb-2">404</h1>
          <h2 className="text-2xl font-semibold text-gray-700 mb-4">
            Page Not Found
          </h2>
          <p className="text-gray-600 max-w-md mx-auto mb-8">
            Oops! It looks like this weather station hasn't been deployed yet. 
            Let's get you back to your AI4AgriWeather dashboard.
          </p>
        </div>
        
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <Button asChild>
            <Link to="/">
              <Home className="mr-2 h-4 w-4" />
              Go to Dashboard
            </Link>
          </Button>
          <Button variant="outline" onClick={() => window.history.back()}>
            <ArrowLeft className="mr-2 h-4 w-4" />
            Go Back
          </Button>
        </div>
      </div>
    </div>
  );
};

export default NotFoundPage;
</file>

<file path="src/services/authService.ts">
import { useAuth } from '@/features/authentication/hooks/AuthContext';
import { useToast } from '@/shared/hooks/use-toast';
import { useNavigate } from 'react-router-dom';

export const useLogout = () => {
  const { signOut } = useAuth();
  const { toast } = useToast();
  const navigate = useNavigate();

  const logout = async () => {
    try {
      await signOut();
      
      toast({
        title: "Signed out",
        description: "You have been successfully signed out."
      });
      
      // Redirect to auth page
      navigate('/auth', { replace: true });
      
    } catch (error: any) {
      console.error('Logout error:', error);
      
      // Even if there's an error, redirect to auth page
      toast({
        title: "Signed out",
        description: "You have been signed out locally.",
        variant: "default"
      });
      
      navigate('/auth', { replace: true });
    }
  };

  return { logout };
};
</file>

<file path="src/styles/agriculture-theme.css">
/* Tanzania Smart Farm - Agricultural Theme */

:root {
  /* Primary Colors - Earth & Nature Tones */
  --primary: 133 77% 36%; /* Deep Green - #28a745 */
  --primary-foreground: 0 0% 98%;
  
  /* Secondary Colors - Sky & Water */
  --secondary: 199 89% 48%; /* Sky Blue - #1da1f2 */
  --secondary-foreground: 222.2 47.4% 11.2%;
  
  /* Accent Colors - Harvest & Sun */
  --accent: 45 93% 47%; /* Golden Yellow - #f7b500 */
  --accent-foreground: 45 100% 10%;
  
  /* Background Colors - Natural Tones */
  --background: 60 23% 97%; /* Light Cream - #faf9f6 */
  --foreground: 120 5% 15%; /* Dark Earth - #242624 */
  
  /* Card & Surface Colors */
  --card: 0 0% 100%;
  --card-foreground: 120 5% 15%;
  
  /* Alert Colors - Weather Conditions */
  --destructive: 0 84% 60%; /* Storm Red */
  --warning: 38 92% 50%; /* Drought Orange */
  --success: 142 71% 45%; /* Healthy Green */
  --info: 199 89% 48%; /* Clear Sky Blue */
  
  /* Muted Tones */
  --muted: 90 20% 96%;
  --muted-foreground: 90 5% 40%;
  
  /* Border Colors */
  --border: 90 20% 88%;
  --input: 90 20% 88%;
  --ring: 133 77% 36%;
  
  /* Chart Colors - Crop Types */
  --chart-1: 45 93% 47%; /* Maize - Golden */
  --chart-2: 25 75% 47%; /* Coffee - Brown */
  --chart-3: 142 71% 45%; /* Rice - Green */
  --chart-4: 199 89% 48%; /* Cotton - Blue */
  --chart-5: 0 75% 60%; /* Tomato - Red */
}

/* Custom Agricultural Icons Font */
@font-face {
  font-family: 'AgriIcons';
  src: url('/fonts/agri-icons.woff2') format('woff2');
}

/* Weather Condition Backgrounds */
.weather-sunny {
  background: linear-gradient(135deg, #87CEEB 0%, #FFE5B4 100%);
}

.weather-rainy {
  background: linear-gradient(135deg, #4B5563 0%, #1F2937 100%);
}

.weather-cloudy {
  background: linear-gradient(135deg, #9CA3AF 0%, #E5E7EB 100%);
}

/* Crop Health Indicators */
.crop-health-excellent {
  background-color: hsl(var(--success));
  color: white;
}

.crop-health-good {
  background-color: hsl(142 50% 60%);
  color: white;
}

.crop-health-warning {
  background-color: hsl(var(--warning));
  color: white;
}

.crop-health-critical {
  background-color: hsl(var(--destructive));
  color: white;
}

/* Agricultural Pattern Backgrounds */
.farm-pattern {
  background-image: 
    repeating-linear-gradient(
      45deg,
      transparent,
      transparent 10px,
      rgba(40, 167, 69, 0.03) 10px,
      rgba(40, 167, 69, 0.03) 20px
    );
}

/* Seasonal Themes */
.season-planting {
  border-left: 4px solid hsl(var(--success));
}

.season-growing {
  border-left: 4px solid hsl(var(--primary));
}

.season-harvest {
  border-left: 4px solid hsl(var(--accent));
}

.season-fallow {
  border-left: 4px solid hsl(var(--muted-foreground));
}
</file>

<file path="src/types/message.ts">
export interface MessageSegment {
  text: string;
  citation_id?: number;
}

export interface Citation {
  citation_id: number;
  source_id: string;
  source_title: string;
  source_type: string;
  chunk_lines_from?: number;
  chunk_lines_to?: number;
  chunk_index?: number;
  excerpt?: string;
}

export interface EnhancedChatMessage {
  id: number;
  session_id: string;
  message: {
    type: 'human' | 'ai';
    content: string | {
      segments: MessageSegment[];
      citations: Citation[];
    };
    additional_kwargs?: any;
    response_metadata?: any;
    tool_calls?: any[];
    invalid_tool_calls?: any[];
  };
}
</file>

<file path="src/utils/agricultureTemplates.ts">
// Agricultural Knowledge Entry Templates for Tanzania Smart Farm Assistant

export interface KnowledgeTemplate {
  id: string;
  title: string;
  description: string;
  category: string;
  subcategory?: string;
  icon: string;
  color: string;
  tags: string[];
  difficulty_level: string;
  knowledge_type: string;
  season?: string;
  template_content: string;
  example_questions: string[];
  crop_types?: string[];
  region_specific?: boolean;
  target_regions?: string[];
}

export const AGRICULTURAL_CATEGORIES = {
  weather_climate: {
    name: "Weather & Climate",
    icon: "🌤️",
    color: "bg-blue-100",
    subcategories: ["weather_forecast", "climate_adaptation", "seasonal_planning", "drought_management", "flood_preparedness"]
  },
  crop_management: {
    name: "Crop Management",
    icon: "🌾",
    color: "bg-green-100",
    subcategories: ["planting", "fertilization", "harvesting", "crop_rotation", "yield_optimization"]
  },
  pest_disease: {
    name: "Pest & Disease",
    icon: "🐛",
    color: "bg-red-100",
    subcategories: ["identification", "prevention", "treatment", "integrated_pest_management", "biological_control"]
  },
  market_information: {
    name: "Market Information",
    icon: "📈",
    color: "bg-purple-100",
    subcategories: ["pricing", "market_access", "supply_chain", "value_addition", "export_opportunities"]
  },
  soil_management: {
    name: "Soil Management",
    icon: "🌱",
    color: "bg-amber-100",
    subcategories: ["soil_testing", "fertility", "conservation", "erosion_control", "organic_matter"]
  },
  irrigation: {
    name: "Irrigation",
    icon: "💧",
    color: "bg-cyan-100",
    subcategories: ["water_management", "irrigation_systems", "efficiency", "scheduling", "rainwater_harvesting"]
  },
  general_farming: {
    name: "General Farming",
    icon: "🚜",
    color: "bg-gray-100",
    subcategories: ["farm_planning", "record_keeping", "financial_management", "equipment", "storage"]
  }
};

export const KNOWLEDGE_TEMPLATES: KnowledgeTemplate[] = [
  // Weather & Climate Templates
  {
    id: "weather_forecast_guide",
    title: "Weekly Weather Forecast Analysis",
    description: "Template for recording and analyzing weekly weather forecasts for farm planning",
    category: "weather_climate",
    subcategory: "weather_forecast",
    icon: "⛅",
    color: "bg-blue-100",
    tags: ["forecast", "planning", "weather"],
    difficulty_level: "beginner",
    knowledge_type: "guide",
    season: "year_round",
    template_content: `# Weekly Weather Forecast Analysis

## Date Range: [Insert dates]

### Current Weather Conditions
- Temperature: [Min/Max temperatures]
- Humidity: [Percentage]
- Rainfall: [Amount in mm]
- Wind: [Speed and direction]

### 7-Day Forecast
| Day | Temperature | Rainfall | Humidity | Wind | Notes |
|-----|-------------|----------|----------|------|-------|
| Mon | | | | | |
| Tue | | | | | |
| Wed | | | | | |
| Thu | | | | | |
| Fri | | | | | |
| Sat | | | | | |
| Sun | | | | | |

### Farming Implications
- **Planting decisions:** [What to plant/avoid planting]
- **Irrigation needs:** [Water requirements based on forecast]
- **Harvesting timing:** [Optimal harvesting windows]
- **Pest/disease risk:** [Weather-related risks to watch]

### Action Items
- [ ] [Specific action based on forecast]
- [ ] [Specific action based on forecast]
- [ ] [Specific action based on forecast]

### Notes
[Additional observations and insights]`,
    example_questions: [
      "What crops should I plant based on this week's forecast?",
      "How much irrigation will my crops need?",
      "When is the best time to harvest this week?"
    ],
    region_specific: false
  },

  {
    id: "drought_management_plan",
    title: "Drought Management Strategy",
    description: "Comprehensive plan for managing farm operations during drought conditions",
    category: "weather_climate",
    subcategory: "drought_management",
    icon: "☀️",
    color: "bg-orange-100",
    tags: ["drought", "water conservation", "crisis management"],
    difficulty_level: "intermediate",
    knowledge_type: "guide",
    season: "dry",
    template_content: `# Drought Management Strategy

## Drought Assessment
- **Severity Level:** [Mild/Moderate/Severe/Extreme]
- **Duration Expected:** [Weeks/Months]
- **Current Water Reserves:** [Amount available]

### Immediate Actions (0-2 weeks)
- [ ] Assess current water storage
- [ ] Prioritize crop watering schedule
- [ ] Implement water conservation measures
- [ ] Review livestock water needs

### Short-term Actions (2-8 weeks)
- [ ] Switch to drought-resistant crop varieties
- [ ] Modify planting schedules
- [ ] Implement mulching strategies
- [ ] Explore alternative water sources

### Long-term Actions (2+ months)
- [ ] Install water-efficient irrigation systems
- [ ] Develop rainwater harvesting infrastructure
- [ ] Plan drought-resistant crop rotations
- [ ] Build community water storage

### Water Conservation Techniques
1. **Mulching:** [Materials and application methods]
2. **Drip Irrigation:** [Setup and maintenance]
3. **Rainwater Harvesting:** [Collection and storage methods]
4. **Soil Management:** [Techniques to retain moisture]

### Crop Management During Drought
- **Priority Crops:** [Which crops to save first]
- **Water Allocation:** [Amount per crop type]
- **Harvest Timing:** [Early harvest considerations]

### Financial Impact Assessment
- **Expected Yield Reduction:** [Percentage]
- **Additional Costs:** [Irrigation, labor, etc.]
- **Insurance Claims:** [If applicable]

### Recovery Planning
- **Post-drought activities:** [Soil rehabilitation, replanting]
- **Lessons learned:** [What worked, what didn't]`,
    example_questions: [
      "How can I conserve water during drought?",
      "Which crops should I prioritize during water shortage?",
      "What are the best drought-resistant crops for my region?"
    ],
    region_specific: true,
    target_regions: ["northern", "central"]
  },

  // Crop Management Templates
  {
    id: "crop_planting_guide",
    title: "Crop Planting Plan",
    description: "Detailed planning template for crop planting activities",
    category: "crop_management",
    subcategory: "planting",
    icon: "🌱",
    color: "bg-green-100",
    tags: ["planting", "scheduling", "crops"],
    difficulty_level: "beginner",
    knowledge_type: "guide",
    season: "planting",
    template_content: `# Crop Planting Plan

## Season: [Wet/Dry Season Year]

### Crop Selection
| Crop | Variety | Area (hectares) | Planting Date | Expected Harvest | Market Price |
|------|---------|-----------------|---------------|------------------|--------------|
| | | | | | |
| | | | | | |
| | | | | | |

### Land Preparation
- **Field preparation started:** [Date]
- **Soil testing completed:** [Date and results]
- **Fertilizer application:** [Type and amount]
- **Field layout:** [Sketch or description]

### Planting Schedule
#### Week 1: [Dates]
- [ ] Plant [Crop name] in [Field section]
- [ ] Apply base fertilizer
- [ ] Set up irrigation if needed

#### Week 2: [Dates]
- [ ] Plant [Crop name] in [Field section]
- [ ] Monitor germination of week 1 plantings
- [ ] Weed control activities

#### Week 3: [Dates]
- [ ] Complete remaining plantings
- [ ] First inspection of all planted areas
- [ ] Adjust irrigation as needed

### Input Requirements
- **Seeds:** [Quantities and sources]
- **Fertilizers:** [Types and application rates]
- **Pesticides:** [If needed, types and rates]
- **Labor:** [Number of workers and days]

### Weather Considerations
- **Optimal conditions:** [Temperature, rainfall requirements]
- **Risk factors:** [Weather conditions to avoid]
- **Contingency plans:** [What to do if weather doesn't cooperate]

### Expected Timeline
- **Germination:** [Expected days]
- **First harvest:** [Expected date]
- **Peak harvest:** [Expected period]
- **Final harvest:** [Expected completion]

### Quality Targets
- **Expected yield:** [Per hectare]
- **Quality standards:** [Market requirements]
- **Post-harvest handling:** [Storage and processing plans]`,
    example_questions: [
      "What's the best time to plant maize in my region?",
      "How much fertilizer should I apply for optimal yield?",
      "What spacing should I use for different crops?"
    ],
    crop_types: ["maize", "rice", "beans", "cassava", "groundnuts"],
    region_specific: true
  },

  {
    id: "harvest_planning",
    title: "Harvest Planning & Management",
    description: "Comprehensive template for planning and managing harvest activities",
    category: "crop_management",
    subcategory: "harvesting",
    icon: "🚜",
    color: "bg-yellow-100",
    tags: ["harvest", "post-harvest", "quality"],
    difficulty_level: "intermediate",
    knowledge_type: "guide",
    season: "harvest",
    template_content: `# Harvest Planning & Management

## Crop: [Crop Name] | Season: [Year/Season]

### Pre-Harvest Assessment
- **Maturity indicators:** [Visual and physical signs]
- **Quality assessment:** [Current condition]
- **Estimated yield:** [Per hectare]
- **Weather forecast:** [Next 2 weeks]

### Harvest Schedule
| Field Section | Area | Maturity Date | Harvest Date | Labor Needed | Equipment |
|---------------|------|---------------|--------------|--------------|-----------|
| | | | | | |
| | | | | | |

### Labor Planning
- **Workers needed:** [Number per day]
- **Skills required:** [Harvesting, sorting, packaging]
- **Daily targets:** [Amount to harvest per day]
- **Payment structure:** [Daily wage or piece rate]

### Equipment & Materials
- [ ] Harvesting tools (sickles, baskets, etc.)
- [ ] Transport vehicles/carts
- [ ] Storage containers/bags
- [ ] Cleaning/washing equipment
- [ ] Weighing scales

### Quality Control
#### Harvest Standards
- **Maturity criteria:** [Specific indicators]
- **Size specifications:** [Market requirements]
- **Damage tolerance:** [Acceptable levels]

#### Grading System
- **Grade A:** [Specifications and expected percentage]
- **Grade B:** [Specifications and expected percentage]
- **Grade C:** [Specifications and expected percentage]
- **Rejects:** [What to do with substandard produce]

### Post-Harvest Handling
#### Immediate Actions (0-24 hours)
- [ ] Clean and sort harvested produce
- [ ] Remove field heat if applicable
- [ ] Package according to market requirements
- [ ] Transport to storage/market

#### Storage Preparation
- **Storage method:** [Fresh, dried, processed]
- **Storage duration:** [Expected time to market]
- **Storage conditions:** [Temperature, humidity requirements]
- **Pest control:** [Prevention measures]

### Market Preparation
- **Target markets:** [Local, regional, export]
- **Current market prices:** [Per unit]
- **Transport arrangements:** [Method and cost]
- **Documentation:** [Certificates, permits needed]

### Financial Tracking
| Item | Quantity | Price/Unit | Total Value |
|------|----------|------------|-------------|
| Grade A | | | |
| Grade B | | | |
| Grade C | | | |
| **Total Revenue** | | | |

### Lessons Learned
- **What went well:** [Successes]
- **Challenges faced:** [Problems encountered]
- **Improvements for next season:** [Action items]`,
    example_questions: [
      "When is the optimal time to harvest my crops?",
      "How can I improve post-harvest quality?",
      "What are the best storage methods for my produce?"
    ],
    crop_types: ["maize", "rice", "beans", "cassava", "vegetables"],
    region_specific: false
  },

  // Pest & Disease Templates
  {
    id: "pest_identification",
    title: "Pest & Disease Identification Guide",
    description: "Template for documenting and managing pest and disease issues",
    category: "pest_disease",
    subcategory: "identification",
    icon: "🔍",
    color: "bg-red-100",
    tags: ["pest control", "disease management", "identification"],
    difficulty_level: "intermediate",
    knowledge_type: "troubleshooting",
    season: "year_round",
    template_content: `# Pest & Disease Identification Guide

## Problem Report
- **Date observed:** [Date]
- **Crop affected:** [Crop name and variety]
- **Growth stage:** [Seedling/Vegetative/Flowering/Fruiting]
- **Weather conditions:** [Recent weather patterns]

### Symptoms Observed
#### Visual Symptoms
- **Leaves:** [Color, spots, holes, wilting, etc.]
- **Stems:** [Discoloration, lesions, rotting, etc.]
- **Fruits/Seeds:** [Spots, deformation, dropping, etc.]
- **Roots:** [If visible - rotting, discoloration]

#### Distribution Pattern
- **Area affected:** [Percentage of field]
- **Pattern:** [Random/Clustered/Edge of field/Whole field]
- **Progression:** [How fast is it spreading]

### Pest Identification
#### Insects Observed
| Pest Type | Size | Color | Location on Plant | Damage Type |
|-----------|------|-------|-------------------|-------------|
| | | | | |
| | | | | |

#### Other Pests
- **Nematodes:** [Root damage signs]
- **Rodents:** [Damage patterns]
- **Birds:** [Damage type and timing]

### Disease Identification
#### Fungal Diseases
- **Symptoms:** [Spots, molds, wilting patterns]
- **Environmental conditions:** [High humidity, poor drainage]
- **Affected parts:** [Leaves, stems, fruits, roots]

#### Bacterial Diseases
- **Symptoms:** [Water-soaked spots, ooze, yellowing]
- **Spread pattern:** [Through wounds, water splash]

#### Viral Diseases
- **Symptoms:** [Mottling, stunting, deformation]
- **Vector presence:** [Aphids, whiteflies, thrips]

### Management Strategy
#### Immediate Actions (0-3 days)
- [ ] Isolate affected plants if possible
- [ ] Remove and destroy severely affected parts
- [ ] Apply emergency treatment if available
- [ ] Document and photograph for reference

#### Short-term Management (1-2 weeks)
- [ ] Apply appropriate pesticide/fungicide
- [ ] Improve cultural practices
- [ ] Monitor treatment effectiveness
- [ ] Adjust irrigation/fertilization

#### Long-term Prevention (Next season)
- [ ] Select resistant varieties
- [ ] Improve field sanitation
- [ ] Plan crop rotation
- [ ] Install monitoring traps

### Treatment Record
| Date | Treatment Applied | Rate | Method | Cost | Effectiveness |
|------|-------------------|------|--------|------|---------------|
| | | | | | |

### Economic Impact
- **Estimated yield loss:** [Percentage]
- **Treatment costs:** [Total amount spent]
- **Prevented losses:** [Estimated value of saved crop]

### Follow-up Monitoring
- **Weekly checks:** [What to look for]
- **Success indicators:** [Signs of recovery]
- **Failure indicators:** [When to change strategy]`,
    example_questions: [
      "What pest is attacking my maize plants?",
      "How can I prevent fungal diseases in humid conditions?",
      "What's the best organic pest control method?"
    ],
    crop_types: ["all"],
    region_specific: false
  },

  // Market Information Templates
  {
    id: "market_price_tracking",
    title: "Market Price Analysis",
    description: "Template for tracking and analyzing market prices and trends",
    category: "market_information",
    subcategory: "pricing",
    icon: "💰",
    color: "bg-green-100",
    tags: ["market prices", "trends", "profit analysis"],
    difficulty_level: "intermediate",
    knowledge_type: "analysis",
    season: "year_round",
    template_content: `# Market Price Analysis

## Period: [Month/Year]

### Current Market Prices
| Crop | Grade | Local Market | Regional Market | Export Market | Last Week | % Change |
|------|-------|--------------|----------------|---------------|-----------|----------|
| | | | | | | |
| | | | | | | |

### Seasonal Trends
#### High Season Prices
- **Period:** [Months when prices are highest]
- **Average price:** [Price range]
- **Demand factors:** [Why prices are high]

#### Low Season Prices
- **Period:** [Months when prices are lowest]
- **Average price:** [Price range]
- **Supply factors:** [Why prices are low]

### Market Analysis
#### Demand Factors
- **Population growth:** [Impact on demand]
- **Economic conditions:** [Purchasing power]
- **Seasonal consumption:** [Festival periods, school terms]
- **Processing industry:** [Industrial demand]

#### Supply Factors
- **Local production:** [Harvest periods and volumes]
- **Import competition:** [Cheaper imports affecting prices]
- **Storage capacity:** [Ability to hold produce]
- **Transport costs:** [Access to markets]

### Price Forecasting
#### Next Month Prediction
- **Expected price range:** [High/Low estimates]
- **Confidence level:** [High/Medium/Low]
- **Key factors:** [What will drive prices]

#### Next Season Outlook
- **Planting recommendations:** [What to plant for best returns]
- **Market opportunities:** [New markets to explore]
- **Risk factors:** [Potential challenges]

### Profit Analysis
#### Production Costs
| Input | Cost per Hectare | Total Cost |
|-------|------------------|------------|
| Seeds | | |
| Fertilizer | | |
| Labor | | |
| Transport | | |
| **Total Cost** | | |

#### Revenue Calculation
| Scenario | Yield (kg/ha) | Price (TSh/kg) | Revenue | Profit | ROI % |
|----------|---------------|----------------|---------|--------|-------|
| Optimistic | | | | | |
| Realistic | | | | | |
| Pessimistic | | | | | |

### Marketing Strategy
#### Target Markets
- **Primary market:** [Local/Regional/Export]
- **Backup markets:** [Alternative options]
- **Direct sales:** [Farm gate, farmer markets]
- **Contract farming:** [Agreements with buyers]

#### Value Addition Opportunities
- **Processing options:** [Drying, milling, packaging]
- **Quality improvements:** [Organic certification, grading]
- **Timing strategies:** [When to sell for best prices]

### Action Items
- [ ] Monitor prices weekly
- [ ] Identify new market opportunities
- [ ] Negotiate better prices with buyers
- [ ] Explore value addition options
- [ ] Plan next season based on market outlook`,
    example_questions: [
      "What are the current market prices for maize?",
      "When is the best time to sell my harvest?",
      "Which crops are most profitable this season?"
    ],
    crop_types: ["maize", "rice", "beans", "cassava", "vegetables"],
    region_specific: true
  }
];

export const COMMON_CROPS_TANZANIA = [
  "maize", "rice", "cassava", "beans", "groundnuts", "sesame", "sorghum", "millet",
  "sweet_potato", "irish_potato", "banana", "plantain", "tomato", "onion", "cabbage",
  "cotton", "coffee", "tea", "cashew", "coconut", "sunflower", "sugarcane"
];

export const TANZANIA_REGIONS = [
  "arusha", "dar_es_salaam", "dodoma", "geita", "iringa", "kagera", "katavi",
  "kigoma", "kilimanjaro", "lindi", "manyara", "mara", "mbeya", "morogoro",
  "mtwara", "mwanza", "njombe", "pemba_north", "pemba_south", "pwani", "rukwa",
  "ruvuma", "shinyanga", "simiyu", "singida", "songwe", "tabora", "tanga",
  "unguja_north", "unguja_south"
];

// Helper functions
export const getCategoryIcon = (category: string): string => {
  return AGRICULTURAL_CATEGORIES[category]?.icon || "📝";
};

export const getCategoryColor = (category: string): string => {
  return AGRICULTURAL_CATEGORIES[category]?.color || "bg-gray-100";
};

export const getCategoryName = (category: string): string => {
  return AGRICULTURAL_CATEGORIES[category]?.name || category;
};

export const getTemplatesByCategory = (category: string): KnowledgeTemplate[] => {
  return KNOWLEDGE_TEMPLATES.filter(template => template.category === category);
};

export const searchTemplates = (query: string): KnowledgeTemplate[] => {
  const lowercaseQuery = query.toLowerCase();
  return KNOWLEDGE_TEMPLATES.filter(template => 
    template.title.toLowerCase().includes(lowercaseQuery) ||
    template.description.toLowerCase().includes(lowercaseQuery) ||
    template.tags.some(tag => tag.toLowerCase().includes(lowercaseQuery))
  );
};
</file>

<file path="src/utils/permissions.ts">
// Role-based Access Control (RBAC) utilities for AI4AgriWeather

export type UserRole = 'farmer' | 'extension_officer' | 'researcher' | 'admin' | 'cooperative_member' | 'agribusiness';

export interface Permission {
  resource: string;
  action: string;
}

// Define role capabilities
export const ROLE_PERMISSIONS: Record<UserRole, Permission[]> = {
  farmer: [
    { resource: 'knowledge_entries', action: 'create' },
    { resource: 'knowledge_entries', action: 'read_own' },
    { resource: 'knowledge_entries', action: 'update_own' },
    { resource: 'knowledge_entries', action: 'delete_own' },
    { resource: 'profile', action: 'read_own' },
    { resource: 'profile', action: 'update_own' },
    { resource: 'templates', action: 'read' },
    { resource: 'knowledge_entries', action: 'export_own' },
  ],
  
  extension_officer: [
    { resource: 'knowledge_entries', action: 'create' },
    { resource: 'knowledge_entries', action: 'read_own' },
    { resource: 'knowledge_entries', action: 'read_shared' },
    { resource: 'knowledge_entries', action: 'update_own' },
    { resource: 'knowledge_entries', action: 'delete_own' },
    { resource: 'knowledge_entries', action: 'share' },
    { resource: 'knowledge_entries', action: 'export_own' },
    { resource: 'profile', action: 'read_own' },
    { resource: 'profile', action: 'update_own' },
    { resource: 'templates', action: 'read' },
    { resource: 'templates', action: 'create' },
    { resource: 'farmers', action: 'view_list' },
    { resource: 'analytics', action: 'view_basic' },
  ],
  
  researcher: [
    { resource: 'knowledge_entries', action: 'create' },
    { resource: 'knowledge_entries', action: 'read_own' },
    { resource: 'knowledge_entries', action: 'read_shared' },
    { resource: 'knowledge_entries', action: 'read_research' },
    { resource: 'knowledge_entries', action: 'update_own' },
    { resource: 'knowledge_entries', action: 'delete_own' },
    { resource: 'knowledge_entries', action: 'share' },
    { resource: 'knowledge_entries', action: 'export_own' },
    { resource: 'knowledge_entries', action: 'export_research' },
    { resource: 'profile', action: 'read_own' },
    { resource: 'profile', action: 'update_own' },
    { resource: 'templates', action: 'read' },
    { resource: 'templates', action: 'create' },
    { resource: 'templates', action: 'modify' },
    { resource: 'analytics', action: 'view_advanced' },
    { resource: 'data', action: 'export_aggregated' },
  ],
  
  admin: [
    { resource: '*', action: '*' }, // Admin has all permissions
  ],
  
  cooperative_member: [
    { resource: 'knowledge_entries', action: 'create' },
    { resource: 'knowledge_entries', action: 'read_own' },
    { resource: 'knowledge_entries', action: 'read_cooperative' },
    { resource: 'knowledge_entries', action: 'update_own' },
    { resource: 'knowledge_entries', action: 'delete_own' },
    { resource: 'knowledge_entries', action: 'share_cooperative' },
    { resource: 'knowledge_entries', action: 'export_own' },
    { resource: 'profile', action: 'read_own' },
    { resource: 'profile', action: 'update_own' },
    { resource: 'templates', action: 'read' },
    { resource: 'cooperative', action: 'view' },
    { resource: 'cooperative', action: 'participate' },
  ],
  
  agribusiness: [
    { resource: 'knowledge_entries', action: 'create' },
    { resource: 'knowledge_entries', action: 'read_own' },
    { resource: 'knowledge_entries', action: 'read_business' },
    { resource: 'knowledge_entries', action: 'update_own' },
    { resource: 'knowledge_entries', action: 'delete_own' },
    { resource: 'knowledge_entries', action: 'share_business' },
    { resource: 'knowledge_entries', action: 'export_own' },
    { resource: 'profile', action: 'read_own' },
    { resource: 'profile', action: 'update_own' },
    { resource: 'templates', action: 'read' },
    { resource: 'analytics', action: 'view_business' },
    { resource: 'market_data', action: 'access' },
  ],
};

// Permission checking utility
export const hasPermission = (
  userRole: UserRole | null | undefined,
  resource: string,
  action: string
): boolean => {
  if (!userRole) return false;
  
  const permissions = ROLE_PERMISSIONS[userRole];
  if (!permissions) return false;
  
  // Check for admin wildcard permissions
  if (permissions.some(p => p.resource === '*' && p.action === '*')) {
    return true;
  }
  
  // Check for specific permission
  return permissions.some(p => 
    (p.resource === resource || p.resource === '*') &&
    (p.action === action || p.action === '*')
  );
};

// Check if user can access knowledge entries of specific sharing level
export const canAccessKnowledgeEntry = (
  userRole: UserRole | null | undefined,
  entryOwnerId: string,
  currentUserId: string,
  sharingLevel: string = 'private'
): boolean => {
  if (!userRole || !currentUserId) return false;
  
  // Owner can always access their own entries
  if (entryOwnerId === currentUserId) {
    return hasPermission(userRole, 'knowledge_entries', 'read_own');
  }
  
  // Check sharing level permissions
  switch (sharingLevel) {
    case 'public':
      return hasPermission(userRole, 'knowledge_entries', 'read_shared');
    case 'cooperative':
      return hasPermission(userRole, 'knowledge_entries', 'read_cooperative');
    case 'research':
      return hasPermission(userRole, 'knowledge_entries', 'read_research');
    case 'business':
      return hasPermission(userRole, 'knowledge_entries', 'read_business');
    default:
      return false;
  }
};

// Get available sharing options based on user role
export const getAvailableSharingOptions = (userRole: UserRole | null | undefined): Array<{
  value: string;
  label: string;
  description: string;
}> => {
  const options = [
    { value: 'private', label: 'Private', description: 'Only you can see this entry' }
  ];
  
  if (!userRole) return options;
  
  if (hasPermission(userRole, 'knowledge_entries', 'share')) {
    options.push({
      value: 'public',
      label: 'Public',
      description: 'Share with other farmers and extension officers'
    });
  }
  
  if (hasPermission(userRole, 'knowledge_entries', 'share_cooperative')) {
    options.push({
      value: 'cooperative',
      label: 'Cooperative',
      description: 'Share with your cooperative members'
    });
  }
  
  if (hasPermission(userRole, 'knowledge_entries', 'share_business')) {
    options.push({
      value: 'business',
      label: 'Business',
      description: 'Share with business partners and suppliers'
    });
  }
  
  if (userRole === 'researcher' || userRole === 'admin') {
    options.push({
      value: 'research',
      label: 'Research',
      description: 'Share for agricultural research purposes'
    });
  }
  
  return options;
};

// Check if user can perform bulk operations
export const canPerformBulkOperation = (
  userRole: UserRole | null | undefined,
  operation: 'delete' | 'archive' | 'export' | 'duplicate',
  entriesOwnedByUser: boolean = true
): boolean => {
  if (!userRole) return false;
  
  switch (operation) {
    case 'delete':
      return entriesOwnedByUser && hasPermission(userRole, 'knowledge_entries', 'delete_own');
    case 'archive':
      return entriesOwnedByUser && hasPermission(userRole, 'knowledge_entries', 'update_own');
    case 'export':
      return hasPermission(userRole, 'knowledge_entries', 'export_own');
    case 'duplicate':
      return hasPermission(userRole, 'knowledge_entries', 'create');
    default:
      return false;
  }
};

// Get role display information
export const getRoleInfo = (role: UserRole): {
  name: string;
  description: string;
  color: string;
  icon: string;
} => {
  const roleInfo = {
    farmer: {
      name: 'Farmer',
      description: 'Individual farmer managing their own agricultural knowledge',
      color: 'green',
      icon: '🌾'
    },
    extension_officer: {
      name: 'Extension Officer',
      description: 'Agricultural extension officer providing guidance to farmers',
      color: 'blue',
      icon: '👩‍🌾'
    },
    researcher: {
      name: 'Researcher',
      description: 'Agricultural researcher studying farming practices and innovations',
      color: 'purple',
      icon: '🔬'
    },
    admin: {
      name: 'Administrator',
      description: 'System administrator with full access to all features',
      color: 'red',
      icon: '⚙️'
    },
    cooperative_member: {
      name: 'Cooperative Member',
      description: 'Member of an agricultural cooperative sharing knowledge with peers',
      color: 'orange',
      icon: '🤝'
    },
    agribusiness: {
      name: 'Agribusiness',
      description: 'Business entity involved in agricultural value chain',
      color: 'indigo',
      icon: '🏢'
    }
  };
  
  return roleInfo[role];
};

// Check if user has administrative privileges
export const isAdmin = (userRole: UserRole | null | undefined): boolean => {
  return userRole === 'admin';
};

// Check if user can manage templates
export const canManageTemplates = (userRole: UserRole | null | undefined): boolean => {
  return hasPermission(userRole, 'templates', 'create') || 
         hasPermission(userRole, 'templates', 'modify');
};

// Check if user can view analytics
export const canViewAnalytics = (userRole: UserRole | null | undefined): boolean => {
  return hasPermission(userRole, 'analytics', 'view_basic') ||
         hasPermission(userRole, 'analytics', 'view_advanced') ||
         hasPermission(userRole, 'analytics', 'view_business');
};

// Get analytics level based on role
export const getAnalyticsLevel = (userRole: UserRole | null | undefined): 'none' | 'basic' | 'advanced' | 'business' => {
  if (!userRole) return 'none';
  
  if (hasPermission(userRole, 'analytics', 'view_advanced')) return 'advanced';
  if (hasPermission(userRole, 'analytics', 'view_business')) return 'business';
  if (hasPermission(userRole, 'analytics', 'view_basic')) return 'basic';
  
  return 'none';
};
</file>

<file path="src/App.css">
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</file>

<file path="src/index.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;

    --radius: 0.5rem;

    --sidebar-background: 0 0% 98%;

    --sidebar-foreground: 240 5.3% 26.1%;

    --sidebar-primary: 240 5.9% 10%;

    --sidebar-primary-foreground: 0 0% 98%;

    --sidebar-accent: 240 4.8% 95.9%;

    --sidebar-accent-foreground: 240 5.9% 10%;

    --sidebar-border: 220 13% 91%;

    --sidebar-ring: 217.2 91.2% 59.8%;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;

    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;

    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;

    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;

    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;

    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;

    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="src/main.tsx">
import { createRoot } from 'react-dom/client'
import App from './App.tsx'
import './index.css'
import './i18n';

// Debug mode for testing
const DEBUG = true;

if (DEBUG) {
  console.log('=== DEBUG MODE ===');
  console.log('Root element:', document.getElementById("root"));
  console.log('Environment:', import.meta.env.MODE);
  console.log('Supabase URL:', import.meta.env.VITE_SUPABASE_URL);
  console.log('Supabase Key:', import.meta.env.VITE_SUPABASE_ANON_KEY ? 'Set' : 'Not set');
}

const rootElement = document.getElementById("root");
if (!rootElement) {
  console.error('Root element not found!');
} else {
  try {
    const root = createRoot(rootElement);
    root.render(<App />);
    console.log('React app rendered successfully');
  } catch (error) {
    console.error('Error rendering React app:', error);
  }
}
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path="supabase/functions/audio-generation-callback/index.ts">
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { authenticateWebhook, getWebhookSecret } from '../_shared/webhook-auth.ts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type, x-webhook-signature',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Read raw body for signature verification
    const rawBody = await req.text()
    
    // Authenticate webhook
    const webhookConfig = {
      secret: getWebhookSecret('AUDIO_WEBHOOK_SECRET'),
      headerName: 'x-webhook-signature',
      encoding: 'hex' as const,
      prefix: 'sha256='
    }

    const authResponse = await authenticateWebhook(req, rawBody, webhookConfig)
    if (authResponse) {
      return authResponse
    }

    // Parse the verified payload
    const body = JSON.parse(rawBody)
    console.log('Audio generation callback received:', body)
    
    const { notebook_id, audio_url, status, error } = body
    
    if (!notebook_id) {
      return new Response(
        JSON.stringify({ error: 'Notebook ID is required' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    const supabase = createClient(supabaseUrl, supabaseServiceKey)

    if (status === 'success' && audio_url) {
      // Set expiration time (24 hours from now)
      const expiresAt = new Date()
      expiresAt.setHours(expiresAt.getHours() + 24)

      // Update notebook with audio URL and success status
      const { error: updateError } = await supabase
        .from('notebooks')
        .update({
          audio_overview_url: audio_url,
          audio_url_expires_at: expiresAt.toISOString(),
          audio_overview_generation_status: 'completed'
        })
        .eq('id', notebook_id)

      if (updateError) {
        console.error('Error updating notebook with audio URL:', updateError)
        throw updateError
      }

      console.log('Audio overview completed successfully for notebook:', notebook_id)
    } else {
      // Update notebook with failed status
      const { error: updateError } = await supabase
        .from('notebooks')
        .update({
          audio_overview_generation_status: 'failed'
        })
        .eq('id', notebook_id)

      if (updateError) {
        console.error('Error updating notebook status to failed:', updateError)
        throw updateError
      }

      console.log('Audio generation failed for notebook:', notebook_id, 'Error:', error)
    }

    return new Response(
      JSON.stringify({ success: true }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )

  } catch (error) {
    console.error('Error in audio-generation-callback:', error)
    
    // Check if it's a webhook secret configuration error
    if (error.message?.includes('AUDIO_WEBHOOK_SECRET')) {
      return new Response(
        JSON.stringify({ 
          error: 'Webhook authentication not configured',
          message: 'Server configuration error' 
        }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }
    
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Failed to process callback' 
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )
  }
})
</file>

<file path="supabase/functions/generate-audio-overview/index.ts">
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { notebookId } = await req.json()
    
    if (!notebookId) {
      return new Response(
        JSON.stringify({ error: 'Notebook ID is required' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
    const supabase = createClient(supabaseUrl, supabaseServiceKey)

    // Update notebook status to indicate audio generation has started
    const { error: updateError } = await supabase
      .from('notebooks')
      .update({
        audio_overview_generation_status: 'generating'
      })
      .eq('id', notebookId)

    if (updateError) {
      console.error('Error updating notebook status:', updateError)
      throw updateError
    }

    // Get audio generation webhook URL and auth from secrets
    const audioGenerationWebhookUrl = Deno.env.get('AUDIO_GENERATION_WEBHOOK_URL')
    const authHeader = Deno.env.get('NOTEBOOK_GENERATION_AUTH')

    if (!audioGenerationWebhookUrl || !authHeader) {
      console.error('Missing audio generation webhook URL or auth')
      return new Response(
        JSON.stringify({ error: 'Audio generation service not configured' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    console.log('Starting audio overview generation for notebook:', notebookId)

    // Start the background task without awaiting
    EdgeRuntime.waitUntil(
      (async () => {
        try {
          // Call the external audio generation webhook
          const audioResponse = await fetch(audioGenerationWebhookUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': authHeader,
            },
            body: JSON.stringify({
              notebook_id: notebookId,
              callback_url: `${supabaseUrl}/functions/v1/audio-generation-callback`
            })
          })

          if (!audioResponse.ok) {
            const errorText = await audioResponse.text()
            console.error('Audio generation webhook failed:', errorText)
            
            // Update status to failed
            await supabase
              .from('notebooks')
              .update({ audio_overview_generation_status: 'failed' })
              .eq('id', notebookId)
          } else {
            console.log('Audio generation webhook called successfully for notebook:', notebookId)
          }
        } catch (error) {
          console.error('Background audio generation error:', error)
          
          // Update status to failed
          await supabase
            .from('notebooks')
            .update({ audio_overview_generation_status: 'failed' })
            .eq('id', notebookId)
        }
      })()
    )

    // Return immediately with success status
    return new Response(
      JSON.stringify({
        success: true,
        message: 'Audio generation started',
        status: 'generating'
      }),
      { 
        status: 200, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )

  } catch (error) {
    console.error('Error in generate-audio-overview:', error)
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Failed to start audio generation' 
      }),
      { 
        status: 500, 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    )
  }
})
</file>

<file path="supabase/functions/generate-note-title/index.ts">
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { content } = await req.json();

    if (!content) {
      return new Response(
        JSON.stringify({ error: 'Content is required' }), 
        { 
          status: 400, 
          headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
        }
      );
    }

    // Parse content if it's a structured AI response
    let textContent = content;
    try {
      const parsed = JSON.parse(content);
      if (parsed.segments && parsed.segments.length > 0) {
        // Extract text from first few segments
        textContent = parsed.segments
          .slice(0, 3)
          .map((segment: any) => segment.text)
          .join(' ');
      }
    } catch (e) {
      // Content is already plain text
    }

    // Truncate content to avoid token limits
    const truncatedContent = textContent.substring(0, 1000);

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { 
            role: 'system', 
            content: 'You are a helpful assistant that generates concise, descriptive titles. Generate a title that is exactly 5 words or fewer, capturing the main topic or theme of the content. Return only the title, nothing else.' 
          },
          { 
            role: 'user', 
            content: `Generate a 5-word title for this content: ${truncatedContent}` 
          }
        ],
        max_tokens: 20,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    const generatedTitle = data.choices[0].message.content.trim();

    console.log('Generated title:', generatedTitle);

    return new Response(
      JSON.stringify({ title: generatedTitle }), 
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  } catch (error) {
    console.error('Error in generate-note-title function:', error);
    return new Response(
      JSON.stringify({ error: error.message }), 
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});
</file>

<file path="supabase/functions/generate-notebook-content/index.ts">
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { notebookId, filePath, sourceType } = await req.json()

    if (!notebookId || !sourceType) {
      return new Response(
        JSON.stringify({ error: 'notebookId and sourceType are required' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    console.log('Processing request:', { notebookId, filePath, sourceType });

    // Get environment variables
    const webServiceUrl = Deno.env.get('NOTEBOOK_GENERATION_URL')
    const authHeader = Deno.env.get('NOTEBOOK_GENERATION_AUTH')

    if (!webServiceUrl || !authHeader) {
      console.error('Missing environment variables:', {
        hasUrl: !!webServiceUrl,
        hasAuth: !!authHeader
      })
      
      return new Response(
        JSON.stringify({ error: 'Web service configuration missing' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    // Initialize Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // Update notebook status to 'generating'
    await supabaseClient
      .from('notebooks')
      .update({ generation_status: 'generating' })
      .eq('id', notebookId)

    console.log('Calling external web service...')

    // Prepare payload based on source type
    let payload: any = {
      sourceType: sourceType
    };

    if (filePath) {
      // For file sources (PDF, audio) or URLs (website, YouTube)
      payload.filePath = filePath;
    } else {
      // For text sources, we need to get the content from the database
      const { data: source } = await supabaseClient
        .from('sources')
        .select('content')
        .eq('notebook_id', notebookId)
        .single();
      
      if (source?.content) {
        payload.content = source.content.substring(0, 5000); // Limit content size
      }
    }

    console.log('Sending payload to web service:', payload);

    // Call external web service
    const response = await fetch(webServiceUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': authHeader,
      },
      body: JSON.stringify(payload)
    })

    if (!response.ok) {
      console.error('Web service error:', response.status, response.statusText)
      const errorText = await response.text();
      console.error('Error response:', errorText);
      
      // Update status to failed
      await supabaseClient
        .from('notebooks')
        .update({ generation_status: 'failed' })
        .eq('id', notebookId)

      return new Response(
        JSON.stringify({ error: 'Failed to generate content from web service' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    const generatedData = await response.json()
    console.log('Generated data:', generatedData)

    // Parse the response format: object with output property
    let title, description, notebookIcon, backgroundColor, exampleQuestions;
    
    if (generatedData && generatedData.output) {
      const output = generatedData.output;
      title = output.title;
      description = output.summary;
      notebookIcon = output.notebook_icon;
      backgroundColor = output.background_color;
      exampleQuestions = output.example_questions || [];
    } else {
      console.error('Unexpected response format:', generatedData)
      
      await supabaseClient
        .from('notebooks')
        .update({ generation_status: 'failed' })
        .eq('id', notebookId)

      return new Response(
        JSON.stringify({ error: 'Invalid response format from web service' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    if (!title) {
      console.error('No title returned from web service')
      
      await supabaseClient
        .from('notebooks')
        .update({ generation_status: 'failed' })
        .eq('id', notebookId)

      return new Response(
        JSON.stringify({ error: 'No title in response from web service' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    // Update notebook with generated content including icon, color, and example questions
    const { error: notebookError } = await supabaseClient
      .from('notebooks')
      .update({
        title: title,
        description: description || null,
        icon: notebookIcon || '📝',
        color: backgroundColor || 'bg-gray-100',
        example_questions: exampleQuestions || [],
        generation_status: 'completed'
      })
      .eq('id', notebookId)

    if (notebookError) {
      console.error('Notebook update error:', notebookError)
      return new Response(
        JSON.stringify({ error: 'Failed to update notebook' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    console.log('Successfully updated notebook with example questions:', exampleQuestions)

    return new Response(
      JSON.stringify({ 
        success: true, 
        title, 
        description,
        icon: notebookIcon,
        color: backgroundColor,
        exampleQuestions,
        message: 'Notebook content generated successfully' 
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )

  } catch (error) {
    console.error('Edge function error:', error)
    return new Response(
      JSON.stringify({ error: 'Internal server error' }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  }
})
</file>

<file path="supabase/functions/process-document/index.ts">
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { sourceId, filePath, sourceType } = await req.json()

    if (!sourceId || !filePath || !sourceType) {
      return new Response(
        JSON.stringify({ error: 'sourceId, filePath, and sourceType are required' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    console.log('Processing document:', { source_id: sourceId, file_path: filePath, source_type: sourceType });

    // Get environment variables
    const webhookUrl = Deno.env.get('DOCUMENT_PROCESSING_WEBHOOK_URL')
    const authHeader = Deno.env.get('NOTEBOOK_GENERATION_AUTH')

    if (!webhookUrl) {
      console.error('Missing DOCUMENT_PROCESSING_WEBHOOK_URL environment variable')
      
      // Initialize Supabase client to update status
      const supabaseClient = createClient(
        Deno.env.get('SUPABASE_URL') ?? '',
        Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
      )

      // Update source status to failed
      await supabaseClient
        .from('sources')
        .update({ processing_status: 'failed' })
        .eq('id', sourceId)

      return new Response(
        JSON.stringify({ error: 'Document processing webhook URL not configured' }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    console.log('Calling external webhook:', webhookUrl);

    // Create the file URL for public access
    const fileUrl = `${Deno.env.get('SUPABASE_URL')}/storage/v1/object/public/sources/${filePath}`

    // Prepare the payload for the webhook with correct variable names
    const payload = {
      source_id: sourceId,
      file_url: fileUrl,
      file_path: filePath,
      source_type: sourceType,
      callback_url: `${Deno.env.get('SUPABASE_URL')}/functions/v1/process-document-callback`
    }

    console.log('Webhook payload:', payload);

    // Call external webhook with proper headers
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
    }

    if (authHeader) {
      headers['Authorization'] = authHeader
    }

    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: headers,
      body: JSON.stringify(payload)
    })

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Webhook call failed:', response.status, errorText);
      
      // Initialize Supabase client to update status
      const supabaseClient = createClient(
        Deno.env.get('SUPABASE_URL') ?? '',
        Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
      )

      // Update source status to failed
      await supabaseClient
        .from('sources')
        .update({ processing_status: 'failed' })
        .eq('id', sourceId)

      return new Response(
        JSON.stringify({ error: 'Document processing failed', details: errorText }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    const result = await response.json()
    console.log('Webhook response:', result);

    return new Response(
      JSON.stringify({ success: true, message: 'Document processing initiated', result }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )

  } catch (error) {
    console.error('Error in process-document function:', error)
    return new Response(
      JSON.stringify({ error: 'Internal server error' }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  }
})
</file>

<file path="supabase/functions/refresh-audio-url/index.ts">
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const { notebookId } = await req.json()

    if (!notebookId) {
      throw new Error('Notebook ID is required')
    }

    // Initialize Supabase client
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // Get the current notebook to find the audio file path
    const { data: notebook, error: fetchError } = await supabase
      .from('notebooks')
      .select('audio_overview_url')
      .eq('id', notebookId)
      .single()

    if (fetchError) {
      console.error('Error fetching notebook:', fetchError)
      throw new Error('Failed to fetch notebook')
    }

    if (!notebook.audio_overview_url) {
      throw new Error('No audio overview URL found')
    }

    // Extract the file path from the existing URL
    // Assuming the URL format is similar to: .../storage/v1/object/sign/bucket/path
    const urlParts = notebook.audio_overview_url.split('/')
    const bucketIndex = urlParts.findIndex(part => part === 'audio')
    
    if (bucketIndex === -1) {
      throw new Error('Invalid audio URL format')
    }

    // Reconstruct the file path from the URL
    const filePath = urlParts.slice(bucketIndex + 1).join('/')

    console.log('Refreshing signed URL for path:', filePath)

    // Generate a new signed URL with 24 hours expiration
    const { data: signedUrlData, error: signError } = await supabase.storage
      .from('audio')
      .createSignedUrl(filePath, 86400) // 24 hours in seconds

    if (signError) {
      console.error('Error creating signed URL:', signError)
      throw new Error('Failed to create signed URL')
    }

    // Calculate new expiry time (24 hours from now)
    const newExpiryTime = new Date()
    newExpiryTime.setHours(newExpiryTime.getHours() + 24)

    // Update the notebook with the new signed URL and expiry time
    const { error: updateError } = await supabase
      .from('notebooks')
      .update({
        audio_overview_url: signedUrlData.signedUrl,
        audio_url_expires_at: newExpiryTime.toISOString()
      })
      .eq('id', notebookId)

    if (updateError) {
      console.error('Error updating notebook:', updateError)
      throw new Error('Failed to update notebook with new URL')
    }

    console.log('Successfully refreshed audio URL for notebook:', notebookId)

    return new Response(
      JSON.stringify({ 
        success: true,
        audioUrl: signedUrlData.signedUrl,
        expiresAt: newExpiryTime.toISOString()
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    )

  } catch (error) {
    console.error('Error in refresh-audio-url function:', error)
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Failed to refresh audio URL'
      }),
      {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    )
  }
})
</file>

<file path="supabase/functions/send-chat-message/index.ts">
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { session_id, message, user_id, context } = await req.json();
    
    console.log('Received message:', { session_id, message, user_id, context });

    // Validate required fields
    if (!session_id || !message || !user_id) {
      throw new Error('Missing required fields: session_id, message, or user_id');
    }

    // Get the webhook URL and auth header from environment
    const webhookUrl = Deno.env.get('NOTEBOOK_CHAT_URL');
    const authHeader = Deno.env.get('NOTEBOOK_GENERATION_AUTH');
    
    if (!webhookUrl) {
      throw new Error('NOTEBOOK_CHAT_URL environment variable not set');
    }

    if (!authHeader) {
      throw new Error('NOTEBOOK_GENERATION_AUTH environment variable not set');
    }

    console.log('Sending to webhook with auth header');

    // First, store the user's message in the database
    const { createClient } = await import('https://esm.sh/@supabase/supabase-js@2');
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    const { error: insertError } = await supabase
      .from('n8n_chat_histories')
      .insert({
        session_id,
        message: {
          type: 'human',
          content: message,
          additional_kwargs: { context },
          response_metadata: {},
          tool_calls: [],
          invalid_tool_calls: []
        }
      });

    if (insertError) {
      console.error('Error storing user message:', insertError);
      throw new Error(`Failed to store user message: ${insertError.message}`);
    }

    // Send message to n8n webhook with authentication
    const webhookResponse = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': authHeader,
      },
      body: JSON.stringify({
        session_id,
        message,
        user_id,
        context,
        timestamp: new Date().toISOString()
      })
    });

    if (!webhookResponse.ok) {
      console.error(`Webhook responded with status: ${webhookResponse.status}`);
      const errorText = await webhookResponse.text();
      console.error('Webhook error response:', errorText);
      
      // Store error message in chat history
      await supabase
        .from('n8n_chat_histories')
        .insert({
          session_id,
          message: {
            type: 'ai',
            content: `Error: Failed to get response from AI service (Status: ${webhookResponse.status})`,
            additional_kwargs: { error: errorText },
            response_metadata: {},
            tool_calls: [],
            invalid_tool_calls: []
          }
        });
      
      throw new Error(`Webhook responded with status: ${webhookResponse.status}`);
    }

    const webhookData = await webhookResponse.json();
    console.log('Webhook response:', webhookData);

    // The n8n workflow will handle storing the AI response
    // We just need to return success
    return new Response(
      JSON.stringify({ 
        success: true, 
        message: 'Message sent successfully',
        timestamp: new Date().toISOString()
      }),
      { 
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json' 
        } 
      }
    );

  } catch (error) {
    console.error('Error in send-chat-message:', error);
    
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Failed to send message to webhook',
        details: error.toString()
      }),
      { 
        status: 500,
        headers: { 
          ...corsHeaders,
          'Content-Type': 'application/json' 
        }
      }
    );
  }
});
</file>

<file path="supabase/functions/webhook-handler/index.ts">
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { type, notebookId, urls, title, content, timestamp } = await req.json();
    
    console.log(`Webhook handler received ${type} request for notebook ${notebookId}`);

    // Get the webhook URL from Supabase secrets
    const webhookUrl = Deno.env.get('WEBHOOK_URL');
    if (!webhookUrl) {
      throw new Error('WEBHOOK_URL not configured');
    }

    // Get the auth token from Supabase secrets (same as generate-notebook-content)
    const authToken = Deno.env.get('NOTEBOOK_GENERATION_AUTH');
    if (!authToken) {
      throw new Error('NOTEBOOK_GENERATION_AUTH not configured');
    }

    // Prepare the webhook payload
    let webhookPayload;
    
    if (type === 'multiple-websites') {
      webhookPayload = {
        type: 'multiple-websites',
        notebookId,
        urls,
        timestamp
      };
    } else if (type === 'copied-text') {
      webhookPayload = {
        type: 'copied-text',
        notebookId,
        title,
        content,
        timestamp
      };
    } else {
      throw new Error(`Unsupported type: ${type}`);
    }

    console.log('Sending webhook payload:', JSON.stringify(webhookPayload, null, 2));

    // Send to webhook with authentication
    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`,
        ...corsHeaders
      },
      body: JSON.stringify(webhookPayload)
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Webhook request failed:', response.status, errorText);
      throw new Error(`Webhook request failed: ${response.status} - ${errorText}`);
    }

    const webhookResponse = await response.text();
    console.log('Webhook response:', webhookResponse);

    return new Response(JSON.stringify({ 
      success: true, 
      message: `${type} data sent to webhook successfully`,
      webhookResponse 
    }), {
      headers: { 
        'Content-Type': 'application/json',
        ...corsHeaders 
      },
    });

  } catch (error) {
    console.error('Webhook handler error:', error);
    
    return new Response(JSON.stringify({ 
      error: error.message,
      success: false 
    }), {
      status: 500,
      headers: { 
        'Content-Type': 'application/json',
        ...corsHeaders 
      },
    });
  }
});
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.env
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
</file>

<file path="eslint.config.js">
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      "@typescript-eslint/no-unused-vars": "off",
    },
  }
);
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2025 The AI Automators

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
</file>

<file path="patch-supabase.js">
// This script patches the Supabase URL to use the correct endpoint
(function() {
  // Function to check if direct Supabase access is available
  function checkDirectAccess() {
    return new Promise((resolve) => {
      const xhr = new XMLHttpRequest();
      xhr.onreadystatechange = function() {
        if (xhr.readyState === 4) {
          resolve(xhr.status !== 0 && xhr.status < 500);
        }
      };
      xhr.open('GET', 'http://localhost:8000/auth/v1/health', true);
      xhr.timeout = 2000; // 2 seconds timeout
      xhr.send();
    });
  }
  
  // Function to patch the Supabase client with the provided URL
  function patchSupabaseClient(supabaseUrl) {
    if (window.supabase && window.supabase.createClient) {
      const originalCreateClient = window.supabase.createClient;
      window.supabase.createClient = function(url, key, options) {
        console.log('Patching Supabase client, replacing URL:', url, '->', supabaseUrl);
        return originalCreateClient(supabaseUrl, key, options);
      };
      console.log('Supabase client patched successfully with URL:', supabaseUrl);
      return true;
    }
    return false;
  }
  
  // Determine the best Supabase URL to use
  async function setupSupabaseUrl() {
    // Try direct access first
    const directAccessWorks = await checkDirectAccess();
    
    // Choose the appropriate URL
    let supabaseUrl;
    if (directAccessWorks) {
      supabaseUrl = 'http://localhost:8000';
      console.log('Direct Supabase access available, using:', supabaseUrl);
    } else {
      supabaseUrl = window.location.origin + '/supabase';
      console.log('Using proxied Supabase access:', supabaseUrl);
    }
    
    // Store the URL globally
    window.RUNTIME_SUPABASE_URL = supabaseUrl;
    
    // Try to patch immediately
    if (!patchSupabaseClient(supabaseUrl)) {
      // If not available yet, try again on window load
      window.addEventListener('load', function() {
        patchSupabaseClient(supabaseUrl);
      });
      
      // Also try periodically
      let attempts = 0;
      const interval = setInterval(function() {
        if (patchSupabaseClient(supabaseUrl) || attempts > 50) {
          clearInterval(interval);
        }
        attempts++;
      }, 100);
    }
  }
  
  // Start the setup process
  setupSupabaseUrl();
})();
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="RAILWAY_DEPLOYMENT.md">
# Railway 배포 가이드

이 문서는 AI4AgriWeather 애플리케이션을 Railway에 배포하는 방법을 안내합니다.

## 사전 준비사항

1. [Railway 계정](https://railway.app) 생성
2. [Railway CLI](https://docs.railway.app/cli/installation) 설치 (선택사항)
3. Supabase 프로젝트 및 인증 정보

## 배포 방법

### 방법 1: GitHub 연동 배포 (권장)

1. **GitHub 리포지토리 준비**
   ```bash
   git add .
   git commit -m "Railway 배포 준비"
   git push origin main
   ```

2. **Railway에서 프로젝트 생성**
   - [Railway Dashboard](https://railway.app/dashboard)에 로그인
   - "New Project" 클릭
   - "Deploy from GitHub repo" 선택
   - 해당 리포지토리 선택

3. **환경 변수 설정**
   Railway Dashboard에서 Variables 탭으로 이동 후 다음 환경 변수들을 설정:
   ```
   VITE_SUPABASE_URL=your_supabase_url
   VITE_SUPABASE_ANON_KEY=your_supabase_anon_key
   NODE_ENV=production
   ```

### 방법 2: Railway CLI 사용

1. **CLI 로그인**
   ```bash
   railway login
   ```

2. **프로젝트 초기화**
   ```bash
   railway init
   ```

3. **환경 변수 설정**
   ```bash
   railway variables set VITE_SUPABASE_URL="your_supabase_url"
   railway variables set VITE_SUPABASE_ANON_KEY="your_supabase_anon_key"
   railway variables set NODE_ENV="production"
   ```

4. **배포 실행**
   ```bash
   railway up
   ```

## 배포 설정 파일

### `railway.json`
Railway 플랫폼 설정을 정의합니다.

### `nixpacks.toml`
빌드 프로세스와 실행 명령을 설정합니다.

### `package.json`
프로덕션용 시작 스크립트가 포함되어 있습니다:
- `npm run build`: 프로덕션 빌드
- `npm run start`: 프로덕션 서버 시작

## Supabase 설정

Railway 배포 후 Supabase에서 다음 설정을 업데이트해야 합니다:

1. **Site URL 추가**
   - Supabase Dashboard → Authentication → URL Configuration
   - Site URL에 Railway 도메인 추가 (예: `https://your-app.railway.app`)

2. **Redirect URLs 추가**
   - 동일한 위치에서 Redirect URLs에 다음 추가:
     - `https://your-app.railway.app/auth`
     - `https://your-app.railway.app/`

## 빌드 확인

로컬에서 프로덕션 빌드를 테스트:
```bash
npm run build
npm run preview
```

## 도메인 설정 (선택사항)

Railway에서 커스텀 도메인을 설정할 수 있습니다:
1. Railway Dashboard → Settings → Domains
2. "Custom Domain" 추가
3. DNS 설정 업데이트

## 모니터링

Railway Dashboard에서 다음을 모니터링할 수 있습니다:
- 배포 상태
- 로그
- 메트릭스
- 환경 변수

## 문제 해결

### 빌드 실패
1. 로컬에서 `npm run build` 실행하여 오류 확인
2. Railway 로그에서 상세 오류 메시지 확인

### 환경 변수 문제
1. Railway Dashboard에서 환경 변수 확인
2. Supabase URL 및 키 유효성 검증

### 인증 문제
1. Supabase Site URL 및 Redirect URLs 확인
2. Railway 도메인이 Supabase에 등록되어 있는지 확인

## 업데이트

GitHub 연동 배포의 경우 main 브랜치에 푸시하면 자동 배포됩니다:
```bash
git add .
git commit -m "업데이트 내용"
git push origin main
```

## 다국어 지원

현재 애플리케이션은 다음 언어를 지원합니다:
- 한국어 (ko)
- 영어 (en)  
- 스와힐리어 (sw)

사용자의 브라우저 언어 설정에 따라 자동으로 언어가 선택되며, 헤더의 언어 선택기로 수동 변경도 가능합니다.
</file>

<file path="tailwind.config.ts">
import type { Config } from "tailwindcss";

export default {
	darkMode: ["class"],
	content: [
		"./pages/**/*.{ts,tsx}",
		"./components/**/*.{ts,tsx}",
		"./app/**/*.{ts,tsx}",
		"./src/**/*.{ts,tsx}",
	],
	prefix: "",
	safelist: [
		// Background colors for notebook cards
		'bg-red-100', 'bg-blue-100', 'bg-green-100', 'bg-yellow-100', 'bg-purple-100', 
		'bg-pink-100', 'bg-indigo-100', 'bg-gray-100', 'bg-orange-100', 'bg-teal-100',
		'bg-cyan-100', 'bg-emerald-100', 'bg-lime-100', 'bg-amber-100', 'bg-violet-100',
		'bg-fuchsia-100', 'bg-rose-100', 'bg-sky-100', 'bg-slate-100', 'bg-zinc-100',
		'bg-neutral-100', 'bg-stone-100',
		// Border colors for notebook cards
		'border-red-200', 'border-blue-200', 'border-green-200', 'border-yellow-200', 
		'border-purple-200', 'border-pink-200', 'border-indigo-200', 'border-gray-200', 
		'border-orange-200', 'border-teal-200', 'border-cyan-200', 'border-emerald-200', 
		'border-lime-200', 'border-amber-200', 'border-violet-200', 'border-fuchsia-200', 
		'border-rose-200', 'border-sky-200', 'border-slate-200', 'border-zinc-200',
		'border-neutral-200', 'border-stone-200',
	],
	theme: {
		container: {
			center: true,
			padding: '2rem',
			screens: {
				'2xl': '1400px'
			}
		},
		extend: {
			colors: {
				border: 'hsl(var(--border))',
				input: 'hsl(var(--input))',
				ring: 'hsl(var(--ring))',
				background: 'hsl(var(--background))',
				foreground: 'hsl(var(--foreground))',
				primary: {
					DEFAULT: 'hsl(var(--primary))',
					foreground: 'hsl(var(--primary-foreground))'
				},
				secondary: {
					DEFAULT: 'hsl(var(--secondary))',
					foreground: 'hsl(var(--secondary-foreground))'
				},
				destructive: {
					DEFAULT: 'hsl(var(--destructive))',
					foreground: 'hsl(var(--destructive-foreground))'
				},
				muted: {
					DEFAULT: 'hsl(var(--muted))',
					foreground: 'hsl(var(--muted-foreground))'
				},
				accent: {
					DEFAULT: 'hsl(var(--accent))',
					foreground: 'hsl(var(--accent-foreground))'
				},
				popover: {
					DEFAULT: 'hsl(var(--popover))',
					foreground: 'hsl(var(--popover-foreground))'
				},
				card: {
					DEFAULT: 'hsl(var(--card))',
					foreground: 'hsl(var(--card-foreground))'
				},
				sidebar: {
					DEFAULT: 'hsl(var(--sidebar-background))',
					foreground: 'hsl(var(--sidebar-foreground))',
					primary: 'hsl(var(--sidebar-primary))',
					'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',
					accent: 'hsl(var(--sidebar-accent))',
					'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',
					border: 'hsl(var(--sidebar-border))',
					ring: 'hsl(var(--sidebar-ring))'
				}
			},
			borderRadius: {
				lg: 'var(--radius)',
				md: 'calc(var(--radius) - 2px)',
				sm: 'calc(var(--radius) - 4px)'
			},
			keyframes: {
				'accordion-down': {
					from: {
						height: '0'
					},
					to: {
						height: 'var(--radix-accordion-content-height)'
					}
				},
				'accordion-up': {
					from: {
						height: 'var(--radix-accordion-content-height)'
					},
					to: {
						height: '0'
					}
				}
			},
			animation: {
				'accordion-down': 'accordion-down 0.2s ease-out',
				'accordion-up': 'accordion-up 0.2s ease-out'
			}
		}
	},
	plugins: [require("tailwindcss-animate")],
} satisfies Config;
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitAny": true,
    "noFallthroughCasesInSwitch": true,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": true,
    "noUnusedParameters": true,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": true,
    "strictNullChecks": true,
    "strict": true
  }
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="n8n/InsightsLM___Extract_Text.json">
{
  "name": "InsightsLM - Extract Text",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "filePath"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        60,
        180
      ],
      "id": "92f1772c-8782-4c8d-9374-18b599a89655",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://yfvmutoxmibqzvyklggr.supabase.co/storage/v1/object/sign/sources/{{ $json.filePath }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"expiresIn\": 60\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        280,
        180
      ],
      "id": "eacc6b5c-ff5f-40c1-bfb2-4968317a1ecc",
      "name": "Generate Signed URL",
      "credentials": {
        "supabaseApi": {
          "id": "OeYUddl4OaIohMCC",
          "name": "MynotebookLM Supabase"
        }
      }
    },
    {
      "parameters": {
        "url": "=https://yfvmutoxmibqzvyklggr.supabase.co/storage/v1/{{ $json.signedURL }}",
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        500,
        180
      ],
      "id": "9c5245a7-cbe8-4217-902b-7f1c42bfc3e2",
      "name": "Download File"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.headers[\"content-type\"] }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "dc0dbe8c-70d5-4127-95f8-0fbd3f1a6bad"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "2307a9d5-7872-49dc-9aeb-60697b91dc84",
                    "leftValue": "={{ $json.headers[\"content-type\"] }}",
                    "rightValue": "audio/mpeg",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "87532eb7-b821-4d84-9d8e-c17136b0a88a",
                    "leftValue": "={{ $json.headers[\"content-type\"] }}",
                    "rightValue": "text/plain",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        720,
        180
      ],
      "id": "b9643850-737a-405f-9ff0-1903d9424cd1",
      "name": "Switch"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        940,
        -20
      ],
      "id": "ceeb5000-0dbc-4d18-9a29-7bc2c83ff959",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "resource": "audio",
        "operation": "transcribe",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        940,
        180
      ],
      "id": "e8c24cd1-0d5e-452e-97ef-cb997a9c603e",
      "name": "OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "hNalDChhNUDtYG7T",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1f5bee5d-939c-4df3-8e7d-0696ac3aa702",
              "name": "text",
              "value": "={{ $('Download File').item.json.data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        940,
        380
      ],
      "id": "45462a2a-a13e-45c0-8857-21f924c721ea",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9fea51c0-b3a9-49b5-8608-3264c9d00304",
              "name": "extracted_text",
              "value": "={{ $json.text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1160,
        180
      ],
      "id": "83cae3e9-ba19-4cdd-ac7e-0d4b4515eaad",
      "name": "Extracted Text"
    },
    {
      "parameters": {
        "content": "## To Do \n- Configure the Supabase nodes to reference your Project\n- Update the Host of the \"HTTP Requests\" to hit your project\n- Setup OpenAI credentials",
        "width": 680,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1420,
        100
      ],
      "id": "a550ac25-8226-46af-8c55-5f42f1abd0e9",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)\n## InsightsLM\nhttps://github.com/theaiautomators/insights-lm-public",
        "height": 220,
        "width": 280,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        60,
        -200
      ],
      "id": "3f1e49b6-b7b4-49d0-a2e7-c50ab1cd8f3d",
      "name": "Sticky Note8"
    }
  ],
  "pinData": {},
  "connections": {
    "Generate Signed URL": {
      "main": [
        [
          {
            "node": "Download File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download File": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Generate Signed URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Extracted Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Extracted Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Extracted Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "28c069b3-6e86-4169-82b3-50bcfad834f7",
  "meta": {
    "instanceId": "b5d1ea132a4e071e6288b3143f31284b91560858bdef3f0c88a49f587fc91a29"
  },
  "id": "AzZ5a2zCGU1O3MRV",
  "tags": []
}
</file>

<file path="n8n/InsightsLM___Generate_Notebook_Details.json">
{
  "name": "InsightsLM - Generate Notebook Details",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "0c488f50-8d6a-48a0-b056-5f7cfca9efe2",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        140,
        -200
      ],
      "id": "010f9da2-e94a-4eeb-8abc-7a11b5df02d3",
      "name": "Webhook",
      "webhookId": "0c488f50-8d6a-48a0-b056-5f7cfca9efe2",
      "credentials": {
        "httpHeaderAuth": {
          "id": "39evQ95L86jhtb3I",
          "name": "MyNoteBookLM Auth"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        1616,
        -200
      ],
      "id": "d617ebc0-0500-403b-babc-205733ce36a4",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.extracted_text }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Based on the data provided, output an appropriate title and summary of the document. \n\nAlso output an appropriate UTF-8 emoji for the notebook. - example: 🏆\nAnd output an appropriate color from this list\n\nslate\ngray\nzinc\nneutral\nstone\nred\norange\namber\nyellow\nlime\ngreen\nemerald\nteal\ncyan\nsky\nblue\nindigo\nviolet\npurple\nfuchsia\npink\nrose\n\nAlso output a list of 5 Example Questions that could be asked of this document. For example \"How are the rules and regulations of tennis enforced?\" - Maximum 10 words each\n\nOnly output in JSON."
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        1240,
        -200
      ],
      "id": "66e19df1-eae3-43f0-93d1-56def58c1432",
      "name": "Generate Title & Description"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"title\": \"<ADD>\",\n\t\"summary\": \"<ADD>\",\n  \"notebook_icon\": \"<ADD>\",\n  \"background_color\": \"<ADD>\",\n  \"example_questions\": [\"ADD\",\"ADD\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1388,
        20
      ],
      "id": "5800e2a7-6e7f-4227-a124-43d05b2a8542",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1268,
        20
      ],
      "id": "fb70591a-e3fb-4430-8902-70da6a397200",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "hNalDChhNUDtYG7T",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "AzZ5a2zCGU1O3MRV",
          "mode": "list",
          "cachedResultName": "InsightsLM - Extract Text"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "filePath": "={{ $json.body.filePath }}"
          },
          "matchingColumns": [
            "filePath"
          ],
          "schema": [
            {
              "id": "filePath",
              "displayName": "filePath",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1020,
        0
      ],
      "id": "df36e109-47a6-4f1b-a775-740b4b3ceb7e",
      "name": "Extract Text"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a25d08b6-2c99-4e08-af5f-62b13e6c4fdb",
              "leftValue": "={{ $json.body.sourceType }}",
              "rightValue": "=text",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "3b5d5dce-76c4-445a-bab7-53c2114d52be",
              "leftValue": "={{ $json.body.sourceType }}",
              "rightValue": "website",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        360,
        -200
      ],
      "id": "fdb03c27-aa2b-4ce4-a627-100599928646",
      "name": "If"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ea61516d-9144-4b4b-904e-cf280d5bd08d",
              "leftValue": "={{ $json.body.sourceType }}",
              "rightValue": "text",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        580,
        -300
      ],
      "id": "3fe02905-4fd7-45bc-bdec-72de6a6d8a97",
      "name": "If1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c5924d7e-6185-49a5-b61c-d244a40bd9b2",
              "name": "=extracted_text",
              "value": "={{ $json.body.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1020,
        -400
      ],
      "id": "6ca2f532-9da2-46cf-a88e-edc2264fd3a7",
      "name": "Set Text"
    },
    {
      "parameters": {
        "url": "=https://r.jina.ai/{{ $json.body.filePath }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        800,
        -200
      ],
      "id": "7f96ba8f-875b-4368-9022-94c06acd9936",
      "name": "Fetch Webpage with Jina.ai"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c5924d7e-6185-49a5-b61c-d244a40bd9b2",
              "name": "=extracted_text",
              "value": "={{ $json.data.content }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1020,
        -200
      ],
      "id": "0e106e48-8a5c-4142-8906-e2b5291d11e2",
      "name": "Set Text1"
    },
    {
      "parameters": {
        "content": "## To Do \n- Configure the Extract Text node to trigger the \"Extract Text\" workflow",
        "width": 680,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1360,
        -440
      ],
      "id": "2011755c-70ad-4bd7-811b-e6bface53763",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)\n## InsightsLM\nhttps://github.com/theaiautomators/insights-lm-public",
        "height": 220,
        "width": 280,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        140,
        -580
      ],
      "id": "b0e56210-db45-4b10-b513-ddbac2e7d222",
      "name": "Sticky Note8"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Title & Description": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Generate Title & Description",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Title & Description",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text": {
      "main": [
        [
          {
            "node": "Generate Title & Description",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Set Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Fetch Webpage with Jina.ai",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Text": {
      "main": [
        [
          {
            "node": "Generate Title & Description",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Webpage with Jina.ai": {
      "main": [
        [
          {
            "node": "Set Text1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Text1": {
      "main": [
        [
          {
            "node": "Generate Title & Description",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "dd220d9f-8dc3-44bc-889d-726cde238df3",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b5d1ea132a4e071e6288b3143f31284b91560858bdef3f0c88a49f587fc91a29"
  },
  "id": "5I6KohfDxYQ2xvQ7",
  "tags": [
    {
      "createdAt": "2025-05-12T13:43:59.783Z",
      "updatedAt": "2025-05-12T13:43:59.783Z",
      "id": "d3ygIhrGjDmzgrW0",
      "name": "TheAIAutomators.com"
    }
  ]
}
</file>

<file path="n8n/InsightsLM___Upsert_to_Vector_Store.json">
{
  "name": "InsightsLM - Upsert to Vector Store",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "19566c6c-e0a5-4a8f-ba1a-5203c2b663b7",
        "authentication": "headerAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        320,
        -20
      ],
      "id": "e80f97df-d2a3-40e5-8ebe-05e7123482ee",
      "name": "Webhook",
      "webhookId": "19566c6c-e0a5-4a8f-ba1a-5203c2b663b7",
      "credentials": {
        "httpHeaderAuth": {
          "id": "39evQ95L86jhtb3I",
          "name": "MyNoteBookLM Auth"
        }
      }
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.1,
      "position": [
        1812,
        -20
      ],
      "id": "8a9a6814-b5db-4f2e-8877-a62633c042d8",
      "name": "Supabase Vector Store",
      "retryOnFail": true,
      "maxTries": 5,
      "waitBetweenTries": 5000,
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "OeYUddl4OaIohMCC",
          "name": "MynotebookLM Supabase"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "notebook_id",
                "value": "={{ $('Code').item.json.notebook_id }}"
              },
              {
                "name": "source_id",
                "value": "={{ $('Code').item.json.source_id }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        1916,
        202.5
      ],
      "id": "bdc647ec-d262-46ae-b96b-47577f237dc4",
      "name": "Default Data Loader"
    },
    {
      "parameters": {
        "chunkOverlap": 200,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        2004,
        400
      ],
      "id": "66adf3a1-e086-4562-b5d3-5e700a49dc14",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        1796,
        200
      ],
      "id": "aa1fc9fb-8942-4aa1-9fcc-525595accaf7",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "hNalDChhNUDtYG7T",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dab34521-ffef-41db-9eb3-8985fd108466",
              "name": "text",
              "value": "={{ $('Code').item.json.extracted_text }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1576,
        -20
      ],
      "id": "e0233d37-8a61-4ad6-b0b8-1209b7da0ec5",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "jsCode": "// Example: run this in an n8n Code node (JavaScript)\n\nlet notebook_id;\nlet source_id;\n\ntry {\n  const webhookData = $('Webhook').first();\n  if (webhookData && webhookData.json?.body?.file_path) {\n    const path = webhookData.json.body.file_path;\n    notebook_id = path.split('/')[0];\n    source_id = webhookData.json.body.source_id;\n  }\n} catch (e) {\n  // Webhook not executed or doesn't exist in this context\n  notebook_id = $input.first().json.notebook_id;\n  source_id = $input.first().json.source_id;\n}\n\nconst extracted_text = $input.first().json.extracted_text;\n\nreturn [\n  {\n    json: {\n      notebook_id,\n      extracted_text,\n      source_id\n    },\n  },\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        760,
        -20
      ],
      "id": "89e5c09e-6321-4c66-94f8-d1bdb6cccd99",
      "name": "Code"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://yfvmutoxmibqzvyklggr.supabase.co/functions/v1/process-document-callback",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"source_id\": \"{{ $('Code').item.json.source_id }}\",\n  \"status\": \"completed\"\n}\n",
        "options": {
          "redirect": {
            "redirect": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2420,
        -20
      ],
      "id": "01a9b118-2d17-4637-98f7-4fe309c7cc54",
      "name": "HTTP Request",
      "credentials": {
        "supabaseApi": {
          "id": "OeYUddl4OaIohMCC",
          "name": "MynotebookLM Supabase"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.extracted_text }}",
        "hasOutputParser": true,
        "messages": {
          "messageValues": [
            {
              "message": "=Based on the data provided, output an appropriate title and summary of the document. Only output in JSON in the following format / structure\n\n{\n\t\"title\": \"<ADD>\",\n\t\"summary\": \"<ADD>\"\n}"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        980,
        -20
      ],
      "id": "88660990-81f1-4ed0-aaa8-c64c1ba1d2cf",
      "name": "Generate Title & Description"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"title\": \"<ADD>\",\n\t\"summary\": \"<ADD>\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1128,
        200
      ],
      "id": "3a83ea73-73e8-4f74-90ad-b55aadc5c8a3",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1008,
        200
      ],
      "id": "e16a04be-5702-4d01-92f5-45af5f90b97a",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "hNalDChhNUDtYG7T",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "sources",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('Code').item.json.source_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "content",
              "fieldValue": "={{ $('Code').item.json.extracted_text }}"
            },
            {
              "fieldId": "summary",
              "fieldValue": "={{ $json.output.summary }}"
            },
            {
              "fieldId": "display_name",
              "fieldValue": "={{ $json.output.title }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1356,
        -20
      ],
      "id": "0487c4af-d2b5-4208-bbfa-06af8ebb8ee5",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "OeYUddl4OaIohMCC",
          "name": "MynotebookLM Supabase"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "AzZ5a2zCGU1O3MRV",
          "mode": "list",
          "cachedResultName": "InsightsLM - Extract Text"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "filePath": "={{ $json.body.file_path }}"
          },
          "matchingColumns": [
            "filePath"
          ],
          "schema": [
            {
              "id": "filePath",
              "displayName": "filePath",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        540,
        -20
      ],
      "id": "5b4ae6b1-e39f-452f-a46b-9832f7b346bc",
      "name": "Extract Text"
    },
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "notebook_id"
            },
            {
              "name": "extracted_text"
            },
            {
              "name": "source_id"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        320,
        -260
      ],
      "id": "fb8ef16d-0ba1-4659-ab05-d3a53fc155cc",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        2180,
        -20
      ],
      "id": "effe2ff2-00bc-4f74-bc50-6078685dcfd5",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "content": "## To Do \n- Configure the Supabase nodes to reference your Project\n- Configure \"Extract Text\" to hit the correct workflow\n- Update the Host of the \"HTTP Request\" to hit your project",
        "width": 580,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1460,
        -300
      ],
      "id": "8c087d38-88b2-4c9f-8267-d8121addea2a",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)\n## InsightsLM\nhttps://github.com/theaiautomators/insights-lm-public",
        "height": 220,
        "width": 280,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        740,
        -340
      ],
      "id": "6d8672e9-000b-4e81-9f2b-a665f2972e52",
      "name": "Sticky Note8"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Text",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Generate Title & Description",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Generate Title & Description",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Generate Title & Description",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate Title & Description": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Text": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "5bb6ec60-c693-47cc-9d5a-a27d71bf284f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b5d1ea132a4e071e6288b3143f31284b91560858bdef3f0c88a49f587fc91a29"
  },
  "id": "IQcdcedwXg2w3AuW",
  "tags": [
    {
      "createdAt": "2025-05-12T13:43:59.783Z",
      "updatedAt": "2025-05-12T13:43:59.783Z",
      "id": "d3ygIhrGjDmzgrW0",
      "name": "TheAIAutomators.com"
    }
  ]
}
</file>

<file path="src/components/auth/AuthForm.tsx">
import React, { useState, useEffect } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { useToast } from '@/hooks/use-toast';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/features/authentication';
import { Loader2, Wheat, Cloud, Sprout } from 'lucide-react';
import { useTranslation } from 'react-i18next';

const AuthForm = () => {
  const { t } = useTranslation();
  const [isSignUp, setIsSignUp] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const { toast } = useToast();
  const navigate = useNavigate();
  const { isAuthenticated } = useAuth();

  // Redirect to dashboard if already authenticated
  useEffect(() => {
    if (isAuthenticated) {
      console.log('User is authenticated, redirecting to dashboard');
      navigate('/', { replace: true });
    }
  }, [isAuthenticated, navigate]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      if (isSignUp) {
        const { error } = await supabase.auth.signUp({
          email,
          password,
        });
        
        if (error) throw error;
        
        toast({
          title: t('auth.accountCreated'),
          description: t('auth.checkEmailConfirm'),
        });
        setIsSignUp(false);
      } else {
        const { error, data } = await supabase.auth.signInWithPassword({
          email,
          password,
        });
        
        if (error) {
          if (error.message.includes('Invalid login credentials')) {
            throw new Error(t('auth.invalidCredentials'));
          } else if (error.message.includes('Email not confirmed')) {
            throw new Error(t('auth.confirmEmailFirst'));
          } else {
            throw error;
          }
        }
        
        toast({
          title: t('auth.welcomeMessage'),
          description: t('auth.signInSuccess'),
        });
      }
    } catch (error: any) {
      console.error('Auth error:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 via-blue-50 to-emerald-50">
      {/* Background decoration */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-green-200 rounded-full opacity-20 blur-3xl"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-200 rounded-full opacity-20 blur-3xl"></div>
      </div>
      
      <Card className="w-full max-w-md relative z-10">
        <CardHeader className="space-y-1">
          <div className="flex items-center justify-center mb-4">
            <div className="p-3 bg-green-100 rounded-full">
              <Wheat className="h-8 w-8 text-green-600" />
            </div>
          </div>
          <CardTitle className="text-2xl text-center">{t('auth.title')}</CardTitle>
          <CardDescription className="text-center">
            {isSignUp 
              ? t('auth.signUpSubtitle')
              : t('auth.signInSubtitle')
            }
          </CardDescription>
        </CardHeader>
        <form onSubmit={handleSubmit}>
          <CardContent className="space-y-4">
            {error && (
              <Alert variant="destructive">
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}
            
            <div className="space-y-2">
              <Label htmlFor="email">{t('auth.email')}</Label>
              <Input
                id="email"
                type="email"
                placeholder={t('auth.emailPlaceholder')}
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                disabled={loading}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="password">{t('auth.password')}</Label>
              <Input
                id="password"
                type="password"
                placeholder="••••••••"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                disabled={loading}
                minLength={6}
              />
            </div>

            {/* Features showcase for sign up */}
            {isSignUp && (
              <div className="space-y-2 pt-2">
                <p className="text-sm text-gray-600 font-medium">{t('auth.getAccessTo')}</p>
                <div className="space-y-1">
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <Cloud className="h-4 w-4 text-blue-500" />
                    <span>{t('auth.realTimeWeather')}</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <Sprout className="h-4 w-4 text-green-500" />
                    <span>{t('auth.aiPoweredCrop')}</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm text-gray-600">
                    <Wheat className="h-4 w-4 text-orange-500" />
                    <span>{t('auth.personalizedFarming')}</span>
                  </div>
                </div>
              </div>
            )}
          </CardContent>
          
          <CardFooter className="flex flex-col space-y-4">
            <Button 
              type="submit" 
              className="w-full"
              disabled={loading}
            >
              {loading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  {isSignUp ? t('auth.creatingAccount') : t('auth.signingIn')}
                </>
              ) : (
                isSignUp ? t('auth.createAccount') : t('auth.signIn')
              )}
            </Button>
            
            <div className="text-sm text-center">
              {isSignUp ? (
                <>
                  {t('auth.alreadyHaveAccount')}{' '}
                  <button
                    type="button"
                    onClick={() => {
                      setIsSignUp(false);
                      setError('');
                    }}
                    className="text-green-600 hover:text-green-700 font-medium"
                    disabled={loading}
                  >
                    {t('auth.signIn')}
                  </button>
                </>
              ) : (
                <>
                  {t('auth.newToAI4AgriWeather')}{' '}
                  <button
                    type="button"
                    onClick={() => {
                      setIsSignUp(true);
                      setError('');
                    }}
                    className="text-green-600 hover:text-green-700 font-medium"
                    disabled={loading}
                  >
                    {t('auth.createAccount')}
                  </button>
                </>
              )}
            </div>
          </CardFooter>
        </form>
      </Card>
    </div>
  );
};

export default AuthForm;
export { AuthForm };
</file>

<file path="src/components/auth/ProtectedRoute.tsx">
import React from 'react';
import { Navigate } from 'react-router-dom';
import { useAuth } from '@/features/authentication';

interface ProtectedRouteProps {
  children: React.ReactNode;
}

const ProtectedRoute = ({ children }: ProtectedRouteProps) => {
  const { isAuthenticated, loading } = useAuth();

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-green-50 via-blue-50 to-emerald-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading your farm...</p>
        </div>
      </div>
    );
  }

  return isAuthenticated ? <>{children}</> : <Navigate to="/auth" replace />;
};

export default ProtectedRoute;
export { ProtectedRoute };
</file>

<file path="src/components/chat/SourceContentViewer.tsx">
import React, { useEffect, useRef, useState } from 'react';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Badge } from '@/components/ui/badge';
import { Citation } from '@/types/message';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';

interface SourceContentViewerProps {
  citation: Citation | null;
  sourceContent?: string;
  sourceSummary?: string;
  sourceUrl?: string;
  className?: string;
  isOpenedFromSourceList?: boolean;
}

const SourceContentViewer = ({ 
  citation, 
  sourceContent, 
  sourceSummary,
  sourceUrl,
  className = '',
  isOpenedFromSourceList = false
}: SourceContentViewerProps) => {
  const highlightedContentRef = useRef<HTMLDivElement>(null);
  const scrollAreaViewportRef = useRef<HTMLDivElement>(null);
  
  // Control accordion state based on how the viewer was opened
  const [accordionValue, setAccordionValue] = useState<string>(
    isOpenedFromSourceList ? "guide" : ""
  );

  // Check if we have valid citation line data (indicating a real citation click)
  const hasValidCitationLines = citation && 
    typeof citation.chunk_lines_from === 'number' && 
    typeof citation.chunk_lines_to === 'number' &&
    citation.chunk_lines_from > 0;

  console.log('SourceContentViewer: Render with citation', {
    citationId: citation?.citation_id,
    sourceId: citation?.source_id,
    hasValidCitationLines,
    isOpenedFromSourceList,
    chunkLinesFrom: citation?.chunk_lines_from,
    chunkLinesTo: citation?.chunk_lines_to
  });

  // Auto-scroll to highlighted content when citation changes and has valid line data
  useEffect(() => {
    console.log('SourceContentViewer: Auto-scroll effect triggered', {
      hasValidCitationLines,
      citationId: citation?.citation_id,
      hasHighlightedRef: !!highlightedContentRef.current,
      hasScrollAreaRef: !!scrollAreaViewportRef.current
    });

    if (hasValidCitationLines && highlightedContentRef.current && scrollAreaViewportRef.current) {
      console.log('SourceContentViewer: Starting auto-scroll process');
      
      // Increased delay to ensure DOM has fully updated
      const timer = setTimeout(() => {
        if (highlightedContentRef.current && scrollAreaViewportRef.current) {
          console.log('SourceContentViewer: Executing auto-scroll');
          
          // Find the actual viewport element within the ScrollArea
          const scrollAreaElement = scrollAreaViewportRef.current;
          const viewport = scrollAreaElement.querySelector('[data-radix-scroll-area-viewport]') as HTMLElement;
          
          if (viewport && highlightedContentRef.current) {
            const highlightedElement = highlightedContentRef.current;
            
            console.log('SourceContentViewer: Scroll calculation', {
              highlightedOffsetTop: highlightedElement.offsetTop,
              highlightedHeight: highlightedElement.clientHeight,
              viewportHeight: viewport.clientHeight,
              currentScrollTop: viewport.scrollTop
            });
            
            // Calculate the scroll position to center the highlighted content
            const scrollTop = highlightedElement.offsetTop - (viewport.clientHeight / 2) + (highlightedElement.clientHeight / 2);
            const targetScrollTop = Math.max(0, scrollTop);
            
            console.log('SourceContentViewer: Scrolling to position', { targetScrollTop });
            
            viewport.scrollTo({
              top: targetScrollTop,
              behavior: 'smooth'
            });
          } else {
            console.log('SourceContentViewer: Viewport or highlighted element not found', {
              viewport: !!viewport,
              highlightedElement: !!highlightedContentRef.current
            });
          }
        }
      }, 300); // Increased delay for better reliability

      return () => clearTimeout(timer);
    }
  }, [citation?.citation_id, citation?.chunk_lines_from, citation?.chunk_lines_to, citation?.source_id, hasValidCitationLines]);

  // Close guide when a real citation is clicked (has valid line data)
  useEffect(() => {
    if (hasValidCitationLines) {
      console.log('SourceContentViewer: Closing guide for real citation');
      setAccordionValue("");
    }
  }, [hasValidCitationLines]);

  if (!citation || !sourceContent) {
    return (
      <div className="p-4 text-center text-gray-500">
        <p className="text-sm">Select a citation to view source content</p>
      </div>
    );
  }

  const getSourceIcon = (type: string) => {
    const iconMap: Record<string, string> = {
      'pdf': '/file-types/PDF.svg',
      'text': '/file-types/TXT.png',
      'website': '/file-types/WEB.svg',
      'youtube': '/file-types/MP3.png',
      'audio': '/file-types/MP3.png',
      'doc': '/file-types/DOC.png',
      'multiple-websites': '/file-types/WEB.svg',
      'copied-text': '/file-types/TXT.png'
    };

    const iconUrl = iconMap[type] || iconMap['text']; // fallback to TXT icon
    
    return (
      <img 
        src={iconUrl} 
        alt={`${type} icon`} 
        className="w-full h-full object-contain"
        onError={(e) => {
          // Fallback to a simple text indicator if image fails to load
          const target = e.target as HTMLImageElement;
          target.style.display = 'none';
          target.parentElement!.innerHTML = '📄';
        }}
      />
    );
  };

  // Split content into lines for highlighting
  const lines = sourceContent.split('\n');
  
  // Determine the highlight range based on whether we have valid citation line data
  let startLine: number;
  let endLine: number;
  
  if (hasValidCitationLines) {
    // For real citations with valid line data, highlight the specific lines
    startLine = citation.chunk_lines_from!;
    endLine = citation.chunk_lines_to!;
    console.log('SourceContentViewer: Will highlight lines', { startLine, endLine });
  } else {
    // For source list clicks or citations without line data, don't highlight
    startLine = -1;
    endLine = -1;
    console.log('SourceContentViewer: No highlighting (no valid line data)');
  }

  const renderHighlightedContent = () => {
    return lines.map((line, index) => {
      const lineNumber = index + 1;
      const isHighlighted = startLine > 0 && lineNumber >= startLine && lineNumber <= endLine;
      const isFirstHighlightedLine = isHighlighted && lineNumber === startLine;
      
      return (
        <div
          key={index}
          ref={isFirstHighlightedLine ? highlightedContentRef : null}
          className={`py-2 px-3 rounded leading-relaxed ${
            isHighlighted 
              ? 'border-l-4' 
              : 'hover:bg-gray-50'
          }`}
          style={isHighlighted ? { 
            backgroundColor: '#eadef9', 
            borderLeftColor: '#9333ea' 
          } : {}}
        >
          <span className={isHighlighted ? 'font-medium' : ''}>{line}</span>
        </div>
      );
    });
  };

  return (
    <div className={`flex flex-col h-full overflow-hidden ${className}`}>
      {/* Header */}
      <div className="p-4 border-b border-gray-200 flex-shrink-0">
        <div className="flex items-center space-x-2 mb-2">
          <div className="w-6 h-6 bg-white rounded border border-gray-200 flex items-center justify-center flex-shrink-0 overflow-hidden">
            {getSourceIcon(citation.source_type)}
          </div>
          <span className="font-medium text-gray-900 truncate">{citation.source_title}</span>
        </div>
      </div>

      {/* Source Guide Accordion */}
      {sourceSummary && (
        <div className="border-b border-gray-200 flex-shrink-0">
          <Accordion type="single" value={accordionValue} onValueChange={setAccordionValue} collapsible>
            <AccordionItem value="guide" className="border-0">
              <AccordionTrigger 
                className="px-4 py-3 text-sm font-medium hover:no-underline hover:bg-blue-50" 
                style={{ color: '#234776' }}
                chevronColor="#234776"
              >
                <div className="flex items-center space-x-2">
                  <svg xmlns="http://www.w3.org/2000/svg" height="16px" viewBox="0 -960 960 960" width="16px" fill="#234776">
                    <path d="M166.67-120.67 120-167.33l317.67-318L254-531l194-121-16.33-228 175 147L818-818.33l-85.67 211.66L880-432l-228.67-16.67-120.66 194L485-438.33 166.67-120.67Zm24.66-536L120-728l72-72 71.33 71.33-72 72Zm366.34 233 58-94.33 111 8.33-72-85 41.66-102.66-102.66 41.66-85-71.66L517-616.67l-94.33 59 108 26.67 27 107.33Zm171 303.67-71.34-72 71.34-71.33 71.33 72L728.67-120ZM575-576Z"/>
                  </svg>
                  <span>Source guide</span>
                </div>
              </AccordionTrigger>
              <AccordionContent className="px-4 pb-4">
                <div className="text-sm text-gray-700 space-y-4">
                  <div>
                    <h4 className="font-medium mb-2">Summary</h4>
                    <p className="leading-relaxed">{sourceSummary}</p>
                  </div>
                  
                  {/* Show URL for website sources */}
                  {citation.source_type === 'website' && sourceUrl && (
                    <div>
                      <h4 className="font-medium mb-2">URL</h4>
                      <a 
                        href={sourceUrl} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="text-blue-600 hover:text-blue-800 hover:underline break-all text-sm"
                      >
                        {sourceUrl}
                      </a>
                    </div>
                  )}
                </div>
              </AccordionContent>
            </AccordionItem>
          </Accordion>
        </div>
      )}

      {/* Content */}
      <ScrollArea className="flex-1 h-full" ref={scrollAreaViewportRef}>
        <div className="p-4">
          <div className="prose prose-gray max-w-none space-y-1">
            {renderHighlightedContent()}
          </div>
        </div>
      </ScrollArea>
    </div>
  );
};

export default SourceContentViewer;
</file>

<file path="src/components/dashboard/DashboardHeader.tsx">
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { User, LogOut, Settings, Wheat, Shield, Globe } from 'lucide-react';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DropdownMenuSeparator } from '@/components/ui/dropdown-menu';
import { useLogout } from '@/services/authService';
import { useAuth } from '@/features/authentication';
import Logo from '@/components/ui/Logo';
import UserProfileDialog from '@/components/profile/UserProfileDialog';
import { getRoleInfo, type UserRole } from '@/utils/permissions';
import { useTranslation } from 'react-i18next';

interface DashboardHeaderProps {
  userEmail?: string;
}

const DashboardHeader = ({ userEmail }: DashboardHeaderProps) => {
  const { t, i18n } = useTranslation();
  const { logout } = useLogout();
  const { profile } = useAuth();
  const [showProfileDialog, setShowProfileDialog] = useState(false);

  const languages = [
    { code: 'ko', name: t('language.korean'), flag: '🇰🇷' },
    { code: 'en', name: t('language.english'), flag: '🇺🇸' },
    { code: 'sw', name: t('language.swahili'), flag: '🇹🇿' },
    { code: 'fr', name: t('language.french'), flag: '🇫🇷' },
    { code: 'ne', name: t('language.nepali'), flag: '🇳🇵' },
    { code: 'uz', name: t('language.uzbek'), flag: '🇺🇿' }
  ];

  const changeLanguage = async (langCode: string) => {
    console.log('Changing language to:', langCode);
    try {
      await i18n.changeLanguage(langCode);
      console.log('Language changed to:', i18n.language);
      console.log('Current translations:', i18n.getResourceBundle(i18n.language, 'translation'));
      // Force re-render
      window.location.reload();
    } catch (error) {
      console.error('Error changing language:', error);
    }
  };

  const getUserInitial = () => {
    if (profile?.full_name) {
      return profile.full_name.charAt(0).toUpperCase();
    }
    if (userEmail) {
      return userEmail.charAt(0).toUpperCase();
    }
    return 'U';
  };

  const getRoleBadge = () => {
    if (!profile?.user_role) return null;
    const roleInfo = getRoleInfo(profile.user_role as UserRole);
    return (
      <Badge variant="secondary" className={`text-xs bg-${roleInfo.color}-100 text-${roleInfo.color}-800`}>
        {roleInfo.icon} {roleInfo.name}
      </Badge>
    );
  };

  return (
    <>
      <header className="bg-white border-b px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Logo />
            <div>
              <h1 className="text-xl font-medium text-gray-900">{t('auth.title')}</h1>
              <p className="text-sm text-gray-500">{t('common.smartFarmAssistant')}</p>
            </div>
          </div>
          
          <div className="flex items-center space-x-4">
            {/* User info display */}
            {profile && (
              <div className="hidden md:flex items-center space-x-3">
                <div className="text-right">
                  <div className="flex items-center space-x-2 justify-end">
                    <p className="text-sm font-medium text-gray-900">
                      {profile.full_name || 'User'}
                    </p>
                    {getRoleBadge()}
                  </div>
                  <p className="text-xs text-gray-500">
                    {profile.farm_name || profile.user_role?.replace('_', ' ') || 'Farmer'}
                  </p>
                </div>
                {profile.farm_location && (
                  <div className="flex items-center text-xs text-gray-500">
                    <Wheat className="h-3 w-3 mr-1" />
                    <span>{profile.farm_location}</span>
                  </div>
                )}
              </div>
            )}

            {/* Language Selector */}
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="flex items-center space-x-1 px-2">
                  <Globe className="h-4 w-4" />
                  <span className="hidden sm:inline text-sm">
                    {languages.find(lang => lang.code === i18n.language)?.flag || '🌐'}
                  </span>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-48">
                <div className="px-2 py-1.5 text-sm font-medium text-gray-700">
                  {t('language.selectLanguage')}
                </div>
                <DropdownMenuSeparator />
                {languages.map((lang) => (
                  <DropdownMenuItem
                    key={lang.code}
                    onClick={() => changeLanguage(lang.code)}
                    className={`cursor-pointer ${
                      i18n.language === lang.code ? 'bg-gray-100 font-medium' : ''
                    }`}
                  >
                    <span className="mr-2">{lang.flag}</span>
                    {lang.name}
                  </DropdownMenuItem>
                ))}
              </DropdownMenuContent>
            </DropdownMenu>

            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="sm" className="p-0">
                  <div className="w-10 h-10 bg-green-500 rounded-full flex items-center justify-center cursor-pointer hover:bg-green-600 transition-colors">
                    <span className="text-white font-medium">{getUserInitial()}</span>
                  </div>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end" className="w-56">
                <div className="px-2 py-1.5 text-sm">
                  <div className="font-medium">{profile?.full_name || 'User'}</div>
                  <div className="text-xs text-gray-500">{userEmail}</div>
                </div>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={() => setShowProfileDialog(true)} className="cursor-pointer">
                  <Settings className="h-4 w-4 mr-2" />
                  {t('common.profileSettings')}
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem onClick={logout} className="cursor-pointer text-red-600 focus:text-red-600">
                  <LogOut className="h-4 w-4 mr-2" />
                  {t('common.logout')}
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </div>
      </header>

      <UserProfileDialog 
        open={showProfileDialog} 
        onOpenChange={setShowProfileDialog} 
      />
    </>
  );
};

export default DashboardHeader;
</file>

<file path="src/components/dashboard/EmptyDashboard.tsx">
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Upload, FileText, Globe, Video, Wheat, Cloud, Bug, TrendingUp, Plus, Sparkles } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { useNotebooks } from '@/hooks/useNotebooks';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { KNOWLEDGE_TEMPLATES, getCategoryName } from '@/utils/agricultureTemplates';
import { useTranslation } from 'react-i18next';
const EmptyDashboard = () => {
  const { t } = useTranslation();
  const navigate = useNavigate();
  const [showTemplateDialog, setShowTemplateDialog] = useState(false);
  const {
    createNotebook,
    isCreating
  } = useNotebooks();
  
  const handleCreateFromTemplate = (template: any) => {
    createNotebook({
      title: template.title,
      description: template.description,
      category: template.category,
      subcategory: template.subcategory,
      tags: template.tags,
      crop_types: template.crop_types,
      difficulty_level: template.difficulty_level,
      knowledge_type: template.knowledge_type,
      season: template.season,
      icon: template.icon,
      color: template.color,
      is_template: false,
      template_category: template.id,
    }, {
      onSuccess: data => {
        console.log('Navigating to notebook:', data.id);
        navigate(`/notebook/${data.id}`);
        setShowTemplateDialog(false);
      },
      onError: error => {
        console.error('Failed to create notebook:', error);
      }
    });
  };

  const handleCreateBlank = () => {
    console.log('Create notebook button clicked');
    console.log('isCreating:', isCreating);
    createNotebook({
      title: t('knowledge.newEntry'),
      description: '',
      category: 'general_farming',
      knowledge_type: 'guide',
    }, {
      onSuccess: data => {
        console.log('Navigating to notebook:', data.id);
        navigate(`/notebook/${data.id}`);
      },
      onError: error => {
        console.error('Failed to create notebook:', error);
      }
    });
  };
  return (
    <div className="text-center py-16">
      <div className="mb-12">
        <div className="text-6xl mb-6">🌾</div>
        <h2 className="text-3xl font-medium text-gray-900 mb-4">{t('dashboard.startKnowledgeJourney')}</h2>
        <p className="text-lg text-gray-600 max-w-2xl mx-auto">
          {t('dashboard.buildKnowledgeBase')}
        </p>
      </div>

      {/* Knowledge Categories */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 max-w-6xl mx-auto mb-12">
        <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg border border-blue-200 p-6 text-center">
          <div className="w-12 h-12 bg-blue-500 rounded-lg mx-auto mb-4 flex items-center justify-center">
            <Cloud className="h-6 w-6 text-white" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">{t('knowledge.weatherClimate')}</h3>
          <p className="text-gray-600 text-sm">{t('templates.trackWeatherPatterns')}</p>
        </div>

        <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-lg border border-green-200 p-6 text-center">
          <div className="w-12 h-12 bg-green-500 rounded-lg mx-auto mb-4 flex items-center justify-center">
            <Wheat className="h-6 w-6 text-white" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">{t('knowledge.cropManagement')}</h3>
          <p className="text-gray-600 text-sm">{t('templates.planPlantingSchedules')}</p>
        </div>

        <div className="bg-gradient-to-br from-red-50 to-red-100 rounded-lg border border-red-200 p-6 text-center">
          <div className="w-12 h-12 bg-red-500 rounded-lg mx-auto mb-4 flex items-center justify-center">
            <Bug className="h-6 w-6 text-white" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">{t('knowledge.pestDisease')}</h3>
          <p className="text-gray-600 text-sm">{t('templates.identifyManagePests')}</p>
        </div>

        <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg border border-purple-200 p-6 text-center">
          <div className="w-12 h-12 bg-purple-500 rounded-lg mx-auto mb-4 flex items-center justify-center">
            <TrendingUp className="h-6 w-6 text-white" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">{t('knowledge.marketInfo')}</h3>
          <p className="text-gray-600 text-sm">{t('templates.trackMarketTrends')}</p>
        </div>
      </div>

      {/* Source Types */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 max-w-4xl mx-auto mb-12">
        <div className="bg-white rounded-lg border border-gray-200 p-6 text-center">
          <div className="w-12 h-12 bg-blue-100 rounded-lg mx-auto mb-4 flex items-center justify-center">
            <FileText className="h-6 w-6 text-blue-600" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">{t('knowledge.agriculturalDocuments')}</h3>
          <p className="text-gray-600">{t('knowledge.researchPapers')}</p>
        </div>

        <div className="bg-white rounded-lg border border-gray-200 p-6 text-center">
          <div className="w-12 h-12 bg-green-100 rounded-lg mx-auto mb-4 flex items-center justify-center">
            <Globe className="h-6 w-6 text-green-600" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">{t('knowledge.onlineResources')}</h3>
          <p className="text-gray-600">{t('knowledge.agriculturalWebsites')}</p>
        </div>

        <div className="bg-white rounded-lg border border-gray-200 p-6 text-center">
          <div className="w-12 h-12 bg-purple-100 rounded-lg mx-auto mb-4 flex items-center justify-center">
            <Video className="h-6 w-6 text-purple-600" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">{t('knowledge.multimediaContent')}</h3>
          <p className="text-gray-600">{t('knowledge.trainingVideos')}</p>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
        <Dialog open={showTemplateDialog} onOpenChange={setShowTemplateDialog}>
          <DialogTrigger asChild>
            <Button size="lg" className="bg-green-600 hover:bg-green-700" disabled={isCreating}>
              <Sparkles className="h-5 w-5 mr-2" />
              {t('templates.startWithTemplate')}
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>{t('templates.chooseTemplate')}</DialogTitle>
              <DialogDescription>
                {t('templates.templateDescription')}
              </DialogDescription>
            </DialogHeader>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 py-4">
              {KNOWLEDGE_TEMPLATES.slice(0, 6).map(template => (
                <div
                  key={template.id}
                  className="p-4 border rounded-lg cursor-pointer hover:border-green-500 transition-colors"
                  onClick={() => handleCreateFromTemplate(template)}
                >
                  <div className="flex items-start space-x-3">
                    <div className={`w-10 h-10 ${template.color} rounded-lg flex items-center justify-center text-lg`}>
                      {template.icon}
                    </div>
                    <div className="flex-1 min-w-0">
                      <h4 className="font-medium text-gray-900 mb-1">{template.title}</h4>
                      <p className="text-sm text-gray-600 mb-2">{template.description}</p>
                      <div className="flex flex-wrap gap-1">
                        <Badge variant="secondary" className="text-xs">
                          {getCategoryName(template.category)}
                        </Badge>
                        <Badge variant="outline" className="text-xs">
                          {template.knowledge_type}
                        </Badge>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </DialogContent>
        </Dialog>

        <Button 
          onClick={handleCreateBlank} 
          size="lg" 
          variant="outline" 
          className="border-green-600 text-green-600 hover:bg-green-50" 
          disabled={isCreating}
        >
          <Plus className="h-5 w-5 mr-2" />
          {isCreating ? t('knowledge.creating') : t('templates.startFromScratch')}
        </Button>
      </div>
    </div>
  );
};
export default EmptyDashboard;
</file>

<file path="src/components/dashboard/NotebookCard.tsx">
import React, { useState } from 'react';
import { Trash2, Calendar, Target, Sprout } from 'lucide-react';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { useNotebookDelete } from '@/hooks/useNotebookDelete';
import { getCategoryName } from '@/utils/agricultureTemplates';

interface NotebookCardProps {
  notebook: {
    id: string;
    title: string;
    date: string;
    sources: number;
    icon: string;
    color: string;
    hasCollaborators?: boolean;
    category?: string;
    tags?: string[];
    crop_types?: string[];
    difficulty_level?: string;
    knowledge_type?: string;
  };
  isSelected?: boolean;
  onSelect?: (id: string, selected: boolean) => void;
  showCheckbox?: boolean;
}

const NotebookCard = ({
  notebook,
  isSelected = false,
  onSelect,
  showCheckbox = false
}: NotebookCardProps) => {
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const {
    deleteNotebook,
    isDeleting
  } = useNotebookDelete();

  const handleDeleteClick = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    console.log('Delete button clicked for notebook:', notebook.id);
    setShowDeleteDialog(true);
  };

  const handleConfirmDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    e.preventDefault();
    console.log('Confirming delete for notebook:', notebook.id);
    deleteNotebook(notebook.id);
    setShowDeleteDialog(false);
  };

  const handleCheckboxChange = (checked: boolean) => {
    if (onSelect) {
      onSelect(notebook.id, checked);
    }
  };

  // Generate CSS classes from color name
  const colorName = notebook.color || 'gray';
  const backgroundClass = `bg-${colorName}-100`;
  const borderClass = `border-${colorName}-200`;

  return <div 
      className={`rounded-lg border ${borderClass} ${backgroundClass} p-4 hover:shadow-md transition-shadow cursor-pointer relative flex flex-col h-64 ${isSelected ? 'ring-2 ring-blue-500' : ''}`}
    >
      {/* Selection checkbox */}
      {showCheckbox && (
        <div className="absolute top-3 left-3 z-10" data-checkbox-action="true">
          <Checkbox
            checked={isSelected}
            onCheckedChange={handleCheckboxChange}
            className="bg-white shadow-sm"
          />
        </div>
      )}

      <div className="absolute top-3 right-3" data-delete-action="true">
        <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
          <AlertDialogTrigger asChild>
            <button onClick={handleDeleteClick} className="p-1 hover:bg-red-50 rounded text-gray-400 hover:text-red-500 transition-colors delete-button" disabled={isDeleting} data-delete-action="true">
              <Trash2 className="h-4 w-4" />
            </button>
          </AlertDialogTrigger>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Delete this knowledge entry?</AlertDialogTitle>
              <AlertDialogDescription>
                You're about to delete this knowledge entry and all of its content. This cannot be undone.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>Cancel</AlertDialogCancel>
              <AlertDialogAction onClick={handleConfirmDelete} className="bg-red-600 hover:bg-red-700" disabled={isDeleting}>
                {isDeleting ? 'Deleting...' : 'Delete'}
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </div>
      
      {/* Header with icon and category */}
      <div className="flex items-start justify-between mb-3">
        <div className="w-12 h-12 rounded-lg flex items-center justify-center bg-white/50">
          <span className="text-2xl">{notebook.icon}</span>
        </div>
        {notebook.category && (
          <Badge variant="secondary" className="text-xs bg-white/70">
            {getCategoryName(notebook.category)}
          </Badge>
        )}
      </div>
      
      {/* Title */}
      <h3 className="text-gray-900 mb-3 pr-2 line-clamp-2 text-lg font-medium leading-tight flex-grow-0">
        {notebook.title}
      </h3>
      
      {/* Agricultural metadata */}
      <div className="flex-grow space-y-2">
        {/* Knowledge type and difficulty */}
        <div className="flex items-center gap-2 flex-wrap">
          {notebook.knowledge_type && (
            <Badge variant="outline" className="text-xs px-2 py-0.5">
              <Target className="h-3 w-3 mr-1" />
              {notebook.knowledge_type}
            </Badge>
          )}
          {notebook.difficulty_level && (
            <Badge variant="outline" className="text-xs px-2 py-0.5">
              {notebook.difficulty_level}
            </Badge>
          )}
        </div>
        
        {/* Crop types */}
        {notebook.crop_types && notebook.crop_types.length > 0 && (
          <div className="flex items-center gap-1 flex-wrap">
            <Sprout className="h-3 w-3 text-green-600 flex-shrink-0" />
            <div className="flex gap-1 flex-wrap">
              {notebook.crop_types.slice(0, 2).map(crop => (
                <Badge key={crop} variant="secondary" className="text-xs bg-green-100 text-green-800">
                  {crop.replace('_', ' ').toUpperCase()}
                </Badge>
              ))}
              {notebook.crop_types.length > 2 && (
                <Badge variant="secondary" className="text-xs bg-green-100 text-green-800">
                  +{notebook.crop_types.length - 2}
                </Badge>
              )}
            </div>
          </div>
        )}
        
        {/* Tags */}
        {notebook.tags && notebook.tags.length > 0 && (
          <div className="flex gap-1 flex-wrap">
            {notebook.tags.slice(0, 2).map(tag => (
              <Badge key={tag} variant="outline" className="text-xs">
                #{tag}
              </Badge>
            ))}
            {notebook.tags.length > 2 && (
              <Badge variant="outline" className="text-xs">
                +{notebook.tags.length - 2} more
              </Badge>
            )}
          </div>
        )}
      </div>
      
      {/* Footer with date and sources */}
      <div className="flex items-center justify-between text-sm text-gray-500 mt-auto pt-2 border-t border-white/30">
        <div className="flex items-center gap-1">
          <Calendar className="h-3 w-3" />
          <span>{notebook.date}</span>
        </div>
        <span>{notebook.sources} source{notebook.sources !== 1 ? 's' : ''}</span>
      </div>
    </div>;
};

export default NotebookCard;
</file>

<file path="src/components/notebook/AddSourcesDialog.tsx">
import React, { useState, useCallback, useEffect } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Upload, FileText, Link, Copy } from 'lucide-react';
import MultipleWebsiteUrlsDialog from './MultipleWebsiteUrlsDialog';
import CopiedTextDialog from './CopiedTextDialog';
import { useSources } from '@/hooks/useSources';
import { useFileUpload } from '@/hooks/useFileUpload';
import { useDocumentProcessing } from '@/hooks/useDocumentProcessing';
import { useNotebookGeneration } from '@/hooks/useNotebookGeneration';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';

interface AddSourcesDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  notebookId?: string;
}

const AddSourcesDialog = ({
  open,
  onOpenChange,
  notebookId
}: AddSourcesDialogProps) => {
  const [dragActive, setDragActive] = useState(false);
  const [showCopiedTextDialog, setShowCopiedTextDialog] = useState(false);
  const [showMultipleWebsiteDialog, setShowMultipleWebsiteDialog] = useState(false);
  const [isLocallyProcessing, setIsLocallyProcessing] = useState(false);

  const {
    addSourceAsync,
    updateSource,
    isAdding
  } = useSources(notebookId);

  const {
    uploadFile,
    isUploading
  } = useFileUpload();

  const {
    processDocumentAsync,
    isProcessing
  } = useDocumentProcessing();

  const {
    generateNotebookContentAsync,
    isGenerating
  } = useNotebookGeneration();

  const {
    toast
  } = useToast();

  // Reset local processing state when dialog opens
  useEffect(() => {
    if (open) {
      setIsLocallyProcessing(false);
    }
  }, [open]);

  const handleDrag = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  }, []);

  const handleDrop = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const files = Array.from(e.dataTransfer.files);
      handleFileUpload(files);
    }
  }, []);

  const handleFileSelect = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const files = Array.from(e.target.files);
      handleFileUpload(files);
    }
  }, []);

  const processFileAsync = async (file: File, sourceId: string, notebookId: string) => {
    try {
      console.log('Starting file processing for:', file.name, 'source:', sourceId);
      const fileType = file.type.includes('pdf') ? 'pdf' : file.type.includes('audio') ? 'audio' : 'text';

      // Update status to uploading
      updateSource({
        sourceId,
        updates: {
          processing_status: 'uploading'
        }
      });

      // Upload the file
      const filePath = await uploadFile(file, notebookId, sourceId);
      if (!filePath) {
        throw new Error('File upload failed - no file path returned');
      }
      console.log('File uploaded successfully:', filePath);

      // Update with file path and set to processing
      updateSource({
        sourceId,
        updates: {
          file_path: filePath,
          processing_status: 'processing'
        }
      });

      // Start document processing
      try {
        await processDocumentAsync({
          sourceId,
          filePath,
          sourceType: fileType
        });

        // Generate notebook content
        await generateNotebookContentAsync({
          notebookId,
          filePath,
          sourceType: fileType
        });
        
        console.log('Document processing completed for:', sourceId);
        
        // Update status to completed after successful processing
        updateSource({
          sourceId,
          updates: {
            processing_status: 'completed'
          }
        });
      } catch (processingError) {
        console.error('Document processing failed:', processingError);

        // Update to completed with basic info if processing fails
        updateSource({
          sourceId,
          updates: {
            processing_status: 'completed'
          }
        });
      }
    } catch (error) {
      console.error('File processing failed for:', file.name, error);

      // Update status to failed
      updateSource({
        sourceId,
        updates: {
          processing_status: 'failed'
        }
      });
    }
  };

  const handleFileUpload = async (files: File[]) => {
    if (!notebookId) {
      toast({
        title: "Error",
        description: "No notebook selected",
        variant: "destructive"
      });
      return;
    }

    console.log('Processing multiple files with delay strategy:', files.length);
    setIsLocallyProcessing(true);

    try {
      // Step 1: Create the first source immediately (this will trigger generation if it's the first source)
      const firstFile = files[0];
      const firstFileType = firstFile.type.includes('pdf') ? 'pdf' : firstFile.type.includes('audio') ? 'audio' : 'text';
      const firstSourceData = {
        notebookId,
        title: firstFile.name,
        type: firstFileType as 'pdf' | 'text' | 'website' | 'youtube' | 'audio',
        file_size: firstFile.size,
        processing_status: 'pending',
        metadata: {
          fileName: firstFile.name,
          fileType: firstFile.type
        }
      };
      
      console.log('Creating first source for:', firstFile.name);
      const firstSource = await addSourceAsync(firstSourceData);
      
      let remainingSources = [];
      
      // Step 2: If there are more files, add a delay before creating the rest
      if (files.length > 1) {
        console.log('Adding 150ms delay before creating remaining sources...');
        await new Promise(resolve => setTimeout(resolve, 150));
        
        // Create remaining sources
        remainingSources = await Promise.all(files.slice(1).map(async (file, index) => {
          const fileType = file.type.includes('pdf') ? 'pdf' : file.type.includes('audio') ? 'audio' : 'text';
          const sourceData = {
            notebookId,
            title: file.name,
            type: fileType as 'pdf' | 'text' | 'website' | 'youtube' | 'audio',
            file_size: file.size,
            processing_status: 'pending',
            metadata: {
              fileName: file.name,
              fileType: file.type
            }
          };
          console.log('Creating source for:', file.name);
          return await addSourceAsync(sourceData);
        }));
        
        console.log('Remaining sources created:', remainingSources.length);
      }

      // Combine all created sources
      const allCreatedSources = [firstSource, ...remainingSources];

      console.log('All sources created successfully:', allCreatedSources.length);

      // Step 3: Close dialog immediately
      setIsLocallyProcessing(false);
      onOpenChange(false);

      // Step 4: Show success toast
      toast({
        title: "Files Added",
        description: `${files.length} file${files.length > 1 ? 's' : ''} added and processing started`
      });

      // Step 5: Process files in parallel (background)
      const processingPromises = files.map((file, index) => processFileAsync(file, allCreatedSources[index].id, notebookId));

      // Don't await - let processing happen in background
      Promise.allSettled(processingPromises).then(results => {
        const successful = results.filter(r => r.status === 'fulfilled').length;
        const failed = results.filter(r => r.status === 'rejected').length;

        console.log('File processing completed:', {
          successful,
          failed
        });

        if (failed > 0) {
          toast({
            title: "Processing Issues",
            description: `${failed} file${failed > 1 ? 's' : ''} had processing issues. Check the sources list for details.`,
            variant: "destructive"
          });
        }
      });
    } catch (error) {
      console.error('Error creating sources:', error);
      setIsLocallyProcessing(false);
      toast({
        title: "Error",
        description: "Failed to add files. Please try again.",
        variant: "destructive"
      });
    }
  };

  const handleTextSubmit = async (title: string, content: string) => {
    if (!notebookId) return;
    setIsLocallyProcessing(true);

    try {
      // Create source record first to get the ID
      const createdSource = await addSourceAsync({
        notebookId,
        title,
        type: 'text',
        content,
        processing_status: 'processing',
        metadata: {
          characterCount: content.length,
          webhookProcessed: true
        }
      });

      // Send to webhook endpoint with source ID
      const { data, error } = await supabase.functions.invoke('process-additional-sources', {
        body: {
          type: 'copied-text',
          notebookId,
          title,
          content,
          sourceIds: [createdSource.id], // Pass the source ID
          timestamp: new Date().toISOString()
        }
      });

      if (error) {
        console.error('Error processing text source:', error);
        throw error;
      }

      console.log('Text processing initiated successfully');
      
      toast({
        title: "Success",
        description: "Text has been added and sent for processing"
      });
    } catch (error) {
      console.error('Error adding text source:', error);
      
      // Update source status to failed if processing fails
      if (createdSource?.id) {
        updateSource({
          sourceId: createdSource.id,
          updates: {
            processing_status: 'failed'
          }
        });
      }
      
      toast({
        title: "Error",
        description: "Failed to add text source",
        variant: "destructive"
      });
    } finally {
      setIsLocallyProcessing(false);
    }

    onOpenChange(false);
  };

  const handleMultipleWebsiteSubmit = async (urls: string[]) => {
    if (!notebookId) return;
    setIsLocallyProcessing(true);

    try {
      console.log('Creating sources for multiple websites with delay strategy:', urls.length);
      
      // Create the first source immediately (this will trigger generation if it's the first source)
      const firstSource = await addSourceAsync({
        notebookId,
        title: `Website 1: ${urls[0]}`,
        type: 'website',
        url: urls[0],
        processing_status: 'processing',
        metadata: {
          originalUrl: urls[0],
          webhookProcessed: true
        }
      });
      
      console.log('First source created:', firstSource.id);
      
      let remainingSources = [];
      
      // If there are more URLs, add a delay before creating the rest
      if (urls.length > 1) {
        console.log('Adding 150ms delay before creating remaining sources...');
        await new Promise(resolve => setTimeout(resolve, 150));
        
        // Create remaining sources
        remainingSources = await Promise.all(urls.slice(1).map(async (url, index) => {
          return await addSourceAsync({
            notebookId,
            title: `Website ${index + 2}: ${url}`,
            type: 'website',
            url,
            processing_status: 'processing',
            metadata: {
              originalUrl: url,
              webhookProcessed: true
            }
          });
        }));
        
        console.log('Remaining sources created:', remainingSources.length);
      }

      // Combine all created sources
      const allCreatedSources = [firstSource, ...remainingSources];

      // Send to webhook endpoint with all source IDs
      const { data, error } = await supabase.functions.invoke('process-additional-sources', {
        body: {
          type: 'multiple-websites',
          notebookId,
          urls,
          sourceIds: allCreatedSources.map(source => source.id), // Pass array of source IDs
          timestamp: new Date().toISOString()
        }
      });

      if (error) {
        console.error('Error processing websites:', error);
        throw error;
      }

      console.log('Website processing initiated successfully for', urls.length, 'URLs');
      
      toast({
        title: "Success",
        description: `${urls.length} website${urls.length > 1 ? 's' : ''} added and sent for processing`
      });

      onOpenChange(false);
    } catch (error) {
      console.error('Error adding multiple websites:', error);
      
      // Update all source statuses to failed if processing fails
      if (allCreatedSources?.length > 0) {
        allCreatedSources.forEach(source => {
          updateSource({
            sourceId: source.id,
            updates: {
              processing_status: 'failed'
            }
          });
        });
      }
      
      toast({
        title: "Error",
        description: "Failed to add websites",
        variant: "destructive"
      });
    } finally {
      setIsLocallyProcessing(false);
    }
  };

  // Use local processing state instead of global processing states
  const isProcessingFiles = isLocallyProcessing;

  return (
    <>
      <Dialog open={open} onOpenChange={onOpenChange}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader className="pb-4">
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-2">
                <div className="w-6 h-6 bg-black rounded flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" height="16px" viewBox="0 -960 960 960" width="16px" fill="#FFFFFF">
                    <path d="M480-80q-33 0-56.5-23.5T400-160h160q0 33-23.5 56.5T480-80ZM320-200v-80h320v80H320Zm10-120q-69-41-109.5-110T180-580q0-125 87.5-212.5T480-880q125 0 212.5 87.5T780-580q0 81-40.5 150T630-320H330Zm24-80h252q45-32 69.5-79T700-580q0-92-64-156t-156-64q-92 0-156 64t-64 156q0 54 24.5 101t69.5 79Zm126 0Z" />
                  </svg>
                </div>
                <DialogTitle className="text-xl font-medium">InsightsLM</DialogTitle>
              </div>
            </div>
          </DialogHeader>

          <div className="space-y-6">
            <div>
              <h2 className="text-xl font-medium mb-2">Add sources</h2>
              <p className="text-gray-600 text-sm mb-1">Sources let InsightsLM base its responses on the information that matters most to you.</p>
              <p className="text-gray-500 text-xs">
                (Examples: marketing plans, course reading, research notes, meeting transcripts, sales documents, etc.)
              </p>
            </div>

            {/* File Upload Area */}
            <div 
              className={`border-2 border-dashed rounded-lg p-12 text-center transition-colors ${
                dragActive ? 'border-blue-400 bg-blue-50' : 'border-gray-300 hover:border-gray-400'
              } ${isProcessingFiles ? 'opacity-50 pointer-events-none' : ''}`}
              onDragEnter={handleDrag}
              onDragLeave={handleDrag}
              onDragOver={handleDrag}
              onDrop={handleDrop}
            >
              <div className="flex flex-col items-center space-y-4">
                <div className="w-12 h-12 rounded-full flex items-center justify-center bg-slate-100">
                  <Upload className="h-6 w-6 text-slate-600" />
                </div>
                <div>
                  <h3 className="font-medium text-gray-900 mb-2">
                    {isProcessingFiles ? 'Processing files...' : 'Upload sources'}
                  </h3>
                  <p className="text-gray-600 text-sm">
                    {isProcessingFiles ? (
                      'Please wait while we process your files'
                    ) : (
                      <>
                        Drag & drop or{' '}
                        <button 
                          className="text-blue-600 hover:underline" 
                          onClick={() => document.getElementById('file-upload')?.click()}
                          disabled={isProcessingFiles}
                        >
                          choose file
                        </button>{' '}
                        to upload
                      </>
                    )}
                  </p>
                </div>
                <p className="text-xs text-gray-500">
                  Supported file types: PDF, txt, Markdown, Audio (e.g. mp3)
                </p>
                <input
                  id="file-upload"
                  type="file"
                  multiple
                  className="hidden"
                  accept=".pdf,.txt,.md,.mp3,.wav,.m4a"
                  onChange={handleFileSelect}
                  disabled={isProcessingFiles}
                />
              </div>
            </div>

            {/* Integration Options */}
            <div className="grid grid-cols-2 gap-4">
              <Button
                variant="outline"
                className="h-auto p-4 flex flex-col items-center space-y-2"
                onClick={() => setShowMultipleWebsiteDialog(true)}
                disabled={isProcessingFiles}
              >
                <Link className="h-6 w-6 text-green-600" />
                <span className="font-medium">Link - Website</span>
                <span className="text-sm text-gray-500">Multiple URLs at once</span>
              </Button>

              <Button
                variant="outline"
                className="h-auto p-4 flex flex-col items-center space-y-2"
                onClick={() => setShowCopiedTextDialog(true)}
                disabled={isProcessingFiles}
              >
                <Copy className="h-6 w-6 text-purple-600" />
                <span className="font-medium">Paste Text - Copied Text</span>
                <span className="text-sm text-gray-500">Add copied content</span>
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Sub-dialogs */}
      <CopiedTextDialog 
        open={showCopiedTextDialog} 
        onOpenChange={setShowCopiedTextDialog} 
        onSubmit={handleTextSubmit} 
      />

      <MultipleWebsiteUrlsDialog 
        open={showMultipleWebsiteDialog} 
        onOpenChange={setShowMultipleWebsiteDialog} 
        onSubmit={handleMultipleWebsiteSubmit} 
      />
    </>
  );
};

export default AddSourcesDialog;
</file>

<file path="src/components/notebook/ChatArea.tsx">
import React, { useState, useEffect, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Send, Upload, FileText, Loader2, RefreshCw } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from '@/components/ui/carousel';
import { useChatMessages } from '@/hooks/useChatMessages';
import { useSources } from '@/hooks/useSources';
import MarkdownRenderer from '@/components/chat/MarkdownRenderer';
import SaveToNoteButton from './SaveToNoteButton';
import AddSourcesDialog from './AddSourcesDialog';
import { Citation } from '@/types/message';

interface ChatAreaProps {
  hasSource: boolean;
  notebookId?: string;
  notebook?: {
    id: string;
    title: string;
    description?: string;
    generation_status?: string;
    icon?: string;
    example_questions?: string[];
  } | null;
  onCitationClick?: (citation: Citation) => void;
  questionToSend?: string | null;
  onQuestionSent?: () => void;
}

const ChatArea = ({
  hasSource,
  notebookId,
  notebook,
  onCitationClick,
  questionToSend,
  onQuestionSent
}: ChatAreaProps) => {
  const [message, setMessage] = useState('');
  const [pendingUserMessage, setPendingUserMessage] = useState<string | null>(null);
  const [showAiLoading, setShowAiLoading] = useState(false);
  const [clickedQuestions, setClickedQuestions] = useState<Set<string>>(new Set());
  const [showAddSourcesDialog, setShowAddSourcesDialog] = useState(false);
  
  const isGenerating = notebook?.generation_status === 'generating';
  
  const {
    messages,
    sendMessage,
    sendMessageAsync,
    isSending,
    deleteChatHistory,
    isDeletingChatHistory
  } = useChatMessages(notebookId);
  
  const {
    sources
  } = useSources(notebookId);
  
  const sourceCount = sources?.length || 0;

  // Check if at least one source has been successfully processed or is ready for chat
  const hasProcessedSource = sources?.some(source => 
    source.processing_status === 'completed' || 
    source.processing_status === 'processed' ||
    (source.type === 'text' && source.content) || // Text sources don't need processing
    (source.type === 'website' && source.url) ||   // Website sources can work with URL
    source.processing_status === 'pending'         // Allow pending sources for basic chat
  ) || false;

  // Check if any source is actually in a processing state (to show appropriate UI)
  const hasProcessingSources = sources?.some(source => 
    source.processing_status === 'pending' ||
    source.processing_status === 'processing' ||
    source.processing_status === 'uploading'
  ) || false;

  // Always allow chat - sources enhance the experience but aren't required for basic agricultural advice
  const isChatDisabled = false;

  // Debug logging
  console.log('Chat Debug Info:', {
    sourceCount,
    hasProcessedSource,
    isChatDisabled,
    sources: sources?.map(s => ({ 
      id: s.id, 
      type: s.type, 
      processing_status: s.processing_status,
      title: s.title 
    }))
  });

  // Track when we send a message to show loading state
  const [lastMessageCount, setLastMessageCount] = useState(0);

  // Ref for auto-scrolling to the most recent message
  const latestMessageRef = useRef<HTMLDivElement>(null);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  useEffect(() => {
    // If we have new messages and we have a pending message, clear it
    if (messages.length > lastMessageCount && pendingUserMessage) {
      setPendingUserMessage(null);
      setShowAiLoading(false);
    }
    setLastMessageCount(messages.length);
  }, [messages.length, lastMessageCount, pendingUserMessage]);

  // Auto-scroll when pending message is set, when messages update, or when AI loading appears
  useEffect(() => {
    if (latestMessageRef.current && scrollAreaRef.current) {
      // Find the viewport within the ScrollArea
      const viewport = scrollAreaRef.current.querySelector('[data-radix-scroll-area-viewport]');
      if (viewport) {
        // Use a small delay to ensure the DOM has updated
        setTimeout(() => {
          latestMessageRef.current?.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }, 50);
      }
    }
  }, [pendingUserMessage, messages.length, showAiLoading]);

  const handleSendMessage = async (messageText?: string) => {
    const textToSend = messageText || message.trim();
    if (textToSend && notebookId) {
      try {
        // Store the pending message to display immediately
        setPendingUserMessage(textToSend);
        setMessage('');
        
        // Show AI loading after user message is sent
        setShowAiLoading(true);
        
        // Use sendMessageAsync for proper async handling
        await sendMessageAsync({
          notebookId: notebookId,
          role: 'user',
          content: textToSend
        });
      } catch (error) {
        console.error('Failed to send message:', error);
        // Clear pending message on error
        setPendingUserMessage(null);
        setShowAiLoading(false);
      }
    }
  };

  // Handle questionToSend from parent component
  useEffect(() => {
    if (questionToSend && notebookId) {
      handleSendMessage(questionToSend);
      onQuestionSent?.();
    }
  }, [questionToSend, notebookId, onQuestionSent]);

  const handleRefreshChat = () => {
    if (notebookId) {
      console.log('Refresh button clicked for notebook:', notebookId);
      deleteChatHistory(notebookId);
      // Reset clicked questions when chat is refreshed
      setClickedQuestions(new Set());
    }
  };
  const handleCitationClick = (citation: Citation) => {
    onCitationClick?.(citation);
  };
  const handleExampleQuestionClick = (question: string) => {
    // Add question to clicked set to remove it from display
    setClickedQuestions(prev => new Set(prev).add(question));
    setMessage(question);
    handleSendMessage(question);
  };

  // Helper function to determine if message is from user
  const isUserMessage = (msg: any) => {
    const messageType = msg.message?.type || msg.message?.role;
    return messageType === 'human' || messageType === 'user';
  };

  // Helper function to determine if message is from AI
  const isAiMessage = (msg: any) => {
    const messageType = msg.message?.type || msg.message?.role;
    return messageType === 'ai' || messageType === 'assistant';
  };

  // Get the index of the last message for auto-scrolling
  const shouldShowScrollTarget = () => {
    return messages.length > 0 || pendingUserMessage || showAiLoading;
  };

  // Show refresh button if there are any messages (including system messages)
  const shouldShowRefreshButton = messages.length > 0;

  // Get example questions from the notebook, filtering out clicked ones
  const exampleQuestions = notebook?.example_questions?.filter(q => !clickedQuestions.has(q)) || [];

  // Update placeholder text based on processing status
  const getPlaceholderText = () => {
    if (sourceCount === 0) {
      return "Ask me anything about farming and agriculture...";
    } else if (hasProcessedSource) {
      return "Ask questions about your sources or farming in general...";
    } else {
      return "Ask general farming questions while sources are processing...";
    }
  };
  return <div className="flex-1 flex flex-col h-full overflow-hidden">
      {/* Chat Header */}
      <div className="p-4 border-b border-gray-200 flex-shrink-0">
        <div className="max-w-4xl mx-auto flex items-center justify-between">
          <h2 className="text-lg font-medium text-gray-900">AI Assistant</h2>
          {shouldShowRefreshButton && <Button variant="ghost" size="sm" onClick={handleRefreshChat} disabled={isDeletingChatHistory || isChatDisabled} className="flex items-center space-x-2">
              <RefreshCw className={`h-4 w-4 ${isDeletingChatHistory ? 'animate-spin' : ''}`} />
              <span>{isDeletingChatHistory ? 'Clearing...' : 'Clear Chat'}</span>
            </Button>}
        </div>
      </div>

      <ScrollArea className="flex-1 h-full" ref={scrollAreaRef}>
        {/* Document Summary */}
        <div className="p-8 border-b border-gray-200">
          <div className="max-w-4xl mx-auto">
            <div className="flex items-center space-x-4 mb-6">
              <div className="w-10 h-10 flex items-center justify-center bg-transparent">
                {isGenerating ? <Loader2 className="text-black font-normal w-10 h-10 animate-spin" /> : <span className="text-[40px] leading-none">{notebook?.icon || '🌾'}</span>}
              </div>
              <div>
                <h1 className="text-2xl font-medium text-gray-900">
                  {isGenerating ? 'Generating content...' : notebook?.title || 'Agricultural Knowledge Assistant'}
                </h1>
                <p className="text-sm text-gray-600">
                  {sourceCount > 0 ? `${sourceCount} source${sourceCount !== 1 ? 's' : ''} available` : 'Ready for general agricultural questions'}
                </p>
              </div>
            </div>
            
            <div className="bg-gray-50 rounded-lg p-6 mb-6">
              {isGenerating ? <div className="flex items-center space-x-2 text-gray-600">
                  <p>AI is analyzing your source and generating a title and description...</p>
                </div> : <MarkdownRenderer content={notebook?.description || (sourceCount > 0 ? 'Ask questions about your uploaded sources or general farming topics.' : 'I\'m here to help with all your agricultural questions. Feel free to ask about crops, weather, pests, farming techniques, and more!')} className="prose prose-gray max-w-none text-gray-700 leading-relaxed" />}
            </div>

            {/* Show a helpful hint when no sources are available */}
            {sourceCount === 0 && !messages.length && !pendingUserMessage && (
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                <div className="flex items-start space-x-3">
                  <div className="text-blue-600 mt-0.5">💡</div>
                  <div>
                    <p className="text-sm text-blue-800 mb-2">
                      <strong>Get started:</strong> You can ask me anything about farming and agriculture!
                    </p>
                    <p className="text-xs text-blue-600">
                      For more detailed answers about specific documents, consider uploading sources using the "Add Sources" button.
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* Chat Messages */}
            {(messages.length > 0 || pendingUserMessage || showAiLoading) && <div className="mb-6 space-y-4">
                {messages.map((msg, index) => <div key={msg.id} className={`flex ${isUserMessage(msg) ? 'justify-end' : 'justify-start'}`}>
                    <div className={`${isUserMessage(msg) ? 'max-w-xs lg:max-w-md px-4 py-2 bg-blue-500 text-white rounded-lg' : 'w-full'}`}>
                      <div className={isUserMessage(msg) ? '' : 'prose prose-gray max-w-none text-gray-800'}>
                        <MarkdownRenderer content={msg.message.content} className={isUserMessage(msg) ? '' : ''} onCitationClick={handleCitationClick} isUserMessage={isUserMessage(msg)} />
                      </div>
                      {isAiMessage(msg) && <div className="mt-2 flex justify-start">
                          <SaveToNoteButton content={msg.message.content} notebookId={notebookId} />
                        </div>}
                    </div>
                  </div>)}
                
                {/* Pending user message */}
                {pendingUserMessage && <div className="flex justify-end">
                    <div className="max-w-xs lg:max-w-md px-4 py-2 bg-blue-500 text-white rounded-lg">
                      <MarkdownRenderer content={pendingUserMessage} className="" isUserMessage={true} />
                    </div>
                  </div>}
                
                {/* AI Loading Indicator */}
                {showAiLoading && <div className="flex justify-start" ref={latestMessageRef}>
                    <div className="flex items-center space-x-2 px-4 py-3 bg-gray-100 rounded-lg">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{
                animationDelay: '0.1s'
              }}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{
                animationDelay: '0.2s'
              }}></div>
                    </div>
                  </div>}
                
                {/* Scroll target for when no AI loading is shown */}
                {!showAiLoading && shouldShowScrollTarget() && <div ref={latestMessageRef} />}
              </div>}
          </div>
        </div>
      </ScrollArea>

      {/* Chat Input - Fixed at bottom */}
      <div className="p-6 border-t border-gray-200 flex-shrink-0">
        <div className="max-w-4xl mx-auto">
          <div className="flex space-x-4">
            <div className="flex-1 relative">
              <Input placeholder={getPlaceholderText()} value={message} onChange={e => setMessage(e.target.value)} onKeyDown={e => e.key === 'Enter' && !isChatDisabled && !isSending && !pendingUserMessage && handleSendMessage()} className="pr-20" disabled={isChatDisabled || isSending || !!pendingUserMessage} />
              <div className="absolute right-3 top-1/2 transform -translate-y-1/2 text-sm text-gray-500">
                {sourceCount} source{sourceCount !== 1 ? 's' : ''}
              </div>
            </div>
            <Button onClick={() => handleSendMessage()} disabled={!message.trim() || isChatDisabled || isSending || !!pendingUserMessage}>
              {isSending || pendingUserMessage ? <Loader2 className="h-4 w-4 animate-spin" /> : <Send className="h-4 w-4" />}
            </Button>
          </div>
          
          {/* Example Questions Carousel */}
          {!isChatDisabled && !pendingUserMessage && !showAiLoading && exampleQuestions.length > 0 && <div className="mt-4">
              <Carousel className="w-full max-w-4xl">
                <CarouselContent className="-ml-2 md:-ml-4">
                  {exampleQuestions.map((question, index) => <CarouselItem key={index} className="pl-2 md:pl-4 basis-auto">
                      <Button variant="outline" size="sm" className="text-left whitespace-nowrap h-auto py-2 px-3 text-sm" onClick={() => handleExampleQuestionClick(question)}>
                        {question}
                      </Button>
                    </CarouselItem>)}
                </CarouselContent>
                {exampleQuestions.length > 2 && <>
                    <CarouselPrevious className="left-0" />
                    <CarouselNext className="right-0" />
                  </>}
              </Carousel>
            </div>}
        </div>
      </div>
      
      {/* Footer */}
      <div className="p-4 border-t border-gray-200 flex-shrink-0">
        <p className="text-center text-sm text-gray-500">AI4AgriWeather can be inaccurate; please double-check its responses.</p>
      </div>
      
      {/* Add Sources Dialog */}
      <AddSourcesDialog open={showAddSourcesDialog} onOpenChange={setShowAddSourcesDialog} notebookId={notebookId} />
    </div>;
};

export default ChatArea;
</file>

<file path="src/components/notebook/StudioSidebar.tsx">
import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { MoreVertical, Plus, Edit, Bot, User, Loader2, AlertCircle, CheckCircle2, RefreshCw } from 'lucide-react';
import { useNotes, Note } from '@/hooks/useNotes';
import { useAudioOverview } from '@/hooks/useAudioOverview';
import { useNotebooks } from '@/hooks/useNotebooks';
import { useSources } from '@/hooks/useSources';
import { useQueryClient } from '@tanstack/react-query';
import NoteEditor from './NoteEditor';
import AudioPlayer from './AudioPlayer';
import { Citation } from '@/types/message';

interface StudioSidebarProps {
  notebookId?: string;
  isExpanded?: boolean;
  onCitationClick?: (citation: Citation) => void;
}

const StudioSidebar = ({
  notebookId,
  isExpanded,
  onCitationClick
}: StudioSidebarProps) => {
  const [editingNote, setEditingNote] = useState<Note | null>(null);
  const [isCreatingNote, setIsCreatingNote] = useState(false);
  const [audioError, setAudioError] = useState(false);
  const {
    notes,
    isLoading,
    createNote,
    updateNote,
    deleteNote,
    isCreating,
    isUpdating,
    isDeleting
  } = useNotes(notebookId);
  const {
    notebooks
  } = useNotebooks();
  const {
    sources
  } = useSources(notebookId);
  const {
    generateAudioOverview,
    refreshAudioUrl,
    autoRefreshIfExpired,
    isGenerating,
    isAutoRefreshing,
    generationStatus,
    checkAudioExpiry
  } = useAudioOverview(notebookId);
  const queryClient = useQueryClient();
  const notebook = notebooks?.find(n => n.id === notebookId);
  const hasValidAudio = notebook?.audio_overview_url && !checkAudioExpiry(notebook.audio_url_expires_at);
  const currentStatus = generationStatus || notebook?.audio_overview_generation_status;
  
  // Check if at least one source has been successfully processed
  const hasProcessedSource = sources?.some(source => 
    source.processing_status === 'completed' || 
    source.processing_status === 'processed'
  ) || false;
  
  // Debug logging for source processing status
  console.log('🔍 Sources processing status check:', {
    sourcesCount: sources?.length || 0,
    hasProcessedSource,
    sourceStatuses: sources?.map(s => ({ id: s.id, title: s.title, status: s.processing_status })) || []
  });

  // Auto-refresh expired URLs
  useEffect(() => {
    if (!notebookId || !notebook?.audio_overview_url) return;
    
    const checkAndRefresh = async () => {
      if (checkAudioExpiry(notebook.audio_url_expires_at)) {
        console.log('Detected expired audio URL, initiating auto-refresh...');
        await autoRefreshIfExpired(notebookId, notebook.audio_url_expires_at);
      }
    };

    // Check immediately
    checkAndRefresh();

    // Set up periodic check every 5 minutes
    const interval = setInterval(checkAndRefresh, 5 * 60 * 1000);

    return () => clearInterval(interval);
  }, [notebookId, notebook?.audio_overview_url, notebook?.audio_url_expires_at, autoRefreshIfExpired, checkAudioExpiry]);

  const handleCreateNote = () => {
    setIsCreatingNote(true);
    setEditingNote(null);
  };

  const handleEditNote = (note: Note) => {
    console.log('StudioSidebar: Opening note', {
      noteId: note.id,
      sourceType: note.source_type
    });
    setEditingNote(note);
    setIsCreatingNote(false);
  };

  const handleSaveNote = (title: string, content: string) => {
    if (editingNote) {
      // Only allow updating user notes, not AI responses
      if (editingNote.source_type === 'user') {
        updateNote({
          id: editingNote.id,
          title,
          content
        });
      }
    } else {
      createNote({
        title,
        content,
        source_type: 'user'
      });
    }
    setEditingNote(null);
    setIsCreatingNote(false);
  };

  const handleDeleteNote = () => {
    if (editingNote) {
      deleteNote(editingNote.id);
      setEditingNote(null);
    }
  };

  const handleCancel = () => {
    setEditingNote(null);
    setIsCreatingNote(false);
  };

  const handleGenerateAudio = () => {
    if (notebookId) {
      generateAudioOverview(notebookId);
      setAudioError(false);
    }
  };

  const handleAudioError = () => {
    setAudioError(true);
  };

  const handleAudioRetry = () => {
    // Regenerate the audio overview
    handleGenerateAudio();
  };

  const handleAudioDeleted = () => {
    // Refresh the notebooks data to update the UI
    if (notebookId) {
      queryClient.invalidateQueries({
        queryKey: ['notebooks']
      });
    }
    setAudioError(false);
  };

  const handleUrlRefresh = (notebookId: string) => {
    refreshAudioUrl(notebookId);
  };

  const getStatusDisplay = () => {
    if (isAutoRefreshing) {
      return {
        icon: null,
        text: "Refreshing URL...",
        description: "Updating audio access"
      };
    }
    
    if (currentStatus === 'generating' || isGenerating) {
      return {
        icon: <Loader2 className="h-4 w-4 animate-spin text-blue-600" />,
        text: "Generating audio...",
        description: "This may take a few minutes"
      };
    } else if (currentStatus === 'failed') {
      return {
        icon: <AlertCircle className="h-4 w-4 text-red-600" />,
        text: "Generation failed",
        description: "Please try again"
      };
    } else if (currentStatus === 'completed' && hasValidAudio) {
      return {
        icon: <CheckCircle2 className="h-4 w-4 text-green-600" />,
        text: "Ready to play",
        description: "Audio overview available"
      };
    }
    return null;
  };

  const isEditingMode = editingNote || isCreatingNote;
  const getPreviewText = (note: Note) => {
    if (note.source_type === 'ai_response') {
      // Use extracted_text if available, otherwise parse the content
      if (note.extracted_text) {
        return note.extracted_text;
      }
      try {
        const parsed = JSON.parse(note.content);
        if (parsed.segments && parsed.segments[0]) {
          return parsed.segments[0].text;
        }
      } catch (e) {
        // If parsing fails, use content as-is
      }
    }

    // For user notes or fallback, use the content directly
    const contentToUse = note.content;
    return contentToUse.length > 100 ? contentToUse.substring(0, 100) + '...' : contentToUse;
  };

  if (isEditingMode) {
    return <div className="w-full bg-gray-50 border-l border-gray-200 flex flex-col h-full overflow-hidden">
        <NoteEditor note={editingNote || undefined} onSave={handleSaveNote} onDelete={editingNote ? handleDeleteNote : undefined} onCancel={handleCancel} isLoading={isCreating || isUpdating || isDeleting} onCitationClick={onCitationClick} />
      </div>;
  }

  return <div className="w-full bg-gray-50 border-l border-gray-200 flex flex-col h-full overflow-hidden">
      <div className="p-4 border-b border-gray-200 flex-shrink-0">
        <h2 className="text-lg font-medium text-gray-900 mb-4">Studio</h2>
        
        {/* Audio Overview */}
        <Card className="p-4 mb-4 border border-gray-200">
          <div className="flex items-center justify-between mb-3">
            <h3 className="font-medium text-gray-900">Audio Overview</h3>
          </div>

          {hasValidAudio && !audioError && currentStatus !== 'generating' && !isAutoRefreshing ? <AudioPlayer 
              audioUrl={notebook.audio_overview_url} 
              title="Deep Dive Conversation" 
              notebookId={notebookId} 
              expiresAt={notebook.audio_url_expires_at} 
              onError={handleAudioError} 
              onRetry={handleAudioRetry} 
              onDeleted={handleAudioDeleted}
              onUrlRefresh={handleUrlRefresh}
            /> : <Card className="p-3 border border-gray-200">
              {/* Hide this div when generating or auto-refreshing */}
              {currentStatus !== 'generating' && !isGenerating && !isAutoRefreshing && <div className="flex items-center space-x-3 mb-3">
                  <div className="w-8 h-8 rounded flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#111827">
                      <path d="M280-120v-123q-104-14-172-93T40-520h80q0 83 58.5 141.5T320-320h10q5 0 10-1 13 20 28 37.5t32 32.5q-10 3-19.5 4.5T360-243v123h-80Zm20-282q-43-8-71.5-40.5T200-520v-240q0-50 35-85t85-35q50 0 85 35t35 85v160H280v80q0 31 5 60.5t15 57.5Zm340 2q-50 0-85-35t-35-85v-240q0-50 35-85t85-35q50 0 85 35t35 85v240q0 50-35 85t-85 35Zm-40 280v-123q-104-14-172-93t-68-184h80q0 83 58.5 141.5T640-320q83 0 141.5-58.5T840-520h80q0 105-68 184t-172 93v123h-80Zm40-360q17 0 28.5-11.5T680-520v-240q0-17-11.5-28.5T640-800q-17 0-28.5 11.5T600-760v240q0 17 11.5 28.5T640-480Zm0-160Z" />
                    </svg>
                  </div>
                  <div className="flex-1">
                    <h4 className="font-medium text-gray-900">Deep Dive conversation</h4>
                    <p className="text-sm text-gray-600">Two hosts</p>
                  </div>
                </div>}
              
              {/* Status Display */}
              {getStatusDisplay() && <div className="flex items-center space-x-2 mb-3 p-2 rounded-md bg-transparent">
                  {getStatusDisplay()!.icon}
                  <div className="flex-1">
                    <p className="text-sm font-medium text-slate-900">{getStatusDisplay()!.text}</p>
                    <p className="text-xs text-slate-900">{getStatusDisplay()!.description}</p>
                  </div>
                </div>}
              
              {/* Audio error div */}
              {audioError && <div className="flex items-center space-x-2 mb-3 p-2 bg-red-50 rounded-md">
                  <AlertCircle className="h-4 w-4 text-red-600" />
                  <div className="flex-1">
                    <p className="text-sm text-red-600">Audio unavailable</p>
                  </div>
                  <Button size="sm" variant="outline" onClick={handleAudioRetry} className="text-red-600 border-red-300 hover:bg-red-50">
                    <RefreshCw className="h-4 w-4 mr-1" />
                    Retry
                  </Button>
                </div>}
              
              <div className="flex space-x-2">
                <Button size="sm" onClick={handleGenerateAudio} disabled={isGenerating || currentStatus === 'generating' || !hasProcessedSource || isAutoRefreshing} className="flex-1 text-white bg-slate-900 hover:bg-slate-800">
                  {isGenerating || currentStatus === 'generating' ? <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      Generating...
                    </> : 'Generate'}
                </Button>
              </div>
            </Card>}
        </Card>

        {/* Notes Section */}
        <div className="mb-4">
          <div className="flex items-center justify-between mb-3">
            <h3 className="font-medium text-gray-900">Notes</h3>
            
          </div>
          
          <Button variant="outline" size="sm" className="w-full mb-4" onClick={handleCreateNote}>
            <Plus className="h-4 w-4 mr-2" />
            Add note
          </Button>
        </div>
      </div>

      {/* Saved Notes Area */}
      <ScrollArea className="flex-1 h-full">
        <div className="p-4">
          {isLoading ? <div className="text-center py-8">
              <p className="text-sm text-gray-600">Loading notes...</p>
            </div> : notes && notes.length > 0 ? <div className="space-y-3">
              {notes.map(note => <Card key={note.id} className="p-3 border border-gray-200 hover:bg-gray-50 cursor-pointer" onClick={() => handleEditNote(note)}>
                  <div className="flex items-start justify-between">
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center space-x-2 mb-1">
                        {note.source_type === 'ai_response' ? <Bot className="h-3 w-3 text-blue-600" /> : <User className="h-3 w-3 text-gray-600" />}
                        <span className="text-xs text-gray-500 uppercase">
                          {note.source_type === 'ai_response' ? 'AI Response' : 'Note'}
                        </span>
                      </div>
                      <h4 className="font-medium text-gray-900 truncate">{note.title}</h4>
                      <p className="text-sm text-gray-600 line-clamp-2 mt-1">
                        {getPreviewText(note)}
                      </p>
                      <p className="text-xs text-gray-500 mt-2">
                        {new Date(note.updated_at).toLocaleDateString()}
                      </p>
                    </div>
                    {note.source_type === 'user' && <Button variant="ghost" size="sm" className="ml-2">
                        <Edit className="h-3 w-3" />
                      </Button>}
                  </div>
                </Card>)}
            </div> : <div className="text-center py-8">
              <div className="w-16 h-16 bg-gray-200 rounded-lg mx-auto mb-4 flex items-center justify-center">
                <span className="text-gray-400 text-2xl">📄</span>
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">Saved notes will appear here</h3>
              <p className="text-sm text-gray-600">
                Save a chat message to create a new note, or click Add note above.
              </p>
            </div>}
        </div>
      </ScrollArea>
    </div>;
};

export default StudioSidebar;
</file>

<file path="src/contexts/AuthContext.tsx">
import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';
import { User, Session } from '@supabase/supabase-js';
import { supabase } from '@/integrations/supabase/client';
import { Tables } from '@/integrations/supabase/types';

type Profile = Tables<'profiles'>;

interface AuthContextType {
  user: User | null;
  session: Session | null;
  profile: Profile | null;
  loading: boolean;
  error: string | null;
  isAuthenticated: boolean;
  needsOnboarding: boolean;
  signOut: () => Promise<void>;
  refreshProfile: () => Promise<void>;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider = ({ children }: AuthProviderProps) => {
  const [user, setUser] = useState<User | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [profile, setProfile] = useState<Profile | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const updateAuthState = async (newSession: Session | null) => {
    console.log('AuthContext: Updating auth state:', newSession?.user?.email || 'No session');
    setSession(newSession);
    setUser(newSession?.user ?? null);
    
    // Clear any previous errors on successful auth
    if (newSession && error) {
      setError(null);
    }

    // Fetch profile if user is authenticated
    if (newSession?.user) {
      await fetchProfile(newSession.user.id);
    } else {
      setProfile(null);
    }
  };

  const clearAuthState = () => {
    console.log('AuthContext: Clearing auth state');
    setSession(null);
    setUser(null);
    setProfile(null);
    setError(null);
  };

  const fetchProfile = async (userId: string) => {
    try {
      console.log('AuthContext: Fetching profile for user:', userId);
      
      const { data, error } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .single();

      if (error) {
        // If profile doesn't exist, create one
        if (error.code === 'PGRST116') {
          console.log('AuthContext: Profile not found, creating new profile');
          const newProfile = {
            id: userId,
            email: user?.email || '',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
            onboarding_completed: false,
          };

          const { data: createdProfile, error: createError } = await supabase
            .from('profiles')
            .insert(newProfile)
            .select()
            .single();

          if (createError) {
            console.error('AuthContext: Error creating profile:', createError);
            throw createError;
          }

          setProfile(createdProfile);
          return;
        }
        
        console.error('AuthContext: Error fetching profile:', error);
        throw error;
      }

      console.log('AuthContext: Profile fetched successfully');
      setProfile(data);
    } catch (err) {
      console.error('AuthContext: Profile fetch error:', err);
      setError(err instanceof Error ? err.message : 'Profile fetch error');
    }
  };

  const refreshProfile = async () => {
    if (user) {
      await fetchProfile(user.id);
    }
  };

  const signOut = async () => {
    try {
      console.log('AuthContext: Starting logout process...');
      
      // Clear local state immediately to provide instant feedback
      clearAuthState();
      
      // Attempt to sign out from server
      const { error } = await supabase.auth.signOut();
      
      if (error) {
        console.log('AuthContext: Logout error:', error);
        
        // If session is invalid on server, we've already cleared local state
        if (error.message.includes('session_not_found') || 
            error.message.includes('Session not found') ||
            error.status === 403) {
          console.log('AuthContext: Session already invalid on server');
          return;
        }
        
        // For other errors, still ensure local session is cleared
        await supabase.auth.signOut({ scope: 'local' });
        return;
      }
      
      console.log('AuthContext: Logout successful');
    } catch (err) {
      console.error('AuthContext: Unexpected logout error:', err);
      
      // Even if there's an error, try to clear local session
      try {
        await supabase.auth.signOut({ scope: 'local' });
      } catch (localError) {
        console.error('AuthContext: Failed to clear local session:', localError);
      }
    }
  };

  useEffect(() => {
    let mounted = true;

    // Set up auth state listener FIRST
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (event, newSession) => {
        if (!mounted) return;
        
        console.log('AuthContext: Auth state changed:', event, newSession?.user?.email || 'No session');
        
        // Handle sign out events
        if (event === 'SIGNED_OUT') {
          clearAuthState();
          setLoading(false);
          return;
        }
        
        // Handle sign in events
        if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
          updateAuthState(newSession).then(() => {
            setLoading(false);
          });
          return;
        }
        
        // For other events, update state if there's an actual change
        if (session?.access_token !== newSession?.access_token) {
          updateAuthState(newSession).then(() => {
            if (loading) setLoading(false);
          });
        }
      }
    );

    const initializeAuth = async () => {
      try {
        console.log('AuthContext: Initializing auth...');
        
        // Get initial session
        const { data: { session: initialSession }, error: sessionError } = await supabase.auth.getSession();
        
        if (sessionError) {
          console.error('AuthContext: Error getting initial session:', sessionError);
          
          // If the session is invalid, clear local state
          if (sessionError.message.includes('session_not_found') || 
              sessionError.message.includes('Session not found')) {
            console.log('AuthContext: Session not found on server, clearing local session');
            await supabase.auth.signOut({ scope: 'local' });
            if (mounted) {
              clearAuthState();
              setLoading(false);
            }
            return;
          }
          
          if (mounted) {
            setError(sessionError.message);
            setLoading(false);
          }
          return;
        }
        
        if (mounted) {
          console.log('AuthContext: Initial session:', initialSession?.user?.email || 'No session');
          await updateAuthState(initialSession);
          setLoading(false);
        }
      } catch (err) {
        console.error('AuthContext: Auth initialization error:', err);
        if (mounted) {
          setError(err instanceof Error ? err.message : 'Authentication error');
          setLoading(false);
        }
      }
    };

    // Initialize auth state after setting up listener
    initializeAuth();

    return () => {
      mounted = false;
      subscription.unsubscribe();
    };
  }, []); // Empty dependency array to run only once

  const value: AuthContextType = {
    user,
    session,
    profile,
    loading,
    error,
    isAuthenticated: !!user && !!session,
    needsOnboarding: !!user && !!profile && !profile.onboarding_completed,
    signOut,
    refreshProfile,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};
</file>

<file path="src/hooks/useNotebooks.tsx">
/**
 * 노트북 관리 훅 - 새로운 API 서비스 기반
 * notebooks API 서비스와 실시간 구독 서비스를 사용하여
 * 노트북의 생명주기를 관리
 */

import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useEffect } from 'react';
import { useAuth } from '@/features/authentication';
import { 
  getNotebooks, 
  getNotebook, 
  createNotebook 
} from '@/services/notebooks';
import { subscribeToUserNotebooks, RealtimeManager } from '@/services/core/realtime';
import type { 
  Notebook,
  NotebookWithSources,
  NotebookCreateInput,
  GetNotebooksOptions 
} from '@/services/notebooks/types';

/**
 * 메인 노트북 관리 훅
 */
export const useNotebooks = (options: GetNotebooksOptions = {}) => {
  const { user, isAuthenticated, loading: authLoading } = useAuth();
  const queryClient = useQueryClient();

  const {
    data: notebooks = [],
    isLoading,
    error,
    isError,
  } = useQuery({
    queryKey: ['notebooks', user?.id, options],
    queryFn: async (): Promise<NotebookWithSources[]> => {
      if (!user?.id) {
        console.log('No user found, returning empty notebooks array');
        return [];
      }
      
      return await getNotebooks(user.id, options);
    },
    enabled: isAuthenticated && !authLoading && !!user?.id,
    retry: (failureCount, error: any) => {
      // 인증 관련 에러는 재시도하지 않음
      if (error?.message?.includes('JWT') || error?.message?.includes('auth')) {
        return false;
      }
      return failureCount < 3;
    },
  });

  // 실시간 구독 설정
  useEffect(() => {
    if (!user?.id || !isAuthenticated) return;

    console.log('Setting up real-time subscription for notebooks');

    let realtimeManager: RealtimeManager;

    try {
      realtimeManager = subscribeToUserNotebooks(user.id, {
        onInsert: (notebook) => {
          console.log('Real-time notebook insert:', notebook);
          queryClient.invalidateQueries({ queryKey: ['notebooks', user.id] });
        },
        onUpdate: (notebook) => {
          console.log('Real-time notebook update:', notebook);
          queryClient.invalidateQueries({ queryKey: ['notebooks', user.id] });
          queryClient.invalidateQueries({ queryKey: ['notebook', notebook.id] });
        },
        onDelete: (payload) => {
          console.log('Real-time notebook delete:', payload);
          queryClient.invalidateQueries({ queryKey: ['notebooks', user.id] });
        },
      });
    } catch (error) {
      console.error('Failed to set up real-time subscription:', error);
    }

    return () => {
      console.log('Cleaning up real-time subscription');
      realtimeManager?.unsubscribe();
    };
  }, [user?.id, isAuthenticated, queryClient]);

  const createNotebookMutation = useMutation({
    mutationFn: async (notebookData: NotebookCreateInput): Promise<Notebook> => {
      console.log('Creating notebook with data:', notebookData);
      console.log('Current user:', user?.id);
      
      if (!user?.id) {
        console.error('User not authenticated');
        throw new Error('User not authenticated');
      }

      return await createNotebook(user.id, notebookData);
    },
    onSuccess: (data) => {
      console.log('Mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
    },
    onError: (error) => {
      console.error('Mutation error:', error);
    },
  });

  return {
    notebooks,
    isLoading: authLoading || isLoading,
    error: error?.message || null,
    isError,
    createNotebook: createNotebookMutation.mutate,
    createNotebookAsync: createNotebookMutation.mutateAsync,
    isCreating: createNotebookMutation.isPending,
  };
};

/**
 * 노트북 생성 전용 훅
 */
export const useCreateNotebook = () => {
  const { user } = useAuth();
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async (notebookData: NotebookCreateInput): Promise<Notebook> => {
      console.log('Creating notebook with data:', notebookData);
      console.log('Current user:', user?.id);
      
      if (!user?.id) {
        console.error('User not authenticated');
        throw new Error('User not authenticated');
      }

      return await createNotebook(user.id, notebookData);
    },
    onSuccess: (data) => {
      console.log('Mutation success, invalidating queries');
      queryClient.invalidateQueries({ queryKey: ['notebooks', user?.id] });
    },
    onError: (error) => {
      console.error('Mutation error:', error);
    },
  });
};

/**
 * 개별 노트북 조회 훅
 */
export const useNotebook = (notebookId: string) => {
  const { user, isAuthenticated } = useAuth();

  return useQuery({
    queryKey: ['notebook', notebookId],
    queryFn: async (): Promise<Notebook> => {
      if (!user?.id || !notebookId) {
        throw new Error('User not authenticated or notebook ID missing');
      }

      console.log('🔍 Fetching notebook:', notebookId, 'for user:', user.id);
      
      const notebook = await getNotebook(notebookId, user.id);
      
      console.log('✅ Notebook fetched successfully:', notebook);
      return notebook;
    },
    enabled: isAuthenticated && !!notebookId && !!user?.id,
  });
};
</file>

<file path="src/hooks/useSources.tsx">
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useAuth } from '@/features/authentication';
import { useNotebookGeneration } from './useNotebookGeneration';
import { useEffect, useMemo } from 'react';
import {
  getSources,
  createSource,
  updateSource as updateSourceService,
  updateSourceStatus,
  isFirstSource,
  subscribeToNotebookSources,
  Source,
  SourceCreateInput,
  SourceUpdateInput,
  SourceQueryOptions,
  ProcessingStatus,
} from '@/services/sources';

export const useSources = (notebookId?: string, options?: SourceQueryOptions) => {
  const { user } = useAuth();
  const queryClient = useQueryClient();
  const { generateNotebookContentAsync } = useNotebookGeneration();

  // Sources 데이터 조회
  const {
    data: sources = [],
    isLoading,
    error,
  } = useQuery({
    queryKey: ['sources', notebookId, options],
    queryFn: async () => {
      if (!notebookId) return [];
      
      console.log('📊 Fetching sources for notebook:', notebookId);
      const data = await getSources(notebookId, options);
      console.log('✅ Sources fetched successfully:', data.length, 'sources');
      
      return data;
    },
    enabled: !!notebookId,
    staleTime: 5 * 60 * 1000, // 5분간 캐시 유지
  });

  // 실시간 구독 설정
  useEffect(() => {
    if (!notebookId || !user) return;

    console.log('🔄 Setting up realtime subscription for sources, notebook:', notebookId);

    const subscription = subscribeToNotebookSources(notebookId, {
      onInsert: (newSource: Source) => {
        console.log('📥 Realtime INSERT:', newSource);
        queryClient.setQueryData(['sources', notebookId], (oldSources: Source[] = []) => {
          const exists = oldSources.some(source => source.id === newSource.id);
          if (exists) {
            console.log('Source already exists, skipping INSERT:', newSource.id);
            return oldSources;
          }
          return [newSource, ...oldSources];
        });
      },
      onUpdate: (updatedSource: Source) => {
        console.log('🔄 Realtime UPDATE:', updatedSource);
        queryClient.setQueryData(['sources', notebookId], (oldSources: Source[] = []) => {
          return oldSources.map(source => 
            source.id === updatedSource.id ? updatedSource : source
          );
        });
      },
      onDelete: ({ old_record: deletedSource }) => {
        console.log('🗑️ Realtime DELETE:', deletedSource);
        queryClient.setQueryData(['sources', notebookId], (oldSources: Source[] = []) => {
          return oldSources.filter(source => source.id !== deletedSource.id);
        });
      },
    });

    return () => {
      console.log('🧹 Cleaning up realtime subscription for sources');
      subscription.unsubscribe();
    };
  }, [notebookId, user, queryClient]);

  // 소스 추가 Mutation
  const addSource = useMutation({
    mutationFn: async (sourceData: SourceCreateInput) => {
      if (!user) throw new Error('User not authenticated');

      console.log('➕ Adding new source:', sourceData.title, 'type:', sourceData.type);
      const newSource = await createSource(sourceData);
      
      console.log('✅ Source created successfully:', newSource.id);
      return newSource;
    },
    onSuccess: async (newSource) => {
      console.log('🎉 Source added successfully:', newSource);
      
      // 첫 번째 소스인 경우 노트북 생성 트리거 확인
      if (notebookId) {
        const isFirst = await isFirstSource(notebookId);
        
        if (isFirst) {
          console.log('📝 This is the first source, checking notebook generation...');
          
          // 노트북 생성 상태 확인 및 트리거
          const canGenerate = 
            (newSource.type === 'pdf' && newSource.file_path) ||
            (newSource.type === 'text' && newSource.content) ||
            (newSource.type === 'website' && newSource.url) ||
            (newSource.type === 'youtube' && newSource.url) ||
            (newSource.type === 'audio' && newSource.file_path);
          
          if (canGenerate) {
            try {
              await generateNotebookContentAsync({
                notebookId,
                filePath: newSource.file_path || newSource.url,
                sourceType: newSource.type
              });
            } catch (error) {
              console.error('Failed to generate notebook content:', error);
            }
          }
        }
      }
    },
  });

  // 소스 업데이트 Mutation
  const updateSource = useMutation({
    mutationFn: async ({ sourceId, updates }: { 
      sourceId: string; 
      updates: SourceUpdateInput 
    }) => {
      console.log('🔄 Updating source:', sourceId, 'updates:', updates);
      return await updateSourceService(sourceId, updates);
    },
    onSuccess: async (updatedSource) => {
      console.log('✅ Source updated successfully:', updatedSource.id);
      
      // 파일 경로가 추가되고 첫 번째 소스인 경우 생성 트리거
      if (updatedSource.file_path && notebookId) {
        const currentSources = queryClient.getQueryData(['sources', notebookId]) as Source[] || [];
        const isFirst = currentSources.length === 1;
        
        if (isFirst) {
          try {
            await generateNotebookContentAsync({
              notebookId,
              filePath: updatedSource.file_path,
              sourceType: updatedSource.type
            });
          } catch (error) {
            console.error('Failed to generate notebook content:', error);
          }
        }
      }
    },
  });

  // 소스 완료 표시 Mutation
  const markSourceCompleted = useMutation({
    mutationFn: async (sourceId: string) => {
      return await updateSourceStatus(sourceId, 'completed');
    },
    onSuccess: (data) => {
      console.log('✅ Source marked as completed:', data.id);
    },
  });

  // 편의 함수들
  const sourcesByType = useMemo(() => {
    const grouped: Record<string, Source[]> = {};
    sources.forEach(source => {
      if (!grouped[source.type]) {
        grouped[source.type] = [];
      }
      grouped[source.type].push(source);
    });
    return grouped;
  }, [sources]);

  const sourcesByStatus = useMemo(() => {
    const grouped: Record<ProcessingStatus, Source[]> = {
      pending: [],
      processing: [],
      completed: [],
      failed: [],
      cancelled: [],
    };
    sources.forEach(source => {
      const status = source.processing_status as ProcessingStatus || 'pending';
      grouped[status].push(source);
    });
    return grouped;
  }, [sources]);

  const sourceStats = useMemo(() => {
    return {
      total: sources.length,
      completed: sourcesByStatus.completed.length,
      pending: sourcesByStatus.pending.length,
      processing: sourcesByStatus.processing.length,
      failed: sourcesByStatus.failed.length,
      totalFileSize: sources.reduce((sum, source) => sum + (source.file_size || 0), 0),
    };
  }, [sources, sourcesByStatus]);

  return {
    // 데이터
    sources,
    sourcesByType,
    sourcesByStatus,
    sourceStats,
    
    // 상태
    isLoading,
    error,
    
    // 액션
    addSource: addSource.mutate,
    addSourceAsync: addSource.mutateAsync,
    isAdding: addSource.isPending,
    
    updateSource: updateSource.mutate,
    updateSourceAsync: updateSource.mutateAsync,
    isUpdating: updateSource.isPending,
    
    markSourceCompleted: markSourceCompleted.mutate,
    markSourceCompletedAsync: markSourceCompleted.mutateAsync,
    
    // 유틸리티
    refetch: () => queryClient.invalidateQueries({ queryKey: ['sources', notebookId] }),
  };
};
</file>

<file path="src/integrations/supabase/types.ts">
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export type Database = {
  // Allows to automatically instanciate createClient with right options
  // instead of createClient<Database, { PostgrestVersion: 'XX' }>(URL, KEY)
  __InternalSupabase: {
    PostgrestVersion: "12.2.3 (519615d)"
  }
  public: {
    Tables: {
      crops: {
        Row: {
          actual_harvest_date: string | null
          area_hectares: number | null
          created_at: string
          expected_harvest_date: string | null
          farm_id: string | null
          growth_stage: string | null
          health_status: string | null
          id: string
          name: string
          notes: string | null
          planted_date: string | null
          updated_at: string
          variety: string | null
        }
        Insert: {
          actual_harvest_date?: string | null
          area_hectares?: number | null
          created_at?: string
          expected_harvest_date?: string | null
          farm_id?: string | null
          growth_stage?: string | null
          health_status?: string | null
          id?: string
          name: string
          notes?: string | null
          planted_date?: string | null
          updated_at?: string
          variety?: string | null
        }
        Update: {
          actual_harvest_date?: string | null
          area_hectares?: number | null
          created_at?: string
          expected_harvest_date?: string | null
          farm_id?: string | null
          growth_stage?: string | null
          health_status?: string | null
          id?: string
          name?: string
          notes?: string | null
          planted_date?: string | null
          updated_at?: string
          variety?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "crops_farm_id_fkey"
            columns: ["farm_id"]
            isOneToOne: false
            referencedRelation: "farms"
            referencedColumns: ["id"]
          },
        ]
      }
      documents: {
        Row: {
          content: string | null
          embedding: string | null
          id: number
          metadata: Json | null
        }
        Insert: {
          content?: string | null
          embedding?: string | null
          id?: number
          metadata?: Json | null
        }
        Update: {
          content?: string | null
          embedding?: string | null
          id?: number
          metadata?: Json | null
        }
        Relationships: []
      }
      farm_activities: {
        Row: {
          activity_type: string
          cost: number | null
          created_at: string
          crop_id: string | null
          description: string
          farm_id: string | null
          id: string
          performed_at: string
          quantity: number | null
          unit: string | null
          updated_at: string
        }
        Insert: {
          activity_type: string
          cost?: number | null
          created_at?: string
          crop_id?: string | null
          description: string
          farm_id?: string | null
          id?: string
          performed_at: string
          quantity?: number | null
          unit?: string | null
          updated_at?: string
        }
        Update: {
          activity_type?: string
          cost?: number | null
          created_at?: string
          crop_id?: string | null
          description?: string
          farm_id?: string | null
          id?: string
          performed_at?: string
          quantity?: number | null
          unit?: string | null
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "farm_activities_crop_id_fkey"
            columns: ["crop_id"]
            isOneToOne: false
            referencedRelation: "crops"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "farm_activities_farm_id_fkey"
            columns: ["farm_id"]
            isOneToOne: false
            referencedRelation: "farms"
            referencedColumns: ["id"]
          },
        ]
      }
      farms: {
        Row: {
          area_hectares: number | null
          created_at: string
          description: string | null
          farm_type: string | null
          id: string
          latitude: number | null
          location_name: string
          longitude: number | null
          name: string
          updated_at: string
          user_id: string | null
        }
        Insert: {
          area_hectares?: number | null
          created_at?: string
          description?: string | null
          farm_type?: string | null
          id?: string
          latitude?: number | null
          location_name: string
          longitude?: number | null
          name: string
          updated_at?: string
          user_id?: string | null
        }
        Update: {
          area_hectares?: number | null
          created_at?: string
          description?: string | null
          farm_type?: string | null
          id?: string
          latitude?: number | null
          location_name?: string
          longitude?: number | null
          name?: string
          updated_at?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "farms_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      knowledge_entries: {
        Row: {
          category: string | null
          content: string
          created_at: string
          id: string
          is_public: boolean | null
          tags: string[] | null
          title: string
          updated_at: string
          user_id: string | null
        }
        Insert: {
          category?: string | null
          content: string
          created_at?: string
          id?: string
          is_public?: boolean | null
          tags?: string[] | null
          title: string
          updated_at?: string
          user_id?: string | null
        }
        Update: {
          category?: string | null
          content?: string
          created_at?: string
          id?: string
          is_public?: boolean | null
          tags?: string[] | null
          title?: string
          updated_at?: string
          user_id?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "knowledge_entries_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      n8n_chat_histories: {
        Row: {
          id: number
          message: Json
          session_id: string
        }
        Insert: {
          id?: number
          message: Json
          session_id: string
        }
        Update: {
          id?: number
          message?: Json
          session_id?: string
        }
        Relationships: []
      }
      notebooks: {
        Row: {
          audio_overview_generation_status: string | null
          audio_overview_url: string | null
          audio_url_expires_at: string | null
          color: string | null
          created_at: string
          description: string | null
          example_questions: string[] | null
          generation_status: string | null
          icon: string | null
          id: string
          title: string
          updated_at: string
          user_id: string
        }
        Insert: {
          audio_overview_generation_status?: string | null
          audio_overview_url?: string | null
          audio_url_expires_at?: string | null
          color?: string | null
          created_at?: string
          description?: string | null
          example_questions?: string[] | null
          generation_status?: string | null
          icon?: string | null
          id?: string
          title: string
          updated_at?: string
          user_id: string
        }
        Update: {
          audio_overview_generation_status?: string | null
          audio_overview_url?: string | null
          audio_url_expires_at?: string | null
          color?: string | null
          created_at?: string
          description?: string | null
          example_questions?: string[] | null
          generation_status?: string | null
          icon?: string | null
          id?: string
          title?: string
          updated_at?: string
          user_id?: string
        }
        Relationships: [
          {
            foreignKeyName: "notebooks_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      notes: {
        Row: {
          content: string
          created_at: string
          extracted_text: string | null
          id: string
          notebook_id: string
          source_type: string | null
          title: string
          updated_at: string
        }
        Insert: {
          content: string
          created_at?: string
          extracted_text?: string | null
          id?: string
          notebook_id: string
          source_type?: string | null
          title: string
          updated_at?: string
        }
        Update: {
          content?: string
          created_at?: string
          extracted_text?: string | null
          id?: string
          notebook_id?: string
          source_type?: string | null
          title?: string
          updated_at?: string
        }
        Relationships: [
          {
            foreignKeyName: "notes_notebook_id_fkey"
            columns: ["notebook_id"]
            isOneToOne: false
            referencedRelation: "notebooks"
            referencedColumns: ["id"]
          },
        ]
      }
      profiles: {
        Row: {
          avatar_url: string | null
          created_at: string
          email: string
          full_name: string | null
          id: string
          updated_at: string
        }
        Insert: {
          avatar_url?: string | null
          created_at?: string
          email: string
          full_name?: string | null
          id: string
          updated_at?: string
        }
        Update: {
          avatar_url?: string | null
          created_at?: string
          email?: string
          full_name?: string | null
          id?: string
          updated_at?: string
        }
        Relationships: []
      }
      sources: {
        Row: {
          content: string | null
          created_at: string
          display_name: string | null
          file_path: string | null
          file_size: number | null
          id: string
          metadata: Json | null
          notebook_id: string
          processing_status: string | null
          summary: string | null
          title: string
          type: Database["public"]["Enums"]["source_type"]
          updated_at: string
          url: string | null
        }
        Insert: {
          content?: string | null
          created_at?: string
          display_name?: string | null
          file_path?: string | null
          file_size?: number | null
          id?: string
          metadata?: Json | null
          notebook_id: string
          processing_status?: string | null
          summary?: string | null
          title: string
          type: Database["public"]["Enums"]["source_type"]
          updated_at?: string
          url?: string | null
        }
        Update: {
          content?: string | null
          created_at?: string
          display_name?: string | null
          file_path?: string | null
          file_size?: number | null
          id?: string
          metadata?: Json | null
          notebook_id?: string
          processing_status?: string | null
          summary?: string | null
          title?: string
          type?: Database["public"]["Enums"]["source_type"]
          updated_at?: string
          url?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "sources_notebook_id_fkey"
            columns: ["notebook_id"]
            isOneToOne: false
            referencedRelation: "notebooks"
            referencedColumns: ["id"]
          },
        ]
      }
      weather_alerts: {
        Row: {
          alert_type: string
          created_at: string
          farm_id: string | null
          id: string
          is_read: boolean | null
          message: string
          severity: string | null
          title: string
          user_id: string | null
          valid_from: string
          valid_until: string | null
        }
        Insert: {
          alert_type: string
          created_at?: string
          farm_id?: string | null
          id?: string
          is_read?: boolean | null
          message: string
          severity?: string | null
          title: string
          user_id?: string | null
          valid_from: string
          valid_until?: string | null
        }
        Update: {
          alert_type?: string
          created_at?: string
          farm_id?: string | null
          id?: string
          is_read?: boolean | null
          message?: string
          severity?: string | null
          title?: string
          user_id?: string | null
          valid_from?: string
          valid_until?: string | null
        }
        Relationships: [
          {
            foreignKeyName: "weather_alerts_farm_id_fkey"
            columns: ["farm_id"]
            isOneToOne: false
            referencedRelation: "farms"
            referencedColumns: ["id"]
          },
          {
            foreignKeyName: "weather_alerts_user_id_fkey"
            columns: ["user_id"]
            isOneToOne: false
            referencedRelation: "profiles"
            referencedColumns: ["id"]
          },
        ]
      }
      weather_data: {
        Row: {
          created_at: string
          humidity: number | null
          id: string
          latitude: number | null
          location_name: string
          longitude: number | null
          precipitation: number | null
          pressure: number | null
          recorded_at: string
          soil_moisture: number | null
          soil_temperature: number | null
          solar_radiation: number | null
          station_id: string
          temperature: number | null
          updated_at: string
          wind_direction: number | null
          wind_speed: number | null
        }
        Insert: {
          created_at?: string
          humidity?: number | null
          id?: string
          latitude?: number | null
          location_name: string
          longitude?: number | null
          precipitation?: number | null
          pressure?: number | null
          recorded_at: string
          soil_moisture?: number | null
          soil_temperature?: number | null
          solar_radiation?: number | null
          station_id: string
          temperature?: number | null
          updated_at?: string
          wind_direction?: number | null
          wind_speed?: number | null
        }
        Update: {
          created_at?: string
          humidity?: number | null
          id?: string
          latitude?: number | null
          location_name?: string
          longitude?: number | null
          precipitation?: number | null
          pressure?: number | null
          recorded_at?: string
          soil_moisture?: number | null
          soil_temperature?: number | null
          solar_radiation?: number | null
          station_id?: string
          temperature?: number | null
          updated_at?: string
          wind_direction?: number | null
          wind_speed?: number | null
        }
        Relationships: []
      }
      weather_stations: {
        Row: {
          created_at: string
          elevation: number | null
          id: string
          installation_date: string | null
          latitude: number
          location_name: string
          longitude: number
          name: string
          station_id: string
          station_type: string | null
          status: string | null
          updated_at: string
        }
        Insert: {
          created_at?: string
          elevation?: number | null
          id?: string
          installation_date?: string | null
          latitude: number
          location_name: string
          longitude: number
          name: string
          station_id: string
          station_type?: string | null
          status?: string | null
          updated_at?: string
        }
        Update: {
          created_at?: string
          elevation?: number | null
          id?: string
          installation_date?: string | null
          latitude?: number
          location_name?: string
          longitude?: number
          name?: string
          station_id?: string
          station_type?: string | null
          status?: string | null
          updated_at?: string
        }
        Relationships: []
      }
    }
    Views: {
      [_ in never]: never
    }
    Functions: {
      binary_quantize: {
        Args: { "": string } | { "": unknown }
        Returns: unknown
      }
      halfvec_avg: {
        Args: { "": number[] }
        Returns: unknown
      }
      halfvec_out: {
        Args: { "": unknown }
        Returns: unknown
      }
      halfvec_send: {
        Args: { "": unknown }
        Returns: string
      }
      halfvec_typmod_in: {
        Args: { "": unknown[] }
        Returns: number
      }
      hnsw_bit_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      hnsw_halfvec_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      hnsw_sparsevec_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      hnswhandler: {
        Args: { "": unknown }
        Returns: unknown
      }
      is_notebook_owner: {
        Args: { notebook_id_param: string }
        Returns: boolean
      }
      is_notebook_owner_for_document: {
        Args: { doc_metadata: Json }
        Returns: boolean
      }
      ivfflat_bit_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      ivfflat_halfvec_support: {
        Args: { "": unknown }
        Returns: unknown
      }
      ivfflathandler: {
        Args: { "": unknown }
        Returns: unknown
      }
      l2_norm: {
        Args: { "": unknown } | { "": unknown }
        Returns: number
      }
      l2_normalize: {
        Args: { "": string } | { "": unknown } | { "": unknown }
        Returns: string
      }
      match_documents: {
        Args: { query_embedding: string; match_count?: number; filter?: Json }
        Returns: {
          id: number
          content: string
          metadata: Json
          similarity: number
        }[]
      }
      sparsevec_out: {
        Args: { "": unknown }
        Returns: unknown
      }
      sparsevec_send: {
        Args: { "": unknown }
        Returns: string
      }
      sparsevec_typmod_in: {
        Args: { "": unknown[] }
        Returns: number
      }
      vector_avg: {
        Args: { "": number[] }
        Returns: string
      }
      vector_dims: {
        Args: { "": string } | { "": unknown }
        Returns: number
      }
      vector_norm: {
        Args: { "": string }
        Returns: number
      }
      vector_out: {
        Args: { "": string }
        Returns: unknown
      }
      vector_send: {
        Args: { "": string }
        Returns: string
      }
      vector_typmod_in: {
        Args: { "": unknown[] }
        Returns: number
      }
    }
    Enums: {
      source_type: "pdf" | "text" | "website" | "youtube" | "audio"
    }
    CompositeTypes: {
      [_ in never]: never
    }
  }
}

type DatabaseWithoutInternals = Omit<Database, "__InternalSupabase">

type DefaultSchema = DatabaseWithoutInternals[Extract<keyof Database, "public">]

export type Tables<
  DefaultSchemaTableNameOrOptions extends
    | keyof (DefaultSchema["Tables"] & DefaultSchema["Views"])
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"] &
      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Views"])[TableName] extends {
      Row: infer R
    }
    ? R
    : never
  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema["Tables"] &
        DefaultSchema["Views"])
    ? (DefaultSchema["Tables"] &
        DefaultSchema["Views"])[DefaultSchemaTableNameOrOptions] extends {
        Row: infer R
      }
      ? R
      : never
    : never

export type TablesInsert<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Insert: infer I
    }
    ? I
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Insert: infer I
      }
      ? I
      : never
    : never

export type TablesUpdate<
  DefaultSchemaTableNameOrOptions extends
    | keyof DefaultSchema["Tables"]
    | { schema: keyof DatabaseWithoutInternals },
  TableName extends DefaultSchemaTableNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"]
    : never = never,
> = DefaultSchemaTableNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions["schema"]]["Tables"][TableName] extends {
      Update: infer U
    }
    ? U
    : never
  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema["Tables"]
    ? DefaultSchema["Tables"][DefaultSchemaTableNameOrOptions] extends {
        Update: infer U
      }
      ? U
      : never
    : never

export type Enums<
  DefaultSchemaEnumNameOrOptions extends
    | keyof DefaultSchema["Enums"]
    | { schema: keyof DatabaseWithoutInternals },
  EnumName extends DefaultSchemaEnumNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"]
    : never = never,
> = DefaultSchemaEnumNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions["schema"]]["Enums"][EnumName]
  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema["Enums"]
    ? DefaultSchema["Enums"][DefaultSchemaEnumNameOrOptions]
    : never

export type CompositeTypes<
  PublicCompositeTypeNameOrOptions extends
    | keyof DefaultSchema["CompositeTypes"]
    | { schema: keyof DatabaseWithoutInternals },
  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {
    schema: keyof DatabaseWithoutInternals
  }
    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"]
    : never = never,
> = PublicCompositeTypeNameOrOptions extends {
  schema: keyof DatabaseWithoutInternals
}
  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions["schema"]]["CompositeTypes"][CompositeTypeName]
  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema["CompositeTypes"]
    ? DefaultSchema["CompositeTypes"][PublicCompositeTypeNameOrOptions]
    : never

export const Constants = {
  public: {
    Enums: {
      source_type: ["pdf", "text", "website", "youtube", "audio"],
    },
  },
} as const
</file>

<file path="src/pages/Auth.tsx">
import React from 'react';
import AuthForm from '@/components/auth/AuthForm';
import Logo from '@/components/ui/Logo';
const Auth = () => {
  return <div className="min-h-screen flex items-center justify-center px-4 bg-white">
      <div className="w-full max-w-md">
        <div className="text-center mb-8">
          <div className="flex justify-center mb-4">
            <Logo size="lg" />
          </div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">AI4AgriWeather</h1>
          <p className="text-gray-600">Your AI-powered agricultural knowledge companion</p>
        </div>
        <AuthForm />
      </div>
    </div>;
};
export default Auth;
</file>

<file path="src/pages/Dashboard.tsx">
import React from 'react';
import UnifiedHeader from '@/components/layout/UnifiedHeader';
import AgriKnowledgeGrid from '@/components/dashboard/AgriKnowledgeGrid';
import AgriDashboardStats from '@/components/dashboard/AgriDashboardStats';
import EmptyDashboard from '@/components/dashboard/EmptyDashboard';
import { useNotebooks } from '@/hooks/useNotebooks';
import { useAuth } from '@/features/authentication';
import LanguageDebugger from '@/components/LanguageDebugger';
import { useTranslation } from 'react-i18next';

const Dashboard = () => {
  const { t } = useTranslation();
  const { user, loading: authLoading, error: authError } = useAuth();
  const { notebooks, isLoading, error, isError } = useNotebooks();
  const hasNotebooks = notebooks && notebooks.length > 0;

  // Show loading while auth is initializing
  if (authLoading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <UnifiedHeader variant="minimal" showNavigation={false} />
        <main className="max-w-7xl mx-auto px-6 py-8">
          <div className="mb-8">
            <h1 className="text-4xl font-medium text-gray-900 mb-2">{t('auth.title')}</h1>
          </div>
          <div className="text-center py-16">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-gray-600">{t('common.loading')}</p>
          </div>
        </main>
      </div>
    );
  }

  // Show auth error if present
  if (authError) {
    return (
      <div className="min-h-screen bg-gray-50">
        <UnifiedHeader variant="minimal" showNavigation={false} />
        <main className="max-w-7xl mx-auto px-6 py-8">
          <div className="mb-8">
            <h1 className="text-4xl font-medium text-gray-900 mb-2">{t('auth.title')}</h1>
          </div>
          <div className="text-center py-16">
            <p className="text-red-600">{t('common.error')}: {authError}</p>
            <button 
              onClick={() => window.location.reload()} 
              className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              {t('common.next')}
            </button>
          </div>
        </main>
      </div>
    );
  }

  // Show notebooks loading state
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50">
        <UnifiedHeader variant="minimal" showNavigation={false} />
        <main className="max-w-7xl mx-auto px-6 py-8">
          <div className="mb-8">
            <h1 className="text-4xl font-medium text-gray-900 mb-2">{t('auth.title')}</h1>
          </div>
          <div className="text-center py-16">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-gray-600">{t('common.loading')}</p>
          </div>
        </main>
      </div>
    );
  }

  // Show notebooks error if present
  if (isError && error) {
    return (
      <div className="min-h-screen bg-gray-50">
        <UnifiedHeader variant="minimal" showNavigation={false} />
        <main className="max-w-7xl mx-auto px-6 py-8">
          <div className="mb-8">
            <h1 className="text-4xl font-medium text-gray-900 mb-2">{t('auth.title')}</h1>
          </div>
          <div className="text-center py-16">
            <p className="text-red-600">{t('common.error')}: {error}</p>
            <button 
              onClick={() => window.location.reload()} 
              className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              {t('common.next')}
            </button>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-green-50/30 via-white to-blue-50/30">
      <UnifiedHeader variant="minimal" showNavigation={false} />
      
      <main className="max-w-7xl mx-auto px-6 py-8">
        <div className="mb-8">
          <h1 className="font-medium text-gray-900 mb-2 text-4xl">{t('dashboard.title')}</h1>
          <p className="text-gray-600 text-lg">
            {t('dashboard.subtitle')}
          </p>
        </div>

        {hasNotebooks ? (
          <div className="space-y-8">
            <AgriDashboardStats knowledgeEntries={notebooks} isLoading={isLoading} />
            <AgriKnowledgeGrid />
          </div>
        ) : (
          <EmptyDashboard />
        )}
      </main>
      <LanguageDebugger />
    </div>
  );
};

export default Dashboard;
</file>

<file path="src/pages/Index.tsx">
import React from 'react';
import { useAuth } from '@/features/authentication';
import Dashboard from './Dashboard';
import Auth from './Auth';
import AgriOnboarding from '@/components/auth/AgriOnboarding';

const Index = () => {
  const { isAuthenticated, needsOnboarding, loading, error, refreshProfile } = useAuth();

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <p className="text-red-600 mb-4">Authentication error: {error}</p>
          <button 
            onClick={() => window.location.reload()} 
            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  // Show onboarding if user is authenticated but hasn't completed onboarding
  if (isAuthenticated && needsOnboarding) {
    return <AgriOnboarding onComplete={refreshProfile} />;
  }

  return isAuthenticated ? <Dashboard /> : <Auth />;
};

export default Index;
</file>

<file path="src/App.tsx">
import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { AuthProvider, ProtectedRoute, AuthForm } from '@/features/authentication';
import { FarmDashboard } from '@/features/dashboard';
import { WeatherCenter } from '@/features/weather';
import { CropManagement } from '@/features/crops';
import { AgriChat } from '@/features/chat';
import { KnowledgeBase, KnowledgeEntry, NewKnowledgeEntry } from '@/features/knowledge';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { Toaster } from '@/shared/components/ui/toaster';
import NotFoundPage from '@/pages/NotFoundPage';

// Import the agricultural theme CSS
import '@/styles/agriculture-theme.css';

// Import i18n configuration
import './i18n';

const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      staleTime: 5 * 60 * 1000, // 5 minutes
      retry: 1,
    },
  },
});

function App() {
  return (
    <React.Suspense fallback={<div className="flex items-center justify-center min-h-screen">Loading...</div>}>
      <QueryClientProvider client={queryClient}>
        <Router>
          <AuthProvider>
            <Routes>
              <Route path="/auth" element={<AuthForm />} />
              
              {/* Protected Routes */}
              <Route
                path="/"
                element={
                  <ProtectedRoute>
                    <FarmDashboard />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/weather"
                element={
                  <ProtectedRoute>
                    <WeatherCenter />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/crops"
                element={
                  <ProtectedRoute>
                    <CropManagement />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/chat"
                element={
                  <ProtectedRoute>
                    <AgriChat />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/knowledge"
                element={
                  <ProtectedRoute>
                    <KnowledgeBase />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/knowledge/new"
                element={
                  <ProtectedRoute>
                    <NewKnowledgeEntry />
                  </ProtectedRoute>
                }
              />
              <Route
                path="/knowledge/:id"
                element={
                  <ProtectedRoute>
                    <KnowledgeEntry />
                  </ProtectedRoute>
                }
              />
              
              {/* Legacy routes redirect */}
              <Route path="/notebook/*" element={<Navigate to="/knowledge" replace />} />
              
              {/* 404 */}
              <Route path="*" element={<NotFoundPage />} />
            </Routes>
            <Toaster />
          </AuthProvider>
        </Router>
      </QueryClientProvider>
    </React.Suspense>
  );
}

export default App;
</file>

<file path="supabase/functions/process-additional-sources/index.ts">
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { type, notebookId, urls, title, content, timestamp, sourceIds } = await req.json();
    
    console.log(`Process additional sources received ${type} request for notebook ${notebookId}`);

    // Get the webhook URL from Supabase secrets
    const webhookUrl = Deno.env.get('ADDITIONAL_SOURCES_WEBHOOK_URL');
    if (!webhookUrl) {
      throw new Error('ADDITIONAL_SOURCES_WEBHOOK_URL not configured');
    }

    // Get the auth token from Supabase secrets (same as generate-notebook-content)
    const authToken = Deno.env.get('NOTEBOOK_GENERATION_AUTH');
    if (!authToken) {
      throw new Error('NOTEBOOK_GENERATION_AUTH not configured');
    }

    // Prepare the webhook payload
    let webhookPayload;
    
    if (type === 'multiple-websites') {
      webhookPayload = {
        type: 'multiple-websites',
        notebookId,
        urls,
        sourceIds, // Array of source IDs corresponding to the URLs
        timestamp
      };
    } else if (type === 'copied-text') {
      webhookPayload = {
        type: 'copied-text',
        notebookId,
        title,
        content,
        sourceId: sourceIds?.[0], // Single source ID for copied text
        timestamp
      };
    } else {
      throw new Error(`Unsupported type: ${type}`);
    }

    console.log('Sending webhook payload:', JSON.stringify(webhookPayload, null, 2));

    // Send to webhook with authentication
    const response = await fetch(webhookUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': authToken,
        ...corsHeaders
      },
      body: JSON.stringify(webhookPayload)
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Webhook request failed:', response.status, errorText);
      throw new Error(`Webhook request failed: ${response.status} - ${errorText}`);
    }

    const webhookResponse = await response.text();
    console.log('Webhook response:', webhookResponse);

    return new Response(JSON.stringify({ 
      success: true, 
      message: `${type} data sent to webhook successfully`,
      webhookResponse 
    }), {
      headers: { 
        'Content-Type': 'application/json',
        ...corsHeaders 
      },
    });

  } catch (error) {
    console.error('Process additional sources error:', error);
    
    return new Response(JSON.stringify({ 
      error: error.message,
      success: false 
    }), {
      status: 500,
      headers: { 
        'Content-Type': 'application/json',
        ...corsHeaders 
      },
    });
  }
});
</file>

<file path="supabase/functions/process-document-callback/index.ts">
import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { authenticateWebhook, getWebhookSecret } from '../_shared/webhook-auth.ts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type, x-webhook-signature',
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Read raw body for signature verification
    const rawBody = await req.text()
    
    // Authenticate webhook
    const webhookConfig = {
      secret: getWebhookSecret('DOCUMENT_WEBHOOK_SECRET'),
      headerName: 'x-webhook-signature',
      encoding: 'hex' as const,
      prefix: 'sha256='
    }

    const authResponse = await authenticateWebhook(req, rawBody, webhookConfig)
    if (authResponse) {
      return authResponse
    }

    // Parse the verified payload
    const payload = JSON.parse(rawBody)
    
    console.log('🔔 Document processing callback received:', {
      source_id: payload.source_id,
      status: payload.status,
      error: payload.error,
      has_content: !!payload.content,
      has_summary: !!payload.summary,
      timestamp: new Date().toISOString()
    });

    const { source_id, content, summary, display_name, title, status, error } = payload

    if (!source_id) {
      return new Response(
        JSON.stringify({ error: 'source_id is required' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    // Initialize Supabase client
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    )

    // Prepare update data
    const updateData: any = {
      processing_status: error ? 'failed' : (status || 'completed'),
      updated_at: new Date().toISOString()
    }

    if (content) {
      updateData.content = content
    }

    if (summary) {
      updateData.summary = summary
    }

    // Use title if provided, otherwise use display_name, for backward compatibility
    if (title) {
      updateData.title = title
    } else if (display_name) {
      updateData.title = display_name
    }

    if (error) {
      updateData.processing_status = 'failed'
      updateData.error_message = error
      console.error('Document processing failed:', error)
    }

    console.log('📝 Updating source with data:', {
      source_id,
      updateData,
      timestamp: new Date().toISOString()
    });

    // Update the source record
    const { data, error: updateError } = await supabaseClient
      .from('sources')
      .update(updateData)
      .eq('id', source_id)
      .select()
      .single()

    if (updateError) {
      console.error('Error updating source:', updateError)
      return new Response(
        JSON.stringify({ error: 'Failed to update source', details: updateError }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }

    console.log('✅ Source updated successfully:', {
      source_id: data.id,
      new_status: data.processing_status,
      title: data.title,
      timestamp: new Date().toISOString()
    });

    return new Response(
      JSON.stringify({ success: true, message: 'Source updated successfully', data }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )

  } catch (error) {
    console.error('Error in process-document-callback function:', error)
    
    // Check if it's a webhook secret configuration error
    if (error.message?.includes('DOCUMENT_WEBHOOK_SECRET')) {
      return new Response(
        JSON.stringify({ 
          error: 'Webhook authentication not configured',
          message: 'Server configuration error' 
        }),
        { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      )
    }
    
    return new Response(
      JSON.stringify({ error: 'Internal server error' }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  }
})
</file>

<file path="supabase/config.toml">
project_id = "akjajucnlyupkmsufwms"

[auth]
enabled = true
site_url = "http://localhost:5173"
additional_redirect_urls = ["https://localhost:5173"]
jwt_expiry = 3600

[auth.email]
enable_signup = true
double_confirm_changes = true
enable_confirmations = false

[db]
port = 54322
shadow_port = 54320
major_version = 15

[db.pooler]
enabled = false
port = 54329
pool_mode = "transaction"
default_pool_size = 20
max_client_conn = 100

[realtime]
enabled = true
ip_version = "IPv4"

[studio]
enabled = true
port = 54323
api_url = "http://127.0.0.1"

[inbucket]
enabled = true
port = 54324
smtp_port = 54325
pop3_port = 54326

[storage]
enabled = true
file_size_limit = "50MiB"

[edge_runtime]
enabled = true

[analytics]
enabled = false

[functions.generate-notebook-content]
verify_jwt = true

[functions.send-chat-message]
verify_jwt = true

[functions.process-document]
verify_jwt = true

[functions.process-document-callback]
verify_jwt = false

[functions.process-additional-sources]
verify_jwt = true

[functions.audio-generation-callback]
verify_jwt = false
</file>

<file path=".env.example">
# Supabase Configuration
# Get these values from your Supabase project settings: https://app.supabase.com/project/_/settings/api

# Supabase Project URL
# Found in: Settings > API > Project URL
VITE_SUPABASE_URL=https://your-project-id.supabase.co

# Supabase Anonymous/Public Key  
# Found in: Settings > API > Project API keys > anon public
VITE_SUPABASE_ANON_KEY=your-supabase-anon-key-here

# Note: Never commit your actual .env file to version control!
# Copy this file to .env and fill in your actual values.

# Edge Functions Webhook Secrets (for Supabase Edge Functions)
# Generate strong secrets using: openssl rand -hex 32
# These are used to authenticate webhook callbacks from external services
DOCUMENT_WEBHOOK_SECRET=your-document-webhook-secret-here
AUDIO_WEBHOOK_SECRET=your-audio-webhook-secret-here
</file>

<file path="vite.config.ts">
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [
    react(),
  ],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));
</file>

<file path="n8n/InsightsLM___Podcast_Generation.json">
{
  "name": "InsightsLM - Podcast Generation",
  "nodes": [
    {
      "parameters": {
        "command": "if ffmpeg -version > /dev/null 2>&1; then\n  echo \"FFmpeg is installed\"\nelse\n  echo \"FFmpeg is NOT installed\"\nfi\n"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        -420,
        1320
      ],
      "id": "b804e4c1-5f49-4fb6-943b-92f183c302a9",
      "name": "Check is FFMPEG Installed"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "05ef5c0e-fe71-4367-a88d-6ba65b8e4e48",
              "leftValue": "={{ $json.stdout }}",
              "rightValue": "=FFmpeg is installed",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "3e8219ed-4cfb-4706-b6c0-6cdf4e1d1c3b",
              "leftValue": "",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -200,
        1320
      ],
      "id": "3adf9104-7091-4b88-b45b-efdb219c7742",
      "name": "If"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n    \"message\": \"Workflow was started\"\n}",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        100,
        1200
      ],
      "id": "54c2c7a8-af45-488e-9439-997d43ca2676",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"error\": \"FFmpeg not installed\",\n  \"code\": \"FFMPEG_NOT_INSTALLED\",\n  \"details\": \"The server requires ffmpeg to be installed\"\n}",
        "options": {
          "responseCode": 500
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        100,
        1380
      ],
      "id": "2b492335-fad2-4981-8c5c-bd790256bddd",
      "name": "Respond with 500 Error"
    },
    {
      "parameters": {
        "content": "## To Do \n- REQUIREMENT: FFMPEG needs to be installed on your server for this workflow to succeed\n- Configure the Supabase nodes to reference your Project\n- Configure your Google Cloud API credentials\n- Update the Host of the \"HTTP Requests\" to hit your project",
        "width": 680,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2040,
        840
      ],
      "id": "73fb9911-4a7c-413b-8bb9-9ec86a3f501e",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "4c4699bc-004b-4ca3-8923-373ddd4a274e",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -680,
        1320
      ],
      "id": "36040655-7e2a-4af2-8524-f0e84fa2c874",
      "name": "Webhook",
      "webhookId": "4c4699bc-004b-4ca3-8923-373ddd4a274e",
      "credentials": {
        "httpHeaderAuth": {
          "id": "39evQ95L86jhtb3I",
          "name": "MyNoteBookLM Auth"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "sources",
        "returnAll": true,
        "filters": {
          "conditions": [
            {
              "keyName": "notebook_id",
              "condition": "eq",
              "keyValue": "={{ $('Webhook').item.json.body.notebook_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        360,
        1200
      ],
      "id": "2bf3e04b-7472-4a31-80e3-c78fb8f742be",
      "name": "Get Sources",
      "credentials": {
        "supabaseApi": {
          "id": "OeYUddl4OaIohMCC",
          "name": "MynotebookLM Supabase"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "include": "specifiedFields",
        "fieldsToInclude": "title,content",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        580,
        1200
      ],
      "id": "30a71143-107d-4c02-a43f-54d972c42437",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "c3743cbc-c838-401a-8f65-95a386707ded",
              "name": "prompt",
              "value": "=I’ll give you the text of SOURCE(S) and I’d like you to use the instructions below to write a podcast script\n\n# EXAMPLE OUTPUT STRUCTURE & TRANSCRIPT\n\nPlease read aloud the following in a podcast interview style:\nSpeaker 1: When you watch a Formula One car flash by, it's just an incredible sight. \nSpeaker 2: These things are absolute apex predators of engineering, aren't they? Machines designed purely for speed, pushing everything, materials, aero to the absolute limit. Every single part feels like a technological marvel. It really does.\nSpeaker 1: And what's amazing is that these cars, they weren't just dreamt up in a vacuum. You know, they actually exist within this incredibly tight box, a really, really detailed rulebook that dictates pretty much everything that is and isn't possible.\nSpeaker 2: Exactly. And for this deep dive, we're going straight to the source of that box. Our material today is key sections from the official 2025 Formula One technical regulations put out by the sports governing body, the FIA. Yeah. And our mission here for you listening is really to kind of pull back the curtain on that rulebook. We want to unpack these regulations, try and understand the fundamental principles, maybe some of the surprising details, and just grasp how much complexity is actually baked into the blueprint of an F1 car. It's not just, you know, dry rules. It's the framework that shapes performance, safety and that constant, fascinating battle of innovation we see season after season.\nSpeaker 1: OK, so let's start right at the top then. Yeah. The regulations make it pretty clear who's running the show. It's the FIA, right? They own and organize the Formula One World Championship. They're the ones handing out those coveted titles for drivers, constructors.\nSpeaker 2: That's right. And beneath that sort of top level, there are layers upon layers of rules governing absolutely everything. The championship itself, every single competition within it. So each race weekend, they're governed by the International Sporting Code. These technical regulations we're looking at today, the sporting regulations which cover race procedures, penalties, that kind of thing.\n\n# INSTRUCTIONS TO FOLLOW\n\n1. Opening:\n– Begin with some interesting opening remarks on the topic between the hosts\n– Then introduce the topic as a “deep dive” into the subject matter.\n\n2. Dialog Structure:\n– Use two hosts who engage in a conversational back-and-forth.\n– Alternate between short, punchy statements and longer explanations.\n– Use frequent affirmations like “Right,” “Exactly,” and “Absolutely” to maintain flow and agreement.\n\n3. Language and Tone:\n– Keep the language informal and accessible. Use contractions and colloquialisms.\n– Maintain an enthusiastic, energetic tone throughout.\n– Use rhetorical questions to transition between points: “It’s fascinating, isn’t it?”\n– Employ phrases like “You know” and “I mean” to maintain a casual feel.\n\n4. Content Presentation:\n– Introduce source material (e.g., articles, studies) early in the discussion.\n– Use analogies to explain complex concepts: “It’s like…”\n– Break down ideas into digestible chunks, often using numbered points or clear transitions.\n\n5. Interaction Between Hosts:\n– Have one host pose questions or express confusion, allowing the other to explain.\n– Use phrases like “You’ve hit the nail on the head” to validate each other’s points.\n– Build on each other’s ideas, creating a collaborative feel.\n\n6. Engagement Techniques:\n– Address the audience directly at times: “So to everyone listening…”\n– Pose thought-provoking questions for the audience to consider.\n\n7. Structure and Pacing:\n– Start with a broad introduction of the topic and narrow down to specific points.\n– Use phrases like “So we’ve established…” to summarize and move to new points.\n– Maintain a brisk pace, but allow for moments of reflection on bigger ideas.\n\n8. Concluding the Episode:\n– Signal the wrap-up with “So as we wrap things up…”\n– Pose a final thought-provoking question or takeaway.\n– Use the phrase “And on that note…” to transition to the closing.\n– Encourage continued engagement: “stay curious, keep those questions coming.”\n– End with a consistent sign-off: “Until next time, keep [relevant verb].”\n\n9. Overall Flow:\n– Begin with the misconception or general understanding of the topic.\n– Introduce expert sources that challenge or deepen this understanding.\n– Discuss implications and broader context of the new information.\n– Conclude with how this knowledge affects the listener or the field at large.\n\nRemember to maintain a balance between informative content and engaging conversation, always keeping the tone friendly and accessible regardless of the complexity of the topic.\n\n# SOURCE(S) TO CREATE TRANSCRIPT FROM\n\n{{ JSON.stringify($json.data) }}\n\n# OTHER\n\nIMPORTANT: Only output the transcript and use \\n in between speakers dialog\nIMPORTANT: Your response must start with ...\n\"Please read aloud the following in a podcast interview style:\nSpeaker 1: \"",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        840,
        1200
      ],
      "id": "a12a3968-6929-489f-a497-a837f3c7e13c",
      "name": "Set Prompt"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.prompt }}",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1100,
        1180
      ],
      "id": "25ae0627-f92b-4fa3-8722-6ce6cb678697",
      "name": "Basic LLM Chain",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1",
          "mode": "list",
          "cachedResultName": "gpt-4.1"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        1100,
        1400
      ],
      "id": "a805fc31-c265-49cc-8a95-e79ec7311783",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "hNalDChhNUDtYG7T",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-tts:generateContent",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "googlePalmApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"contents\": [{\n    \"parts\":[{\n      \"text\": {{ JSON.stringify($json.text) }}\n    }]\n  }],\n  \"generationConfig\": {\n    \"responseModalities\": [\"AUDIO\"],\n    \"speechConfig\": {\n      \"multiSpeakerVoiceConfig\": {\n        \"speakerVoiceConfigs\": [{\n            \"speaker\": \"Joe\",\n            \"voiceConfig\": {\n              \"prebuiltVoiceConfig\": {\n                \"voiceName\": \"Algenib\"\n              }\n            }\n          }, {\n            \"speaker\": \"Jane\",\n            \"voiceConfig\": {\n              \"prebuiltVoiceConfig\": {\n                \"voiceName\": \"Kore\"\n              }\n            }\n          }]\n      }\n    }\n  },\n  \"model\": \"gemini-2.5-flash-preview-tts\"\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1520,
        1180
      ],
      "id": "acf52aa8-77ad-41ba-8b27-66f496be6454",
      "name": "Generate Audio",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "maxTries": 5,
      "credentials": {
        "googlePalmApi": {
          "id": "PzC8XiX0nzmyH9AA",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "candidates[0].content.parts[0].inlineData.data",
        "options": {
          "fileName": "audio.pcm",
          "mimeType": "audio/L16"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        1740,
        1180
      ],
      "id": "0c297369-7ff9-45f8-be19-83191b69a676",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "=/tmp/{{ $('Generate Audio').item.json.responseId }}-in.pcm",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        1960,
        1180
      ],
      "id": "d6a89506-9cd2-4486-85a1-be20060d5d04",
      "name": "Read/Write Files from Disk"
    },
    {
      "parameters": {
        "command": "=ffmpeg -f s16le -ar 24000 -ac 1 -i /tmp/{{ $('Generate Audio').item.json.responseId }}-in.pcm -codec:a libmp3lame -qscale:a 2 /tmp/{{ $('Generate Audio').item.json.responseId }}-out.mp3"
      },
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        2200,
        1180
      ],
      "id": "d3f96ec9-2373-4ca7-8282-c078de61b92b",
      "name": "Execute Command"
    },
    {
      "parameters": {
        "fileSelector": "=/tmp/{{ $('Generate Audio').item.json.responseId }}-out.mp3",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        2420,
        1180
      ],
      "id": "5d91d055-300e-4a33-b3e9-fac3b25dd3e0",
      "name": "Read/Write Files from Disk1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://yfvmutoxmibqzvyklggr.supabase.co/storage/v1/object/audio/{{ $('Webhook').item.json.body.notebook_id}}/{{ $binary.data.fileName }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "id": "65a6bb6c-99e1-4e17-ac97-95bf0e23a954",
      "name": "Upload object",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        2640,
        1180
      ],
      "credentials": {
        "supabaseApi": {
          "id": "OeYUddl4OaIohMCC",
          "name": "MynotebookLM Supabase"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://yfvmutoxmibqzvyklggr.supabase.co/storage/v1/object/sign/{{ $json.body.Key }}",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"expiresIn\": 86400\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2840,
        1180
      ],
      "id": "f05a5230-c0c5-4b55-b50c-57b1a3c4df83",
      "name": "Generate Signed URL",
      "credentials": {
        "supabaseApi": {
          "id": "OeYUddl4OaIohMCC",
          "name": "MynotebookLM Supabase"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  const now = new Date();\n  const tomorrow = new Date(now.getTime() + 24 * 60 * 60 * 1000); // Add 1 day in ms\n  item.json.timestamp = tomorrow.toISOString(); // Compatible with Supabase timestampz\n}\n\nreturn $input.all();\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3080,
        1180
      ],
      "id": "8d5764b9-498a-4a73-a62a-69ccb6fa5716",
      "name": "Generate Timestamp for Expires"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "notebooks",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('Webhook').item.json.body.notebook_id }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "audio_overview_url",
              "fieldValue": "=https://yfvmutoxmibqzvyklggr.supabase.co/storage/v1/{{ $json.signedURL }}"
            },
            {
              "fieldId": "audio_url_expires_at",
              "fieldValue": "={{ $json.timestamp }}"
            },
            {
              "fieldId": "audio_overview_generation_status",
              "fieldValue": "completed"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        3340,
        1180
      ],
      "id": "e549327c-f98e-4119-82b0-92c8e902fd06",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "OeYUddl4OaIohMCC",
          "name": "MynotebookLM Supabase"
        }
      }
    },
    {
      "parameters": {
        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)\n## InsightsLM\nhttps://github.com/theaiautomators/insights-lm-public",
        "height": 220,
        "width": 280,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -680,
        900
      ],
      "id": "f1d8ead0-76e7-4a47-8399-969861b08a46",
      "name": "Sticky Note8"
    }
  ],
  "pinData": {},
  "connections": {
    "Check is FFMPEG Installed": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond with 500 Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        [
          {
            "node": "Get Sources",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Check is FFMPEG Installed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Sources": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Set Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Prompt": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Generate Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Generate Audio": {
      "main": [
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk": {
      "main": [
        [
          {
            "node": "Execute Command",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Command": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read/Write Files from Disk1": {
      "main": [
        [
          {
            "node": "Upload object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload object": {
      "main": [
        [
          {
            "node": "Generate Signed URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Signed URL": {
      "main": [
        [
          {
            "node": "Generate Timestamp for Expires",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Timestamp for Expires": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "f228bda4-191c-47b3-a8b0-e8e16d374eb5",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b5d1ea132a4e071e6288b3143f31284b91560858bdef3f0c88a49f587fc91a29"
  },
  "id": "bxrCsRKl157B5Lyt",
  "tags": [
    {
      "createdAt": "2025-05-12T13:43:59.783Z",
      "updatedAt": "2025-05-12T13:43:59.783Z",
      "id": "d3ygIhrGjDmzgrW0",
      "name": "TheAIAutomators.com"
    }
  ]
}
</file>

<file path="n8n/InsightsLM___Process_Additional_Sources.json">
{
  "name": "InsightsLM - Process Additional Sources",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "670882ea-5c1e-4b50-9f41-4792256af985",
        "authentication": "headerAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -20,
        -100
      ],
      "id": "e84393f1-d235-49b6-ae80-14fab4c2eaf3",
      "name": "Webhook",
      "webhookId": "670882ea-5c1e-4b50-9f41-4792256af985",
      "credentials": {
        "httpHeaderAuth": {
          "id": "39evQ95L86jhtb3I",
          "name": "MyNoteBookLM Auth"
        }
      }
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "IQcdcedwXg2w3AuW",
          "mode": "list",
          "cachedResultName": "InsightsLM - Upsert to Vector Store"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "notebook_id": "={{ $('Webhook').item.json.body.notebookId }}",
            "extracted_text": "={{ $('Webhook').item.json.body.content }}",
            "source_id": "={{ $('Webhook').item.json.body.sourceId }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "notebook_id",
              "displayName": "notebook_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "extracted_text",
              "displayName": "extracted_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "source_id",
              "displayName": "source_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        880,
        -280
      ],
      "id": "21f00127-d042-444c-9d5b-a5827ff303b7",
      "name": "Execute Workflow"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $json.body.type }}",
                    "rightValue": "copied-text",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "5057cf19-e998-4cbb-b3a2-95bb8b2a7355"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "9b0e22e8-984f-46ba-b83e-52d3feda3985",
                    "leftValue": "={{ $json.body.type }}",
                    "rightValue": "multiple-websites",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        220,
        -105
      ],
      "id": "ea64f96b-552e-4036-a467-9e721a9348b3",
      "name": "Switch"
    },
    {
      "parameters": {
        "fieldToSplitOut": "body.urls",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        440,
        -5
      ],
      "id": "df3e6c68-9618-4600-82b7-547815e30e0d",
      "name": "Split Out"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        660,
        -5
      ],
      "id": "5c238b17-d28f-42a7-a273-dd5ce9cf0f6c",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "url": "=https://r.jina.ai/{{ $json['body.urls'] }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Accept",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        980,
        80
      ],
      "id": "ab711941-fffb-48a9-8f12-0417503bacf3",
      "name": "Fetch Webpage with Jina.ai"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "IQcdcedwXg2w3AuW",
          "mode": "list",
          "cachedResultName": "InsightsLM - Upsert to Vector Store"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {
            "notebook_id": "={{ $('Switch').item.json.body.notebookId }}",
            "extracted_text": "={{ $json.content }}",
            "source_id": "={{ $('Switch').item.json.body.sourceIds[$('Loop Over Items').item.pairedItem.item] }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "notebook_id",
              "displayName": "notebook_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "extracted_text",
              "displayName": "extracted_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            },
            {
              "id": "source_id",
              "displayName": "source_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "canBeUsedToMatch": true,
              "type": "string",
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": true
        },
        "options": {}
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.2,
      "position": [
        1640,
        80
      ],
      "id": "f64e5ee1-1ebe-48f1-b77e-86ed6943eb79",
      "name": "Execute Workflow1"
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "sources",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('Switch').item.json.body.sourceIds[$('Loop Over Items').item.pairedItem.item] }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "content",
              "fieldValue": "={{ $('Fetch Webpage with Jina.ai').item.json.data.content }}"
            },
            {
              "fieldId": "title",
              "fieldValue": "={{ $('Fetch Webpage with Jina.ai').item.json.data.title }}"
            },
            {
              "fieldId": "file_path",
              "fieldValue": "={{ $('Switch').item.json.body.notebookId }}/{{ $('Switch').item.json.body.sourceIds[$('Loop Over Items').item.pairedItem.item] }}.txt"
            },
            {
              "fieldId": "file_size",
              "fieldValue": "9999"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        1420,
        80
      ],
      "id": "629973a6-c406-4963-860b-2a6d90815afa",
      "name": "Supabase",
      "credentials": {
        "supabaseApi": {
          "id": "OeYUddl4OaIohMCC",
          "name": "MynotebookLM Supabase"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1860,
        140
      ],
      "id": "66f0f255-3e83-4014-8d50-4d539b8658af",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://yfvmutoxmibqzvyklggr.supabase.co/storage/v1/object/sources/{{ $('Switch').item.json.body.notebookId }}/{{ $('Switch').item.json.body.sourceIds[$('Loop Over Items').item.pairedItem.item] }}.txt",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "text/plain",
        "body": "={{ $json.data.url }}\n{{ $json.data.content }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1200,
        80
      ],
      "id": "932f87b7-3975-4304-9225-7e5dd709216b",
      "name": "Upload File to Bucket",
      "credentials": {
        "supabaseApi": {
          "id": "OeYUddl4OaIohMCC",
          "name": "MynotebookLM Supabase"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://yfvmutoxmibqzvyklggr.supabase.co/storage/v1/object/sources/{{ $('Switch').item.json.body.notebookId }}/{{ $json.body.sourceId }}.txt",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendBody": true,
        "contentType": "raw",
        "rawContentType": "text/plain",
        "body": "={{ $json.data.url }}\n{{ $json.data.content }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        440,
        -280
      ],
      "id": "0c971148-8f1e-4da7-aee8-f6a9a4f7d58f",
      "name": "Upload File to Bucket1",
      "credentials": {
        "supabaseApi": {
          "id": "OeYUddl4OaIohMCC",
          "name": "MynotebookLM Supabase"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "sources",
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{ $('Webhook').item.json.body.sourceId }}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "file_path",
              "fieldValue": "={{ $('Switch').item.json.body.notebookId }}/{{ $('Webhook').item.json.body.sourceId }}.txt"
            },
            {
              "fieldId": "file_size",
              "fieldValue": "9999"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        660,
        -280
      ],
      "id": "8b5103e1-46bd-4959-8b1a-0e288759723f",
      "name": "Supabase1",
      "credentials": {
        "supabaseApi": {
          "id": "OeYUddl4OaIohMCC",
          "name": "MynotebookLM Supabase"
        }
      }
    },
    {
      "parameters": {
        "content": "## To Do \n- Configure the Supabase nodes to reference your Project\n- Configure \"Extract Workflow\" to hit the \"Upsert to Vector Store\" workflow\n- Update the Host of the \"HTTP Requests\" to hit your project",
        "width": 680,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        480,
        -600
      ],
      "id": "e0772715-ac1a-4ceb-8017-b07e568c2251",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)\n## InsightsLM\nhttps://github.com/theaiautomators/insights-lm-public",
        "height": 220,
        "width": 280,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        -600
      ],
      "id": "3cb7b6af-1480-47dc-aa7b-07be3b2eb433",
      "name": "Sticky Note8"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Upload File to Bucket1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [],
        [
          {
            "node": "Fetch Webpage with Jina.ai",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Webpage with Jina.ai": {
      "main": [
        [
          {
            "node": "Upload File to Bucket",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "Execute Workflow1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow1": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload File to Bucket": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload File to Bucket1": {
      "main": [
        [
          {
            "node": "Supabase1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase1": {
      "main": [
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "543da2bf-a142-4b01-bffc-81c36407da2f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b5d1ea132a4e071e6288b3143f31284b91560858bdef3f0c88a49f587fc91a29"
  },
  "id": "3FuYqT7cPNPitvak",
  "tags": [
    {
      "createdAt": "2025-05-12T13:43:59.783Z",
      "updatedAt": "2025-05-12T13:43:59.783Z",
      "id": "d3ygIhrGjDmzgrW0",
      "name": "TheAIAutomators.com"
    }
  ]
}
</file>

<file path="src/components/notebook/SourcesSidebar.tsx">
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Plus, MoreVertical, Trash2, Edit, Loader2, CheckCircle, XCircle, Upload } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { ContextMenu, ContextMenuContent, ContextMenuItem, ContextMenuTrigger } from '@/components/ui/context-menu';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';
import AddSourcesDialog from './AddSourcesDialog';
import RenameSourceDialog from './RenameSourceDialog';
import SourceContentViewer from '@/components/chat/SourceContentViewer';
import { useSources } from '@/hooks/useSources';
import { useSourceDelete } from '@/hooks/useSourceDelete';
import { Citation } from '@/types/message';

interface SourcesSidebarProps {
  hasSource: boolean;
  notebookId?: string;
  selectedCitation?: Citation | null;
  onCitationClose?: () => void;
  setSelectedCitation?: (citation: Citation | null) => void;
}

const SourcesSidebar = ({
  hasSource,
  notebookId,
  selectedCitation,
  onCitationClose,
  setSelectedCitation
}: SourcesSidebarProps) => {
  const [showAddSourcesDialog, setShowAddSourcesDialog] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [showRenameDialog, setShowRenameDialog] = useState(false);
  const [selectedSource, setSelectedSource] = useState<any>(null);
  const [selectedSourceForViewing, setSelectedSourceForViewing] = useState<any>(null);

  const {
    sources,
    isLoading
  } = useSources(notebookId);

  const {
    deleteSource,
    isDeleting
  } = useSourceDelete();

  // Get the source content for the selected citation
  const getSourceContent = (citation: Citation) => {
    const source = sources?.find(s => s.id === citation.source_id);
    return source?.content || '';
  };

  // Get the source summary for the selected citation
  const getSourceSummary = (citation: Citation) => {
    const source = sources?.find(s => s.id === citation.source_id);
    return source?.summary || '';
  };

  // Get the source URL for the selected citation
  const getSourceUrl = (citation: Citation) => {
    const source = sources?.find(s => s.id === citation.source_id);
    return source?.url || '';
  };

  // Get the source summary for a selected source
  const getSelectedSourceSummary = () => {
    return selectedSourceForViewing?.summary || '';
  };

  // Get the source content for a selected source  
  const getSelectedSourceContent = () => {
    return selectedSourceForViewing?.content || '';
  };

  // Get the source URL for a selected source
  const getSelectedSourceUrl = () => {
    return selectedSourceForViewing?.url || '';
  };

  
  const renderSourceIcon = (type: string) => {
    const iconMap: Record<string, string> = {
      'pdf': '/file-types/PDF.svg',
      'text': '/file-types/TXT.png',
      'website': '/file-types/WEB.svg',
      'youtube': '/file-types/MP3.png',
      'audio': '/file-types/MP3.png',
      'doc': '/file-types/DOC.png',
      'multiple-websites': '/file-types/WEB.svg',
      'copied-text': '/file-types/TXT.png'
    };

    const iconUrl = iconMap[type] || iconMap['text']; // fallback to TXT icon

    return (
      <img 
        src={iconUrl} 
        alt={`${type} icon`} 
        className="w-full h-full object-contain" 
        onError={(e) => {
          // Fallback to a simple text indicator if image fails to load
          const target = e.target as HTMLImageElement;
          target.style.display = 'none';
          target.parentElement!.innerHTML = '📄';
        }} 
      />
    );
  };

  const renderProcessingStatus = (status: string) => {
    switch (status) {
      case 'uploading':
        return <Upload className="h-4 w-4 animate-pulse text-blue-500" />;
      case 'processing':
        return <Loader2 className="h-4 w-4 animate-spin text-blue-500" />;
      case 'completed':
        return <CheckCircle className="h-4 w-4 text-green-500" />;
      case 'failed':
        return <XCircle className="h-4 w-4 text-red-500" />;
      case 'pending':
        return <Loader2 className="h-4 w-4 animate-pulse text-orange-500" />;
      default:
        return null;
    }
  };

  const handleRemoveSource = (source: any) => {
    setSelectedSource(source);
    setShowDeleteDialog(true);
  };

  const handleRenameSource = (source: any) => {
    setSelectedSource(source);
    setShowRenameDialog(true);
  };

  const handleSourceClick = (source: any) => {
    console.log('SourcesSidebar: Source clicked from list', {
      sourceId: source.id,
      sourceTitle: source.title
    });

    // Clear any existing citation state first
    if (setSelectedCitation) {
      setSelectedCitation(null);
    }

    // Set the selected source for viewing
    setSelectedSourceForViewing(source);

    // Create a mock citation for the selected source without line data (this prevents auto-scroll)
    const mockCitation: Citation = {
      citation_id: -1, // Use negative ID to indicate this is a mock citation
      source_id: source.id,
      source_title: source.title,
      source_type: source.type,
      chunk_index: 0,
      excerpt: 'Full document view'
      // Deliberately omitting chunk_lines_from and chunk_lines_to to prevent auto-scroll
    };

    console.log('SourcesSidebar: Created mock citation', mockCitation);

    // Set the mock citation after a small delay to ensure state is clean
    setTimeout(() => {
      if (setSelectedCitation) {
        setSelectedCitation(mockCitation);
      }
    }, 50);
  };

  const handleBackToSources = () => {
    console.log('SourcesSidebar: Back to sources clicked');
    setSelectedSourceForViewing(null);
    onCitationClose?.();
  };

  const confirmDelete = () => {
    if (selectedSource) {
      deleteSource(selectedSource.id);
      setShowDeleteDialog(false);
      setSelectedSource(null);
    }
  };

  // If we have a selected citation, show the content viewer
  if (selectedCitation) {
    console.log('SourcesSidebar: Rendering content viewer for citation', {
      citationId: selectedCitation.citation_id,
      sourceId: selectedCitation.source_id,
      hasLineData: !!(selectedCitation.chunk_lines_from && selectedCitation.chunk_lines_to),
      isFromSourceList: selectedCitation.citation_id === -1
    });

    // Determine which citation to display and get appropriate content/summary/url
    const displayCitation = selectedCitation;
    const sourceContent = selectedSourceForViewing ? getSelectedSourceContent() : getSourceContent(selectedCitation);
    const sourceSummary = selectedSourceForViewing ? getSelectedSourceSummary() : getSourceSummary(selectedCitation);
    const sourceUrl = selectedSourceForViewing ? getSelectedSourceUrl() : getSourceUrl(selectedCitation);

    return (
      <div className="w-full bg-gray-50 border-r border-gray-200 flex flex-col h-full overflow-hidden">
        <div className="p-4 border-b border-gray-200 flex-shrink-0">
          <div className="flex items-center justify-between">
            <h2 className="text-lg font-medium text-gray-900 cursor-pointer hover:text-gray-700" onClick={handleBackToSources}>
              Sources
            </h2>
            <Button variant="ghost" onClick={handleBackToSources} className="p-2 [&_svg]:!w-6 [&_svg]:!h-6">
              <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="currentColor">
                <path d="M440-440v240h-80v-160H200v-80h240Zm160-320v160h160v80H520v-240h80Z" />
              </svg>
            </Button>
          </div>
        </div>
        
        <SourceContentViewer 
          citation={displayCitation} 
          sourceContent={sourceContent} 
          sourceSummary={sourceSummary}
          sourceUrl={sourceUrl}
          className="flex-1 overflow-hidden" 
          isOpenedFromSourceList={selectedCitation.citation_id === -1}
        />
      </div>
    );
  }

  return (
    <div className="w-full bg-gray-50 border-r border-gray-200 flex flex-col h-full overflow-hidden">
      <div className="p-4 border-b border-gray-200 flex-shrink-0">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-medium text-gray-900">Sources</h2>
        </div>
        
        <div className="flex space-x-2">
          <Button variant="outline" size="sm" className="flex-1" onClick={() => setShowAddSourcesDialog(true)}>
            <Plus className="h-4 w-4 mr-2" />
            Add
          </Button>
        </div>
      </div>

      <ScrollArea className="flex-1 h-full">
        <div className="p-4">
          {isLoading ? (
            <div className="text-center py-8">
              <p className="text-sm text-gray-600">Loading sources...</p>
            </div>
          ) : sources && sources.length > 0 ? (
            <div className="space-y-4">
              {sources.map((source) => (
                <ContextMenu key={source.id}>
                  <ContextMenuTrigger>
                    <Card className="p-3 border border-gray-200 cursor-pointer hover:bg-gray-50" onClick={() => handleSourceClick(source)}>
                      <div className="flex items-start justify-between space-x-3">
                        <div className="flex items-center space-x-2 flex-1 min-w-0">
                          <div className="w-6 h-6 bg-white rounded border border-gray-200 flex items-center justify-center flex-shrink-0 overflow-hidden">
                            {renderSourceIcon(source.type)}
                          </div>
                          <div className="flex-1 min-w-0">
                            <span className="text-sm text-gray-900 truncate block">{source.title}</span>
                          </div>
                        </div>
                        <div className="flex-shrink-0 py-[4px]">
                          {renderProcessingStatus(source.processing_status)}
                        </div>
                      </div>
                    </Card>
                  </ContextMenuTrigger>
                  <ContextMenuContent>
                    <ContextMenuItem onClick={() => handleRenameSource(source)}>
                      <Edit className="h-4 w-4 mr-2" />
                      Rename source
                    </ContextMenuItem>
                    <ContextMenuItem onClick={() => handleRemoveSource(source)} className="text-red-600 focus:text-red-600">
                      <Trash2 className="h-4 w-4 mr-2" />
                      Remove source
                    </ContextMenuItem>
                  </ContextMenuContent>
                </ContextMenu>
              ))}
            </div>
          ) : (
            <div className="text-center py-8">
              <div className="w-16 h-16 bg-gray-200 rounded-lg mx-auto mb-4 flex items-center justify-center">
                <span className="text-gray-400 text-2xl">📄</span>
              </div>
              <h3 className="text-lg font-medium text-gray-900 mb-2">Saved sources will appear here</h3>
              <p className="text-sm text-gray-600 mb-4">Click Add source above to add PDFs, text, or audio files.</p>
            </div>
          )}
        </div>
      </ScrollArea>

      <AddSourcesDialog 
        open={showAddSourcesDialog} 
        onOpenChange={setShowAddSourcesDialog} 
        notebookId={notebookId} 
      />

      <RenameSourceDialog 
        open={showRenameDialog} 
        onOpenChange={setShowRenameDialog} 
        source={selectedSource} 
        notebookId={notebookId} 
      />

      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Delete {selectedSource?.title}?</AlertDialogTitle>
            <AlertDialogDescription>
              You're about to delete this source. This cannot be undone.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction 
              onClick={confirmDelete} 
              className="bg-red-600 hover:bg-red-700" 
              disabled={isDeleting}
            >
              {isDeleting ? 'Deleting...' : 'Delete'}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

export default SourcesSidebar;
</file>

<file path="supabase/migrations/20250606152423_v0.1.sql">
-- ============================================================================
-- COMPLETE DATABASE MIGRATION SCRIPT
-- This script recreates the entire database schema for the AI4AgriWeather application
-- ============================================================================

-- Enable required extensions

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "vector";

-- ============================================================================
-- CUSTOM TYPES
-- ============================================================================

-- Create enum types
DO $$ BEGIN
    CREATE TYPE source_type AS ENUM ('pdf', 'text', 'website', 'youtube', 'audio');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- ============================================================================
-- CORE TABLES
-- ============================================================================

-- Create chat table (if it doesn't exist)
CREATE TABLE IF NOT EXISTS public.n8n_chat_histories (
  id serial not null,
  session_id uuid not null,
  message jsonb not null,
  constraint n8n_chat_histories_pkey primary key (id)
) TABLESPACE pg_default;

-- Create profiles table (if it doesn't exist)
CREATE TABLE IF NOT EXISTS public.profiles (
    id uuid PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    email text NOT NULL,
    full_name text,
    avatar_url text,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create notebooks table
CREATE TABLE IF NOT EXISTS public.notebooks (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    title text NOT NULL,
    description text,
    color text DEFAULT 'gray',
    icon text DEFAULT '📝',
    generation_status text DEFAULT 'completed',
    audio_overview_generation_status text,
    audio_overview_url text,
    audio_url_expires_at timestamp with time zone,
    example_questions text[] DEFAULT '{}',
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create sources table
CREATE TABLE IF NOT EXISTS public.sources (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    notebook_id uuid NOT NULL REFERENCES public.notebooks(id) ON DELETE CASCADE,
    title text NOT NULL,
    type source_type NOT NULL,
    url text,
    file_path text,
    file_size bigint,
    display_name text,
    content text,
    summary text,
    processing_status text DEFAULT 'pending',
    metadata jsonb DEFAULT '{}',
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create notes table
CREATE TABLE IF NOT EXISTS public.notes (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    notebook_id uuid NOT NULL REFERENCES public.notebooks(id) ON DELETE CASCADE,
    title text NOT NULL,
    content text NOT NULL,
    source_type text DEFAULT 'user',
    extracted_text text,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create documents table for vector embeddings
CREATE TABLE IF NOT EXISTS public.documents (
    id bigserial PRIMARY KEY,
    content text,
    metadata jsonb,
    embedding vector(1536)
);

-- ============================================================================
-- INDEXES
-- ============================================================================

-- Index for notebooks by user
CREATE INDEX IF NOT EXISTS idx_notebooks_user_id ON public.notebooks(user_id);
CREATE INDEX IF NOT EXISTS idx_notebooks_updated_at ON public.notebooks(updated_at DESC);

-- Index for sources by notebook
CREATE INDEX IF NOT EXISTS idx_sources_notebook_id ON public.sources(notebook_id);
CREATE INDEX IF NOT EXISTS idx_sources_type ON public.sources(type);
CREATE INDEX IF NOT EXISTS idx_sources_processing_status ON public.sources(processing_status);

-- Index for notes by notebook
CREATE INDEX IF NOT EXISTS idx_notes_notebook_id ON public.notes(notebook_id);

-- Index for chat histories by session
CREATE INDEX IF NOT EXISTS idx_chat_histories_session_id ON public.n8n_chat_histories(session_id);

-- Vector similarity index for documents
CREATE INDEX IF NOT EXISTS documents_embedding_idx ON public.documents USING hnsw (embedding vector_cosine_ops);

-- ============================================================================
-- DATABASE FUNCTIONS
-- ============================================================================

-- Function to handle new user creation
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = ''
AS $$
BEGIN
    INSERT INTO public.profiles (id, email, full_name)
    VALUES (
        new.id,
        new.email,
        COALESCE(new.raw_user_meta_data ->> 'full_name', new.raw_user_meta_data ->> 'name')
    );
    RETURN new;
END;
$$;

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION public.update_updated_at_column()
RETURNS trigger
LANGUAGE plpgsql
AS $$
BEGIN
    new.updated_at = timezone('utc'::text, now());
    RETURN new;
END;
$$;

-- Function to check notebook ownership
CREATE OR REPLACE FUNCTION public.is_notebook_owner(notebook_id_param uuid)
RETURNS boolean
LANGUAGE sql
STABLE SECURITY DEFINER
AS $$
    SELECT EXISTS (
        SELECT 1 
        FROM public.notebooks 
        WHERE id = notebook_id_param 
        AND user_id = auth.uid()
    );
$$;

-- Function to check notebook ownership for documents
CREATE OR REPLACE FUNCTION public.is_notebook_owner_for_document(doc_metadata jsonb)
RETURNS boolean
LANGUAGE sql
STABLE SECURITY DEFINER
AS $$
    SELECT EXISTS (
        SELECT 1 
        FROM public.notebooks 
        WHERE id = (doc_metadata->>'notebook_id')::uuid 
        AND user_id = auth.uid()
    );
$$;

-- Function to match documents using vector similarity
CREATE OR REPLACE FUNCTION public.match_documents(
    query_embedding vector,
    match_count integer DEFAULT NULL,
    filter jsonb DEFAULT '{}'::jsonb
)
RETURNS TABLE(
    id bigint,
    content text,
    metadata jsonb,
    similarity double precision
)
LANGUAGE plpgsql
AS $$
BEGIN
    RETURN QUERY
    SELECT
        documents.id,
        documents.content,
        documents.metadata,
        1 - (documents.embedding <=> query_embedding) as similarity
    FROM public.documents
    WHERE documents.metadata @> filter
    ORDER BY documents.embedding <=> query_embedding
    LIMIT match_count;
END;
$$;

-- ============================================================================
-- ROW LEVEL SECURITY (RLS) POLICIES
-- ============================================================================

-- Enable RLS on all tables
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.notebooks ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.sources ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.notes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.documents ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.n8n_chat_histories ENABLE ROW LEVEL SECURITY;

-- Profiles policies
DROP POLICY IF EXISTS "Users can view their own profile" ON public.profiles;
CREATE POLICY "Users can view their own profile"
    ON public.profiles FOR SELECT
    USING (auth.uid() = id);

DROP POLICY IF EXISTS "Users can update their own profile" ON public.profiles;
CREATE POLICY "Users can update their own profile"
    ON public.profiles FOR UPDATE
    USING (auth.uid() = id);

-- Notebooks policies
DROP POLICY IF EXISTS "Users can view their own notebooks" ON public.notebooks;
CREATE POLICY "Users can view their own notebooks"
    ON public.notebooks FOR SELECT
    USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can create their own notebooks" ON public.notebooks;
CREATE POLICY "Users can create their own notebooks"
    ON public.notebooks FOR INSERT
    WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can update their own notebooks" ON public.notebooks;
CREATE POLICY "Users can update their own notebooks"
    ON public.notebooks FOR UPDATE
    USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can delete their own notebooks" ON public.notebooks;
CREATE POLICY "Users can delete their own notebooks"
    ON public.notebooks FOR DELETE
    USING (auth.uid() = user_id);

-- Sources policies
DROP POLICY IF EXISTS "Users can view sources from their notebooks" ON public.sources;
CREATE POLICY "Users can view sources from their notebooks"
    ON public.sources FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM public.notebooks 
            WHERE notebooks.id = sources.notebook_id 
            AND notebooks.user_id = auth.uid()
        )
    );

DROP POLICY IF EXISTS "Users can create sources in their notebooks" ON public.sources;
CREATE POLICY "Users can create sources in their notebooks"
    ON public.sources FOR INSERT
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM public.notebooks 
            WHERE notebooks.id = sources.notebook_id 
            AND notebooks.user_id = auth.uid()
        )
    );

DROP POLICY IF EXISTS "Users can update sources in their notebooks" ON public.sources;
CREATE POLICY "Users can update sources in their notebooks"
    ON public.sources FOR UPDATE
    USING (
        EXISTS (
            SELECT 1 FROM public.notebooks 
            WHERE notebooks.id = sources.notebook_id 
            AND notebooks.user_id = auth.uid()
        )
    );

DROP POLICY IF EXISTS "Users can delete sources from their notebooks" ON public.sources;
CREATE POLICY "Users can delete sources from their notebooks"
    ON public.sources FOR DELETE
    USING (
        EXISTS (
            SELECT 1 FROM public.notebooks 
            WHERE notebooks.id = sources.notebook_id 
            AND notebooks.user_id = auth.uid()
        )
    );

-- Notes policies
DROP POLICY IF EXISTS "Users can view notes from their notebooks" ON public.notes;
CREATE POLICY "Users can view notes from their notebooks"
    ON public.notes FOR SELECT
    USING (
        EXISTS (
            SELECT 1 FROM public.notebooks 
            WHERE notebooks.id = notes.notebook_id 
            AND notebooks.user_id = auth.uid()
        )
    );

DROP POLICY IF EXISTS "Users can create notes in their notebooks" ON public.notes;
CREATE POLICY "Users can create notes in their notebooks"
    ON public.notes FOR INSERT
    WITH CHECK (
        EXISTS (
            SELECT 1 FROM public.notebooks 
            WHERE notebooks.id = notes.notebook_id 
            AND notebooks.user_id = auth.uid()
        )
    );

DROP POLICY IF EXISTS "Users can update notes in their notebooks" ON public.notes;
CREATE POLICY "Users can update notes in their notebooks"
    ON public.notes FOR UPDATE
    USING (
        EXISTS (
            SELECT 1 FROM public.notebooks 
            WHERE notebooks.id = notes.notebook_id 
            AND notebooks.user_id = auth.uid()
        )
    );

DROP POLICY IF EXISTS "Users can delete notes from their notebooks" ON public.notes;
CREATE POLICY "Users can delete notes from their notebooks"
    ON public.notes FOR DELETE
    USING (
        EXISTS (
            SELECT 1 FROM public.notebooks 
            WHERE notebooks.id = notes.notebook_id 
            AND notebooks.user_id = auth.uid()
        )
    );

-- Documents policies
DROP POLICY IF EXISTS "Users can view documents from their notebooks" ON public.documents;
CREATE POLICY "Users can view documents from their notebooks"
    ON public.documents FOR SELECT
    USING (public.is_notebook_owner_for_document(metadata));

DROP POLICY IF EXISTS "Users can create documents in their notebooks" ON public.documents;
CREATE POLICY "Users can create documents in their notebooks"
    ON public.documents FOR INSERT
    WITH CHECK (public.is_notebook_owner_for_document(metadata));

DROP POLICY IF EXISTS "Users can update documents in their notebooks" ON public.documents;
CREATE POLICY "Users can update documents in their notebooks"
    ON public.documents FOR UPDATE
    USING (public.is_notebook_owner_for_document(metadata));

DROP POLICY IF EXISTS "Users can delete documents from their notebooks" ON public.documents;
CREATE POLICY "Users can delete documents from their notebooks"
    ON public.documents FOR DELETE
    USING (public.is_notebook_owner_for_document(metadata));

-- Chat histories policies
DROP POLICY IF EXISTS "Users can view chat histories from their notebooks" ON public.n8n_chat_histories;
CREATE POLICY "Users can view chat histories from their notebooks"
    ON public.n8n_chat_histories FOR SELECT
    USING (public.is_notebook_owner(session_id::uuid));

DROP POLICY IF EXISTS "Users can create chat histories in their notebooks" ON public.n8n_chat_histories;
CREATE POLICY "Users can create chat histories in their notebooks"
    ON public.n8n_chat_histories FOR INSERT
    WITH CHECK (public.is_notebook_owner(session_id::uuid));

DROP POLICY IF EXISTS "Users can delete chat histories from their notebooks" ON public.n8n_chat_histories;
CREATE POLICY "Users can delete chat histories from their notebooks"
    ON public.n8n_chat_histories FOR DELETE
    USING (public.is_notebook_owner(session_id::uuid));

-- ============================================================================
-- TRIGGERS
-- ============================================================================

DROP TRIGGER IF EXISTS update_profiles_updated_at ON public.profiles;
DROP TRIGGER IF EXISTS update_notebooks_updated_at ON public.notebooks;
DROP TRIGGER IF EXISTS update_sources_updated_at ON public.sources;
DROP TRIGGER IF EXISTS update_notes_updated_at ON public.notes;
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users;

-- Create updated_at triggers
CREATE TRIGGER update_profiles_updated_at
    BEFORE UPDATE ON public.profiles
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_notebooks_updated_at
    BEFORE UPDATE ON public.notebooks
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_sources_updated_at
    BEFORE UPDATE ON public.sources
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();
CREATE TRIGGER update_notes_updated_at
    BEFORE UPDATE ON public.notes
    FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();

-- Auth user trigger
CREATE TRIGGER on_auth_user_created
    AFTER INSERT ON auth.users
    FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();

-- ============================================================================
-- REALTIME CONFIGURATION
-- ============================================================================

-- Enable realtime for tables that need live updates
ALTER TABLE public.notebooks REPLICA IDENTITY FULL;
ALTER TABLE public.sources REPLICA IDENTITY FULL;
ALTER TABLE public.notes REPLICA IDENTITY FULL;
ALTER TABLE public.n8n_chat_histories REPLICA IDENTITY FULL;

-- Add tables to realtime publication
ALTER PUBLICATION supabase_realtime ADD TABLE public.notebooks;
ALTER PUBLICATION supabase_realtime ADD TABLE public.sources;
ALTER PUBLICATION supabase_realtime ADD TABLE public.notes;
ALTER PUBLICATION supabase_realtime ADD TABLE public.n8n_chat_histories;

-- =============================================
-- Storage Buckets and Policies Migration
-- =============================================

-- Create storage buckets
INSERT INTO storage.buckets (id, name, public, file_size_limit, allowed_mime_types)
VALUES 
  -- Sources bucket for user uploads (private)
  ('sources', 'sources', false, 52428800, ARRAY[
    'application/pdf',
    'text/plain',
    'text/csv',
    'application/msword',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'audio/mpeg',
    'audio/wav',
    'audio/mp4',
    'audio/m4a'
  ]),
  
  -- Audio bucket for generated content (private)
  ('audio', 'audio', false, 104857600, ARRAY[
    'audio/mpeg',
    'audio/wav',
    'audio/mp4',
    'audio/m4a'
  ]),
  
  -- Public images bucket for assets (public)
  ('public-images', 'public-images', true, 10485760, ARRAY[
    'image/jpeg',
    'image/png',
    'image/gif',
    'image/webp',
    'image/svg+xml'
  ])
ON CONFLICT (id) DO UPDATE SET
  file_size_limit = EXCLUDED.file_size_limit,
  allowed_mime_types = EXCLUDED.allowed_mime_types,
  public = EXCLUDED.public;

-- =============================================
-- RLS POLICIES FOR SOURCES BUCKET
-- =============================================

-- Sources bucket policies (private - users can only access their own files)
CREATE POLICY "Users can view their own source files"
ON storage.objects FOR SELECT
USING (
  bucket_id = 'sources' AND
  (storage.foldername(name))[1]::uuid IN (
    SELECT id FROM notebooks WHERE user_id = auth.uid()
  )
);

CREATE POLICY "Users can upload source files to their notebooks"
ON storage.objects FOR INSERT
WITH CHECK (
  bucket_id = 'sources' AND
  (storage.foldername(name))[1]::uuid IN (
    SELECT id FROM notebooks WHERE user_id = auth.uid()
  )
);

CREATE POLICY "Users can update their own source files"
ON storage.objects FOR UPDATE
USING (
  bucket_id = 'sources' AND
  (storage.foldername(name))[1]::uuid IN (
    SELECT id FROM notebooks WHERE user_id = auth.uid()
  )
);

CREATE POLICY "Users can delete their own source files"
ON storage.objects FOR DELETE
USING (
  bucket_id = 'sources' AND
  (storage.foldername(name))[1]::uuid IN (
    SELECT id FROM notebooks WHERE user_id = auth.uid()
  )
);

-- =============================================
-- RLS POLICIES FOR AUDIO BUCKET
-- =============================================

-- Audio bucket policies (private - users can only access their own audio files)
CREATE POLICY "Users can view their own audio files"
ON storage.objects FOR SELECT
USING (
  bucket_id = 'audio' AND
  (storage.foldername(name))[1]::uuid IN (
    SELECT id FROM notebooks WHERE user_id = auth.uid()
  )
);

CREATE POLICY "Service role can manage audio files"
ON storage.objects FOR ALL
USING (
  bucket_id = 'audio' AND
  auth.role() = 'service_role'
);

CREATE POLICY "Users can delete their own audio files"
ON storage.objects FOR DELETE
USING (
  bucket_id = 'audio' AND
  (storage.foldername(name))[1]::uuid IN (
    SELECT id FROM notebooks WHERE user_id = auth.uid()
  )
);

-- =============================================
-- RLS POLICIES FOR PUBLIC-IMAGES BUCKET
-- =============================================

-- Public images bucket policies (public - anyone can read)
CREATE POLICY "Anyone can view public images"
ON storage.objects FOR SELECT
USING (bucket_id = 'public-images');

CREATE POLICY "Service role can manage public images"
ON storage.objects FOR ALL
USING (
  bucket_id = 'public-images' AND
  auth.role() = 'service_role'
);
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AI4AgriWeather - Smart Agricultural Weather Intelligence</title>
    <meta name="description" content="AI-powered agricultural weather intelligence platform for smart farming decisions" />
    <meta name="author" content="AI4AgriWeather Team" />

    <meta property="og:title" content="AI4AgriWeather" />
    <meta property="og:description" content="AI-powered agricultural weather intelligence platform for smart farming decisions" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="/ai4agriweather-og.png" />

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@AI4AgriWeather" />
    <meta name="twitter:image" content="/ai4agriweather-og.png" />
  </head>

  <body>
    <div id="root"></div>
    <!-- GPT Engineer Script - Disabled for production -->
    <!-- <script src="https://cdn.gpteng.co/gptengineer.js" type="module"></script> -->
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="server.js">
const express = require('express');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 8080;

// Serve static files from dist directory
app.use(express.static(path.join(__dirname, 'dist')));

// Handle all routes for SPA
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'dist', 'index.html'));
});

app.listen(PORT, '0.0.0.0', () => {
  console.log(`Server running on port ${PORT}`);
});
</file>

<file path="n8n/Import_Insights_LM_Workflows.json">
{
  "name": "Import Insights LM Workflows",
  "nodes": [
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d0ee4497-e902-40c5-8938-811bb206f6c8",
              "name": "workflow-files",
              "value": "=[\n    {\n      \"file_type\": \"extract-text\",\n      \"file_url\": \"https://raw.githubusercontent.com/theaiautomators/insights-lm-public/main/n8n/InsightsLM___Extract_Text.json\"\n    },\n    {\n      \"file_type\": \"generate-notebook-details\",\n      \"file_url\": \"https://raw.githubusercontent.com/theaiautomators/insights-lm-public/main/n8n/InsightsLM___Generate_Notebook_Details.json\"\n    },\n    {\n      \"file_type\": \"upsert-to-vector-store\",\n      \"file_url\": \"https://raw.githubusercontent.com/theaiautomators/insights-lm-public/main/n8n/InsightsLM___Upsert_to_Vector_Store.json\"\n    },\n    {\n      \"file_type\": \"process-additional-sources\",\n      \"file_url\": \"https://raw.githubusercontent.com/theaiautomators/insights-lm-public/main/n8n/InsightsLM___Process_Additional_Sources.json\"\n    },\n    {\n      \"file_type\": \"chat\",\n      \"file_url\": \"https://raw.githubusercontent.com/theaiautomators/insights-lm-public/main/n8n/InsightsLM___Chat.json\"\n    },\n    {\n      \"file_type\": \"podcast-generation\",\n      \"file_url\": \"https://raw.githubusercontent.com/theaiautomators/insights-lm-public/main/n8n/InsightsLM___Podcast_Generation.json\"\n    }\n  ]",
              "type": "array"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        580,
        420
      ],
      "id": "31fb1beb-56fb-49a4-8ba8-27f8f4f483c4",
      "name": "Workflow File URLs to Download"
    },
    {
      "parameters": {
        "fieldToSplitOut": "[\"workflow-files\"]",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        800,
        420
      ],
      "id": "ba2e710c-b319-4b58-a140-20f2a3261e0b",
      "name": "Split Out"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1020,
        420
      ],
      "id": "9b8a7fcc-56e6-412d-91a4-46b3f6ef1d46",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "url": "={{ $json.file_url }}?cacheBust={{ $now.toISO() }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1300,
        -40
      ],
      "id": "abe4c5e2-1a42-4e71-b029-f84ef6de88cc",
      "name": "Download Workflow File"
    },
    {
      "parameters": {
        "jsCode": "// Loop over each input item passed to this node\nfor (const item of $input.all()) {\n  // Convert the JSON object of the current item into a string\n  let dataString = JSON.stringify(item.json);\n\n  // Perform the find-and-replace operations on the string version of the JSON.\n  // The 'g' flag in the regular expression ensures all instances are replaced.\n  const updatedString = dataString\n    .replace(/39evQ95L86jhtb3I/g, $('Enter User Values').first().json['Enter the n8n Custom Webhook Header Auth ID'])\n    .replace(/yfvmutoxmibqzvyklggr/g, $('Enter User Values').first().json['Enter Supabase Project ID'])\n    .replace(/OeYUddl4OaIohMCC/g, $('Enter User Values').first().json['Enter your n8n Supabase Credential ID'])\n    .replace(/hNalDChhNUDtYG7T/g, $('Enter User Values').first().json['Enter the n8n OpenAI Credential ID'])\n    .replace(/PzC8XiX0nzmyH9AA/g, $('Enter User Values').first().json['Enter the n8n Google Gemini (PaLM) Credential ID'])\n    .replace(/OuPBM6n0hyobX8h6/g, $('Enter User Values').first().json['Enter the n8n Postgres Credential ID']);\n\n  // Convert the modified string back into a JSON object and\n  // overwrite the original JSON data of the item.\n  item.json = JSON.parse(updatedString);\n}\n\n// Return all the modified items to be passed to the next node in the workflow.\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1520,
        -40
      ],
      "id": "1d07aa31-e50c-4cf3-8eb1-2b481c6055f3",
      "name": "Find and Replace"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Loop Over Items').item.json.file_type }}",
                    "rightValue": "generate-notebook-details",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "304285e6-dee5-4ff7-adbd-6ee937ae58f4"
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "5b066c3c-356a-4570-8eac-641bd3d515e1",
                    "leftValue": "={{ $('Loop Over Items').item.json.file_type }}",
                    "rightValue": "upsert-to-vector-store",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "loose",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "743b9cbe-e88b-45c1-8d2c-e372995f6c49",
                    "leftValue": "={{ $('Loop Over Items').item.json.file_type }}",
                    "rightValue": "process-additional-sources",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "looseTypeValidation": true,
        "options": {
          "fallbackOutput": "extra"
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        1740,
        -61
      ],
      "id": "38a4265e-e599-4337-980c-c28c4f602d2e",
      "name": "Switch"
    },
    {
      "parameters": {
        "jsCode": "// Loop over each input item passed to this node\nfor (const item of $input.all()) {\n  // Convert the JSON object of the current item into a string\n  let dataString = JSON.stringify(item.json);\n\n  // Perform the find-and-replace operations on the string version of the JSON.\n  // The 'g' flag in the regular expression ensures all instances are replaced.\n  const updatedString = dataString\n    .replace(/AzZ5a2zCGU1O3MRV/g, $('n8n').first(0,0).json.id);\n\n  // Convert the modified string back into a JSON object and\n  // overwrite the original JSON data of the item.\n  item.json = JSON.parse(updatedString);\n}\n\n// Return all the modified items to be passed to the next node in the workflow.\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2020,
        -280
      ],
      "id": "18834b8a-a4c1-455b-85b7-9cbb82a36fc0",
      "name": "Update Extract Text Workflow Reference"
    },
    {
      "parameters": {
        "jsCode": "// Loop over each input item passed to this node\nfor (const item of $input.all()) {\n  // Convert the JSON object of the current item into a string\n  let dataString = JSON.stringify(item.json);\n\n  // Perform the find-and-replace operations on the string version of the JSON.\n  // The 'g' flag in the regular expression ensures all instances are replaced.\n  const updatedString = dataString\n    .replace(/IQcdcedwXg2w3AuW/g, $('n8n').first(0,2).json.id);\n\n  // Convert the modified string back into a JSON object and\n  // overwrite the original JSON data of the item.\n  item.json = JSON.parse(updatedString);\n}\n\n// Return all the modified items to be passed to the next node in the workflow.\nreturn $input.all();"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2020,
        -100
      ],
      "id": "a14076eb-e04f-4648-8a08-9d3e768c760a",
      "name": "Update Vector Upsert Workflow Reference"
    },
    {
      "parameters": {
        "operation": "create",
        "workflowObject": "={{ $json.data }}",
        "requestOptions": {}
      },
      "type": "n8n-nodes-base.n8n",
      "typeVersion": 1,
      "position": [
        2460,
        80
      ],
      "id": "4f4f5414-3537-447a-bdfb-343e44d8e563",
      "name": "n8n",
      "credentials": {
        "n8nApi": {
          "id": "telF4gea0lgT56np",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "866c90b8-42da-4178-93ce-26665d38d5ee",
              "name": "Enter Supabase Project ID",
              "value": "",
              "type": "string"
            },
            {
              "id": "0c78076e-6b86-4521-9f56-53bf537deb7d",
              "name": "Enter your n8n Supabase Credential ID",
              "value": "",
              "type": "string"
            },
            {
              "id": "a08496dd-25cb-4905-81a5-15fe8bb73c87",
              "name": "Enter the n8n Custom Webhook Header Auth ID",
              "value": "",
              "type": "string"
            },
            {
              "id": "8adb8fb6-9daf-4385-bfce-547e0b982a8e",
              "name": "Enter the n8n Postgres Credential ID",
              "value": "",
              "type": "string"
            },
            {
              "id": "a78cb031-db06-4b0f-9edd-50d231ee068f",
              "name": "Enter the n8n Google Gemini (PaLM) Credential ID",
              "value": "",
              "type": "string"
            },
            {
              "id": "de05aeff-fa19-4da9-b37d-db62cf8c8b20",
              "name": "Enter the n8n OpenAI Credential ID",
              "value": "",
              "type": "string"
            },
            {
              "id": "2ae2acd0-422f-4f37-bb94-70859c9e7f69",
              "name": "Enter your n8n Base URL (The part before the first single slash)",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        60,
        420
      ],
      "id": "20bd3864-a6fd-49f3-a66e-9b4df0efadcd",
      "name": "Enter User Values"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -180,
        420
      ],
      "id": "16d38df6-a164-4a33-9237-43a36a6da4c7",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "content": "## UPDATE - Add Values\nYou need to fill out all fields here before running this workflow",
        "height": 340,
        "width": 280,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -20,
        280
      ],
      "id": "d68ad448-851e-48b1-a885-93b91dad58b0",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## UPDATE - n8n Node\nCreate an API key in your n8n instance and set the credentials in this node\n\nTo create a key click the 3 dots beside your name on the bottom left, then Settings > then n8n API > then Create API Key",
        "height": 420,
        "width": 360,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        2320,
        -140
      ],
      "id": "60d5a9eb-d113-4280-b4a9-33648e5897f5",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "fdfeb2e5-e42b-4048-a459-c9b09595104d",
              "leftValue": "={{ $json[\"Enter Supabase Project ID\"] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "8abfdbe7-0c09-4453-87c6-ce6a397a45b0",
              "leftValue": "={{ $json[\"Enter your n8n Supabase Credential ID\"] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "4d4af96c-0fcd-4f4d-bcb9-5e0ebc5da5f3",
              "leftValue": "={{ $json[\"Enter the n8n Custom Webhook Header Auth ID\"] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "69dd9550-e36f-4612-8e78-f44331b08164",
              "leftValue": "={{ $json[\"Enter the n8n Postgres Credential ID\"] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "44fe849a-0a5b-4dcd-ab15-7281f5427139",
              "leftValue": "={{ $json[\"Enter the n8n Google Gemini (PaLM) Credential ID\"] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "aeca18f7-7dd0-4bf2-8181-a1e63725e8d6",
              "leftValue": "={{ $json[\"Enter the n8n OpenAI Credential ID\"] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "3dcb028f-5ca4-45c8-8418-4b037adf9a1c",
              "leftValue": "={{ $json[\"Enter your n8n Base URL (The part before the first single slash)\"] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        280,
        420
      ],
      "id": "36a61d27-9537-4df3-ba67-b85d11c56136",
      "name": "Checking Values are Set"
    },
    {
      "parameters": {
        "jsCode": "// This script generates a single, structured output item.\n\n// Use a template literal (backticks) for the multi-line start message.\nconst start_message = `Success. Your n8n Workflows have been set up.\nThe following are the Secrets that need to be created in Supabase`;\n\n// Define the array of secret objects.\n// A placeholder is used for secrets that need a user-defined value.\nconst secrets_to_create = [\n  {\n    \"Key\": \"AUDIO_GENERATION_WEBHOOK_URL\",\n    \"Value\": $('Enter User Values').first().json[\"Enter your n8n Base URL (The part before the first single slash)\"] + \"/webhook/4c4699bc-004b-4ca3-8923-373ddd4a274e\"\n  },\n  {\n    \"Key\": \"NOTEBOOK_CHAT_URL\",\n    \"Value\": $('Enter User Values').first().json[\"Enter your n8n Base URL (The part before the first single slash)\"] + \"/webhook/2fabf43f-6e6e-424b-8e93-9150e9ce7d6c\"\n  },\n  {\n    \"Key\": \"ADDITIONAL_SOURCES_WEBHOOK_URL\",\n    \"Value\": $('Enter User Values').first().json[\"Enter your n8n Base URL (The part before the first single slash)\"] + \"/webhook/670882ea-5c1e-4b50-9f41-4792256af985\"\n  },\n  {\n    \"Key\": \"DOCUMENT_PROCESSING_WEBHOOK_URL\",\n    \"Value\": $('Enter User Values').first().json[\"Enter your n8n Base URL (The part before the first single slash)\"] + \"/webhook/19566c6c-e0a5-4a8f-ba1a-5203c2b663b7\"\n  },\n  {\n    \"Key\": \"NOTEBOOK_GENERATION_URL\",\n    \"Value\": $('Enter User Values').first().json[\"Enter your n8n Base URL (The part before the first single slash)\"] + \"/webhook/0c488f50-8d6a-48a0-b056-5f7cfca9efe2\"\n  },\n  {\n    \"Key\": \"NOTEBOOK_GENERATION_AUTH\",\n    \"Value\": \"Provide the password you created earlier\"\n  },\n  {\n    \"Key\": \"OPENAI_API_KEY\",\n    \"Value\": \"Provide your OpenAI Key\"\n  }\n];\n\nconst end_message = 'Ensure you have FFMPEG installed on this server for the Podcast audio generation to work';\n\n// Return the final payload in the required n8n format (an array of items).\nreturn [\n  {\n    json: {\n      start_message: start_message,\n      supabase_secrets: secrets_to_create,\n      end_message: end_message\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1380,
        480
      ],
      "id": "fe36dfff-d3f5-4b42-832c-0dd6a0a83718",
      "name": "Read This After Executing Workflow"
    },
    {
      "parameters": {
        "content": "# Import Insights LM Workflows\n- Only run this workflow once to avoid having duplicate workflows in your project.\n- If you do create duplicate workflows, you can archive them in your instance\n- https://github.com/theaiautomators/insights-lm-public",
        "width": 680,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        220,
        -340
      ],
      "id": "90c1b637-8da6-46f9-9560-f5dc04c01808",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## READ OUTPUT AFTER SUCCESSFUL EXECUTION\nI output the various Supabase secrets that you need to create in this node",
        "height": 340,
        "width": 340,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1280,
        320
      ],
      "id": "3f459a8d-b55c-4851-9b56-cd5911310f76",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)",
        "width": 340,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -160,
        -340
      ],
      "id": "128358e2-08f0-45e5-a071-c5c2918dea88",
      "name": "Sticky Note8"
    }
  ],
  "pinData": {},
  "connections": {
    "Workflow File URLs to Download": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Read This After Executing Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Download Workflow File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Workflow File": {
      "main": [
        [
          {
            "node": "Find and Replace",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find and Replace": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Update Extract Text Workflow Reference",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Extract Text Workflow Reference",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Update Vector Upsert Workflow Reference",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "n8n": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Extract Text Workflow Reference": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Vector Upsert Workflow Reference": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enter User Values": {
      "main": [
        [
          {
            "node": "Checking Values are Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Enter User Values",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Checking Values are Set": {
      "main": [
        [
          {
            "node": "Workflow File URLs to Download",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "67ee3da4-f5a8-49f6-bdfd-fde3da9d1698",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b5d1ea132a4e071e6288b3143f31284b91560858bdef3f0c88a49f587fc91a29"
  },
  "id": "ihfgsYrKHHNlCChl",
  "tags": [
    {
      "createdAt": "2025-05-12T13:43:59.783Z",
      "updatedAt": "2025-05-12T13:43:59.783Z",
      "id": "d3ygIhrGjDmzgrW0",
      "name": "TheAIAutomators.com"
    }
  ]
}
</file>

<file path="n8n/InsightsLM___Chat.json">
{
  "name": "InsightsLM - Chat",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "2fabf43f-6e6e-424b-8e93-9150e9ce7d6c",
        "authentication": "headerAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -40,
        -100
      ],
      "id": "d74f0275-ed31-49eb-af44-2ff2bf95571b",
      "name": "Webhook",
      "webhookId": "2fabf43f-6e6e-424b-8e93-9150e9ce7d6c",
      "credentials": {
        "httpHeaderAuth": {
          "id": "39evQ95L86jhtb3I",
          "name": "MyNoteBookLM Auth"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.body.message }}",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "=You are tasked with answering a question using provided chunks of information. \n\nYour goal is to provide an accurate answer from these chunks while citing your sources. When you use information from a specific chunk in your answer, you must cite it using the specified JSON output format.\n\nThe citation should appear at the end of the sentence or paragraph where the information is used.\n\nTake note of the index of the chunk returned from the vector store, the source_id of the chunk as well as the lines from and lines to... that way we can trace back the cited source.\n\nIf you cannot answer the question using the provided chunks, say \"Sorry I don't know\".\n\nImportant: You MUST trigger the \"Supabase Vector Store\" tool\nImportant: Only based your answers on information in the provided chunks from the vector store"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        220,
        -180
      ],
      "id": "c905f3d9-51bc-4997-983d-ce73be6912cc",
      "name": "AI Agent",
      "retryOnFail": true,
      "waitBetweenTries": 5000,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $json.body.session_id }}",
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        340,
        200
      ],
      "id": "01be19ed-3504-463f-9552-b975883dbefd",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "OuPBM6n0hyobX8h6",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "retrieve_knowledge",
        "toolDescription": "Retrieve releveant information",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "topK": 10,
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "notebook_id",
                "value": "={{ $json.body.session_id }}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.1,
      "position": [
        500,
        140
      ],
      "id": "8b967622-2bc1-4bf0-8ff1-d02826c2249d",
      "name": "Supabase Vector Store",
      "credentials": {
        "supabaseApi": {
          "id": "OeYUddl4OaIohMCC",
          "name": "MynotebookLM Supabase"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        580,
        320
      ],
      "id": "e7eae8b9-3647-4e2b-be7e-6c3f2fc80c7b",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "hNalDChhNUDtYG7T",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n\t\"output\": [\n  {\n    \"text\": \"Formula 1 (also known as Formula One) is a premier motorsport championship organized by the FIA...\",\n    \"citations\": [\n      {\n        \"chunk_index\": 0,\n        \"chunk_source_id\": \"701bd18c-2531-48e5-8d09-df22e7cc3d21\",\n        \"chunk_lines_from\": 25,\n        \"chunk_lines_to\": 50\n      }\n    ]\n  },\n  {\n    \"text\": \"Formula 1 (also known as Formula One) is a premier motorsport championship organized by the FIA...\",\n    \"citations\": [\n      {\n        \"chunk_index\": 0,\n        \"chunk_source_id\": \"701bd18c-2531-48e5-8d09-df22e7cc3d21\",\n        \"chunk_lines_from\": 25,\n        \"chunk_lines_to\": 50\n      }\n    ]\n  }\n]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        800,
        20
      ],
      "id": "5d0dbc4f-50d1-4287-92c8-c917674350c8",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "tableId": "n8n_chat_histories",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "session_id",
              "fieldValue": "={{ $('Webhook').item.json.body.session_id }}"
            },
            {
              "fieldId": "message",
              "fieldValue": "{\"type\": \"ai\", \"content\": \"{\\\"output\\\":[{\\\"text\\\":\\\"Sorry, I encountered an error creating a response. Please check the error log.\\\",\\\"citations\\\":[]}]}\", \"tool_calls\": [], \"additional_kwargs\": {}, \"response_metadata\": {}, \"invalid_tool_calls\": []}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        680,
        -180
      ],
      "id": "5326f44f-8702-4bfe-8771-c316fcdb3cfd",
      "name": "Supabase",
      "alwaysOutputData": true,
      "credentials": {
        "supabaseApi": {
          "id": "OeYUddl4OaIohMCC",
          "name": "MynotebookLM Supabase"
        }
      }
    },
    {
      "parameters": {
        "content": "## To Do \n- Configure the Supabase nodes to reference your Project",
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        600,
        -500
      ],
      "id": "14b2e53e-f99f-4368-8172-99cd8afa1afb",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-04-17-thinking",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        0,
        200
      ],
      "id": "4a2dc897-d02f-46b8-8c92-71a4af3d486e",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "PzC8XiX0nzmyH9AA",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-3-7-sonnet-20250219",
          "mode": "list",
          "cachedResultName": "Claude Sonnet 3.7"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        -160,
        200
      ],
      "id": "fe8982cd-2cc9-407c-a3fd-91bdd3248045",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "LIuOf61utMGpqNxm",
          "name": "Anthropic account LL"
        }
      }
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "o3",
          "mode": "list",
          "cachedResultName": "o3"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        160,
        200
      ],
      "id": "1797c365-bc21-4de1-9bf1-7a17ff3c0838",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "xh2u9lLOh2CjFrk7",
          "name": "OpenAi account 4"
        }
      }
    },
    {
      "parameters": {
        "content": "[![The AI Automators](https://www.theaiautomators.com/wp-content/uploads/2025/03/gray-logo.png)](https://www.theaiautomators.com/)\n## InsightsLM\nhttps://github.com/theaiautomators/insights-lm-public",
        "height": 220,
        "width": 280,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -60,
        -500
      ],
      "id": "12098b0d-706f-4472-a57f-086630796015",
      "name": "Sticky Note8"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [],
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "18ad3a32-f388-4eaf-9897-b335aea3d3c7",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "b5d1ea132a4e071e6288b3143f31284b91560858bdef3f0c88a49f587fc91a29"
  },
  "id": "O7IxHwlMlj7lPFD9",
  "tags": [
    {
      "createdAt": "2025-05-12T13:43:59.783Z",
      "updatedAt": "2025-05-12T13:43:59.783Z",
      "id": "d3ygIhrGjDmzgrW0",
      "name": "TheAIAutomators.com"
    }
  ]
}
</file>

<file path="src/integrations/supabase/client.ts">
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Retrieve Supabase configuration from environment variables
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Validate required environment variables
if (!SUPABASE_URL) {
  throw new Error(
    'Missing required environment variable: VITE_SUPABASE_URL\n' +
    'Please set VITE_SUPABASE_URL in your .env file.\n' +
    'Example: VITE_SUPABASE_URL=https://your-project.supabase.co'
  );
}

if (!SUPABASE_PUBLISHABLE_KEY) {
  throw new Error(
    'Missing required environment variable: VITE_SUPABASE_ANON_KEY\n' +
    'Please set VITE_SUPABASE_ANON_KEY in your .env file.\n' +
    'You can find this in your Supabase project settings under API > anon public key'
  );
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
</file>

<file path="package.json">
{
  "name": "ai4agriweather",
  "private": true,
  "version": "0.0.0",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview",
    "start": "node server.js"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.0",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-alert-dialog": "^1.1.1",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-checkbox": "^1.1.1",
    "@radix-ui/react-collapsible": "^1.1.0",
    "@radix-ui/react-context-menu": "^2.2.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.0",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-select": "^2.1.1",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-toast": "^1.2.1",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.4",
    "@supabase/supabase-js": "^2.49.8",
    "@tanstack/react-query": "^5.56.2",
    "@types/dompurify": "^3.0.5",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "dompurify": "^3.2.6",
    "embla-carousel-react": "^8.3.0",
    "express": "^4.21.2",
    "i18next": "^25.3.2",
    "i18next-browser-languagedetector": "^8.2.0",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.0",
    "react-i18next": "^15.6.0",
    "react-resizable-panels": "^2.1.3",
    "react-router-dom": "^6.26.2",
    "recharts": "^2.12.7",
    "serve": "^14.2.4",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.3",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@tailwindcss/typography": "^0.5.15",
    "@types/node": "^22.5.5",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react-swc": "^3.5.0",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "lovable-tagger": "^1.1.7",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.11",
    "typescript": "^5.5.3",
    "typescript-eslint": "^8.0.1",
    "vite": "^5.4.1"
  }
}
</file>

<file path="Dockerfile">
FROM node:20-alpine

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci

# Copy all files
COPY . .

# Build the application
RUN npm run build

# Start using npm start (which runs node server.js)
CMD ["npm", "start"]
</file>

<file path="README.md">
<div align="center">

![AI4AgriWeather Logo](https://img.shields.io/badge/🌾-AI4AgriWeather-green?style=for-the-badge&labelColor=2d5016&color=4ade80)

# AI4AgriWeather
### Smart Agricultural Weather Intelligence Platform

[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![Built with React](https://img.shields.io/badge/Built%20with-React-61DAFB?logo=react)](https://reactjs.org/)
[![Powered by Supabase](https://img.shields.io/badge/Powered%20by-Supabase-3ECF8E?logo=supabase)](https://supabase.com/)
[![Deploy with Railway](https://img.shields.io/badge/Deploy%20with-Railway-0B0D0E?logo=railway)](https://railway.app/)
[![Multilingual](https://img.shields.io/badge/Languages-한국어%20%7C%20English%20%7C%20Kiswahili-blue)](https://github.com/LeGenAI/AI4AgriWeather)

*Empowering African farmers with AI-driven weather intelligence and agricultural insights*

[🚀 Live Demo](https://ai4agriweather-production.up.railway.app) • [📖 Documentation](#-features) • [🌍 Languages](#-internationalization) • [🤝 Contributing](#-contributing)

</div>

---

## 🌟 About The Project

AI4AgriWeather is a comprehensive smart agricultural platform specifically designed for African farmers, particularly those in Tanzania and East Africa. Built with modern web technologies and powered by AI, it provides multilingual weather intelligence, crop management tools, and agricultural insights to help farmers make informed decisions and improve their productivity.

### 🎯 Mission
To bridge the digital divide in agriculture by providing accessible, localized, and intelligent farming solutions that understand the unique challenges of African agriculture.

## ✨ Features

### 🌤️ Weather Intelligence
- **24-hour, 7-day & Seasonal Forecasts** - Comprehensive weather predictions
- **Agricultural Weather Metrics** - Evapotranspiration, soil moisture, UV index, growing degree days
- **Weather-based Recommendations** - AI-powered farming advice based on current conditions
- **Real-time Alerts** - Critical weather warnings and agricultural notifications

### 🌱 Crop Management
- **22 Local Crop Varieties** - From Mahindi (corn) to Mhogo (cassava)
- **Planting Calendar** - Seasonal planting recommendations for Masika and Vuli seasons
- **Health Monitoring** - Crop status tracking and disease prevention
- **Harvest Planning** - Optimal timing and yield predictions
- **Market Price Tracking** - Current market rates and price trends

### 🤖 AI-Powered Agricultural Assistant
- **Multilingual Chat Support** - Get farming advice in your preferred language
- **Knowledge Base** - Comprehensive agricultural documentation and best practices
- **Smart Recommendations** - Personalized farming strategies based on local conditions
- **Pest & Disease Identification** - AI-powered diagnosis and treatment recommendations

### 🌍 Regional Specialization
- **29 Tanzanian Regions** - Localized data for all major farming areas
- **Traditional Farming Wisdom** - Integration of local agricultural knowledge
- **Climate-specific Guidance** - Tailored advice for tropical and semi-arid conditions
- **Local Market Integration** - Regional price data and market access information

## 🌐 Internationalization

AI4AgriWeather supports three languages to ensure accessibility across diverse user bases:

| Language | Region | Flag | Coverage |
|----------|--------|------|----------|
| **English** | International | 🇺🇸 | Complete UI and content |
| **한국어 (Korean)** | South Korea | 🇰🇷 | Complete UI and content |
| **Kiswahili** | Tanzania & East Africa | 🇹🇿 | Complete UI and content |

*Language detection is automatic based on browser settings, with manual selection available in the header.*

## 🛠️ Technology Stack

### Frontend
- **⚛️ React 18.3** - Modern UI framework with hooks
- **📘 TypeScript** - Type-safe development
- **🎨 Tailwind CSS** - Utility-first styling with agricultural theme
- **🧭 React Router v6** - Client-side navigation
- **🔄 React Query** - Server state management
- **📱 Responsive Design** - Mobile-first approach

### Backend & Infrastructure
- **🐘 Supabase** - PostgreSQL database with real-time features
- **🔐 Row Level Security** - User-based data protection
- **🔍 Vector Search** - AI-powered document search (pgvector)
- **🚀 Express.js** - Static file serving
- **🐳 Docker** - Containerized deployment

### AI & Integration
- **🤖 LLM Integration** - ChatGPT-based agricultural assistance
- **🔄 n8n Workflows** - Backend automation and data processing
- **🌐 i18next** - Internationalization framework
- **📊 Recharts** - Data visualization for weather and crop analytics

## 🚀 Quick Start

### Prerequisites
- Node.js 18+ 
- npm or yarn
- Supabase account
- (Optional) n8n instance for advanced features

### 1. Clone the Repository
```bash
git clone https://github.com/LeGenAI/AI4AgriWeather.git
cd AI4AgriWeather
```

### 2. Install Dependencies
```bash
npm install
```

### 3. Environment Configuration
Create a `.env.local` file:
```env
VITE_SUPABASE_URL=your_supabase_url
VITE_SUPABASE_ANON_KEY=your_supabase_anon_key
```

### 4. Start Development Server
```bash
npm run dev
```

### 5. Build for Production
```bash
npm run build
npm start
```

## 🏗️ Database Schema

The platform uses Supabase with the following key tables:

```sql
-- User profiles with agricultural preferences
profiles (id, email, full_name, farm_location, preferred_crops)

-- Agricultural knowledge base
notebooks (id, title, content, category, user_id)

-- Weather and crop data sources
sources (id, title, file_url, notebook_id)

-- AI chat conversations
n8n_chat_histories (id, message, response, user_id)

-- Vector embeddings for intelligent search
documents (id, content, embedding, metadata)
```

## 🌍 Agricultural Categories

The platform organizes information into specialized agricultural categories:

- 🌦️ **Weather & Climate** - Forecasting and climate adaptation
- 🌱 **Crop Management** - Planting, growing, and harvesting
- 🐛 **Pest & Disease** - Identification and treatment
- 💰 **Market Information** - Prices and trading opportunities
- 🏞️ **Soil Management** - Soil health and fertilization
- 💧 **Irrigation** - Water management and conservation
- 👨‍🌾 **General Farming** - Best practices and techniques

## 📱 Screenshots

<div align="center">

### Dashboard Overview
![Dashboard](https://via.placeholder.com/800x400/4ade80/ffffff?text=Agricultural+Dashboard)

### Weather Center
![Weather Center](https://via.placeholder.com/800x400/3b82f6/ffffff?text=Weather+Intelligence)

### Crop Management
![Crop Management](https://via.placeholder.com/800x400/f59e0b/ffffff?text=Crop+Management)

### AI Assistant
![AI Chat](https://via.placeholder.com/800x400/8b5cf6/ffffff?text=AI+Agricultural+Assistant)

</div>

## 🚀 Deployment

### Railway (Recommended)
```bash
# Deploy to Railway
railway login
railway link
railway up
```

[![Deploy on Railway](https://railway.app/button.svg)](https://railway.app/template/qxxaLy)

### Docker
```bash
# Build and run with Docker
docker build -t ai4agriweather .
docker run -p 8080:8080 ai4agriweather
```

### Vercel
```bash
# Deploy to Vercel
vercel --prod
```

## 📊 Performance

- ⚡ **Lighthouse Score**: 95+ (Performance, Accessibility, Best Practices)
- 📱 **Mobile Optimized**: Responsive design for all device sizes
- 🌐 **Global CDN**: Fast loading times worldwide
- 🔍 **SEO Optimized**: Meta tags and structured data

## 🤝 Contributing

We welcome contributions from the agricultural and tech communities! Here's how you can help:

### Development Setup
1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Install dependencies (`npm install`)
4. Start the development server (`npm run dev`)
5. Make your changes and test thoroughly
6. Commit your changes (`git commit -m 'Add amazing feature'`)
7. Push to the branch (`git push origin feature/amazing-feature`)
8. Open a Pull Request

### Contribution Guidelines
- 🌱 **Agricultural Focus**: Ensure features benefit farmers and agricultural productivity
- 🌍 **Accessibility**: Consider users with limited internet and device capabilities
- 🗣️ **Multilingual**: Update translations for new features
- 📚 **Documentation**: Include clear documentation for new features
- 🧪 **Testing**: Add tests for new functionality

### Types of Contributions We Welcome
- 🌾 New crop varieties and regional data
- 🌡️ Additional weather metrics and calculations
- 🗣️ Translation improvements and new languages
- 🐛 Bug fixes and performance improvements
- 📖 Documentation and user guides
- 🎨 UI/UX enhancements

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 🙏 Acknowledgments

- **🌍 Open Source Community** - For the amazing tools and libraries
- **👨‍🌾 African Farmers** - For inspiring this project and providing valuable insights
- **🏫 Educational Institutions** - For supporting agricultural technology research
- **🤝 Contributors** - For their valuable contributions to the project

## 📞 Support & Community

- 🐛 **Bug Reports**: [Open an Issue](https://github.com/LeGenAI/AI4AgriWeather/issues)
- 💡 **Feature Requests**: [Start a Discussion](https://github.com/LeGenAI/AI4AgriWeather/discussions)
- 📧 **Contact**: [agriculture@example.com](mailto:agriculture@example.com)
- 🌐 **Website**: [Coming Soon]()

---

<div align="center">

**Made with 💚 for African Agriculture**

*Empowering farmers through technology, one harvest at a time.*

[![Star this repository](https://img.shields.io/github/stars/LeGenAI/AI4AgriWeather?style=social)](https://github.com/LeGenAI/AI4AgriWeather/stargazers)

</div>
</file>

</files>
