// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

/**
 * IMPORTANT: This file exports a placeholder Supabase client for build-time compatibility.
 * 
 * The actual Supabase client is loaded dynamically at runtime using the configuration service.
 * 
 * To use Supabase in your components:
 * 
 * 1. For React components, use the hook:
 *    ```tsx
 *    import { useSupabase } from '@/services/config/supabaseLoader';
 *    
 *    function MyComponent() {
 *      const { client, isLoading, error } = useSupabase();
 *      
 *      if (isLoading) return <div>Loading...</div>;
 *      if (error) return <div>Error: {error.message}</div>;
 *      
 *      // Use client here
 *    }
 *    ```
 * 
 * 2. For non-React code (after initialization):
 *    ```ts
 *    import { getSupabase } from '@/services/config/supabaseLoader';
 *    
 *    const supabase = getSupabase();
 *    ```
 * 
 * The real client configuration is loaded from /api/config or environment variables as a fallback.
 */

// Placeholder client for build-time compatibility
// This ensures that imports don't fail during build
export const supabase = createClient<Database>(
  'https://placeholder.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBsYWNlaG9sZGVyIiwicm9sZSI6ImFub24iLCJpYXQiOjE2NDMzNzA0ODQsImV4cCI6MTk1ODk0NjQ4NH0.placeholder'
);

// Re-export the dynamic loader for convenience
export { useSupabase, getSupabase } from '@/services/config/supabaseLoader';